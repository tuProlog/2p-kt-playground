(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],3:[function(require,module,exports){
const kotlin = require("kotlin").kotlin;
const ktmath = require("kt-math").org.gciatto.kt.math;
const core = require("@tuprolog/2p-core").it.unibo.tuprolog.core;
const unify = require("@tuprolog/2p-unify").it.unibo.tuprolog.unify;
const solve = require("@tuprolog/2p-solve").it.unibo.tuprolog.solve;
const classic = require("@tuprolog/2p-solve-classic").it.unibo.tuprolog.solve;
const theory = require("@tuprolog/2p-theory").it.unibo.tuprolog.theory;
core.parsing = require("@tuprolog/2p-parser-core").it.unibo.tuprolog.core.parsing;
theory.parsing = require("@tuprolog/2p-parser-theory").it.unibo.tuprolog.theory.parsing;

const tuprolog = {
    "core": core,
    "unify": unify,
    "theory": theory,
    "solve": solve,
    "classic": classic
};

window.kotlin = kotlin;
window.ktmath = ktmath;
window.tuprolog = tuprolog;
window["2p"] = tuprolog;
window.println = function (x) {
    console.log(x.toString());
};
},{"@tuprolog/2p-core":4,"@tuprolog/2p-parser-core":5,"@tuprolog/2p-parser-theory":14,"@tuprolog/2p-solve":16,"@tuprolog/2p-solve-classic":15,"@tuprolog/2p-theory":17,"@tuprolog/2p-unify":18,"kotlin":66,"kt-math":67}],4:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', 'kt-math'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('kt-math'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-core'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-core'.");
    }if (typeof this['kt-math'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-core'. Its dependency 'kt-math' was not found. Please, check whether 'kt-math' is loaded prior to '@tuprolog/2p-core'.");
    }root['@tuprolog/2p-core'] = factory(typeof this['@tuprolog/2p-core'] === 'undefined' ? {} : this['@tuprolog/2p-core'], kotlin, this['kt-math']);
  }
}(this, function (_, Kotlin, $module$kt_math) {
  'use strict';
  var equals = Kotlin.equals;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var emptySequence = Kotlin.kotlin.sequences.emptySequence_287e2$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var ensureNotNull = Kotlin.ensureNotNull;
  var throwCCE = Kotlin.throwCCE;
  var any = Kotlin.kotlin.collections.any_us0mfu$;
  var asIterable = Kotlin.kotlin.collections.asIterable_us0mfu$;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Map = Kotlin.kotlin.collections.Map;
  var UnsupportedOperationException_init = Kotlin.kotlin.UnsupportedOperationException_init_pdl1vj$;
  var asIterable_0 = Kotlin.kotlin.sequences.asIterable_veqyi0$;
  var any_0 = Kotlin.kotlin.collections.any_7wnvza$;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  var BigDecimal = $module$kt_math.org.gciatto.kt.math.BigDecimal;
  var BigInteger = $module$kt_math.org.gciatto.kt.math.BigInteger;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_m7z4lg$;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var sliceArray = Kotlin.kotlin.collections.sliceArray_8r7b3e$;
  var last_0 = Kotlin.kotlin.collections.last_us0mfu$;
  var slice = Kotlin.kotlin.collections.slice_6bjbi1$;
  var asSequence = Kotlin.kotlin.collections.asSequence_7wnvza$;
  var get_lastIndex_0 = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  var toList_0 = Kotlin.kotlin.collections.toList_us0mfu$;
  var toList_1 = Kotlin.kotlin.sequences.toList_veqyi0$;
  var toString = Kotlin.toString;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var Comparable = Kotlin.kotlin.Comparable;
  var Unit = Kotlin.kotlin.Unit;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var toMap = Kotlin.kotlin.collections.toMap_jbpz7q$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var single = Kotlin.kotlin.collections.single_2p1efm$;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var first = Kotlin.kotlin.collections.first_2p1efm$;
  var listOfNotNull = Kotlin.kotlin.collections.listOfNotNull_issdgt$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var plus_0 = Kotlin.kotlin.collections.plus_iwxh38$;
  var minus = Kotlin.kotlin.collections.minus_uk696c$;
  var firstOrNull = Kotlin.kotlin.collections.firstOrNull_2p1efm$;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var sequence = Kotlin.kotlin.sequences.sequence_o0x0bg$;
  var lastOrNull = Kotlin.kotlin.sequences.lastOrNull_veqyi0$;
  var hashCode = Kotlin.hashCode;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var asSequence_0 = Kotlin.kotlin.collections.asSequence_us0mfu$;
  var plus_1 = Kotlin.kotlin.sequences.plus_9h40j2$;
  var mapOf = Kotlin.kotlin.collections.mapOf_qfcya0$;
  var toMap_0 = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var none = Kotlin.kotlin.sequences.none_veqyi0$;
  var mutableSetOf = Kotlin.kotlin.collections.mutableSetOf_i5x0yv$;
  var getValue = Kotlin.kotlin.collections.getValue_t9ocha$;
  var mapCapacity = Kotlin.kotlin.collections.mapCapacity_za3lpa$;
  var LinkedHashMap_init_0 = Kotlin.kotlin.collections.LinkedHashMap_init_bwtc7$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var single_0 = Kotlin.kotlin.collections.single_us0mfu$;
  var RuntimeException = Kotlin.kotlin.RuntimeException;
  var joinToString = Kotlin.kotlin.sequences.joinToString_853xkz$;
  var joinToString_0 = Kotlin.kotlin.collections.joinToString_fmv235$;
  var take = Kotlin.kotlin.sequences.take_wuwhe2$;
  var plus_2 = Kotlin.kotlin.sequences.plus_v0iwhp$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var NotImplementedError = Kotlin.kotlin.NotImplementedError;
  var toMap_1 = Kotlin.kotlin.collections.toMap_abgq59$;
  var contentEquals = Kotlin.arrayEquals;
  var contentHashCode = Kotlin.arrayHashCode;
  var joinToString_1 = Kotlin.kotlin.collections.joinToString_cgipc5$;
  var Collection = Kotlin.kotlin.collections.Collection;
  var setOf = Kotlin.kotlin.collections.setOf_i5x0yv$;
  var setOf_0 = Kotlin.kotlin.collections.setOf_mh5how$;
  var emptySet = Kotlin.kotlin.collections.emptySet_287e2$;
  var asSequence_1 = Kotlin.kotlin.collections.asSequence_abgq59$;
  var filter = Kotlin.kotlin.sequences.filter_euau3h$;
  var firstOrNull_0 = Kotlin.kotlin.sequences.firstOrNull_veqyi0$;
  var Pair_init = Kotlin.kotlin.Pair;
  var mutableMapOf = Kotlin.kotlin.collections.mutableMapOf_qfcya0$;
  var IllegalArgumentException = Kotlin.kotlin.IllegalArgumentException;
  var IllegalStateException = Kotlin.kotlin.IllegalStateException;
  var Set = Kotlin.kotlin.collections.Set;
  var minus_0 = Kotlin.kotlin.collections.minus_xfiyik$;
  var minus_1 = Kotlin.kotlin.collections.minus_khz7k3$;
  var toHashSet = Kotlin.kotlin.sequences.toHashSet_veqyi0$;
  var toSet = Kotlin.kotlin.sequences.toSet_veqyi0$;
  var plus_3 = Kotlin.kotlin.collections.plus_khz7k3$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  Substitution$Unifier.prototype = Object.create(Substitution.prototype);
  Substitution$Unifier.prototype.constructor = Substitution$Unifier;
  Substitution$Fail.prototype = Object.create(Substitution.prototype);
  Substitution$Fail.prototype.constructor = Substitution$Fail;
  TuPrologException.prototype = Object.create(RuntimeException.prototype);
  TuPrologException.prototype.constructor = TuPrologException;
  InvalidClauseException.prototype = Object.create(TuPrologException.prototype);
  InvalidClauseException.prototype.constructor = InvalidClauseException;
  StructImpl.prototype = Object.create(TermImpl.prototype);
  StructImpl.prototype.constructor = StructImpl;
  AtomImpl.prototype = Object.create(StructImpl.prototype);
  AtomImpl.prototype.constructor = AtomImpl;
  ClauseImpl.prototype = Object.create(StructImpl.prototype);
  ClauseImpl.prototype.constructor = ClauseImpl;
  ConsImpl.prototype = Object.create(StructImpl.prototype);
  ConsImpl.prototype.constructor = ConsImpl;
  DirectiveImpl.prototype = Object.create(ClauseImpl.prototype);
  DirectiveImpl.prototype.constructor = DirectiveImpl;
  EmptyListImpl.prototype = Object.create(AtomImpl.prototype);
  EmptyListImpl.prototype.constructor = EmptyListImpl;
  SetImpl.prototype = Object.create(StructImpl.prototype);
  SetImpl.prototype.constructor = SetImpl;
  EmptySetImpl.prototype = Object.create(SetImpl.prototype);
  EmptySetImpl.prototype.constructor = EmptySetImpl;
  RuleImpl.prototype = Object.create(ClauseImpl.prototype);
  RuleImpl.prototype.constructor = RuleImpl;
  FactImpl.prototype = Object.create(RuleImpl.prototype);
  FactImpl.prototype.constructor = FactImpl;
  IndicatorImpl.prototype = Object.create(StructImpl.prototype);
  IndicatorImpl.prototype.constructor = IndicatorImpl;
  NumericImpl.prototype = Object.create(TermImpl.prototype);
  NumericImpl.prototype.constructor = NumericImpl;
  IntegerImpl.prototype = Object.create(NumericImpl.prototype);
  IntegerImpl.prototype.constructor = IntegerImpl;
  RealImpl.prototype = Object.create(NumericImpl.prototype);
  RealImpl.prototype.constructor = RealImpl;
  SimpleTermFormatter.prototype = Object.create(AbstractTermFormatter.prototype);
  SimpleTermFormatter.prototype.constructor = SimpleTermFormatter;
  TermFormatterWithPrettyExpressions.prototype = Object.create(AbstractTermFormatter.prototype);
  TermFormatterWithPrettyExpressions.prototype.constructor = TermFormatterWithPrettyExpressions;
  TermFormatterWithPrettyVariables.prototype = Object.create(AbstractTermFormatter.prototype);
  TermFormatterWithPrettyVariables.prototype.constructor = TermFormatterWithPrettyVariables;
  TruthImpl.prototype = Object.create(AtomImpl.prototype);
  TruthImpl.prototype.constructor = TruthImpl;
  TruthImpl$True.prototype = Object.create(TruthImpl.prototype);
  TruthImpl$True.prototype.constructor = TruthImpl$True;
  TruthImpl$Fail.prototype = Object.create(TruthImpl.prototype);
  TruthImpl$Fail.prototype.constructor = TruthImpl$Fail;
  TruthImpl$False.prototype = Object.create(TruthImpl.prototype);
  TruthImpl$False.prototype.constructor = TruthImpl$False;
  TupleImpl.prototype = Object.create(StructImpl.prototype);
  TupleImpl.prototype.constructor = TupleImpl;
  VarImpl.prototype = Object.create(TermImpl.prototype);
  VarImpl.prototype.constructor = VarImpl;
  Specifier.prototype = Object.create(Enum.prototype);
  Specifier.prototype.constructor = Specifier;
  function Atom() {
    Atom$Companion_getInstance();
  }
  Object.defineProperty(Atom.prototype, 'args', {
    get: function () {
      return [];
    }
  });
  Object.defineProperty(Atom.prototype, 'arity', {
    get: function () {
      return 0;
    }
  });
  Object.defineProperty(Atom.prototype, 'isAtom', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Atom.prototype, 'isEmptySet', {
    get: function () {
      return equals(Empty$Companion_getInstance().EMPTY_SET_FUNCTOR, this.value);
    }
  });
  Object.defineProperty(Atom.prototype, 'isEmptyList', {
    get: function () {
      return equals(Empty$Companion_getInstance().EMPTY_LIST_FUNCTOR, this.value);
    }
  });
  Object.defineProperty(Atom.prototype, 'isTrue', {
    get: function () {
      return equals(Truth$Companion_getInstance().TRUE_FUNCTOR, this.value);
    }
  });
  Object.defineProperty(Atom.prototype, 'isFail', {
    get: function () {
      return equals(Truth$Companion_getInstance().FAIL_FUNCTOR, this.value);
    }
  });
  Object.defineProperty(Atom.prototype, 'value', {
    get: function () {
      return this.functor;
    }
  });
  Object.defineProperty(Atom.prototype, 'argsList', {
    get: function () {
      return emptyList();
    }
  });
  Object.defineProperty(Atom.prototype, 'variables', {
    get: function () {
      return emptySequence();
    }
  });
  Atom.prototype.freshCopy = function () {
    return this;
  };
  Atom.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function Atom$Companion() {
    Atom$Companion_instance = this;
    this.ATOM_REGEX_PATTERN = Struct$Companion_getInstance().STRUCT_FUNCTOR_REGEX_PATTERN;
  }
  Atom$Companion.prototype.escapeValue = function (string) {
    return Struct$Companion_getInstance().escapeFunctor(string);
  };
  Atom$Companion.prototype.escapeValueIfNecessary = function (string) {
    return Struct$Companion_getInstance().escapeFunctorIfNecessary(string);
  };
  Atom$Companion.prototype.of = function (value) {
    switch (value) {
      case '[]':
        return Empty$Companion_getInstance().list();
      case '{}':
        return Empty$Companion_getInstance().set();
      case 'true':
        return Truth$Companion_getInstance().TRUE;
      case 'fail':
        return Truth$Companion_getInstance().FAIL;
      case 'false':
        return Truth$Companion_getInstance().FALSE;
      default:return new AtomImpl(value);
    }
  };
  Atom$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Atom$Companion_instance = null;
  function Atom$Companion_getInstance() {
    if (Atom$Companion_instance === null) {
      new Atom$Companion();
    }return Atom$Companion_instance;
  }
  Atom.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Atom',
    interfaces: [Constant, Struct]
  };
  function Clause() {
    Clause$Companion_getInstance();
  }
  Object.defineProperty(Clause.prototype, 'functor', {
    get: function () {
      return Clause$Companion_getInstance().FUNCTOR;
    }
  });
  Object.defineProperty(Clause.prototype, 'args', {
    get: function () {
      return this.head === null ? [this.body] : [ensureNotNull(this.head), this.body];
    }
  });
  Object.defineProperty(Clause.prototype, 'arity', {
    get: function () {
      return this.head === null ? 1 : 2;
    }
  });
  Object.defineProperty(Clause.prototype, 'isClause', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Clause.prototype, 'isRule', {
    get: function () {
      return this.head !== null;
    }
  });
  Object.defineProperty(Clause.prototype, 'isFact', {
    get: function () {
      return this.head !== null && this.body.isTrue;
    }
  });
  Object.defineProperty(Clause.prototype, 'isDirective', {
    get: function () {
      return this.head === null;
    }
  });
  Clause.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Struct.prototype.freshCopy.call(this), Clause) ? tmp$ : throwCCE();
  };
  Clause.prototype.freshCopyFromScope = function (scope) {
    var tmp$;
    return Kotlin.isType(tmp$ = Struct.prototype.freshCopyFromScope.call(this, scope), Clause) ? tmp$ : throwCCE();
  };
  function Clause$Companion() {
    Clause$Companion_instance = this;
    this.FUNCTOR = ':-';
    this.notableFunctors = listOf([',', ';', '->']);
    this.bodyWellFormedVisitor = new Clause$Companion$bodyWellFormedVisitor$ObjectLiteral();
    this.defaultPreparationForExecutionVisitor_8be2vx$ = this.preparationForExecutionVisitor_gqqhpd$();
  }
  Clause$Companion.prototype.of = function (head, body) {
    if (head === void 0)
      head = null;
    if (head == null) {
      if (!any(body)) {
        var message = 'If Clause head is null, at least one body element, is required';
        throw IllegalArgumentException_init(message.toString());
      }return Directive$Companion_getInstance().ofIterable(asIterable(body));
    } else
      return Rule$Companion_getInstance().of(head, body.slice());
  };
  function Clause$Companion$preparationForExecutionVisitor$ObjectLiteral(closure$unifier) {
    this.closure$unifier = closure$unifier;
  }
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.defaultValue = function (term) {
    return term;
  };
  function Clause$Companion$preparationForExecutionVisitor$ObjectLiteral$visit$lambda(this$) {
    return function (arg) {
      return arg.accept(this$);
    };
  }
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToStruct = function (term) {
    if (Kotlin.isType(term, Clause))
      return this.visitToClause(term);
    else if (Clause$Companion_getInstance().notableFunctors.contains_11rb$(term.functor) && term.arity === 2)
      return Struct$Companion_getInstance().ofSequence(term.functor, map(term.argsSequence, Clause$Companion$preparationForExecutionVisitor$ObjectLiteral$visit$lambda(this)));
    else
      return term;
  };
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToClause = function (term) {
    return Clause$Companion_getInstance().of(term.head, [this.visitToTerm(term.body)]);
  };
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToVar = function (term) {
    var $receiver = this.closure$unifier;
    var tmp$;
    if ((Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(term))
      return this.visitToTerm(ensureNotNull(this.closure$unifier.get_11rb$(term)));
    else
      return Struct$Companion_getInstance().of('call', [term]);
  };
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermVisitor]
  };
  Clause$Companion.prototype.preparationForExecutionVisitor_gqqhpd$ = function (unifier) {
    if (unifier === void 0)
      unifier = Substitution$Companion_getInstance().empty();
    return new Clause$Companion$preparationForExecutionVisitor$ObjectLiteral(unifier);
  };
  function Clause$Companion$bodyWellFormedVisitor$ObjectLiteral() {
  }
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.defaultValue = function (term) {
    return !Kotlin.isType(term, Numeric);
  };
  function Clause$Companion$bodyWellFormedVisitor$ObjectLiteral$visit$lambda(this$) {
    return function (arg) {
      return arg.accept(this$);
    };
  }
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToStruct = function (term) {
    if (Clause$Companion_getInstance().notableFunctors.contains_11rb$(term.functor) && term.arity === 2) {
      var iterator = map(term.argsSequence, Clause$Companion$bodyWellFormedVisitor$ObjectLiteral$visit$lambda(this)).iterator();
      if (!iterator.hasNext())
        throw UnsupportedOperationException_init("Empty sequence can't be reduced.");
      var accumulator = iterator.next();
      while (iterator.hasNext()) {
        accumulator = accumulator & iterator.next();
      }
      return accumulator;
    } else
      return true;
  };
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermVisitor]
  };
  Clause$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Clause$Companion_instance = null;
  function Clause$Companion_getInstance() {
    if (Clause$Companion_instance === null) {
      new Clause$Companion();
    }return Clause$Companion_instance;
  }
  Clause.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Clause',
    interfaces: [Struct]
  };
  function prepareForExecution($receiver) {
    var tmp$;
    return Kotlin.isType(tmp$ = $receiver.accept(Clause$Companion_getInstance().defaultPreparationForExecutionVisitor_8be2vx$), Clause) ? tmp$ : throwCCE();
  }
  function prepareForExecution_0($receiver, unifier) {
    var tmp$;
    return Kotlin.isType(tmp$ = $receiver.accept(Clause$Companion_getInstance().preparationForExecutionVisitor_gqqhpd$(unifier)), Clause) ? tmp$ : throwCCE();
  }
  function Collection_0() {
  }
  Collection_0.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Collection',
    interfaces: [Struct]
  };
  function Cons() {
    Cons$Companion_getInstance();
  }
  Object.defineProperty(Cons.prototype, 'isCons', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Cons.prototype, 'isEmptyList', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Cons.prototype, 'functor', {
    get: function () {
      return Cons$Companion_getInstance().FUNCTOR;
    }
  });
  Object.defineProperty(Cons.prototype, 'args', {
    get: function () {
      return [this.head, this.tail];
    }
  });
  Object.defineProperty(Cons.prototype, 'arity', {
    get: function () {
      return 2;
    }
  });
  Cons.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = List.prototype.freshCopy.call(this), Cons) ? tmp$ : throwCCE();
  };
  Cons.prototype.freshCopyFromScope = function (scope) {
    var tmp$;
    return Kotlin.isType(tmp$ = List.prototype.freshCopyFromScope.call(this, scope), Cons) ? tmp$ : throwCCE();
  };
  function Cons$Companion() {
    Cons$Companion_instance = this;
    this.FUNCTOR = '.';
  }
  Cons$Companion.prototype.of = function (head, tail) {
    return new ConsImpl(head, tail);
  };
  Cons$Companion.prototype.singleton = function (head) {
    return this.of(head, Empty$Companion_getInstance().list());
  };
  Cons$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Cons$Companion_instance = null;
  function Cons$Companion_getInstance() {
    if (Cons$Companion_instance === null) {
      new Cons$Companion();
    }return Cons$Companion_instance;
  }
  Cons.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Cons',
    interfaces: [List]
  };
  function Constant() {
    Constant$Companion_getInstance();
  }
  Object.defineProperty(Constant.prototype, 'isConstant', {
    get: function () {
      return true;
    }
  });
  function Constant$Companion() {
    Constant$Companion_instance = this;
  }
  Constant$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Constant$Companion_instance = null;
  function Constant$Companion_getInstance() {
    if (Constant$Companion_instance === null) {
      new Constant$Companion();
    }return Constant$Companion_instance;
  }
  Constant.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Constant',
    interfaces: [Term]
  };
  function toTerm($receiver) {
    return Numeric$Companion_getInstance().ofBigInteger($receiver);
  }
  function toTerm_0($receiver) {
    return Numeric$Companion_getInstance().ofBigDecimal($receiver);
  }
  function toTerm_1($receiver) {
    return Numeric$Companion_getInstance().ofFloat($receiver);
  }
  function toTerm_2($receiver) {
    return Numeric$Companion_getInstance().ofDouble($receiver);
  }
  function toTerm_3($receiver) {
    return Numeric$Companion_getInstance().ofInteger($receiver);
  }
  function toTerm_4($receiver) {
    return Numeric$Companion_getInstance().ofLong($receiver);
  }
  function toTerm_5($receiver) {
    return Numeric$Companion_getInstance().ofShort($receiver);
  }
  function toTerm_6($receiver) {
    return Numeric$Companion_getInstance().ofByte($receiver);
  }
  function toTerm_7($receiver) {
    return Numeric$Companion_getInstance().of($receiver);
  }
  function toTerm_8($receiver) {
    if (Var$Companion_getInstance().VAR_REGEX_PATTERN.matches_6bul2c$($receiver))
      return toVar($receiver);
    else
      return toAtom($receiver);
  }
  function toAtom($receiver) {
    return Atom$Companion_getInstance().of($receiver);
  }
  function toVar($receiver) {
    return Var$Companion_getInstance().of($receiver);
  }
  function toTerm_9($receiver) {
    return List$Companion_getInstance().ofIterable($receiver);
  }
  function toTerm_10($receiver) {
    return toTerm_11(asIterable_0($receiver));
  }
  function toTerm_11($receiver) {
    return List$Companion_getInstance().ofIterable($receiver);
  }
  function toTerm_12($receiver) {
    return List$Companion_getInstance().of($receiver.slice());
  }
  function Directive() {
    Directive$Companion_getInstance();
  }
  Object.defineProperty(Directive.prototype, 'head', {
    get: function () {
      return null;
    }
  });
  Object.defineProperty(Directive.prototype, 'isRule', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Directive.prototype, 'isFact', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Directive.prototype, 'isDirective', {
    get: function () {
      return true;
    }
  });
  Directive.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Clause.prototype.freshCopy.call(this), Directive) ? tmp$ : throwCCE();
  };
  Directive.prototype.freshCopyFromScope = function (scope) {
    var tmp$;
    return Kotlin.isType(tmp$ = Clause.prototype.freshCopyFromScope.call(this, scope), Directive) ? tmp$ : throwCCE();
  };
  function Directive$Companion() {
    Directive$Companion_instance = this;
  }
  Directive$Companion.prototype.ofIterable = function (bodies) {
    if (!any_0(bodies)) {
      var message = 'Directive requires at least one body element';
      throw IllegalArgumentException_init(message.toString());
    }return new DirectiveImpl(Tuple$Companion_getInstance().wrapIfNeededTrueDefault(copyToArray(toList(bodies)).slice()));
  };
  Directive$Companion.prototype.of = function (body1, body) {
    return this.ofIterable(listOf([body1].concat(body)));
  };
  Directive$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Directive$Companion_instance = null;
  function Directive$Companion_getInstance() {
    if (Directive$Companion_instance === null) {
      new Directive$Companion();
    }return Directive$Companion_instance;
  }
  Directive.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Directive',
    interfaces: [Clause]
  };
  function Empty() {
    Empty$Companion_getInstance();
  }
  Empty.prototype.freshCopy = function () {
    return this;
  };
  Empty.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function Empty$Companion() {
    Empty$Companion_instance = this;
    this.EMPTY_LIST_FUNCTOR = '[]';
    this.EMPTY_SET_FUNCTOR = Set$Companion_getInstance().FUNCTOR;
  }
  Empty$Companion.prototype.list = function () {
    return EmptyList$Companion_getInstance().invoke();
  };
  Empty$Companion.prototype.set = function () {
    return EmptySet$Companion_getInstance().invoke();
  };
  Empty$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Empty$Companion_instance = null;
  function Empty$Companion_getInstance() {
    if (Empty$Companion_instance === null) {
      new Empty$Companion();
    }return Empty$Companion_instance;
  }
  Empty.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Empty',
    interfaces: [Atom]
  };
  function EmptyList() {
    EmptyList$Companion_getInstance();
  }
  Object.defineProperty(EmptyList.prototype, 'isCons', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(EmptyList.prototype, 'isList', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(EmptyList.prototype, 'isEmptyList', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(EmptyList.prototype, 'isWellFormed', {
    get: function () {
      return true;
    }
  });
  EmptyList.prototype.toArray = function () {
    return [];
  };
  EmptyList.prototype.toList = function () {
    return emptyList();
  };
  EmptyList.prototype.toSequence = function () {
    return emptySequence();
  };
  EmptyList.prototype.freshCopy = function () {
    return this;
  };
  EmptyList.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function EmptyList$Companion() {
    EmptyList$Companion_instance = this;
    this.FUNCTOR = Empty$Companion_getInstance().EMPTY_LIST_FUNCTOR;
    this.instance = EmptyListImpl_getInstance();
  }
  EmptyList$Companion.prototype.invoke = function () {
    return EmptyListImpl_getInstance();
  };
  EmptyList$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EmptyList$Companion_instance = null;
  function EmptyList$Companion_getInstance() {
    if (EmptyList$Companion_instance === null) {
      new EmptyList$Companion();
    }return EmptyList$Companion_instance;
  }
  EmptyList.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'EmptyList',
    interfaces: [List, Empty]
  };
  function EmptySet() {
    EmptySet$Companion_getInstance();
  }
  Object.defineProperty(EmptySet.prototype, 'isEmptySet', {
    get: function () {
      return true;
    }
  });
  EmptySet.prototype.freshCopy = function () {
    return this;
  };
  EmptySet.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function EmptySet$Companion() {
    EmptySet$Companion_instance = this;
    this.FUNCTOR = Empty$Companion_getInstance().EMPTY_SET_FUNCTOR;
    this.instance = EmptySetImpl_getInstance();
  }
  EmptySet$Companion.prototype.invoke = function () {
    return EmptySetImpl_getInstance();
  };
  EmptySet$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EmptySet$Companion_instance = null;
  function EmptySet$Companion_getInstance() {
    if (EmptySet$Companion_instance === null) {
      new EmptySet$Companion();
    }return EmptySet$Companion_instance;
  }
  EmptySet.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'EmptySet',
    interfaces: [Set_0, Empty]
  };
  function Fact() {
    Fact$Companion_getInstance();
  }
  Object.defineProperty(Fact.prototype, 'body', {
    get: function () {
      return Truth$Companion_getInstance().TRUE;
    }
  });
  Object.defineProperty(Fact.prototype, 'isFact', {
    get: function () {
      return true;
    }
  });
  Fact.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Rule.prototype.freshCopy.call(this), Fact) ? tmp$ : throwCCE();
  };
  Fact.prototype.freshCopyFromScope = function (scope) {
    var tmp$;
    return Kotlin.isType(tmp$ = Rule.prototype.freshCopyFromScope.call(this, scope), Fact) ? tmp$ : throwCCE();
  };
  function Fact$Companion() {
    Fact$Companion_instance = this;
  }
  Fact$Companion.prototype.of = function (head) {
    return new FactImpl(head);
  };
  Fact$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Fact$Companion_instance = null;
  function Fact$Companion_getInstance() {
    if (Fact$Companion_instance === null) {
      new Fact$Companion();
    }return Fact$Companion_instance;
  }
  Fact.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Fact',
    interfaces: [Rule]
  };
  function Formatter() {
  }
  Formatter.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Formatter',
    interfaces: []
  };
  function format($receiver, formatter) {
    return formatter.format($receiver);
  }
  function Indicator() {
    Indicator$Companion_getInstance();
  }
  Object.defineProperty(Indicator.prototype, 'isIndicator', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Indicator.prototype, 'functor', {
    get: function () {
      return Indicator$Companion_getInstance().FUNCTOR;
    }
  });
  Object.defineProperty(Indicator.prototype, 'args', {
    get: function () {
      return [this.nameTerm, this.arityTerm];
    }
  });
  Object.defineProperty(Indicator.prototype, 'arity', {
    get: function () {
      return 2;
    }
  });
  Object.defineProperty(Indicator.prototype, 'isWellFormed', {
    get: function () {
      return Kotlin.isType(this.nameTerm, Atom) && Kotlin.isType(this.arityTerm, Integer) && this.arityTerm.as_6ddzm9$().intValue.signum >= 0;
    }
  });
  Object.defineProperty(Indicator.prototype, 'indicatedName', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = Kotlin.isType(tmp$ = this.nameTerm, Atom) ? tmp$ : null) != null ? tmp$_0.value : null;
    }
  });
  Object.defineProperty(Indicator.prototype, 'indicatedArity', {
    get: function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      return (tmp$_2 = (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = this.arityTerm, Integer) ? tmp$ : null) != null ? tmp$_0.intValue : null) != null ? tmp$_1.toInt() : null) != null ? tmp$_2 >= 0 ? tmp$_2 : null : null;
    }
  });
  Indicator.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Struct.prototype.freshCopy.call(this), Indicator) ? tmp$ : throwCCE();
  };
  Indicator.prototype.freshCopyFromScope = function (scope) {
    if (this.isGround)
      return this;
    else
      return scope.indicatorOf(this.nameTerm.freshCopyFromScope(scope), this.arityTerm.freshCopyFromScope(scope));
  };
  function Indicator$Companion() {
    Indicator$Companion_instance = this;
    this.FUNCTOR = '/';
  }
  Indicator$Companion.prototype.of = function (name, arity) {
    return new IndicatorImpl(name, arity);
  };
  Indicator$Companion.prototype.ofString = function (name, arity) {
    return this.of(Atom$Companion_getInstance().of(name), Integer$Companion_getInstance().ofInt(arity));
  };
  Indicator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Indicator$Companion_instance = null;
  function Indicator$Companion_getInstance() {
    if (Indicator$Companion_instance === null) {
      new Indicator$Companion();
    }return Indicator$Companion_instance;
  }
  Indicator.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Indicator',
    interfaces: [Struct]
  };
  function Integer() {
    Integer$Companion_getInstance();
  }
  Object.defineProperty(Integer.prototype, 'isInt', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Integer.prototype, 'decimalValue', {
    get: function () {
      return BigDecimal.Companion.of_aa07kq$(this.value);
    }
  });
  Object.defineProperty(Integer.prototype, 'intValue', {
    get: function () {
      return this.value;
    }
  });
  Integer.prototype.freshCopy = function () {
    return this;
  };
  Integer.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function Integer$Companion() {
    Integer$Companion_instance = this;
    this.INTEGER_REGEX_PATTERN = Regex_init('^[+\\-]?(0[xXbBoO])?[0-9A-Fa-f]+$');
  }
  Integer$Companion.prototype.ofBigInteger = function (integer) {
    return new IntegerImpl(integer);
  };
  Integer$Companion.prototype.ofLong = function (integer) {
    return this.ofBigInteger(BigInteger.Companion.ofLong(integer));
  };
  Integer$Companion.prototype.ofInt = function (integer) {
    return this.ofBigInteger(BigInteger.Companion.of(integer));
  };
  Integer$Companion.prototype.ofShort = function (integer) {
    return this.ofBigInteger(BigInteger.Companion.ofLong(Kotlin.Long.fromInt(integer)));
  };
  Integer$Companion.prototype.ofByte = function (integer) {
    return this.ofBigInteger(BigInteger.Companion.ofLong(Kotlin.Long.fromInt(integer)));
  };
  Integer$Companion.prototype.parse = function (integer) {
    return this.ofBigInteger(BigInteger.Companion.parse(integer));
  };
  Integer$Companion.prototype.parseRadix = function (integer, radix) {
    return this.ofBigInteger(BigInteger.Companion.parseWithRadix(integer, radix));
  };
  Integer$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Integer$Companion_instance = null;
  function Integer$Companion_getInstance() {
    if (Integer$Companion_instance === null) {
      new Integer$Companion();
    }return Integer$Companion_instance;
  }
  Integer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Integer',
    interfaces: [Numeric]
  };
  function List() {
    List$Companion_getInstance();
  }
  Object.defineProperty(List.prototype, 'isList', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(List.prototype, 'size', {
    get: function () {
      if (Kotlin.isType(last(this.unfoldedList), EmptyList))
        return this.unfoldedList.size - 1 | 0;
      else
        return this.unfoldedList.size;
    }
  });
  List.prototype.toArray = function () {
    if (Kotlin.isType(last_0(this.unfoldedArray), EmptyList))
      return sliceArray(this.unfoldedArray, until(0, get_lastIndex(this.unfoldedArray)));
    else
      return this.unfoldedArray;
  };
  List.prototype.toList = function () {
    if (Kotlin.isType(last(this.unfoldedList), EmptyList))
      return slice(this.unfoldedList, until(0, get_lastIndex(this.unfoldedArray)));
    else
      return this.unfoldedList;
  };
  List.prototype.toSequence = function () {
    return asSequence(this.toList());
  };
  List.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Collection_0.prototype.freshCopy.call(this), List) ? tmp$ : throwCCE();
  };
  List.prototype.freshCopyFromScope = function (scope) {
    if (this.isGround)
      return this;
    else {
      var $receiver = this.unfoldedList;
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.freshCopyFromScope(scope));
      }
      var cloned = destination;
      return scope.listFrom(cloned.subList_vux9f0$(0, get_lastIndex_0(cloned)), last(cloned));
    }
  };
  function List$Companion() {
    List$Companion_instance = this;
  }
  List$Companion.prototype.empty = function () {
    return Empty$Companion_getInstance().list();
  };
  List$Companion.prototype.of = function (items) {
    return this.fromList(toList_0(items), this.empty());
  };
  List$Companion.prototype.ofIterable = function (items) {
    return this.fromList(toList(items), this.empty());
  };
  List$Companion.prototype.fromIterable = function (items, last) {
    return this.fromList(toList(items), last);
  };
  List$Companion.prototype.fromIterableNullTerminated = function (items) {
    return this.fromIterable(items, null);
  };
  List$Companion.prototype.fromSequence = function (items, last) {
    return this.fromList(toList_1(items), last);
  };
  List$Companion.prototype.fromSequenceNullTerminated = function (items) {
    return this.fromList(toList_1(items), null);
  };
  List$Companion.prototype.fromList = function (items, last) {
    var tmp$;
    if (!(!items.isEmpty() || Kotlin.isType(last, EmptyList) || last === null)) {
      var message = 'Input list for method List.from(kotlin.collection.List, Term?) cannot be empty if the last item is `' + toString(last) + '`';
      throw IllegalArgumentException_init(message.toString());
    }var finalItem = last != null ? last : this.empty();
    var accumulator = finalItem;
    if (!items.isEmpty()) {
      var iterator = items.listIterator_za3lpa$(items.size);
      while (iterator.hasPrevious()) {
        var head = iterator.previous();
        var tail = accumulator;
        accumulator = Cons$Companion_getInstance().of(head, tail);
      }
    }return Kotlin.isType(tmp$ = accumulator, List) ? tmp$ : throwCCE();
  };
  List$Companion.prototype.fromListNullTerminated = function (items) {
    return this.fromList(items, null);
  };
  List$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var List$Companion_instance = null;
  function List$Companion_getInstance() {
    if (List$Companion_instance === null) {
      new List$Companion();
    }return List$Companion_instance;
  }
  List.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'List',
    interfaces: [Collection_0]
  };
  function Numeric() {
    Numeric$Companion_getInstance();
  }
  Object.defineProperty(Numeric.prototype, 'isNumber', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Numeric.prototype, 'variables', {
    get: function () {
      return emptySequence();
    }
  });
  Numeric.prototype.freshCopy = function () {
    return this;
  };
  Numeric.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  Numeric.prototype.compareTo_11rb$ = function (other) {
    return this.decimalValue.compareTo_11rb$(other.decimalValue);
  };
  function Numeric$Companion() {
    Numeric$Companion_instance = this;
  }
  Numeric$Companion.prototype.ofBigDecimal = function (decimal) {
    return Real$Companion_getInstance().ofBigDecimal(decimal);
  };
  Numeric$Companion.prototype.ofDouble = function (decimal) {
    return Real$Companion_getInstance().ofDouble(decimal);
  };
  Numeric$Companion.prototype.ofFloat = function (decimal) {
    return Real$Companion_getInstance().ofFloat(decimal);
  };
  Numeric$Companion.prototype.ofBigInteger = function (integer) {
    return Integer$Companion_getInstance().ofBigInteger(integer);
  };
  Numeric$Companion.prototype.ofInteger = function (integer) {
    return Integer$Companion_getInstance().ofInt(integer);
  };
  Numeric$Companion.prototype.ofLong = function (integer) {
    return Integer$Companion_getInstance().ofLong(integer);
  };
  Numeric$Companion.prototype.ofShort = function (integer) {
    return Integer$Companion_getInstance().ofShort(integer);
  };
  Numeric$Companion.prototype.ofByte = function (integer) {
    return Integer$Companion_getInstance().ofByte(integer);
  };
  Numeric$Companion.prototype.of = function (value) {
    if (typeof value === 'number')
      return this.ofFloat(value);
    else
      return this.parse(value.toString());
  };
  Numeric$Companion.prototype.parse = function (number) {
    try {
      return Integer$Companion_getInstance().parse(number);
    } catch (ex) {
      if (Kotlin.isType(ex, NumberFormatException)) {
        return Real$Companion_getInstance().parse(number);
      } else
        throw ex;
    }
  };
  Numeric$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Numeric$Companion_instance = null;
  function Numeric$Companion_getInstance() {
    if (Numeric$Companion_instance === null) {
      new Numeric$Companion();
    }return Numeric$Companion_instance;
  }
  Numeric.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Numeric',
    interfaces: [Comparable, Constant]
  };
  function Real() {
    Real$Companion_getInstance();
  }
  Object.defineProperty(Real.prototype, 'isReal', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Real.prototype, 'decimalValue', {
    get: function () {
      return this.value;
    }
  });
  Object.defineProperty(Real.prototype, 'intValue', {
    get: function () {
      return this.value.toBigInteger();
    }
  });
  Real.prototype.freshCopy = function () {
    return this;
  };
  Real.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function Real$Companion() {
    Real$Companion_instance = this;
    this.REAL_REGEX_PATTERN = Regex_init('^[+\\-]?((([0-9]+)(\\.[0-9]+)([eE][+\\-]?[0-9]+)?)|(([0-9]+)([eE][+\\-]?[0-9]+))|((\\.[0-9]+)([eE][+\\-]?[0-9]+)?))$');
  }
  Real$Companion.prototype.ofBigDecimal = function (real) {
    return new RealImpl(real);
  };
  Real$Companion.prototype.ofDouble = function (real) {
    return this.ofBigDecimal(BigDecimal.Companion.of_59slkr$(real));
  };
  Real$Companion.prototype.ofFloat = function (real) {
    return this.ofBigDecimal(BigDecimal.Companion.of_jt1o38$(real));
  };
  Real$Companion.prototype.parse = function (real) {
    return this.ofBigDecimal(BigDecimal.Companion.of_etek2s$(real));
  };
  Real$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Real$Companion_instance = null;
  function Real$Companion_getInstance() {
    if (Real$Companion_instance === null) {
      new Real$Companion();
    }return Real$Companion_instance;
  }
  Real.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Real',
    interfaces: [Numeric]
  };
  function RegexUtils() {
    RegexUtils_instance = this;
    this.INT = '([0-9]+)';
    this.DEC = '(\\.[0-9]+)';
    this.EXP = '([eE][+\\-]?[0-9]+)';
  }
  RegexUtils.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'RegexUtils',
    interfaces: []
  };
  var RegexUtils_instance = null;
  function RegexUtils_getInstance() {
    if (RegexUtils_instance === null) {
      new RegexUtils();
    }return RegexUtils_instance;
  }
  function Rule() {
    Rule$Companion_getInstance();
  }
  Object.defineProperty(Rule.prototype, 'isRule', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Rule.prototype, 'isFact', {
    get: function () {
      return this.body.isTrue;
    }
  });
  Object.defineProperty(Rule.prototype, 'isDirective', {
    get: function () {
      return false;
    }
  });
  Rule.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Clause.prototype.freshCopy.call(this), Rule) ? tmp$ : throwCCE();
  };
  Rule.prototype.freshCopyFromScope = function (scope) {
    var tmp$;
    return Kotlin.isType(tmp$ = Clause.prototype.freshCopyFromScope.call(this, scope), Rule) ? tmp$ : throwCCE();
  };
  function Rule$Companion() {
    Rule$Companion_instance = this;
    this.FUNCTOR = ':-';
  }
  Rule$Companion.prototype.of = function (head, body) {
    if (body.length === 0 || (body.length === 1 && body[0].isTrue))
      return Fact$Companion_getInstance().of(head);
    else
      return new RuleImpl(head, Tuple$Companion_getInstance().wrapIfNeededTrueDefault(body.slice()));
  };
  Rule$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Rule$Companion_instance = null;
  function Rule$Companion_getInstance() {
    if (Rule$Companion_instance === null) {
      new Rule$Companion();
    }return Rule$Companion_instance;
  }
  Rule.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Rule',
    interfaces: [Clause]
  };
  function Scope() {
    Scope$Companion_getInstance();
  }
  Scope.prototype.listFrom = function (terms, last, callback$default) {
    if (last === void 0)
      last = null;
    return callback$default ? callback$default(terms, last) : this.listFrom$default(terms, last);
  };
  Object.defineProperty(Scope.prototype, '_', {
    get: function () {
      return this.anonymous();
    }
  });
  function Scope$Companion() {
    Scope$Companion_instance = this;
  }
  Scope$Companion.prototype.empty = function () {
    return new ScopeImpl(LinkedHashMap_init());
  };
  function Scope$Companion$of$lambda($receiver) {
    return Unit;
  }
  Scope$Companion.prototype.of = function (vars) {
    return this.ofWithFunction(vars.slice(), Scope$Companion$of$lambda);
  };
  Scope$Companion.prototype.ofWithFunction = function (vars, lambda) {
    var destination = ArrayList_init(vars.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== vars.length; ++tmp$) {
      var item = vars[tmp$];
      destination.add_11rb$(Var$Companion_getInstance().of(item));
    }
    return this.ofVarWithFunction(copyToArray(destination).slice(), lambda);
  };
  function Scope$Companion$of$lambda_0($receiver) {
    return Unit;
  }
  Scope$Companion.prototype.ofVar = function (vars) {
    return this.ofVarWithFunction(vars.slice(), Scope$Companion$of$lambda_0);
  };
  Scope$Companion.prototype.ofVarWithFunction = function (vars, lambda) {
    var destination = ArrayList_init(vars.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== vars.length; ++tmp$) {
      var item = vars[tmp$];
      destination.add_11rb$(to(item.name, item));
    }
    return (new ScopeImpl(toMap(destination, LinkedHashMap_init()))).where(lambda);
  };
  Scope$Companion.prototype.emptyWithFunction = function (lambda) {
    return this.empty().with(lambda);
  };
  Scope$Companion.prototype.ofAndThen = function (vars, lambda) {
    return this.of(vars.slice()).with(lambda);
  };
  Scope$Companion.prototype.ofVarAndThen = function (vars, lambda) {
    return this.ofVar(vars.slice()).with(lambda);
  };
  Scope$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Scope$Companion_instance = null;
  function Scope$Companion_getInstance() {
    if (Scope$Companion_instance === null) {
      new Scope$Companion();
    }return Scope$Companion_instance;
  }
  Scope.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Scope',
    interfaces: []
  };
  function Set_0() {
    Set$Companion_getInstance();
  }
  Object.defineProperty(Set_0.prototype, 'isSet', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Set_0.prototype, 'isEmptySet', {
    get: function () {
      return this.arity === 0;
    }
  });
  Object.defineProperty(Set_0.prototype, 'functor', {
    get: function () {
      return Set$Companion_getInstance().FUNCTOR;
    }
  });
  Set_0.prototype.toArray = function () {
    return this.unfoldedArray;
  };
  Set_0.prototype.toList = function () {
    return this.unfoldedList;
  };
  Set_0.prototype.toSequence = function () {
    return this.unfoldedSequence;
  };
  Set_0.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Collection_0.prototype.freshCopy.call(this), Set_0) ? tmp$ : throwCCE();
  };
  function Set$freshCopy$lambda(closure$scope) {
    return function (it) {
      return it.freshCopyFromScope(closure$scope);
    };
  }
  Set_0.prototype.freshCopyFromScope = function (scope) {
    if (this.isGround)
      return this;
    else
      return scope.setOfIterable(asIterable_0(map(this.argsSequence, Set$freshCopy$lambda(scope))));
  };
  function Set$Companion() {
    Set$Companion_instance = this;
    this.FUNCTOR = '{}';
  }
  Set$Companion.prototype.empty = function () {
    return EmptySet$Companion_getInstance().invoke();
  };
  Set$Companion.prototype.of = function (terms) {
    return this.ofList(toList_0(terms));
  };
  Set$Companion.prototype.ofList = function (terms) {
    if (terms.isEmpty())
      return this.empty();
    else if (terms.size === 1)
      return new SetImpl(single(terms));
    else
      return new SetImpl(Tuple$Companion_getInstance().ofList(terms));
  };
  Set$Companion.prototype.ofIterable = function (terms) {
    return this.ofList(toList(terms));
  };
  Set$Companion.prototype.ofSequence = function (terms) {
    return this.ofList(toList_1(terms));
  };
  Set$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Set$Companion_instance = null;
  function Set$Companion_getInstance() {
    if (Set$Companion_instance === null) {
      new Set$Companion();
    }return Set$Companion_instance;
  }
  Set_0.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Set',
    interfaces: [Collection_0]
  };
  function Struct() {
    Struct$Companion_getInstance();
  }
  Object.defineProperty(Struct.prototype, 'isStruct', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Struct.prototype, 'isClause', {
    get: function () {
      return equals(Clause$Companion_getInstance().FUNCTOR, this.functor);
    }
  });
  Object.defineProperty(Struct.prototype, 'isRule', {
    get: function () {
      return this.isClause && this.arity === 2;
    }
  });
  Object.defineProperty(Struct.prototype, 'isDirective', {
    get: function () {
      return this.isClause && this.arity === 1;
    }
  });
  Object.defineProperty(Struct.prototype, 'isFact', {
    get: function () {
      return this.isRule && this.args[1].isTrue;
    }
  });
  Object.defineProperty(Struct.prototype, 'isTuple', {
    get: function () {
      return equals(this.functor, Tuple$Companion_getInstance().FUNCTOR) && this.arity === 2;
    }
  });
  Object.defineProperty(Struct.prototype, 'isAtom', {
    get: function () {
      return this.arity === 0;
    }
  });
  Object.defineProperty(Struct.prototype, 'isList', {
    get: function () {
      return this.isCons || this.isEmptyList;
    }
  });
  Object.defineProperty(Struct.prototype, 'isCons', {
    get: function () {
      return equals(Cons$Companion_getInstance().FUNCTOR, this.functor) && this.arity === 2;
    }
  });
  Object.defineProperty(Struct.prototype, 'isSet', {
    get: function () {
      return equals(Set$Companion_getInstance().FUNCTOR, this.functor) && this.arity === 1 || this.isEmptySet;
    }
  });
  Object.defineProperty(Struct.prototype, 'isEmptySet', {
    get: function () {
      return equals(Empty$Companion_getInstance().EMPTY_SET_FUNCTOR, this.functor) && this.arity === 0;
    }
  });
  Object.defineProperty(Struct.prototype, 'isEmptyList', {
    get: function () {
      return equals(Empty$Companion_getInstance().EMPTY_LIST_FUNCTOR, this.functor) && this.arity === 0;
    }
  });
  Object.defineProperty(Struct.prototype, 'isTrue', {
    get: function () {
      return this.isAtom && equals(Truth$Companion_getInstance().TRUE_FUNCTOR, this.functor);
    }
  });
  Object.defineProperty(Struct.prototype, 'isFail', {
    get: function () {
      return this.isAtom && equals(Truth$Companion_getInstance().FAIL_FUNCTOR, this.functor);
    }
  });
  Object.defineProperty(Struct.prototype, 'isIndicator', {
    get: function () {
      return equals(Indicator$Companion_getInstance().FUNCTOR, this.functor) && this.arity === 2;
    }
  });
  function Struct$get_Struct$variables$lambda(it) {
    return it.variables;
  }
  Object.defineProperty(Struct.prototype, 'variables', {
    get: function () {
      return flatMap(this.argsSequence, Struct$get_Struct$variables$lambda);
    }
  });
  Struct.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Term.prototype.freshCopy.call(this), Struct) ? tmp$ : throwCCE();
  };
  function Struct$freshCopy$lambda(closure$scope) {
    return function (it) {
      return it.freshCopyFromScope(closure$scope);
    };
  }
  Struct.prototype.freshCopyFromScope = function (scope) {
    if (this.isGround)
      return this;
    else
      return scope.structOfSequence(this.functor, map(this.argsSequence, Struct$freshCopy$lambda(scope)));
  };
  Object.defineProperty(Struct.prototype, 'arity', {
    get: function () {
      return this.args.length;
    }
  });
  Object.defineProperty(Struct.prototype, 'indicator', {
    get: function () {
      return Indicator$Companion_getInstance().ofString(this.functor, this.arity);
    }
  });
  Object.defineProperty(Struct.prototype, 'argsList', {
    get: function () {
      return listOf(this.args.slice());
    }
  });
  Object.defineProperty(Struct.prototype, 'argsSequence', {
    get: function () {
      return sequenceOf(this.args.slice());
    }
  });
  Struct.prototype.getArgAt = function (index) {
    return this.args[index];
  };
  Struct.prototype.get = function (index) {
    return this.getArgAt(index);
  };
  function Struct$Companion() {
    Struct$Companion_instance = this;
    this.STRUCT_FUNCTOR_REGEX_PATTERN = Regex_init('^[a-z][A-Za-z_0-9]*$');
  }
  Struct$Companion.prototype.escapeFunctor = function (string) {
    return "'" + string + "'";
  };
  Struct$Companion.prototype.escapeFunctorIfNecessary = function (string) {
    if (this.STRUCT_FUNCTOR_REGEX_PATTERN.matches_6bul2c$(string)) {
      return string;
    } else {
      return this.escapeFunctor(string);
    }
  };
  Struct$Companion.prototype.ofList = function (functor, args) {
    var tmp$;
    if (args.size === 2 && equals(Cons$Companion_getInstance().FUNCTOR, functor))
      return Cons$Companion_getInstance().of(first(args), last(args));
    else if (args.size === 2 && equals(Clause$Companion_getInstance().FUNCTOR, functor) && Kotlin.isType(first(args), Struct)) {
      return Rule$Companion_getInstance().of(Kotlin.isType(tmp$ = first(args), Struct) ? tmp$ : throwCCE(), [last(args)]);
    } else if (args.size === 2 && equals(Tuple$Companion_getInstance().FUNCTOR, functor))
      return Tuple$Companion_getInstance().ofList(args);
    else if (args.size === 2 && equals(Indicator$Companion_getInstance().FUNCTOR, functor))
      return Indicator$Companion_getInstance().of(first(args), last(args));
    else if (args.size === 1 && equals(Set$Companion_getInstance().FUNCTOR, functor))
      return Set$Companion_getInstance().ofList(args);
    else if (args.size === 1 && equals(Clause$Companion_getInstance().FUNCTOR, functor))
      return Directive$Companion_getInstance().of(first(args), []);
    else if (args.isEmpty())
      return Atom$Companion_getInstance().of(functor);
    else {
      return new StructImpl(functor, copyToArray(args));
    }
  };
  Struct$Companion.prototype.of = function (functor, args) {
    return this.ofList(functor, toList_0(args));
  };
  Struct$Companion.prototype.ofSequence = function (functor, args) {
    return this.ofList(functor, toList_1(args));
  };
  Struct$Companion.prototype.foldListNullTerminated = function (operator, terms) {
    return this.foldList(operator, terms, null);
  };
  Struct$Companion.prototype.foldList = function (operator, terms, terminal) {
    if (equals(operator, Cons$Companion_getInstance().FUNCTOR) && equals(terminal, EmptyList$Companion_getInstance().invoke()))
      return List$Companion_getInstance().ofIterable(terms);
    else if (equals(operator, Cons$Companion_getInstance().FUNCTOR) && terminal === null)
      return List$Companion_getInstance().fromList(slice(terms, until(0, get_lastIndex_0(terms))), last(terms));
    else if (equals(operator, Tuple$Companion_getInstance().FUNCTOR))
      return Tuple$Companion_getInstance().ofList(plus(terms, listOfNotNull(terminal)));
    else if (terminal === null) {
      if (!(terms.size >= 2)) {
        var message = 'Struct requires at least two terms to fold';
        throw IllegalArgumentException_init(message.toString());
      }var $receiver = slice(terms, until(0, get_lastIndex_0(terms) - 1 | 0));
      var accumulator = this.of(operator, [terms.get_za3lpa$(get_lastIndex_0(terms) - 1 | 0), terms.get_za3lpa$(get_lastIndex_0(terms))]);
      if (!$receiver.isEmpty()) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          accumulator = this.of(operator, [iterator.previous(), accumulator]);
        }
      }return accumulator;
    } else {
      if (!!terms.isEmpty()) {
        var message_0 = 'Struct requires at least two terms to fold';
        throw IllegalArgumentException_init(message_0.toString());
      }var $receiver_0 = slice(terms, until(0, get_lastIndex_0(terms)));
      var accumulator_0 = this.of(operator, [terms.get_za3lpa$(get_lastIndex_0(terms)), terminal]);
      if (!$receiver_0.isEmpty()) {
        var iterator_0 = $receiver_0.listIterator_za3lpa$($receiver_0.size);
        while (iterator_0.hasPrevious()) {
          accumulator_0 = this.of(operator, [iterator_0.previous(), accumulator_0]);
        }
      }return accumulator_0;
    }
  };
  Struct$Companion.prototype.foldSequence = function (operator, terms, terminal) {
    return this.foldList(operator, toList_1(terms), terminal);
  };
  Struct$Companion.prototype.foldSequenceNullTerminated = function (operator, terms) {
    return this.foldSequence(operator, terms, null);
  };
  Struct$Companion.prototype.foldIterable = function (operator, terms, terminal) {
    return this.foldList(operator, toList(terms), terminal);
  };
  Struct$Companion.prototype.foldIterableNullTerminated = function (operator, terms) {
    return this.foldIterable(operator, terms, null);
  };
  Struct$Companion.prototype.fold = function (operator, terms, terminal) {
    return this.foldList(operator, toList_0(terms), terminal);
  };
  Struct$Companion.prototype.foldNullTerminated = function (operator, terms) {
    return this.foldListNullTerminated(operator, listOf(terms.slice()));
  };
  Struct$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Struct$Companion_instance = null;
  function Struct$Companion_getInstance() {
    if (Struct$Companion_instance === null) {
      new Struct$Companion();
    }return Struct$Companion_instance;
  }
  Struct.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Struct',
    interfaces: [Term]
  };
  function Substitution() {
    Substitution$Companion_getInstance();
    this.isSuccess_70d0p1$_0 = false;
    this.isFailed_8jwhwv$_0 = false;
  }
  Object.defineProperty(Substitution.prototype, 'isSuccess', {
    get: function () {
      return this.isSuccess_70d0p1$_0;
    }
  });
  Object.defineProperty(Substitution.prototype, 'isFailed', {
    get: function () {
      return this.isFailed_8jwhwv$_0;
    }
  });
  Substitution.prototype.applyTo = function (term) {
    return term.getSubstituted(this, []);
  };
  Substitution.prototype.plus = function (other) {
    if (Substitution$Companion_getInstance().anyFailed_0([this, other]) || Substitution$Companion_getInstance().anyContradiction_0(this, other))
      return Substitution$Fail_getInstance();
    else {
      var tmp$ = Substitution$Companion_getInstance();
      var destination = LinkedHashMap_init_0(mapCapacity(this.size));
      var tmp$_0;
      tmp$_0 = this.entries.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var tmp$_1 = destination.put_xwzc9p$;
        var tmp$_2 = element.key;
        var value = element.value;
        tmp$_1.call(destination, tmp$_2, value.applySubstitution(other));
      }
      return tmp$.asUnifier(plus_0(destination, other));
    }
  };
  Substitution.prototype.minusIterable = function (keys) {
    var tmp$;
    if (Kotlin.isType(this, Substitution$Fail))
      return Substitution$Fail_getInstance();
    else
      return Substitution$Companion_getInstance().asUnifier(minus(Kotlin.isType(tmp$ = this, Map) ? tmp$ : throwCCE(), keys));
  };
  Substitution.prototype.minus = function (other) {
    return this.minusIterable(other.keys);
  };
  Substitution.prototype.filterEntry = function (predicate) {
    var tmp$;
    if (Kotlin.isType(this, Substitution$Fail))
      return Substitution$Fail_getInstance();
    else {
      var tmp$_0 = Substitution$Companion_getInstance();
      var $receiver = Kotlin.isType(tmp$ = this, Map) ? tmp$ : throwCCE();
      var destination = LinkedHashMap_init();
      var tmp$_1;
      tmp$_1 = $receiver.entries.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        if (predicate(element)) {
          destination.put_xwzc9p$(element.key, element.value);
        }}
      return tmp$_0.asUnifier(destination);
    }
  };
  function Substitution$filter$lambda(closure$variables) {
    return function (k, f) {
      return closure$variables.contains_11rb$(k);
    };
  }
  Substitution.prototype.filterCollection = function (variables) {
    return this.filter(Substitution$filter$lambda(variables));
  };
  function Substitution$filter$lambda_0(closure$predicate) {
    return function (f) {
      var key = f.key;
      var value = f.value;
      return closure$predicate(key, value);
    };
  }
  Substitution.prototype.filter = function (predicate) {
    return this.filterEntry(Substitution$filter$lambda_0(predicate));
  };
  function Substitution$Unifier(mappings) {
    Substitution.call(this);
    this.$delegate_j0g7ac$_0 = Substitution$Companion_getInstance().withoutIdentityMappings_0(Substitution$Companion_getInstance().trimVariableChains_0(mappings));
    this.isSuccess_d0l8fn$_0 = true;
    this.delegatedMappings_i6iytk$_0 = lazy(Substitution$Unifier$delegatedMappings$lambda(mappings));
  }
  Substitution$Unifier.prototype.reverseLookUp_0 = function (variable) {
    var $receiver = this.entries;
    var destination = ArrayList_init_0();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if ((tmp$_0 = element.value) != null ? tmp$_0.equals(variable) : null)
        destination.add_11rb$(element);
    }
    var destination_0 = ArrayList_init(collectionSizeOrDefault(destination, 10));
    var tmp$_1;
    tmp$_1 = destination.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      destination_0.add_11rb$(item.key);
    }
    return firstOrNull(destination_0);
  };
  function Coroutine$Substitution$Unifier$getOriginal$lambda(closure$variable_0, this$Unifier_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$variable = closure$variable_0;
    this.local$this$Unifier = this$Unifier_0;
    this.local$current = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Substitution$Unifier$getOriginal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Substitution$Unifier$getOriginal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Substitution$Unifier$getOriginal$lambda.prototype.constructor = Coroutine$Substitution$Unifier$getOriginal$lambda;
  Coroutine$Substitution$Unifier$getOriginal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$current = this.local$this$Unifier.reverseLookUp_0(this.local$closure$variable);
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$current == null) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$current, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$current = this.local$this$Unifier.reverseLookUp_0(this.local$current);
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Substitution$Unifier$getOriginal$lambda(closure$variable_0, this$Unifier_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Substitution$Unifier$getOriginal$lambda(closure$variable_0, this$Unifier_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Substitution$Unifier.prototype.getOriginal = function (variable) {
    return lastOrNull(sequence(Substitution$Unifier$getOriginal$lambda(variable, this)));
  };
  Object.defineProperty(Substitution$Unifier.prototype, 'isSuccess', {
    get: function () {
      return this.isSuccess_d0l8fn$_0;
    }
  });
  Substitution$Unifier.prototype.minusIterable = function (keys) {
    var tmp$;
    return Kotlin.isType(tmp$ = Substitution.prototype.minusIterable.call(this, keys), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Unifier.prototype.minus = function (other) {
    var tmp$;
    return Kotlin.isType(tmp$ = Substitution.prototype.minus.call(this, other), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Unifier.prototype.filterEntry = function (predicate) {
    var tmp$;
    return Kotlin.isType(tmp$ = Substitution.prototype.filterEntry.call(this, predicate), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Unifier.prototype.filter = function (predicate) {
    var tmp$;
    return Kotlin.isType(tmp$ = Substitution.prototype.filter.call(this, predicate), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Unifier.prototype.filterCollection = function (variables) {
    var tmp$;
    return Kotlin.isType(tmp$ = Substitution.prototype.filterCollection.call(this, variables), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Object.defineProperty(Substitution$Unifier.prototype, 'delegatedMappings_0', {
    get: function () {
      return this.delegatedMappings_i6iytk$_0.value;
    }
  });
  Substitution$Unifier.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, Substitution$Unifier) ? tmp$_0 : throwCCE();
    if (!equals(this.delegatedMappings_0, other.delegatedMappings_0))
      return false;
    if (this.isSuccess !== other.isSuccess)
      return false;
    return true;
  };
  Substitution$Unifier.prototype.hashCode = function () {
    var result = hashCode(this.delegatedMappings_0);
    result = (31 * result | 0) + hashCode(this.isSuccess) | 0;
    return result;
  };
  Substitution$Unifier.prototype.toString = function () {
    return this.delegatedMappings_0.toString();
  };
  Object.defineProperty(Substitution$Unifier.prototype, 'entries', {
    get: function () {
      return this.$delegate_j0g7ac$_0.entries;
    }
  });
  Object.defineProperty(Substitution$Unifier.prototype, 'keys', {
    get: function () {
      return this.$delegate_j0g7ac$_0.keys;
    }
  });
  Object.defineProperty(Substitution$Unifier.prototype, 'size', {
    get: function () {
      return this.$delegate_j0g7ac$_0.size;
    }
  });
  Object.defineProperty(Substitution$Unifier.prototype, 'values', {
    get: function () {
      return this.$delegate_j0g7ac$_0.values;
    }
  });
  Substitution$Unifier.prototype.containsKey_11rb$ = function (key) {
    return this.$delegate_j0g7ac$_0.containsKey_11rb$(key);
  };
  Substitution$Unifier.prototype.containsValue_11rc$ = function (value) {
    return this.$delegate_j0g7ac$_0.containsValue_11rc$(value);
  };
  Substitution$Unifier.prototype.get_11rb$ = function (key) {
    return this.$delegate_j0g7ac$_0.get_11rb$(key);
  };
  Substitution$Unifier.prototype.isEmpty = function () {
    return this.$delegate_j0g7ac$_0.isEmpty();
  };
  function Substitution$Unifier$delegatedMappings$lambda(closure$mappings) {
    return function () {
      return Substitution$Companion_getInstance().withoutIdentityMappings_0(Substitution$Companion_getInstance().trimVariableChains_0(closure$mappings));
    };
  }
  Substitution$Unifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Unifier',
    interfaces: [Substitution, Map]
  };
  function Substitution$Fail() {
    Substitution$Fail_instance = this;
    Substitution.call(this);
    this.$delegate_ppiggu$_0 = emptyMap();
    this.isFailed_lzh553$_0 = true;
  }
  Object.defineProperty(Substitution$Fail.prototype, 'isFailed', {
    get: function () {
      return this.isFailed_lzh553$_0;
    }
  });
  Substitution$Fail.prototype.getOriginal = function (variable) {
    return null;
  };
  Substitution$Fail.prototype.minus = function (other) {
    return Substitution$Fail_getInstance();
  };
  Substitution$Fail.prototype.minusIterable = function (keys) {
    return Substitution$Fail_getInstance();
  };
  Substitution$Fail.prototype.filterEntry = function (predicate) {
    return Substitution$Fail_getInstance();
  };
  Substitution$Fail.prototype.filter = function (predicate) {
    return Substitution$Fail_getInstance();
  };
  Substitution$Fail.prototype.filterCollection = function (variables) {
    return Substitution$Fail_getInstance();
  };
  Substitution$Fail.prototype.toString = function () {
    return '{Failed Substitution}';
  };
  Object.defineProperty(Substitution$Fail.prototype, 'entries', {
    get: function () {
      return this.$delegate_ppiggu$_0.entries;
    }
  });
  Object.defineProperty(Substitution$Fail.prototype, 'keys', {
    get: function () {
      return this.$delegate_ppiggu$_0.keys;
    }
  });
  Object.defineProperty(Substitution$Fail.prototype, 'size', {
    get: function () {
      return this.$delegate_ppiggu$_0.size;
    }
  });
  Object.defineProperty(Substitution$Fail.prototype, 'values', {
    get: function () {
      return this.$delegate_ppiggu$_0.values;
    }
  });
  Substitution$Fail.prototype.containsKey_11rb$ = function (key) {
    return this.$delegate_ppiggu$_0.containsKey_11rb$(key);
  };
  Substitution$Fail.prototype.containsValue_11rc$ = function (value) {
    return this.$delegate_ppiggu$_0.containsValue_11rc$(value);
  };
  Substitution$Fail.prototype.get_11rb$ = function (key) {
    return this.$delegate_ppiggu$_0.get_11rb$(key);
  };
  Substitution$Fail.prototype.isEmpty = function () {
    return this.$delegate_ppiggu$_0.isEmpty();
  };
  Substitution$Fail.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Fail',
    interfaces: [Substitution, Map]
  };
  var Substitution$Fail_instance = null;
  function Substitution$Fail_getInstance() {
    if (Substitution$Fail_instance === null) {
      new Substitution$Fail();
    }return Substitution$Fail_instance;
  }
  function Substitution$Companion() {
    Substitution$Companion_instance = this;
  }
  Substitution$Companion.prototype.failed = function () {
    return Substitution$Fail_getInstance();
  };
  Substitution$Companion.prototype.empty = function () {
    return this.asUnifier(emptyMap());
  };
  Substitution$Companion.prototype.asUnifier = function ($receiver) {
    return new Substitution$Unifier($receiver);
  };
  Substitution$Companion.prototype.ofVar = function (variable, withTerm) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.ofPair(to(variable, withTerm), []), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Companion.prototype.of = function (variable, withTerm) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.ofPair(to(Var$Companion_getInstance().of(variable), withTerm), []), Substitution$Unifier) ? tmp$ : throwCCE();
  };
  Substitution$Companion.prototype.ofPair = function (substitutionPair, substitutionPairs) {
    if (this.anyContradiction_1(plus_1(asSequence_0(substitutionPairs), substitutionPair)))
      return Substitution$Fail_getInstance();
    else
      return this.asUnifier(mapOf([substitutionPair].concat(substitutionPairs)));
  };
  Substitution$Companion.prototype.ofIterable = function (substitutionPairs) {
    if (this.anyContradiction_1(asSequence(substitutionPairs)))
      return Substitution$Fail_getInstance();
    else
      return this.asUnifier(toMap_0(substitutionPairs));
  };
  Substitution$Companion.prototype.ofSubstitution = function (substitution, substitutions) {
    var tmp$;
    var accumulator = substitution;
    for (tmp$ = 0; tmp$ !== substitutions.length; ++tmp$) {
      var element = substitutions[tmp$];
      accumulator = accumulator.plus(element);
    }
    return accumulator;
  };
  Substitution$Companion.prototype.anyFailed_0 = function (substitution) {
    var any$result;
    any$break: do {
      var tmp$;
      for (tmp$ = 0; tmp$ !== substitution.length; ++tmp$) {
        var element = substitution[tmp$];
        if (element.isFailed) {
          any$result = true;
          break any$break;
        }}
      any$result = false;
    }
     while (false);
    return any$result;
  };
  Substitution$Companion.prototype.anyContradiction_0 = function (substitution, other) {
    var tmp$;
    if (substitution.size < other.size)
      tmp$ = to(substitution, other);
    else
      tmp$ = to(other, substitution);
    var f = tmp$;
    var smaller = f.component1()
    , bigger = f.component2();
    var any$result;
    any$break: do {
      var tmp$_0;
      if (smaller.isEmpty()) {
        any$result = false;
        break any$break;
      }tmp$_0 = smaller.entries.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var var_0 = element.key;
        var substitution_0 = element.value;
        var tmp$_1, tmp$_2;
        if ((tmp$_2 = (tmp$_1 = bigger.get_11rb$(var_0)) != null ? !(tmp$_1 != null ? tmp$_1.equals(substitution_0) : null) : null) != null ? tmp$_2 : false) {
          any$result = true;
          break any$break;
        }}
      any$result = false;
    }
     while (false);
    return any$result;
  };
  Substitution$Companion.prototype.anyContradiction_1 = function (substitutionPairs) {
    if (none(substitutionPairs))
      return false;
    else {
      var $receiver = substitutionPairs.iterator();
      $receiver.next();
      if (!$receiver.hasNext())
        return false;
      else {
        var alreadySeenSubstitutions = LinkedHashMap_init();
        var block$result;
        block$break: do {
          var tmp$;
          tmp$ = substitutionPairs.iterator();
          while (tmp$.hasNext()) {
            var element = tmp$.next();
            var var_0 = element.component1()
            , substitution = element.component2();
            var alreadyPresent = alreadySeenSubstitutions.get_11rb$(var_0);
            if (alreadyPresent == null) {
              alreadySeenSubstitutions.put_xwzc9p$(var_0, substitution);
            } else if (!equals(alreadyPresent, substitution)) {
              block$result = true;
              break block$break;
            }}
          block$result = false;
        }
         while (false);
        return block$result;
      }
    }
  };
  function Substitution$Companion$trimVariableChains$trimVariableChain($receiver, mappings) {
    var alreadyUsedKeys = mutableSetOf([$receiver]);
    var current = getValue(mappings, $receiver);
    while (true) {
      var tmp$ = Kotlin.isType(current, Var);
      if (tmp$) {
        var key = current;
        var tmp$_0;
        tmp$ = (Kotlin.isType(tmp$_0 = mappings, Map) ? tmp$_0 : throwCCE()).containsKey_11rb$(key);
      }if (!(tmp$ && !alreadyUsedKeys.contains_11rb$(current)))
        break;
      var element = current;
      alreadyUsedKeys.add_11rb$(element);
      current = getValue(mappings, current);
    }
    return current;
  }
  Substitution$Companion.prototype.trimVariableChains_0 = function ($receiver) {
    var tmp$;
    var trimVariableChain = Substitution$Companion$trimVariableChains$trimVariableChain;
    if ($receiver.size < 2)
      tmp$ = $receiver;
    else {
      var destination = LinkedHashMap_init_0(mapCapacity($receiver.size));
      var tmp$_0;
      tmp$_0 = $receiver.entries.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        var tmp$_1 = destination.put_xwzc9p$;
        var tmp$_2 = element.key;
        var varKey = element.key;
        var term = element.value;
        var tmp$_3;
        tmp$_1.call(destination, tmp$_2, (tmp$_3 = !Kotlin.isType(term, Var) ? term : null) != null ? tmp$_3 : trimVariableChain(varKey, $receiver));
      }
      tmp$ = destination;
    }
    return tmp$;
  };
  Substitution$Companion.prototype.withoutIdentityMappings_0 = function ($receiver) {
    var destination = LinkedHashMap_init();
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var var_0 = element.key;
      var term = element.value;
      if (!(var_0 != null ? var_0.equals(term) : null)) {
        destination.put_xwzc9p$(element.key, element.value);
      }}
    return destination;
  };
  Substitution$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Substitution$Companion_instance = null;
  function Substitution$Companion_getInstance() {
    if (Substitution$Companion_instance === null) {
      new Substitution$Companion();
    }return Substitution$Companion_instance;
  }
  Substitution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Substitution',
    interfaces: [Map]
  };
  function Term() {
    Term$Companion_getInstance();
  }
  function Term$Companion() {
    Term$Companion_instance = this;
  }
  Term$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Term$Companion_instance = null;
  function Term$Companion_getInstance() {
    if (Term$Companion_instance === null) {
      new Term$Companion();
    }return Term$Companion_instance;
  }
  Term.prototype.as_6ddzm9$ = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = this, Term) ? tmp$ : throwCCE();
  };
  Term.prototype.castTo_6ddzm9$ = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = this, Term) ? tmp$ : throwCCE();
  };
  Object.defineProperty(Term.prototype, 'isVariable', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isBound', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isGround', {
    get: function () {
      return none(this.variables);
    }
  });
  Object.defineProperty(Term.prototype, 'isStruct', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isAtom', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isConstant', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isNumber', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isInt', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isReal', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isList', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isTuple', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isSet', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isEmptySet', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isClause', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isRule', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isFact', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isDirective', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isCons', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isEmptyList', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isTrue', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isFail', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(Term.prototype, 'isIndicator', {
    get: function () {
      return false;
    }
  });
  Term.prototype.freshCopy = function () {
    return this.freshCopyFromScope(Scope$Companion_getInstance().empty());
  };
  Term.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  Term.prototype.applySubstitution = function (substitution) {
    var tmp$;
    if (substitution.isEmpty() || this.isGround)
      return this;
    else if (Kotlin.isType(this, Var))
      return (tmp$ = substitution.get_11rb$(this)) != null ? tmp$ : this;
    else if (Kotlin.isType(this, Struct) && !this.isGround) {
      var tmp$_0 = Struct$Companion_getInstance();
      var tmp$_1 = this.functor;
      var $receiver = this.argsList;
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$_2;
      tmp$_2 = $receiver.iterator();
      while (tmp$_2.hasNext()) {
        var item = tmp$_2.next();
        destination.add_11rb$(item.applySubstitution(substitution));
      }
      return tmp$_0.ofList(tmp$_1, destination);
    } else
      return this;
  };
  Term.prototype.apply = function (substitution, substitutions) {
    return this.applySubstitution(Substitution$Companion_getInstance().ofSubstitution(substitution, substitutions.slice()));
  };
  Term.prototype.getSubstituted = function (substitution, substitutions) {
    return this.apply(substitution, substitutions.slice());
  };
  Term.prototype.accept = function (visitor) {
    return visitor.visitToTerm(this);
  };
  Term.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Term',
    interfaces: []
  };
  function TermFormatter() {
    TermFormatter$Companion_getInstance();
  }
  TermFormatter.prototype.format = function (value) {
    return value.accept(this);
  };
  function TermFormatter$Companion() {
    TermFormatter$Companion_instance = this;
  }
  TermFormatter$Companion.prototype.prettyVariables = function () {
    return new TermFormatterWithPrettyVariables();
  };
  TermFormatter$Companion.prototype.prettyExpressions = function (prettyVariables, operatorSet) {
    var tmp$;
    if (prettyVariables) {
      tmp$ = TermFormatterWithPrettyExpressions_init(new TermFormatterWithPrettyVariables(), operatorSet);
    } else {
      tmp$ = TermFormatterWithPrettyExpressions_init(SimpleTermFormatter_getInstance(), operatorSet);
    }
    return tmp$;
  };
  TermFormatter$Companion.prototype.prettyExpressionsPrettyVariables = function (operatorSet) {
    return this.prettyExpressions(true, operatorSet);
  };
  TermFormatter$Companion.prototype.prettyExpressionsDefaultOperators = function (prettyVariables) {
    return this.prettyExpressions(prettyVariables, OperatorSet$Companion_getInstance().DEFAULT);
  };
  TermFormatter$Companion.prototype.prettyExpressionsPrettyVariablesDefaultOperators = function () {
    return this.prettyExpressions(true, OperatorSet$Companion_getInstance().DEFAULT);
  };
  TermFormatter$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TermFormatter$Companion_instance = null;
  function TermFormatter$Companion_getInstance() {
    if (TermFormatter$Companion_instance === null) {
      new TermFormatter$Companion();
    }return TermFormatter$Companion_instance;
  }
  TermFormatter.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TermFormatter',
    interfaces: [TermVisitor, Formatter]
  };
  function TermVisitor() {
  }
  TermVisitor.prototype.visitToTerm = function (term) {
    if (Kotlin.isType(term, Var))
      return this.visitToVar(term);
    else if (Kotlin.isType(term, Constant))
      return this.visitToConstant(term);
    else if (Kotlin.isType(term, Struct))
      return this.visitToStruct(term);
    else
      return this.visitTerm(term);
  };
  TermVisitor.prototype.visitTerm = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToVar = function (term) {
    return this.visitVar(term);
  };
  TermVisitor.prototype.visitVar = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToConstant = function (term) {
    if (Kotlin.isType(term, Numeric))
      return this.visitToNumeric(term);
    else if (Kotlin.isType(term, Atom))
      return this.visitToAtom(term);
    else
      return this.visitConstant(term);
  };
  TermVisitor.prototype.visitConstant = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToStruct = function (term) {
    if (Kotlin.isType(term, List))
      return this.visitToList(term);
    else if (Kotlin.isType(term, Set_0))
      return this.visitToSet(term);
    else if (Kotlin.isType(term, Atom))
      return this.visitToAtom(term);
    else if (Kotlin.isType(term, Tuple))
      return this.visitToTuple(term);
    else if (Kotlin.isType(term, Clause))
      return this.visitToClause(term);
    else if (Kotlin.isType(term, Indicator))
      return this.visitToIndicator(term);
    else
      return this.visitStruct(term);
  };
  TermVisitor.prototype.visitStruct = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToAtom = function (term) {
    if (Kotlin.isType(term, Empty))
      return this.visitToEmpty(term);
    else if (Kotlin.isType(term, Truth))
      return this.visitToTruth(term);
    else
      return this.visitAtom(term);
  };
  TermVisitor.prototype.visitAtom = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToTruth = function (term) {
    return this.visitTruth(term);
  };
  TermVisitor.prototype.visitTruth = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToNumeric = function (term) {
    if (Kotlin.isType(term, Real))
      return this.visitToReal(term);
    else if (Kotlin.isType(term, Integer))
      return this.visitToInteger(term);
    else
      return this.visitNumeric(term);
  };
  TermVisitor.prototype.visitNumeric = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToInteger = function (term) {
    return this.visitInteger(term);
  };
  TermVisitor.prototype.visitInteger = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToReal = function (term) {
    return this.visitReal(term);
  };
  TermVisitor.prototype.visitReal = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToSet = function (term) {
    if (Kotlin.isType(term, EmptySet))
      return this.visitToEmptySet(term);
    else
      return this.visitSet(term);
  };
  TermVisitor.prototype.visitSet = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToEmpty = function (term) {
    if (Kotlin.isType(term, EmptySet))
      return this.visitToEmptySet(term);
    else if (Kotlin.isType(term, EmptyList))
      return this.visitToEmptyList(term);
    else
      return this.visitEmpty(term);
  };
  TermVisitor.prototype.visitEmpty = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToEmptySet = function (term) {
    return this.visitEmptySet(term);
  };
  TermVisitor.prototype.visitEmptySet = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToList = function (term) {
    if (Kotlin.isType(term, Cons))
      return this.visitToCons(term);
    else if (Kotlin.isType(term, EmptyList))
      return this.visitToEmptyList(term);
    else
      return this.visitList(term);
  };
  TermVisitor.prototype.visitList = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToCons = function (term) {
    return this.visitCons(term);
  };
  TermVisitor.prototype.visitCons = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToEmptyList = function (term) {
    return this.visitEmptyList(term);
  };
  TermVisitor.prototype.visitEmptyList = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToTuple = function (term) {
    return this.visitTuple(term);
  };
  TermVisitor.prototype.visitTuple = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToIndicator = function (term) {
    return this.visitIndicator(term);
  };
  TermVisitor.prototype.visitIndicator = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToClause = function (term) {
    if (Kotlin.isType(term, Directive))
      return this.visitToDirective(term);
    else if (Kotlin.isType(term, Rule))
      return this.visitToRule(term);
    else
      return this.visitClause(term);
  };
  TermVisitor.prototype.visitClause = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToRule = function (term) {
    if (Kotlin.isType(term, Fact))
      return this.visitFact(term);
    else
      return this.visitRule(term);
  };
  TermVisitor.prototype.visitRule = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToFact = function (term) {
    return this.visitFact(term);
  };
  TermVisitor.prototype.visitFact = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.prototype.visitToDirective = function (term) {
    return this.visitDirective(term);
  };
  TermVisitor.prototype.visitDirective = function (term) {
    return this.defaultValue(term);
  };
  TermVisitor.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TermVisitor',
    interfaces: []
  };
  function ToTermConvertible() {
  }
  ToTermConvertible.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ToTermConvertible',
    interfaces: []
  };
  function Truth() {
    Truth$Companion_getInstance();
  }
  Object.defineProperty(Truth.prototype, 'isFail', {
    get: function () {
      return !this.isTrue;
    }
  });
  Truth.prototype.freshCopy = function () {
    return this;
  };
  Truth.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  function Truth$Companion() {
    Truth$Companion_instance = this;
    this.TRUE_FUNCTOR = 'true';
    this.FALSE_FUNCTOR = 'false';
    this.FAIL_FUNCTOR = 'fail';
    this.TRUE = TruthImpl$True_getInstance();
    this.FAIL = TruthImpl$Fail_getInstance();
    this.FALSE = TruthImpl$False_getInstance();
  }
  Truth$Companion.prototype.of_6taknv$ = function (truth) {
    return truth ? this.TRUE : this.FALSE;
  };
  Truth$Companion.prototype.of_61zpoe$ = function (string) {
    switch (string) {
      case 'true':
        return this.TRUE;
      case 'false':
        return this.FALSE;
      case 'fail':
        return this.FAIL;
      default:throw IllegalArgumentException_init('Cannot parse ' + string + ' as a Truth value');
    }
  };
  Truth$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Truth$Companion_instance = null;
  function Truth$Companion_getInstance() {
    if (Truth$Companion_instance === null) {
      new Truth$Companion();
    }return Truth$Companion_instance;
  }
  Truth.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Truth',
    interfaces: [Atom]
  };
  function Tuple() {
    Tuple$Companion_getInstance();
  }
  Object.defineProperty(Tuple.prototype, 'isTuple', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Tuple.prototype, 'functor', {
    get: function () {
      return Tuple$Companion_getInstance().FUNCTOR;
    }
  });
  Object.defineProperty(Tuple.prototype, 'args', {
    get: function () {
      return [this.left, this.right];
    }
  });
  Object.defineProperty(Tuple.prototype, 'arity', {
    get: function () {
      return 2;
    }
  });
  Tuple.prototype.toArray = function () {
    return this.unfoldedArray;
  };
  Tuple.prototype.toList = function () {
    return this.unfoldedList;
  };
  Tuple.prototype.toSequence = function () {
    return this.unfoldedSequence;
  };
  Tuple.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Collection_0.prototype.freshCopy.call(this), Tuple) ? tmp$ : throwCCE();
  };
  function Tuple$freshCopy$lambda(closure$scope) {
    return function (it) {
      return it.freshCopyFromScope(closure$scope);
    };
  }
  Tuple.prototype.freshCopyFromScope = function (scope) {
    if (this.isGround)
      return this;
    else
      return scope.tupleOfIterable(asIterable_0(map(this.argsSequence, Tuple$freshCopy$lambda(scope))));
  };
  function Tuple$Companion() {
    Tuple$Companion_instance = this;
    this.FUNCTOR = ',';
  }
  function Tuple$Companion$wrapIfNeeded$lambda() {
    return Truth$Companion_getInstance().TRUE;
  }
  Tuple$Companion.prototype.wrapIfNeededTrueDefault = function (terms) {
    return this.wrapIfNeeded(terms.slice(), Tuple$Companion$wrapIfNeeded$lambda);
  };
  Tuple$Companion.prototype.wrapIfNeeded = function (terms, default_0) {
    if (terms.length === 0)
      return default_0();
    else if (terms.length === 1)
      return single_0(terms);
    else
      return this.ofList(toList_0(terms));
  };
  Tuple$Companion.prototype.of = function (left, right) {
    return new TupleImpl(left, right);
  };
  Tuple$Companion.prototype.ofMany = function (first, second, others) {
    return this.ofList(listOf([first, second].concat(others)));
  };
  Tuple$Companion.prototype.ofIterable = function (terms) {
    return this.ofList(toList(terms));
  };
  Tuple$Companion.prototype.ofList = function (terms) {
    var tmp$;
    if (!(terms.size >= 2)) {
      var message = 'Tuples require at least 2 terms';
      throw IllegalArgumentException_init(message.toString());
    }var $receiver = slice(terms, until(0, get_lastIndex_0(terms)));
    var accumulator = last(terms);
    if (!$receiver.isEmpty()) {
      var iterator = $receiver.listIterator_za3lpa$($receiver.size);
      while (iterator.hasPrevious()) {
        accumulator = new TupleImpl(iterator.previous(), accumulator);
      }
    }return Kotlin.isType(tmp$ = accumulator, Tuple) ? tmp$ : throwCCE();
  };
  Tuple$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Tuple$Companion_instance = null;
  function Tuple$Companion_getInstance() {
    if (Tuple$Companion_instance === null) {
      new Tuple$Companion();
    }return Tuple$Companion_instance;
  }
  Tuple.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Tuple',
    interfaces: [Collection_0]
  };
  function Var() {
    Var$Companion_getInstance();
  }
  Object.defineProperty(Var.prototype, 'isVariable', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(Var.prototype, 'variables', {
    get: function () {
      return sequenceOf([this]);
    }
  });
  Object.defineProperty(Var.prototype, 'isAnonymous', {
    get: function () {
      return equals(Var$Companion_getInstance().ANONYMOUS_VAR_NAME, this.name);
    }
  });
  Var.prototype.freshCopy = function () {
    var tmp$;
    return Kotlin.isType(tmp$ = Term.prototype.freshCopy.call(this), Var) ? tmp$ : throwCCE();
  };
  Var.prototype.freshCopyFromScope = function (scope) {
    if (this.isAnonymous)
      return scope.anonymous();
    else
      return scope.varOf(this.name);
  };
  function Var$Companion() {
    Var$Companion_instance = this;
    this.ANONYMOUS_VAR_NAME = '_';
    this.VAR_REGEX_PATTERN = Regex_init('[A-Z_][A-Za-z_0-9]*');
  }
  Var$Companion.prototype.of = function (name) {
    return new VarImpl(name);
  };
  Var$Companion.prototype.anonymous = function () {
    return new VarImpl(this.ANONYMOUS_VAR_NAME);
  };
  Var$Companion.prototype.escapeName = function (string) {
    return '`' + string + '`';
  };
  Var$Companion.prototype.escapeNameIfNecessary = function (string) {
    if (this.VAR_REGEX_PATTERN.matches_6bul2c$(string)) {
      return string;
    } else {
      return this.escapeName(string);
    }
  };
  Var$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Var$Companion_instance = null;
  function Var$Companion_getInstance() {
    if (Var$Companion_instance === null) {
      new Var$Companion();
    }return Var$Companion_instance;
  }
  Var.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Var',
    interfaces: [Term]
  };
  function InvalidClauseException(term, cause) {
    if (cause === void 0)
      cause = null;
    TuPrologException_init(cause, this);
    this.term = term;
    this.name = 'InvalidClauseException';
  }
  Object.defineProperty(InvalidClauseException.prototype, 'message', {
    get: function () {
      return 'Term `' + this.term + '` is not a valid clause';
    }
  });
  InvalidClauseException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InvalidClauseException',
    interfaces: [TuPrologException]
  };
  function TuPrologException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    RuntimeException.call(this, message, cause);
    this.message_ria6za$_0 = message;
    this.cause_f1g3nw$_0 = cause;
    this.name = 'TuPrologException';
  }
  Object.defineProperty(TuPrologException.prototype, 'message', {
    get: function () {
      return this.message_ria6za$_0;
    }
  });
  Object.defineProperty(TuPrologException.prototype, 'cause', {
    get: function () {
      return this.cause_f1g3nw$_0;
    }
  });
  TuPrologException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TuPrologException',
    interfaces: [RuntimeException]
  };
  function TuPrologException_init(cause, $this) {
    $this = $this || Object.create(TuPrologException.prototype);
    TuPrologException.call($this, cause != null ? cause.toString() : null, cause);
    return $this;
  }
  function AbstractTermFormatter() {
  }
  AbstractTermFormatter.prototype.defaultValue = function (term) {
    return term.toString();
  };
  function AbstractTermFormatter$visitStruct$lambda(this$AbstractTermFormatter) {
    return function (it) {
      return it.accept(this$AbstractTermFormatter.childFormatter());
    };
  }
  AbstractTermFormatter.prototype.visitStruct = function (term) {
    return (term.isFunctorWellFormed ? term.functor : Struct$Companion_getInstance().escapeFunctor(term.functor)) + joinToString(map(term.argsSequence, AbstractTermFormatter$visitStruct$lambda(this)), ', ', '(', ')');
  };
  function AbstractTermFormatter$visitSet$lambda(this$AbstractTermFormatter) {
    return function (it) {
      return it.accept(this$AbstractTermFormatter.itemFormatter());
    };
  }
  AbstractTermFormatter.prototype.visitSet = function (term) {
    return joinToString_0(term.unfoldedList, ', ', '{', '}', void 0, void 0, AbstractTermFormatter$visitSet$lambda(this));
  };
  AbstractTermFormatter.prototype.itemFormatter = function () {
    return this;
  };
  AbstractTermFormatter.prototype.childFormatter = function () {
    return this;
  };
  function AbstractTermFormatter$visitCons$lambda$lambda(this$AbstractTermFormatter) {
    return function (it) {
      return it.accept(this$AbstractTermFormatter.itemFormatter());
    };
  }
  AbstractTermFormatter.prototype.visitCons = function (term) {
    var $receiver = term.unfoldedList;
    var tmp$;
    var last_0 = last($receiver);
    var base = joinToString_0($receiver.subList_vux9f0$(0, get_lastIndex_0($receiver)), ', ', '[', '', void 0, void 0, AbstractTermFormatter$visitCons$lambda$lambda(this));
    if (Kotlin.isType(last_0, EmptyList)) {
      tmp$ = ']';
    } else {
      tmp$ = ' | ' + last_0.accept(this.itemFormatter()) + ']';
    }
    var lastString = tmp$;
    return base + lastString;
  };
  AbstractTermFormatter.prototype.visitTuple = function (term) {
    return this.visitStruct(term);
  };
  AbstractTermFormatter.prototype.visitRule = function (term) {
    return this.visitStruct(term);
  };
  AbstractTermFormatter.prototype.visitFact = function (term) {
    return this.visitStruct(term);
  };
  AbstractTermFormatter.prototype.visitDirective = function (term) {
    return this.visitStruct(term);
  };
  AbstractTermFormatter.prototype.visitIndicator = function (term) {
    return this.visitStruct(term);
  };
  AbstractTermFormatter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractTermFormatter',
    interfaces: [TermFormatter]
  };
  function AtomImpl(functor) {
    StructImpl.call(this, functor, []);
    this.functor_zguagz$_0 = functor;
    this.args_rr1u2n$_0 = Kotlin.callGetter(this, StructImpl.prototype, 'args');
    this.argsList_18xb0j$_0 = lazy(AtomImpl$argsList$lambda);
    this.isGround_vmhsi5$_0 = lazy(AtomImpl$isGround$lambda(this));
    this.variables_jfg7fj$_0 = lazy(AtomImpl$variables$lambda(this));
  }
  Object.defineProperty(AtomImpl.prototype, 'functor', {
    get: function () {
      return this.functor_zguagz$_0;
    }
  });
  Object.defineProperty(AtomImpl.prototype, 'args', {
    get: function () {
      return this.args_rr1u2n$_0;
    }
  });
  Object.defineProperty(AtomImpl.prototype, 'argsList', {
    get: function () {
      return this.argsList_18xb0j$_0.value;
    }
  });
  Object.defineProperty(AtomImpl.prototype, 'isGround', {
    get: function () {
      return this.isGround_vmhsi5$_0.value;
    }
  });
  Object.defineProperty(AtomImpl.prototype, 'variables', {
    get: function () {
      return this.variables_jfg7fj$_0.value;
    }
  });
  function AtomImpl$argsList$lambda() {
    return emptyList();
  }
  function AtomImpl$isGround$lambda(this$AtomImpl) {
    return function () {
      return Kotlin.callGetter(this$AtomImpl, Atom.prototype, 'isGround');
    };
  }
  function AtomImpl$variables$lambda(this$AtomImpl) {
    return function () {
      return Kotlin.callGetter(this$AtomImpl, Atom.prototype, 'variables');
    };
  }
  AtomImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AtomImpl',
    interfaces: [Atom, StructImpl]
  };
  function ClauseImpl(head, body) {
    StructImpl.call(this, Clause$Companion_getInstance().FUNCTOR, head === null ? [body] : [head, body]);
    this.head_c83akc$_0 = head;
    this.body_c4yzlm$_0 = body;
    this.isWellFormed_enlplt$_0 = lazy(ClauseImpl$isWellFormed$lambda(this));
    this.functor_h95imz$_0 = Kotlin.callGetter(this, Clause.prototype, 'functor');
    this.args_c4h61r$_0 = lazy(ClauseImpl$args$lambda(this));
  }
  Object.defineProperty(ClauseImpl.prototype, 'head', {
    get: function () {
      return this.head_c83akc$_0;
    }
  });
  Object.defineProperty(ClauseImpl.prototype, 'body', {
    get: function () {
      return this.body_c4yzlm$_0;
    }
  });
  Object.defineProperty(ClauseImpl.prototype, 'isWellFormed', {
    get: function () {
      return this.isWellFormed_enlplt$_0.value;
    }
  });
  Object.defineProperty(ClauseImpl.prototype, 'functor', {
    get: function () {
      return this.functor_h95imz$_0;
    }
  });
  Object.defineProperty(ClauseImpl.prototype, 'args', {
    get: function () {
      return this.args_c4h61r$_0.value;
    }
  });
  ClauseImpl.prototype.toString = function () {
    if (this.head == null)
      return this.functor + ' ' + this.body;
    else
      return toString(this.head) + ' ' + this.functor + ' ' + this.body;
  };
  function ClauseImpl$isWellFormed$lambda(this$ClauseImpl) {
    return function () {
      return this$ClauseImpl.body.accept(Clause$Companion_getInstance().bodyWellFormedVisitor);
    };
  }
  function ClauseImpl$args$lambda(this$ClauseImpl) {
    return function () {
      return Kotlin.callGetter(this$ClauseImpl, StructImpl.prototype, 'args');
    };
  }
  ClauseImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClauseImpl',
    interfaces: [Clause, StructImpl]
  };
  function ConsImpl(head, tail) {
    StructImpl.call(this, Cons$Companion_getInstance().FUNCTOR, [head, tail]);
    this.head_cjbt8e$_0 = head;
    this.tail_cpuyj2$_0 = tail;
    this.unfoldedSequence_20hbgc$_0 = lazy(ConsImpl$unfoldedSequence$lambda(this));
    this.unfoldedList_tj8hzb$_0 = lazy(ConsImpl$unfoldedList$lambda(this));
    this.unfoldedArray_cwpwsq$_0 = lazy(ConsImpl$unfoldedArray$lambda(this));
    this.functor_nok8rh$_0 = Cons$Companion_getInstance().FUNCTOR;
    this.args_cfpopt$_0 = lazy(ConsImpl$args$lambda(this));
    this.isWellFormed_2x5wmb$_0 = lazy(ConsImpl$isWellFormed$lambda(this));
  }
  Object.defineProperty(ConsImpl.prototype, 'head', {
    get: function () {
      return this.head_cjbt8e$_0;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'tail', {
    get: function () {
      return this.tail_cpuyj2$_0;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'unfoldedSequence', {
    get: function () {
      return this.unfoldedSequence_20hbgc$_0.value;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'unfoldedList', {
    get: function () {
      return this.unfoldedList_tj8hzb$_0.value;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'unfoldedArray', {
    get: function () {
      return this.unfoldedArray_cwpwsq$_0.value;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'functor', {
    get: function () {
      return this.functor_nok8rh$_0;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'args', {
    get: function () {
      return this.args_cfpopt$_0.value;
    }
  });
  Object.defineProperty(ConsImpl.prototype, 'isWellFormed', {
    get: function () {
      return this.isWellFormed_2x5wmb$_0.value;
    }
  });
  ConsImpl.prototype.toString = function () {
    var tmp$;
    if (this.isWellFormed) {
      tmp$ = ']';
    } else {
      tmp$ = ' | ' + last(this.unfoldedList) + ']';
    }
    var ending = tmp$;
    return joinToString(take(this.unfoldedSequence, this.unfoldedList.size - 1 | 0), ', ', '[', ending);
  };
  function ConsImpl$unfoldedSequence$lambda(this$ConsImpl) {
    return function () {
      return plus_2(sequenceOf([this$ConsImpl.head]), this$ConsImpl.tail.isList ? this$ConsImpl.tail.as_6ddzm9$().unfoldedSequence : sequenceOf([this$ConsImpl.tail]));
    };
  }
  function ConsImpl$unfoldedList$lambda(this$ConsImpl) {
    return function () {
      return toList_1(this$ConsImpl.unfoldedSequence);
    };
  }
  function ConsImpl$unfoldedArray$lambda(this$ConsImpl) {
    return function () {
      return copyToArray(this$ConsImpl.unfoldedList);
    };
  }
  function ConsImpl$args$lambda(this$ConsImpl) {
    return function () {
      return Kotlin.callGetter(this$ConsImpl, StructImpl.prototype, 'args');
    };
  }
  function ConsImpl$isWellFormed$lambda(this$ConsImpl) {
    return function () {
      return Kotlin.isType(this$ConsImpl.tail, List) && this$ConsImpl.tail.isWellFormed;
    };
  }
  ConsImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConsImpl',
    interfaces: [Cons, StructImpl]
  };
  function DirectiveImpl(body) {
    ClauseImpl.call(this, null, body);
    this.body_moow5k$_0 = body;
    this.head_mlkl6u$_0 = Kotlin.callGetter(this, Directive.prototype, 'head');
  }
  Object.defineProperty(DirectiveImpl.prototype, 'body', {
    get: function () {
      return this.body_moow5k$_0;
    }
  });
  Object.defineProperty(DirectiveImpl.prototype, 'head', {
    get: function () {
      return this.head_mlkl6u$_0;
    }
  });
  DirectiveImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DirectiveImpl',
    interfaces: [Directive, ClauseImpl]
  };
  function EmptyListImpl() {
    EmptyListImpl_instance = this;
    AtomImpl.call(this, Empty$Companion_getInstance().EMPTY_LIST_FUNCTOR);
    this.unfoldedList_g1gqtd$_0 = listOf_0(this);
    this.unfoldedSequence_2jk9a4$_0 = sequenceOf([this]);
    this.unfoldedArray_547dz6$_0 = [this];
  }
  Object.defineProperty(EmptyListImpl.prototype, 'unfoldedList', {
    get: function () {
      return this.unfoldedList_g1gqtd$_0;
    }
  });
  Object.defineProperty(EmptyListImpl.prototype, 'unfoldedSequence', {
    get: function () {
      return this.unfoldedSequence_2jk9a4$_0;
    }
  });
  Object.defineProperty(EmptyListImpl.prototype, 'unfoldedArray', {
    get: function () {
      return this.unfoldedArray_547dz6$_0;
    }
  });
  EmptyListImpl.prototype.toString = function () {
    return this.value;
  };
  EmptyListImpl.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EmptyListImpl',
    interfaces: [EmptyList, AtomImpl]
  };
  var EmptyListImpl_instance = null;
  function EmptyListImpl_getInstance() {
    if (EmptyListImpl_instance === null) {
      new EmptyListImpl();
    }return EmptyListImpl_instance;
  }
  function EmptySetImpl() {
    EmptySetImpl_instance = this;
    SetImpl.call(this, null);
    this.args_apolfp$_0 = lazy(EmptySetImpl$args$lambda(this));
    this.argsList_xvf7yf$_0 = lazy(EmptySetImpl$argsList$lambda(this));
    this.functor_52ku9$_0 = Kotlin.callGetter(this, EmptySet.prototype, 'functor');
    this.isGround_6s4cj3$_0 = lazy(EmptySetImpl$isGround$lambda(this));
    this.variables_ynt90l$_0 = lazy(EmptySetImpl$variables$lambda(this));
  }
  Object.defineProperty(EmptySetImpl.prototype, 'args', {
    get: function () {
      return this.args_apolfp$_0.value;
    }
  });
  Object.defineProperty(EmptySetImpl.prototype, 'argsList', {
    get: function () {
      return this.argsList_xvf7yf$_0.value;
    }
  });
  Object.defineProperty(EmptySetImpl.prototype, 'functor', {
    get: function () {
      return this.functor_52ku9$_0;
    }
  });
  Object.defineProperty(EmptySetImpl.prototype, 'isGround', {
    get: function () {
      return this.isGround_6s4cj3$_0.value;
    }
  });
  Object.defineProperty(EmptySetImpl.prototype, 'size', {
    get: function () {
      return 0;
    }
  });
  Object.defineProperty(EmptySetImpl.prototype, 'variables', {
    get: function () {
      return this.variables_ynt90l$_0.value;
    }
  });
  function EmptySetImpl$args$lambda(this$EmptySetImpl) {
    return function () {
      return Kotlin.callGetter(this$EmptySetImpl, EmptySet.prototype, 'args');
    };
  }
  function EmptySetImpl$argsList$lambda(this$EmptySetImpl) {
    return function () {
      return Kotlin.callGetter(this$EmptySetImpl, SetImpl.prototype, 'argsList');
    };
  }
  function EmptySetImpl$isGround$lambda(this$EmptySetImpl) {
    return function () {
      return Kotlin.callGetter(this$EmptySetImpl, EmptySet.prototype, 'isGround');
    };
  }
  function EmptySetImpl$variables$lambda(this$EmptySetImpl) {
    return function () {
      return Kotlin.callGetter(this$EmptySetImpl, EmptySet.prototype, 'variables');
    };
  }
  EmptySetImpl.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EmptySetImpl',
    interfaces: [EmptySet, SetImpl]
  };
  var EmptySetImpl_instance = null;
  function EmptySetImpl_getInstance() {
    if (EmptySetImpl_instance === null) {
      new EmptySetImpl();
    }return EmptySetImpl_instance;
  }
  function FactImpl(head) {
    RuleImpl.call(this, head, TruthImpl$True_getInstance());
    this.head_26opix$_0 = head;
    this.isWellFormed_foxvz6$_0 = true;
    this.body_23kek7$_0 = Kotlin.callGetter(this, RuleImpl.prototype, 'body');
  }
  Object.defineProperty(FactImpl.prototype, 'head', {
    get: function () {
      return this.head_26opix$_0;
    }
  });
  Object.defineProperty(FactImpl.prototype, 'isWellFormed', {
    get: function () {
      return this.isWellFormed_foxvz6$_0;
    }
  });
  Object.defineProperty(FactImpl.prototype, 'body', {
    get: function () {
      return this.body_23kek7$_0;
    }
  });
  FactImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FactImpl',
    interfaces: [Fact, RuleImpl]
  };
  function IndicatorImpl(nameTerm, arityTerm) {
    StructImpl.call(this, Indicator$Companion_getInstance().FUNCTOR, [nameTerm, arityTerm]);
    this.nameTerm_bfqzbx$_0 = nameTerm;
    this.arityTerm_byj13l$_0 = arityTerm;
    this.functor_sov59j$_0 = Indicator$Companion_getInstance().FUNCTOR;
    this.args_yheom5$_0 = lazy(IndicatorImpl$args$lambda(this));
    this.indicatedName_swo2jo$_0 = lazy(IndicatorImpl$indicatedName$lambda(this));
    this.indicatedArity_x61b20$_0 = lazy(IndicatorImpl$indicatedArity$lambda(this));
  }
  Object.defineProperty(IndicatorImpl.prototype, 'nameTerm', {
    get: function () {
      return this.nameTerm_bfqzbx$_0;
    }
  });
  Object.defineProperty(IndicatorImpl.prototype, 'arityTerm', {
    get: function () {
      return this.arityTerm_byj13l$_0;
    }
  });
  Object.defineProperty(IndicatorImpl.prototype, 'functor', {
    get: function () {
      return this.functor_sov59j$_0;
    }
  });
  Object.defineProperty(IndicatorImpl.prototype, 'args', {
    get: function () {
      return this.args_yheom5$_0.value;
    }
  });
  Object.defineProperty(IndicatorImpl.prototype, 'indicatedName', {
    get: function () {
      return this.indicatedName_swo2jo$_0.value;
    }
  });
  Object.defineProperty(IndicatorImpl.prototype, 'indicatedArity', {
    get: function () {
      return this.indicatedArity_x61b20$_0.value;
    }
  });
  IndicatorImpl.prototype.toString = function () {
    return this.nameTerm.toString() + Indicator$Companion_getInstance().FUNCTOR + this.arityTerm;
  };
  function IndicatorImpl$args$lambda(this$IndicatorImpl) {
    return function () {
      return Kotlin.callGetter(this$IndicatorImpl, StructImpl.prototype, 'args');
    };
  }
  function IndicatorImpl$indicatedName$lambda(this$IndicatorImpl) {
    return function () {
      return Kotlin.callGetter(this$IndicatorImpl, Indicator.prototype, 'indicatedName');
    };
  }
  function IndicatorImpl$indicatedArity$lambda(this$IndicatorImpl) {
    return function () {
      return Kotlin.callGetter(this$IndicatorImpl, Indicator.prototype, 'indicatedArity');
    };
  }
  IndicatorImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IndicatorImpl',
    interfaces: [Indicator, StructImpl]
  };
  function IntegerImpl(value) {
    NumericImpl.call(this);
    this.value_eehuuy$_0 = value;
    this.decimalValue_lcbjtj$_0 = lazy(IntegerImpl$decimalValue$lambda(this));
    this.intValue_e7cbcp$_0 = this.value;
  }
  Object.defineProperty(IntegerImpl.prototype, 'value', {
    get: function () {
      return this.value_eehuuy$_0;
    }
  });
  Object.defineProperty(IntegerImpl.prototype, 'decimalValue', {
    get: function () {
      return this.decimalValue_lcbjtj$_0.value;
    }
  });
  Object.defineProperty(IntegerImpl.prototype, 'intValue', {
    get: function () {
      return this.intValue_e7cbcp$_0;
    }
  });
  IntegerImpl.prototype.toString = function () {
    return this.value.toString();
  };
  IntegerImpl.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, Integer))
      return false;
    return this.value.compareTo_11rb$(other.value) === 0;
  };
  IntegerImpl.prototype.hashCode = function () {
    return this.value.hashCode();
  };
  IntegerImpl.prototype.compareTo_11rb$ = function (other) {
    if (Kotlin.isType(other, Integer))
      return this.value.compareTo_11rb$(other.value);
    else
      return NumericImpl.prototype.compareTo_11rb$.call(this, other);
  };
  function IntegerImpl$decimalValue$lambda(this$IntegerImpl) {
    return function () {
      return BigDecimal.Companion.of_aa07kq$(this$IntegerImpl.intValue);
    };
  }
  IntegerImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntegerImpl',
    interfaces: [Integer, NumericImpl]
  };
  function NumericImpl() {
    TermImpl.call(this);
  }
  NumericImpl.prototype.structurallyEquals = function (other) {
    return Kotlin.isType(other, NumericImpl) && this.decimalValue.compareTo_11rb$(other.decimalValue) === 0;
  };
  NumericImpl.prototype.equals = function (other) {
    throw new NotImplementedError('Subclasses should override this methods');
  };
  NumericImpl.prototype.hashCode = function () {
    throw new NotImplementedError('Subclasses should override this methods');
  };
  NumericImpl.prototype.toString = function () {
    throw new NotImplementedError('Subclasses should override this methods');
  };
  NumericImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NumericImpl',
    interfaces: [Numeric, TermImpl]
  };
  function RealImpl(value) {
    NumericImpl.call(this);
    this.value_mgeah4$_0 = value;
    this.decimalValue_v9z9w5$_0 = this.value;
    this.intValue_brd5mx$_0 = lazy(RealImpl$intValue$lambda(this));
  }
  Object.defineProperty(RealImpl.prototype, 'value', {
    get: function () {
      return this.value_mgeah4$_0;
    }
  });
  Object.defineProperty(RealImpl.prototype, 'decimalValue', {
    get: function () {
      return this.decimalValue_v9z9w5$_0;
    }
  });
  Object.defineProperty(RealImpl.prototype, 'intValue', {
    get: function () {
      return this.intValue_brd5mx$_0.value;
    }
  });
  RealImpl.prototype.toString = function () {
    return this.value.toString();
  };
  RealImpl.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, Real))
      return false;
    return this.value.compareTo_11rb$(other.value) === 0;
  };
  RealImpl.prototype.hashCode = function () {
    return this.value.stripTrailingZeros().hashCode();
  };
  function RealImpl$intValue$lambda(this$RealImpl) {
    return function () {
      return this$RealImpl.value.toBigInteger();
    };
  }
  RealImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RealImpl',
    interfaces: [Real, NumericImpl]
  };
  function RuleImpl(head, body) {
    ClauseImpl.call(this, head, body);
    this.head_ebv513$_0 = head;
    this.body_eezfzt$_0 = body;
  }
  Object.defineProperty(RuleImpl.prototype, 'head', {
    get: function () {
      return this.head_ebv513$_0;
    }
  });
  Object.defineProperty(RuleImpl.prototype, 'body', {
    get: function () {
      return this.body_eezfzt$_0;
    }
  });
  RuleImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleImpl',
    interfaces: [Rule, ClauseImpl]
  };
  function ScopeImpl(_variables) {
    this._variables_0 = _variables;
  }
  ScopeImpl.prototype.containsVar = function (variable) {
    var $receiver = this._variables_0;
    var key = variable.name;
    var tmp$;
    return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(key);
  };
  ScopeImpl.prototype.contains = function (variable) {
    var $receiver = this._variables_0;
    var tmp$;
    return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(variable);
  };
  ScopeImpl.prototype.get = function (variable) {
    return this._variables_0.get_11rb$(variable);
  };
  Object.defineProperty(ScopeImpl.prototype, 'variables', {
    get: function () {
      return toMap_1(this._variables_0);
    }
  });
  ScopeImpl.prototype.varOf = function (name) {
    var $receiver = this._variables_0;
    var tmp$;
    if (!(Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(name)) {
      var $receiver_0 = this._variables_0;
      var value = Var$Companion_getInstance().of(name);
      $receiver_0.put_xwzc9p$(name, value);
    }return ensureNotNull(this._variables_0.get_11rb$(name));
  };
  ScopeImpl.prototype.where = function (lambda) {
    lambda(this);
    return this;
  };
  ScopeImpl.prototype.with = function (lambda) {
    return lambda(this);
  };
  ScopeImpl.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, ScopeImpl) ? tmp$_0 : throwCCE();
    if (!equals(this._variables_0, other._variables_0))
      return false;
    return true;
  };
  ScopeImpl.prototype.hashCode = function () {
    return hashCode(this._variables_0);
  };
  ScopeImpl.prototype.toString = function () {
    return this.variables.toString();
  };
  ScopeImpl.prototype.truthOf = function (value) {
    return Truth$Companion_getInstance().of_6taknv$(value);
  };
  ScopeImpl.prototype.fail = function () {
    return Truth$Companion_getInstance().FAIL;
  };
  ScopeImpl.prototype.setOfIterable = function (terms) {
    return Set$Companion_getInstance().ofIterable(terms);
  };
  ScopeImpl.prototype.setOf = function (terms) {
    return Set$Companion_getInstance().of(terms.slice());
  };
  ScopeImpl.prototype.listOfIterable = function (terms) {
    return List$Companion_getInstance().ofIterable(terms);
  };
  ScopeImpl.prototype.emptyList = function () {
    return EmptyList$Companion_getInstance().invoke();
  };
  ScopeImpl.prototype.emptySet = function () {
    return EmptySet$Companion_getInstance().invoke();
  };
  ScopeImpl.prototype.listOf = function (terms) {
    return List$Companion_getInstance().of(terms.slice());
  };
  ScopeImpl.prototype.listFrom$default = function (terms, last) {
    return List$Companion_getInstance().fromIterable(terms, last);
  };
  ScopeImpl.prototype.tupleOfIterable = function (terms) {
    return Tuple$Companion_getInstance().ofList(toList(terms));
  };
  ScopeImpl.prototype.tupleOf = function (terms) {
    return Tuple$Companion_getInstance().ofList(toList_0(terms));
  };
  ScopeImpl.prototype.atomOf = function (value) {
    return Atom$Companion_getInstance().of(value);
  };
  ScopeImpl.prototype.structOf = function (functor, args) {
    return Struct$Companion_getInstance().of(functor, args.slice());
  };
  ScopeImpl.prototype.structOfSequence = function (functor, args) {
    return Struct$Companion_getInstance().ofSequence(functor, args);
  };
  ScopeImpl.prototype.factOf = function (head) {
    return Fact$Companion_getInstance().of(head);
  };
  ScopeImpl.prototype.ruleOf = function (head, body1, body) {
    return Rule$Companion_getInstance().of(head, [body1].concat(body));
  };
  ScopeImpl.prototype.directiveOf = function (body1, body) {
    return Directive$Companion_getInstance().of(body1, body.slice());
  };
  ScopeImpl.prototype.clauseOf = function (head, body) {
    return Clause$Companion_getInstance().of(head, body.slice());
  };
  ScopeImpl.prototype.consOf = function (head, tail) {
    return Cons$Companion_getInstance().of(head, tail);
  };
  ScopeImpl.prototype.indicatorOf = function (name, arity) {
    return Indicator$Companion_getInstance().of(name, arity);
  };
  ScopeImpl.prototype.indicatorOfStringInt = function (name, arity) {
    return Indicator$Companion_getInstance().ofString(name, arity);
  };
  ScopeImpl.prototype.anonymous = function () {
    return Var$Companion_getInstance().anonymous();
  };
  ScopeImpl.prototype.whatever = function () {
    return this.anonymous();
  };
  ScopeImpl.prototype.numOfBigDecimal = function (value) {
    return Numeric$Companion_getInstance().ofBigDecimal(value);
  };
  ScopeImpl.prototype.numOfDouble = function (value) {
    return Numeric$Companion_getInstance().ofDouble(value);
  };
  ScopeImpl.prototype.numOfFloat = function (value) {
    return Numeric$Companion_getInstance().ofFloat(value);
  };
  ScopeImpl.prototype.numOfBigInteger = function (value) {
    return Numeric$Companion_getInstance().ofBigInteger(value);
  };
  ScopeImpl.prototype.numOfInt = function (value) {
    return Numeric$Companion_getInstance().ofInteger(value);
  };
  ScopeImpl.prototype.numOfLong = function (value) {
    return Numeric$Companion_getInstance().ofLong(value);
  };
  ScopeImpl.prototype.numOfShort = function (value) {
    return Numeric$Companion_getInstance().ofShort(value);
  };
  ScopeImpl.prototype.numOfByte = function (value) {
    return Numeric$Companion_getInstance().ofByte(value);
  };
  ScopeImpl.prototype.parseNum = function (value) {
    return Numeric$Companion_getInstance().parse(value);
  };
  ScopeImpl.prototype.numOf = function (value) {
    return Numeric$Companion_getInstance().of(value);
  };
  ScopeImpl.prototype.intOfBigInteger = function (value) {
    return Integer$Companion_getInstance().ofBigInteger(value);
  };
  ScopeImpl.prototype.intOf = function (value) {
    return Integer$Companion_getInstance().ofInt(value);
  };
  ScopeImpl.prototype.intOfLong = function (value) {
    return Integer$Companion_getInstance().ofLong(value);
  };
  ScopeImpl.prototype.intOfShort = function (value) {
    return Integer$Companion_getInstance().ofShort(value);
  };
  ScopeImpl.prototype.intOfByte = function (value) {
    return Integer$Companion_getInstance().ofByte(value);
  };
  ScopeImpl.prototype.parseInt = function (value) {
    return Integer$Companion_getInstance().parse(value);
  };
  ScopeImpl.prototype.parseIntRadix = function (value, radix) {
    return Integer$Companion_getInstance().parseRadix(value, radix);
  };
  ScopeImpl.prototype.realOfBigDecimal = function (value) {
    return Real$Companion_getInstance().ofBigDecimal(value);
  };
  ScopeImpl.prototype.realOf = function (value) {
    return Real$Companion_getInstance().ofDouble(value);
  };
  ScopeImpl.prototype.realOfFloat = function (value) {
    return Real$Companion_getInstance().ofFloat(value);
  };
  ScopeImpl.prototype.parseReal = function (value) {
    return Real$Companion_getInstance().parse(value);
  };
  ScopeImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ScopeImpl',
    interfaces: [Scope]
  };
  function SetImpl(item) {
    StructImpl.call(this, Set$Companion_getInstance().FUNCTOR, copyToArray(listOfNotNull(item)));
    this.item_0 = item;
    this.functor_4dekwc$_0 = Kotlin.callGetter(this, Set_0.prototype, 'functor');
    this.unfoldedSequence_rtm7fx$_0 = lazy(SetImpl$unfoldedSequence$lambda(this));
    this.unfoldedList_6wt8iy$_0 = lazy(SetImpl$unfoldedList$lambda(this));
    this.unfoldedArray_68euwp$_0 = lazy(SetImpl$unfoldedArray$lambda(this));
  }
  Object.defineProperty(SetImpl.prototype, 'functor', {
    get: function () {
      return this.functor_4dekwc$_0;
    }
  });
  Object.defineProperty(SetImpl.prototype, 'unfoldedSequence', {
    get: function () {
      return this.unfoldedSequence_rtm7fx$_0.value;
    }
  });
  Object.defineProperty(SetImpl.prototype, 'unfoldedList', {
    get: function () {
      return this.unfoldedList_6wt8iy$_0.value;
    }
  });
  Object.defineProperty(SetImpl.prototype, 'unfoldedArray', {
    get: function () {
      return this.unfoldedArray_68euwp$_0.value;
    }
  });
  Object.defineProperty(SetImpl.prototype, 'size', {
    get: function () {
      return this.unfoldedList.size;
    }
  });
  SetImpl.prototype.toString = function () {
    return joinToString(this.unfoldedSequence, ', ', '{', '}');
  };
  function SetImpl$unfoldedSequence$lambda(this$SetImpl) {
    return function () {
      var tmp$;
      tmp$ = this$SetImpl.item_0;
      if (tmp$ == null)
        return emptySequence();
      else if (Kotlin.isType(tmp$, Tuple))
        return this$SetImpl.item_0.unfoldedSequence;
      else
        return sequenceOf([this$SetImpl.item_0]);
    };
  }
  function SetImpl$unfoldedList$lambda(this$SetImpl) {
    return function () {
      return toList_1(this$SetImpl.unfoldedSequence);
    };
  }
  function SetImpl$unfoldedArray$lambda(this$SetImpl) {
    return function () {
      return copyToArray(this$SetImpl.unfoldedList);
    };
  }
  SetImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SetImpl',
    interfaces: [Set_0, StructImpl]
  };
  function SimpleTermFormatter() {
    SimpleTermFormatter_instance = this;
    AbstractTermFormatter.call(this);
  }
  SimpleTermFormatter.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SimpleTermFormatter',
    interfaces: [AbstractTermFormatter]
  };
  var SimpleTermFormatter_instance = null;
  function SimpleTermFormatter_getInstance() {
    if (SimpleTermFormatter_instance === null) {
      new SimpleTermFormatter();
    }return SimpleTermFormatter_instance;
  }
  function StructImpl(functor, args) {
    TermImpl.call(this);
    this.functor_j9df7l$_0 = functor;
    this.args_mo1c5h$_0 = args;
    this.isGround_v8k27j$_0 = lazy(StructImpl$isGround$lambda(this));
    this.variables_bh3rc5$_0 = lazy(StructImpl$variables$lambda(this));
    this.indicator_kxm91f$_0 = lazy(StructImpl$indicator$lambda(this));
    this.argsList_9ezi9z$_0 = lazy(StructImpl$argsList$lambda(this));
    this.argsSequence_urt62k$_0 = lazy(StructImpl$argsSequence$lambda(this));
    this.isFunctorWellFormed_1zs4u0$_0 = lazy(StructImpl$isFunctorWellFormed$lambda(this));
  }
  Object.defineProperty(StructImpl.prototype, 'functor', {
    get: function () {
      return this.functor_j9df7l$_0;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'args', {
    get: function () {
      return this.args_mo1c5h$_0;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'isGround', {
    get: function () {
      return this.isGround_v8k27j$_0.value;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'variables', {
    get: function () {
      return this.variables_bh3rc5$_0.value;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'indicator', {
    get: function () {
      return this.indicator_kxm91f$_0.value;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'argsList', {
    get: function () {
      return this.argsList_9ezi9z$_0.value;
    }
  });
  Object.defineProperty(StructImpl.prototype, 'argsSequence', {
    get: function () {
      return this.argsSequence_urt62k$_0.value;
    }
  });
  StructImpl.prototype.structurallyEquals = function (other) {
    var tmp$ = Kotlin.isType(other, StructImpl) && equals(this.functor, other.functor) && this.arity === other.arity;
    if (tmp$) {
      var $receiver = until(0, this.arity);
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!this.args[element].structurallyEquals(other.get(element))) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      tmp$ = all$result;
    }return tmp$;
  };
  Object.defineProperty(StructImpl.prototype, 'isFunctorWellFormed', {
    get: function () {
      return this.isFunctorWellFormed_1zs4u0$_0.value;
    }
  });
  StructImpl.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, Struct))
      return false;
    if (!equals(this.functor, other.functor))
      return false;
    if (!contentEquals(this.args, other.args))
      return false;
    return true;
  };
  StructImpl.prototype.hashCode = function () {
    var result = hashCode(this.functor);
    result = (31 * result | 0) + contentHashCode(this.args) | 0;
    return result;
  };
  StructImpl.prototype.toString = function () {
    return (this.isFunctorWellFormed ? this.functor : Struct$Companion_getInstance().escapeFunctor(this.functor)) + (this.arity > 0 ? '(' + joinToString_1(this.args, ', ') + ')' : '');
  };
  function StructImpl$isGround$lambda(this$StructImpl) {
    return function () {
      return Kotlin.callGetter(this$StructImpl, Struct.prototype, 'isGround');
    };
  }
  function StructImpl$variables$lambda(this$StructImpl) {
    return function () {
      return Kotlin.callGetter(this$StructImpl, Struct.prototype, 'variables');
    };
  }
  function StructImpl$indicator$lambda(this$StructImpl) {
    return function () {
      return Kotlin.callGetter(this$StructImpl, Struct.prototype, 'indicator');
    };
  }
  function StructImpl$argsList$lambda(this$StructImpl) {
    return function () {
      return Kotlin.callGetter(this$StructImpl, Struct.prototype, 'argsList');
    };
  }
  function StructImpl$argsSequence$lambda(this$StructImpl) {
    return function () {
      return Kotlin.callGetter(this$StructImpl, Struct.prototype, 'argsSequence');
    };
  }
  function StructImpl$isFunctorWellFormed$lambda(this$StructImpl) {
    return function () {
      var $receiver = this$StructImpl.functor;
      return Struct$Companion_getInstance().STRUCT_FUNCTOR_REGEX_PATTERN.matches_6bul2c$($receiver);
    };
  }
  StructImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StructImpl',
    interfaces: [Struct, TermImpl]
  };
  function TermFormatterWithPrettyExpressions(priority, delegate, operators, forceParentheses) {
    TermFormatterWithPrettyExpressions$Companion_getInstance();
    AbstractTermFormatter.call(this);
    this.priority_0 = priority;
    this.delegate_0 = delegate;
    this.operators_0 = operators;
    this.forceParentheses_0 = forceParentheses;
  }
  function TermFormatterWithPrettyExpressions$Companion() {
    TermFormatterWithPrettyExpressions$Companion_instance = this;
    this.defaultDecorations_0 = new TermFormatterWithPrettyExpressions$Companion$OperatorDecorations(' ', ' ');
    this.adHocDecorations_0 = mapOf([to(',', new TermFormatterWithPrettyExpressions$Companion$OperatorDecorations('', ' ')), to(';', new TermFormatterWithPrettyExpressions$Companion$OperatorDecorations('', ' ')), to('\\+', new TermFormatterWithPrettyExpressions$Companion$OperatorDecorations('', ' '))]);
  }
  function TermFormatterWithPrettyExpressions$Companion$OperatorDecorations(prefix, suffix) {
    this.prefix = prefix;
    this.suffix = suffix;
  }
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OperatorDecorations',
    interfaces: []
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.component1 = function () {
    return this.prefix;
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.component2 = function () {
    return this.suffix;
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.copy_puj7f4$ = function (prefix, suffix) {
    return new TermFormatterWithPrettyExpressions$Companion$OperatorDecorations(prefix === void 0 ? this.prefix : prefix, suffix === void 0 ? this.suffix : suffix);
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.toString = function () {
    return 'OperatorDecorations(prefix=' + Kotlin.toString(this.prefix) + (', suffix=' + Kotlin.toString(this.suffix)) + ')';
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.prefix) | 0;
    result = result * 31 + Kotlin.hashCode(this.suffix) | 0;
    return result;
  };
  TermFormatterWithPrettyExpressions$Companion$OperatorDecorations.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.prefix, other.prefix) && Kotlin.equals(this.suffix, other.suffix)))));
  };
  TermFormatterWithPrettyExpressions$Companion.prototype.get_decorations_0 = function ($receiver) {
    var tmp$;
    return (tmp$ = this.adHocDecorations_0.get_11rb$($receiver)) != null ? tmp$ : this.defaultDecorations_0;
  };
  TermFormatterWithPrettyExpressions$Companion.prototype.get_prefix_0 = function ($receiver) {
    return this.get_decorations_0($receiver).prefix;
  };
  TermFormatterWithPrettyExpressions$Companion.prototype.get_suffix_0 = function ($receiver) {
    return this.get_decorations_0($receiver).suffix;
  };
  TermFormatterWithPrettyExpressions$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TermFormatterWithPrettyExpressions$Companion_instance = null;
  function TermFormatterWithPrettyExpressions$Companion_getInstance() {
    if (TermFormatterWithPrettyExpressions$Companion_instance === null) {
      new TermFormatterWithPrettyExpressions$Companion();
    }return TermFormatterWithPrettyExpressions$Companion_instance;
  }
  TermFormatterWithPrettyExpressions.prototype.visitVar = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitAtom = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitInteger = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitReal = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitEmptySet = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitEmptyList = function (term) {
    return term.accept(this.delegate_0);
  };
  TermFormatterWithPrettyExpressions.prototype.visitStruct = function (term) {
    var tmp$;
    if (this.isOperator_0(term.functor)) {
      tmp$ = this.visitExpression_0(term);
    } else {
      tmp$ = AbstractTermFormatter.prototype.visitStruct.call(this, term);
    }
    return tmp$;
  };
  TermFormatterWithPrettyExpressions.prototype.wrapWithinParentheses_0 = function ($receiver) {
    return '(' + $receiver + ')';
  };
  TermFormatterWithPrettyExpressions.prototype.addingParenthesesIfForced_0 = function (struct, stringGenerator) {
    var string = stringGenerator(struct);
    if (this.forceParentheses_0.contains_11rb$(struct.functor)) {
      return this.wrapWithinParentheses_0(string);
    }return string;
  };
  function TermFormatterWithPrettyExpressions$visitTuple$lambda(this$TermFormatterWithPrettyExpressions) {
    return function (it) {
      return it.accept(this$TermFormatterWithPrettyExpressions.itemFormatter());
    };
  }
  TermFormatterWithPrettyExpressions.prototype.visitTuple = function (term) {
    var op = Tuple$Companion_getInstance().FUNCTOR;
    var string = joinToString(map(term.unfoldedSequence, TermFormatterWithPrettyExpressions$visitTuple$lambda(this)), TermFormatterWithPrettyExpressions$Companion_getInstance().get_prefix_0(op) + op + TermFormatterWithPrettyExpressions$Companion_getInstance().get_suffix_0(op));
    if (this.forceParentheses_0.contains_11rb$(op)) {
      return this.wrapWithinParentheses_0(string);
    }return string;
  };
  function TermFormatterWithPrettyExpressions$visitExpression$lambda(closure$prefix, this$TermFormatterWithPrettyExpressions) {
    return function ($receiver) {
      return $receiver.functor + TermFormatterWithPrettyExpressions$Companion_getInstance().get_suffix_0($receiver.functor) + $receiver.args[0].accept(this$TermFormatterWithPrettyExpressions.childFormatter_0(closure$prefix.second));
    };
  }
  function TermFormatterWithPrettyExpressions$visitExpression$lambda_0(closure$postfix, this$TermFormatterWithPrettyExpressions) {
    return function ($receiver) {
      return $receiver.args[0].accept(this$TermFormatterWithPrettyExpressions.childFormatter_0(closure$postfix.second)) + TermFormatterWithPrettyExpressions$Companion_getInstance().get_prefix_0($receiver.functor) + $receiver.functor;
    };
  }
  function TermFormatterWithPrettyExpressions$visitExpression$lambda_1(closure$infix, this$TermFormatterWithPrettyExpressions) {
    return function ($receiver) {
      return $receiver.args[0].accept(this$TermFormatterWithPrettyExpressions.childFormatter_0(closure$infix.second)) + TermFormatterWithPrettyExpressions$Companion_getInstance().get_prefix_0($receiver.functor) + $receiver.functor + TermFormatterWithPrettyExpressions$Companion_getInstance().get_suffix_0($receiver.functor) + $receiver.args[1].accept(this$TermFormatterWithPrettyExpressions.childFormatter_0(closure$infix.second));
    };
  }
  TermFormatterWithPrettyExpressions.prototype.visitExpression_0 = function (struct) {
    var prefix = this.isPrefix_0(struct);
    if (prefix != null) {
      return this.addingParenthesesIfForced_0(struct, TermFormatterWithPrettyExpressions$visitExpression$lambda(prefix, this));
    }var postfix = this.isPostfix_0(struct);
    if (postfix != null) {
      return this.addingParenthesesIfForced_0(struct, TermFormatterWithPrettyExpressions$visitExpression$lambda_0(postfix, this));
    }var infix = this.isInfix_0(struct);
    if (infix != null) {
      return this.addingParenthesesIfForced_0(struct, TermFormatterWithPrettyExpressions$visitExpression$lambda_1(infix, this));
    }var lowerPriority = this.isLowerPriority_0(struct);
    if (lowerPriority != null) {
      return this.wrapWithinParentheses_0(struct.accept(this.childFormatter_0(lowerPriority.second)));
    }return AbstractTermFormatter.prototype.visitStruct.call(this, struct);
  };
  TermFormatterWithPrettyExpressions.prototype.itemFormatter = function () {
    return this.childFormatter_0(2147483647, setOf([',', '|']));
  };
  TermFormatterWithPrettyExpressions.prototype.childFormatter = function () {
    return this.childFormatter_0(2147483647, setOf_0(','));
  };
  TermFormatterWithPrettyExpressions.prototype.childFormatter_0 = function (priority, forceParentheses) {
    if (forceParentheses === void 0)
      forceParentheses = emptySet();
    return new TermFormatterWithPrettyExpressions(priority, this.delegate_0, this.operators_0, forceParentheses);
  };
  TermFormatterWithPrettyExpressions.prototype.isOperator_0 = function ($receiver) {
    return this.operators_0.containsKey_11rb$($receiver);
  };
  function TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda(closure$specifierPredicate, closure$priorityPredicate) {
    return function (it) {
      return closure$specifierPredicate(it.key) && closure$priorityPredicate(it.value);
    };
  }
  function TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda_0(this$TermFormatterWithPrettyExpressions) {
    return function (it) {
      return !this$TermFormatterWithPrettyExpressions.forceParentheses_0.contains_11rb$(it.key.name);
    };
  }
  function TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda_1(it) {
    return new Pair_init(it.key, it.value);
  }
  TermFormatterWithPrettyExpressions.prototype.getSpecifierAndIndex_0 = function ($receiver, functor, priorityPredicate, specifierPredicate) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    return (tmp$_3 = (tmp$_2 = (tmp$_1 = (tmp$_0 = (tmp$ = this.operators_0.get_11rb$(functor)) != null ? asSequence_1(tmp$) : null) != null ? filter(tmp$_0, TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda(specifierPredicate, priorityPredicate)) : null) != null ? filter(tmp$_1, TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda_0(this)) : null) != null ? map(tmp$_2, TermFormatterWithPrettyExpressions$getSpecifierAndIndex$lambda_1) : null) != null ? firstOrNull_0(tmp$_3) : null;
  };
  function TermFormatterWithPrettyExpressions$getSpecifierAndIndexWithNonGreaterPriority$lambda(closure$priority) {
    return function (it) {
      return it <= closure$priority;
    };
  }
  TermFormatterWithPrettyExpressions.prototype.getSpecifierAndIndexWithNonGreaterPriority_0 = function ($receiver, functor, priority, specifierPredicate) {
    return this.getSpecifierAndIndex_0($receiver, functor, TermFormatterWithPrettyExpressions$getSpecifierAndIndexWithNonGreaterPriority$lambda(priority), specifierPredicate);
  };
  function TermFormatterWithPrettyExpressions$getSpecifierAndIndexWithGreaterPriority$lambda(closure$priority) {
    return function (it) {
      return it > closure$priority;
    };
  }
  TermFormatterWithPrettyExpressions.prototype.getSpecifierAndIndexWithGreaterPriority_0 = function ($receiver, functor, priority, specifierPredicate) {
    return this.getSpecifierAndIndex_0($receiver, functor, TermFormatterWithPrettyExpressions$getSpecifierAndIndexWithGreaterPriority$lambda(priority), specifierPredicate);
  };
  function TermFormatterWithPrettyExpressions$isPrefix$lambda($receiver) {
    return $receiver.isPrefix;
  }
  TermFormatterWithPrettyExpressions.prototype.isPrefix_0 = function ($receiver) {
    if ($receiver.arity === 1) {
      return this.getSpecifierAndIndexWithNonGreaterPriority_0(this.operators_0, $receiver.functor, this.priority_0, TermFormatterWithPrettyExpressions$isPrefix$lambda);
    } else {
      return null;
    }
  };
  function TermFormatterWithPrettyExpressions$isPostfix$lambda($receiver) {
    return $receiver.isPostfix;
  }
  TermFormatterWithPrettyExpressions.prototype.isPostfix_0 = function ($receiver) {
    if ($receiver.arity === 1) {
      return this.getSpecifierAndIndexWithNonGreaterPriority_0(this.operators_0, $receiver.functor, this.priority_0, TermFormatterWithPrettyExpressions$isPostfix$lambda);
    } else {
      return null;
    }
  };
  function TermFormatterWithPrettyExpressions$isInfix$lambda($receiver) {
    return $receiver.isInfix;
  }
  TermFormatterWithPrettyExpressions.prototype.isInfix_0 = function ($receiver) {
    if ($receiver.arity === 2) {
      return this.getSpecifierAndIndexWithNonGreaterPriority_0(this.operators_0, $receiver.functor, this.priority_0, TermFormatterWithPrettyExpressions$isInfix$lambda);
    } else {
      return null;
    }
  };
  function TermFormatterWithPrettyExpressions$isLowerPriority$lambda($receiver) {
    return $receiver.isPrefix || $receiver.isPostfix;
  }
  function TermFormatterWithPrettyExpressions$isLowerPriority$lambda_0($receiver) {
    return $receiver.isInfix;
  }
  TermFormatterWithPrettyExpressions.prototype.isLowerPriority_0 = function ($receiver) {
    switch ($receiver.arity) {
      case 1:
        return this.getSpecifierAndIndexWithGreaterPriority_0(this.operators_0, $receiver.functor, this.priority_0, TermFormatterWithPrettyExpressions$isLowerPriority$lambda);
      case 2:
        return this.getSpecifierAndIndexWithGreaterPriority_0(this.operators_0, $receiver.functor, this.priority_0, TermFormatterWithPrettyExpressions$isLowerPriority$lambda_0);
      default:return null;
    }
  };
  TermFormatterWithPrettyExpressions.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TermFormatterWithPrettyExpressions',
    interfaces: [AbstractTermFormatter]
  };
  function TermFormatterWithPrettyExpressions_init(delegate, operators, $this) {
    $this = $this || Object.create(TermFormatterWithPrettyExpressions.prototype);
    TermFormatterWithPrettyExpressions.call($this, 2147483647, delegate, toOperatorsIndex(operators), emptySet());
    return $this;
  }
  function TermFormatterWithPrettyVariables() {
    AbstractTermFormatter.call(this);
    this.variables_0 = LinkedHashMap_init();
  }
  TermFormatterWithPrettyVariables.prototype.formatVar_0 = function (variable, suffix) {
    var tmp$;
    var baseName = variable.name + suffix;
    if (variable.isNameWellFormed) {
      tmp$ = baseName;
    } else {
      tmp$ = Var$Companion_getInstance().escapeName(baseName);
    }
    return tmp$;
  };
  TermFormatterWithPrettyVariables.prototype.visitVar = function (term) {
    var tmp$;
    if (term.isAnonymous) {
      return Var$Companion_getInstance().ANONYMOUS_VAR_NAME;
    } else {
      var $receiver = this.variables_0;
      var key = term.name;
      var tmp$_0;
      if ((Kotlin.isType(tmp$_0 = $receiver, Map) ? tmp$_0 : throwCCE()).containsKey_11rb$(key)) {
        var homonymous = ensureNotNull(this.variables_0.get_11rb$(term.name));
        var tmp$_1;
        if ((Kotlin.isType(tmp$_1 = homonymous, Map) ? tmp$_1 : throwCCE()).containsKey_11rb$(term)) {
          tmp$ = this.formatVar_0(term, ensureNotNull(homonymous.get_11rb$(term)));
        } else {
          var homonymousCount = homonymous.size;
          var suffix = homonymousCount.toString();
          homonymous.put_xwzc9p$(term, suffix);
          tmp$ = this.formatVar_0(term, suffix);
        }
      } else {
        var $receiver_0 = this.variables_0;
        var key_0 = term.name;
        var value = mutableMapOf([to(term, '')]);
        $receiver_0.put_xwzc9p$(key_0, value);
        return this.formatVar_0(term, '');
      }
    }
    return tmp$;
  };
  TermFormatterWithPrettyVariables.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TermFormatterWithPrettyVariables',
    interfaces: [AbstractTermFormatter]
  };
  function TermImpl() {
  }
  TermImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TermImpl',
    interfaces: [Term]
  };
  function TruthImpl(value, isTrue) {
    AtomImpl.call(this, value);
    this.isTrue_rg1uw2$_0 = isTrue;
  }
  Object.defineProperty(TruthImpl.prototype, 'isTrue', {
    get: function () {
      return this.isTrue_rg1uw2$_0;
    }
  });
  function TruthImpl$True() {
    TruthImpl$True_instance = this;
    TruthImpl.call(this, Truth$Companion_getInstance().TRUE_FUNCTOR, true);
  }
  TruthImpl$True.prototype.toString = function () {
    return this.value;
  };
  TruthImpl$True.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'True',
    interfaces: [TruthImpl]
  };
  var TruthImpl$True_instance = null;
  function TruthImpl$True_getInstance() {
    if (TruthImpl$True_instance === null) {
      new TruthImpl$True();
    }return TruthImpl$True_instance;
  }
  function TruthImpl$Fail() {
    TruthImpl$Fail_instance = this;
    TruthImpl.call(this, Truth$Companion_getInstance().FAIL_FUNCTOR, false);
  }
  TruthImpl$Fail.prototype.toString = function () {
    return this.value;
  };
  TruthImpl$Fail.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Fail',
    interfaces: [TruthImpl]
  };
  var TruthImpl$Fail_instance = null;
  function TruthImpl$Fail_getInstance() {
    if (TruthImpl$Fail_instance === null) {
      new TruthImpl$Fail();
    }return TruthImpl$Fail_instance;
  }
  function TruthImpl$False() {
    TruthImpl$False_instance = this;
    TruthImpl.call(this, Truth$Companion_getInstance().FALSE_FUNCTOR, false);
  }
  TruthImpl$False.prototype.toString = function () {
    return this.value;
  };
  TruthImpl$False.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'False',
    interfaces: [TruthImpl]
  };
  var TruthImpl$False_instance = null;
  function TruthImpl$False_getInstance() {
    if (TruthImpl$False_instance === null) {
      new TruthImpl$False();
    }return TruthImpl$False_instance;
  }
  TruthImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TruthImpl',
    interfaces: [AtomImpl, Truth]
  };
  function TupleImpl(left, right) {
    StructImpl.call(this, Tuple$Companion_getInstance().FUNCTOR, [left, right]);
    this.left_qass0k$_0 = left;
    this.right_v226hn$_0 = right;
    this.unfoldedSequence_1zem7t$_0 = lazy(TupleImpl$unfoldedSequence$lambda(this));
    this.unfoldedList_ipnph8$_0 = lazy(TupleImpl$unfoldedList$lambda(this));
    this.unfoldedArray_6rxti9$_0 = lazy(TupleImpl$unfoldedArray$lambda(this));
    this.functor_xkb8i6$_0 = Tuple$Companion_getInstance().FUNCTOR;
    this.args_qgm6zu$_0 = lazy(TupleImpl$args$lambda(this));
  }
  Object.defineProperty(TupleImpl.prototype, 'left', {
    get: function () {
      return this.left_qass0k$_0;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'right', {
    get: function () {
      return this.right_v226hn$_0;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'unfoldedSequence', {
    get: function () {
      return this.unfoldedSequence_1zem7t$_0.value;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'unfoldedList', {
    get: function () {
      return this.unfoldedList_ipnph8$_0.value;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'unfoldedArray', {
    get: function () {
      return this.unfoldedArray_6rxti9$_0.value;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'size', {
    get: function () {
      return this.unfoldedList.size;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'functor', {
    get: function () {
      return this.functor_xkb8i6$_0;
    }
  });
  Object.defineProperty(TupleImpl.prototype, 'args', {
    get: function () {
      return this.args_qgm6zu$_0.value;
    }
  });
  TupleImpl.prototype.toString = function () {
    return joinToString(this.unfoldedSequence, ', ', '(', ')');
  };
  function TupleImpl$unfoldedSequence$lambda(this$TupleImpl) {
    return function () {
      return plus_2(sequenceOf([this$TupleImpl.left]), Kotlin.isType(this$TupleImpl.right, Tuple) ? this$TupleImpl.right.unfoldedSequence : sequenceOf([this$TupleImpl.right]));
    };
  }
  function TupleImpl$unfoldedList$lambda(this$TupleImpl) {
    return function () {
      return toList_1(this$TupleImpl.unfoldedSequence);
    };
  }
  function TupleImpl$unfoldedArray$lambda(this$TupleImpl) {
    return function () {
      return copyToArray(this$TupleImpl.unfoldedList);
    };
  }
  function TupleImpl$args$lambda(this$TupleImpl) {
    return function () {
      return Kotlin.callGetter(this$TupleImpl, StructImpl.prototype, 'args');
    };
  }
  TupleImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TupleImpl',
    interfaces: [Tuple, StructImpl]
  };
  function VarImpl(name, identifier) {
    VarImpl$Companion_getInstance();
    if (identifier === void 0)
      identifier = VarImpl$Companion_getInstance().instanceId_0();
    TermImpl.call(this);
    this.name_wu2qgp$_0 = name;
    this.identifier_0 = identifier;
    this.completeName_quqqeq$_0 = lazy(VarImpl$completeName$lambda(this));
    this.isAnonymous_7lj2yn$_0 = Kotlin.callGetter(this, Var.prototype, 'isAnonymous');
    this.isNameWellFormed_o81xxw$_0 = lazy(VarImpl$isNameWellFormed$lambda(this));
  }
  Object.defineProperty(VarImpl.prototype, 'name', {
    get: function () {
      return this.name_wu2qgp$_0;
    }
  });
  function VarImpl$Companion() {
    VarImpl$Companion_instance = this;
    this.instanceCount_0 = 0;
  }
  VarImpl$Companion.prototype.instanceId_0 = function () {
    var tmp$;
    return tmp$ = this.instanceCount_0, this.instanceCount_0 = tmp$ + 1 | 0, tmp$;
  };
  VarImpl$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var VarImpl$Companion_instance = null;
  function VarImpl$Companion_getInstance() {
    if (VarImpl$Companion_instance === null) {
      new VarImpl$Companion();
    }return VarImpl$Companion_instance;
  }
  Object.defineProperty(VarImpl.prototype, 'completeName', {
    get: function () {
      return this.completeName_quqqeq$_0.value;
    }
  });
  Object.defineProperty(VarImpl.prototype, 'isAnonymous', {
    get: function () {
      return this.isAnonymous_7lj2yn$_0;
    }
  });
  Object.defineProperty(VarImpl.prototype, 'isNameWellFormed', {
    get: function () {
      return this.isNameWellFormed_o81xxw$_0.value;
    }
  });
  VarImpl.prototype.structurallyEquals = function (other) {
    return Kotlin.isType(other, VarImpl);
  };
  VarImpl.prototype.freshCopy = function () {
    return new VarImpl(this.name);
  };
  VarImpl.prototype.toString = function () {
    return this.isNameWellFormed ? this.completeName : Var$Companion_getInstance().escapeName(this.completeName);
  };
  VarImpl.prototype.equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !Kotlin.isType(other, Var))
      return false;
    if (!equals(this.completeName, other.completeName))
      return false;
    return true;
  };
  VarImpl.prototype.hashCode = function () {
    return hashCode(this.completeName);
  };
  function VarImpl$completeName$lambda(this$VarImpl) {
    return function () {
      return this$VarImpl.name + '_' + this$VarImpl.identifier_0;
    };
  }
  function VarImpl$isNameWellFormed$lambda(this$VarImpl) {
    return function () {
      return Var$Companion_getInstance().VAR_REGEX_PATTERN.matches_6bul2c$(this$VarImpl.name);
    };
  }
  VarImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VarImpl',
    interfaces: [Var, TermImpl]
  };
  function Operator(functor, specifier, priority) {
    Operator$Companion_getInstance();
    this.functor = functor;
    this.specifier = specifier;
    this.priority = priority;
  }
  Operator.prototype.compareTo_11rb$ = function (other) {
    if (this.priority > other.priority)
      return 1;
    else if (this.priority < other.priority)
      return -1;
    else {
      var specifierCompareTo = this.specifier.compareTo_11rb$(other.specifier);
      var block$result;
      if (specifierCompareTo === 0) {
        block$result = Kotlin.compareTo(this.functor, other.functor);
      } else {
        block$result = specifierCompareTo;
      }
      return block$result;
    }
  };
  Operator.prototype.toTerm = function () {
    return Struct$Companion_getInstance().of(Operator$Companion_getInstance().FUNCTOR, [toTerm_3(this.priority), this.specifier.toTerm(), toAtom(this.functor)]);
  };
  Operator.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, Operator) ? tmp$_0 : throwCCE();
    if (!equals(this.functor, other.functor))
      return false;
    if (this.specifier !== other.specifier)
      return false;
    return true;
  };
  Operator.prototype.hashCode = function () {
    var result = hashCode(this.functor);
    result = (31 * result | 0) + hashCode(this.specifier) | 0;
    return result;
  };
  Operator.prototype.toString = function () {
    return 'Operator(' + this.priority + ', ' + this.specifier + ", '" + this.functor + "')";
  };
  function Operator$Companion() {
    Operator$Companion_instance = this;
    this.FUNCTOR = 'op';
    this.TEMPLATE = Struct$Companion_getInstance().of(this.FUNCTOR, [Var$Companion_getInstance().of('P'), Var$Companion_getInstance().of('A'), Var$Companion_getInstance().of('F')]);
  }
  Operator$Companion.prototype.fromTerm = function (struct) {
    var block$result;
    block$break: do {
      if (equals(struct.functor, this.FUNCTOR) && struct.arity === 3 && Kotlin.isType(struct.args[0], Integer) && Kotlin.isType(struct.args[1], Atom) && Kotlin.isType(struct.args[2], Atom))
        try {
          block$result = new Operator(struct.args[2].as_6ddzm9$().value, Specifier$Companion_getInstance().fromTerm(struct.args[1]), struct.args[0].as_6ddzm9$().intValue.toInt());
        } catch (ex) {
          if (Kotlin.isType(ex, IllegalArgumentException)) {
            block$result = null;
            break block$break;
          } else if (Kotlin.isType(ex, IllegalStateException)) {
            block$result = null;
            break block$break;
          } else
            throw ex;
        }
       else {
        block$result = null;
      }
    }
     while (false);
    return block$result;
  };
  Operator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Operator$Companion_instance = null;
  function Operator$Companion_getInstance() {
    if (Operator$Companion_instance === null) {
      new Operator$Companion();
    }return Operator$Companion_instance;
  }
  Operator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Operator',
    interfaces: [ToTermConvertible, Comparable]
  };
  function OperatorSet(operators) {
    OperatorSet$Companion_getInstance();
    this.$delegate_7gu0wi$_0 = toHashSet(operators);
    this.operators_g0yomf$_0 = lazy(OperatorSet$operators$lambda(operators));
  }
  Object.defineProperty(OperatorSet.prototype, 'operators_0', {
    get: function () {
      return this.operators_g0yomf$_0.value;
    }
  });
  OperatorSet.prototype.plus = function (operator) {
    return new OperatorSet(sequenceOf([operator].concat(copyToArray(this))));
  };
  OperatorSet.prototype.plusOperatorSet = function (other) {
    return new OperatorSet(plus_2(asSequence(other), asSequence(this)));
  };
  OperatorSet.prototype.minus = function (operator) {
    var tmp$;
    return OperatorSet_init_0(minus_0(Kotlin.isType(tmp$ = this, Set) ? tmp$ : throwCCE(), operator));
  };
  OperatorSet.prototype.minusOperatorSet = function (other) {
    var tmp$, tmp$_0;
    return OperatorSet_init_0(minus_1(Kotlin.isType(tmp$ = this, Set) ? tmp$ : throwCCE(), Kotlin.isType(tmp$_0 = other, Set) ? tmp$_0 : throwCCE()));
  };
  OperatorSet.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, OperatorSet) ? tmp$_0 : throwCCE();
    if (!equals(this.operators_0, other.operators_0))
      return false;
    return true;
  };
  OperatorSet.prototype.hashCode = function () {
    return hashCode(this.operators_0);
  };
  OperatorSet.prototype.toString = function () {
    return 'OperatorSet(' + this.operators_0 + ')';
  };
  function OperatorSet$Companion() {
    OperatorSet$Companion_instance = this;
    this.EMPTY = new OperatorSet(emptySequence());
    this.ARITHMETIC = new OperatorSet(plus_2(plus_2(plus_2(plus_2(map(sequenceOf(['+', '-', '\\']), OperatorSet$Companion$ARITHMETIC$lambda), map(sequenceOf(['^']), OperatorSet$Companion$ARITHMETIC$lambda_0)), map(sequenceOf(['**']), OperatorSet$Companion$ARITHMETIC$lambda_1)), map(sequenceOf(['*', '/', '//', 'rem', 'mod', '<<', '>>']), OperatorSet$Companion$ARITHMETIC$lambda_2)), map(sequenceOf(['+', '-', '\\/', '/\\']), OperatorSet$Companion$ARITHMETIC$lambda_3)));
    this.ARITHMETIC_COMPARISON = new OperatorSet(map(sequenceOf(['=:=', '=\\=', '<', '=<', '>', '>=']), OperatorSet$Companion$ARITHMETIC_COMPARISON$lambda));
    this.TERM_COMPARISON = new OperatorSet(plus_2(plus_2(plus_2(map(sequenceOf(['=', '\\=']), OperatorSet$Companion$TERM_COMPARISON$lambda), map(sequenceOf(['==', '\\==', '@<', '@=<', '@>', '@>=']), OperatorSet$Companion$TERM_COMPARISON$lambda_0)), map(sequenceOf(['=..']), OperatorSet$Companion$TERM_COMPARISON$lambda_1)), map(sequenceOf(['is']), OperatorSet$Companion$TERM_COMPARISON$lambda_2)));
    this.CONTROL_FLOW = new OperatorSet(plus_2(plus_2(plus_2(map(sequenceOf([',']), OperatorSet$Companion$CONTROL_FLOW$lambda), map(sequenceOf(['->']), OperatorSet$Companion$CONTROL_FLOW$lambda_0)), map(sequenceOf([';']), OperatorSet$Companion$CONTROL_FLOW$lambda_1)), map(sequenceOf(['\\+']), OperatorSet$Companion$CONTROL_FLOW$lambda_2)));
    this.CLAUSES = new OperatorSet(plus_2(map(sequenceOf([':-', '?-']), OperatorSet$Companion$CLAUSES$lambda), map(sequenceOf([':-', '-->']), OperatorSet$Companion$CLAUSES$lambda_0)));
    this.STANDARD = new OperatorSet(plus_2(plus_2(plus_2(plus_2(asSequence(this.ARITHMETIC), asSequence(this.ARITHMETIC_COMPARISON)), asSequence(this.TERM_COMPARISON)), asSequence(this.CONTROL_FLOW)), asSequence(this.CLAUSES)));
    this.DEFAULT = this.STANDARD;
  }
  function OperatorSet$Companion$ARITHMETIC$lambda(it) {
    return new Operator(it, Specifier$FY_getInstance(), 200);
  }
  function OperatorSet$Companion$ARITHMETIC$lambda_0(it) {
    return new Operator(it, Specifier$XFY_getInstance(), 200);
  }
  function OperatorSet$Companion$ARITHMETIC$lambda_1(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 200);
  }
  function OperatorSet$Companion$ARITHMETIC$lambda_2(it) {
    return new Operator(it, Specifier$YFX_getInstance(), 400);
  }
  function OperatorSet$Companion$ARITHMETIC$lambda_3(it) {
    return new Operator(it, Specifier$YFX_getInstance(), 500);
  }
  function OperatorSet$Companion$ARITHMETIC_COMPARISON$lambda(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 700);
  }
  function OperatorSet$Companion$TERM_COMPARISON$lambda(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 700);
  }
  function OperatorSet$Companion$TERM_COMPARISON$lambda_0(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 700);
  }
  function OperatorSet$Companion$TERM_COMPARISON$lambda_1(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 700);
  }
  function OperatorSet$Companion$TERM_COMPARISON$lambda_2(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 700);
  }
  function OperatorSet$Companion$CONTROL_FLOW$lambda(it) {
    return new Operator(it, Specifier$XFY_getInstance(), 1000);
  }
  function OperatorSet$Companion$CONTROL_FLOW$lambda_0(it) {
    return new Operator(it, Specifier$XFY_getInstance(), 1050);
  }
  function OperatorSet$Companion$CONTROL_FLOW$lambda_1(it) {
    return new Operator(it, Specifier$XFY_getInstance(), 1100);
  }
  function OperatorSet$Companion$CONTROL_FLOW$lambda_2(it) {
    return new Operator(it, Specifier$FY_getInstance(), 900);
  }
  function OperatorSet$Companion$CLAUSES$lambda(it) {
    return new Operator(it, Specifier$FX_getInstance(), 1200);
  }
  function OperatorSet$Companion$CLAUSES$lambda_0(it) {
    return new Operator(it, Specifier$XFX_getInstance(), 1200);
  }
  OperatorSet$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OperatorSet$Companion_instance = null;
  function OperatorSet$Companion_getInstance() {
    if (OperatorSet$Companion_instance === null) {
      new OperatorSet$Companion();
    }return OperatorSet$Companion_instance;
  }
  Object.defineProperty(OperatorSet.prototype, 'size', {
    get: function () {
      return this.$delegate_7gu0wi$_0.size;
    }
  });
  OperatorSet.prototype.contains_11rb$ = function (element) {
    return this.$delegate_7gu0wi$_0.contains_11rb$(element);
  };
  OperatorSet.prototype.containsAll_brywnq$ = function (elements) {
    return this.$delegate_7gu0wi$_0.containsAll_brywnq$(elements);
  };
  OperatorSet.prototype.isEmpty = function () {
    return this.$delegate_7gu0wi$_0.isEmpty();
  };
  OperatorSet.prototype.iterator = function () {
    return this.$delegate_7gu0wi$_0.iterator();
  };
  function OperatorSet$operators$lambda(closure$operators) {
    return function () {
      return toSet(closure$operators);
    };
  }
  OperatorSet.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OperatorSet',
    interfaces: [Set]
  };
  function OperatorSet_init(operator, $this) {
    $this = $this || Object.create(OperatorSet.prototype);
    OperatorSet.call($this, asSequence_0(operator));
    return $this;
  }
  function OperatorSet_init_0(operators, $this) {
    $this = $this || Object.create(OperatorSet.prototype);
    OperatorSet.call($this, asSequence(operators));
    return $this;
  }
  function toOperatorsIndex($receiver) {
    var tmp$;
    var temp = LinkedHashMap_init();
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var op = tmp$.next();
      var key = op.functor;
      var tmp$_0;
      if ((Kotlin.isType(tmp$_0 = temp, Map) ? tmp$_0 : throwCCE()).containsKey_11rb$(key)) {
        var opsWithFunctor = ensureNotNull(temp.get_11rb$(op.functor));
        var key_0 = op.specifier;
        var value = op.priority;
        opsWithFunctor.put_xwzc9p$(key_0, value);
      } else {
        var key_1 = op.functor;
        var value_0 = mutableMapOf([to(op.specifier, op.priority)]);
        temp.put_xwzc9p$(key_1, value_0);
      }
    }
    return temp;
  }
  function toOperatorsIndex_0($receiver) {
    return toOperatorsIndex(asIterable_0($receiver));
  }
  function Specifier(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Specifier_initFields() {
    Specifier_initFields = function () {
    };
    Specifier$XF_instance = new Specifier('XF', 0);
    Specifier$YF_instance = new Specifier('YF', 1);
    Specifier$FX_instance = new Specifier('FX', 2);
    Specifier$FY_instance = new Specifier('FY', 3);
    Specifier$XFX_instance = new Specifier('XFX', 4);
    Specifier$XFY_instance = new Specifier('XFY', 5);
    Specifier$YFX_instance = new Specifier('YFX', 6);
    Specifier$Companion_getInstance();
  }
  var Specifier$XF_instance;
  function Specifier$XF_getInstance() {
    Specifier_initFields();
    return Specifier$XF_instance;
  }
  var Specifier$YF_instance;
  function Specifier$YF_getInstance() {
    Specifier_initFields();
    return Specifier$YF_instance;
  }
  var Specifier$FX_instance;
  function Specifier$FX_getInstance() {
    Specifier_initFields();
    return Specifier$FX_instance;
  }
  var Specifier$FY_instance;
  function Specifier$FY_getInstance() {
    Specifier_initFields();
    return Specifier$FY_instance;
  }
  var Specifier$XFX_instance;
  function Specifier$XFX_getInstance() {
    Specifier_initFields();
    return Specifier$XFX_instance;
  }
  var Specifier$XFY_instance;
  function Specifier$XFY_getInstance() {
    Specifier_initFields();
    return Specifier$XFY_instance;
  }
  var Specifier$YFX_instance;
  function Specifier$YFX_getInstance() {
    Specifier_initFields();
    return Specifier$YFX_instance;
  }
  Object.defineProperty(Specifier.prototype, 'isPrefix', {
    get: function () {
      return Specifier$Companion_getInstance().PREFIX.contains_11rb$(this);
    }
  });
  Object.defineProperty(Specifier.prototype, 'isInfix', {
    get: function () {
      return Specifier$Companion_getInstance().INFIX.contains_11rb$(this);
    }
  });
  Object.defineProperty(Specifier.prototype, 'isPostfix', {
    get: function () {
      return Specifier$Companion_getInstance().POSTFIX.contains_11rb$(this);
    }
  });
  Specifier.prototype.toTerm = function () {
    return this.atomRepresentation_4wik74$_0;
  };
  Object.defineProperty(Specifier.prototype, 'atomRepresentation_4wik74$_0', {
    get: function () {
      return Atom$Companion_getInstance().of(this.name.toLowerCase());
    }
  });
  function Specifier$Companion() {
    Specifier$Companion_instance = this;
    this.PREFIX = setOf([Specifier$FX_getInstance(), Specifier$FY_getInstance()]);
    this.POSTFIX = setOf([Specifier$YF_getInstance(), Specifier$XF_getInstance()]);
    this.INFIX = setOf([Specifier$XFX_getInstance(), Specifier$YFX_getInstance(), Specifier$XFY_getInstance()]);
    this.NON_PREFIX = plus_3(this.POSTFIX, this.INFIX);
  }
  Specifier$Companion.prototype.fromAtom = function (atom) {
    try {
      return Specifier$valueOf(atom.value.toUpperCase());
    } catch (e) {
      if (Kotlin.isType(e, IllegalStateException)) {
        throw new IllegalArgumentException(e.message, e.cause);
      } else
        throw e;
    }
  };
  Specifier$Companion.prototype.fromTerm = function (term) {
    if (Kotlin.isType(term, Atom))
      return this.fromAtom(term);
    else
      throw IllegalArgumentException_init('Argument `' + term + '` must be an atom');
  };
  Specifier$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Specifier$Companion_instance = null;
  function Specifier$Companion_getInstance() {
    Specifier_initFields();
    if (Specifier$Companion_instance === null) {
      new Specifier$Companion();
    }return Specifier$Companion_instance;
  }
  Specifier.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Specifier',
    interfaces: [ToTermConvertible, Enum]
  };
  function Specifier$values() {
    return [Specifier$XF_getInstance(), Specifier$YF_getInstance(), Specifier$FX_getInstance(), Specifier$FY_getInstance(), Specifier$XFX_getInstance(), Specifier$XFY_getInstance(), Specifier$YFX_getInstance()];
  }
  Specifier.values = Specifier$values;
  function Specifier$valueOf(name) {
    switch (name) {
      case 'XF':
        return Specifier$XF_getInstance();
      case 'YF':
        return Specifier$YF_getInstance();
      case 'FX':
        return Specifier$FX_getInstance();
      case 'FY':
        return Specifier$FY_getInstance();
      case 'XFX':
        return Specifier$XFX_getInstance();
      case 'XFY':
        return Specifier$XFY_getInstance();
      case 'YFX':
        return Specifier$YFX_getInstance();
      default:throwISE('No enum constant it.unibo.tuprolog.core.operators.Specifier.' + name);
    }
  }
  Specifier.valueOf_61zpoe$ = Specifier$valueOf;
  Object.defineProperty(Atom, 'Companion', {
    get: Atom$Companion_getInstance
  });
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$core = package$tuprolog.core || (package$tuprolog.core = {});
  package$core.Atom = Atom;
  Object.defineProperty(Clause, 'Companion', {
    get: Clause$Companion_getInstance
  });
  package$core.Clause = Clause;
  package$core.prepareForExecution = prepareForExecution;
  package$core.prepareForExecutionWithUnifier = prepareForExecution_0;
  package$core.Collection = Collection_0;
  Object.defineProperty(Cons, 'Companion', {
    get: Cons$Companion_getInstance
  });
  package$core.Cons = Cons;
  Object.defineProperty(Constant, 'Companion', {
    get: Constant$Companion_getInstance
  });
  package$core.Constant = Constant;
  package$core.bigIntegerToTerm = toTerm;
  package$core.bigDecimalToTerm = toTerm_0;
  package$core.floatToTerm = toTerm_1;
  package$core.doubleToTerm = toTerm_2;
  package$core.intToTerm = toTerm_3;
  package$core.longToTerm = toTerm_4;
  package$core.shortToTerm = toTerm_5;
  package$core.byteToTerm = toTerm_6;
  package$core.numberToTerm = toTerm_7;
  package$core.stringToTerm = toTerm_8;
  package$core.stringToAtom = toAtom;
  package$core.stringToVar = toVar;
  package$core.listToTerm = toTerm_9;
  package$core.sequenceToTerm = toTerm_10;
  package$core.iterableToTerm = toTerm_11;
  package$core.arrayToTerm = toTerm_12;
  Object.defineProperty(Directive, 'Companion', {
    get: Directive$Companion_getInstance
  });
  package$core.Directive = Directive;
  Object.defineProperty(Empty, 'Companion', {
    get: Empty$Companion_getInstance
  });
  package$core.Empty = Empty;
  Object.defineProperty(EmptyList, 'Companion', {
    get: EmptyList$Companion_getInstance
  });
  package$core.EmptyList = EmptyList;
  Object.defineProperty(EmptySet, 'Companion', {
    get: EmptySet$Companion_getInstance
  });
  package$core.EmptySet = EmptySet;
  Object.defineProperty(Fact, 'Companion', {
    get: Fact$Companion_getInstance
  });
  package$core.Fact = Fact;
  package$core.Formatter = Formatter;
  package$core.format = format;
  Object.defineProperty(Indicator, 'Companion', {
    get: Indicator$Companion_getInstance
  });
  package$core.Indicator = Indicator;
  Object.defineProperty(Integer, 'Companion', {
    get: Integer$Companion_getInstance
  });
  package$core.Integer = Integer;
  Object.defineProperty(List, 'Companion', {
    get: List$Companion_getInstance
  });
  package$core.List = List;
  Object.defineProperty(Numeric, 'Companion', {
    get: Numeric$Companion_getInstance
  });
  package$core.Numeric = Numeric;
  Object.defineProperty(Real, 'Companion', {
    get: Real$Companion_getInstance
  });
  package$core.Real = Real;
  Object.defineProperty(package$core, 'RegexUtils', {
    get: RegexUtils_getInstance
  });
  Object.defineProperty(Rule, 'Companion', {
    get: Rule$Companion_getInstance
  });
  package$core.Rule = Rule;
  Object.defineProperty(Scope, 'Companion', {
    get: Scope$Companion_getInstance
  });
  package$core.Scope = Scope;
  Object.defineProperty(Set_0, 'Companion', {
    get: Set$Companion_getInstance
  });
  package$core.Set = Set_0;
  Object.defineProperty(Struct, 'Companion', {
    get: Struct$Companion_getInstance
  });
  package$core.Struct = Struct;
  Substitution.Unifier = Substitution$Unifier;
  Object.defineProperty(Substitution, 'Fail', {
    get: Substitution$Fail_getInstance
  });
  Object.defineProperty(Substitution, 'Companion', {
    get: Substitution$Companion_getInstance
  });
  package$core.Substitution = Substitution;
  Object.defineProperty(Term, 'Companion', {
    get: Term$Companion_getInstance
  });
  package$core.Term = Term;
  Object.defineProperty(TermFormatter, 'Companion', {
    get: TermFormatter$Companion_getInstance
  });
  package$core.TermFormatter = TermFormatter;
  package$core.TermVisitor = TermVisitor;
  package$core.ToTermConvertible = ToTermConvertible;
  Object.defineProperty(Truth, 'Companion', {
    get: Truth$Companion_getInstance
  });
  package$core.Truth = Truth;
  Object.defineProperty(Tuple, 'Companion', {
    get: Tuple$Companion_getInstance
  });
  package$core.Tuple = Tuple;
  Object.defineProperty(Var, 'Companion', {
    get: Var$Companion_getInstance
  });
  package$core.Var = Var;
  var package$exception = package$core.exception || (package$core.exception = {});
  package$exception.InvalidClauseException = InvalidClauseException;
  package$exception.TuPrologException_init_dbl4no$ = TuPrologException_init;
  package$exception.TuPrologException = TuPrologException;
  var package$impl = package$core.impl || (package$core.impl = {});
  package$impl.AbstractTermFormatter = AbstractTermFormatter;
  package$impl.AtomImpl = AtomImpl;
  package$impl.ClauseImpl = ClauseImpl;
  package$impl.ConsImpl = ConsImpl;
  package$impl.DirectiveImpl = DirectiveImpl;
  Object.defineProperty(package$impl, 'EmptyListImpl', {
    get: EmptyListImpl_getInstance
  });
  Object.defineProperty(package$impl, 'EmptySetImpl', {
    get: EmptySetImpl_getInstance
  });
  package$impl.FactImpl = FactImpl;
  package$impl.IndicatorImpl = IndicatorImpl;
  package$impl.IntegerImpl = IntegerImpl;
  package$impl.NumericImpl = NumericImpl;
  package$impl.RealImpl = RealImpl;
  package$impl.RuleImpl = RuleImpl;
  package$impl.ScopeImpl = ScopeImpl;
  package$impl.SetImpl = SetImpl;
  Object.defineProperty(package$impl, 'SimpleTermFormatter', {
    get: SimpleTermFormatter_getInstance
  });
  package$impl.StructImpl = StructImpl;
  Object.defineProperty(TermFormatterWithPrettyExpressions, 'Companion', {
    get: TermFormatterWithPrettyExpressions$Companion_getInstance
  });
  package$impl.TermFormatterWithPrettyExpressions_init_s375l9$ = TermFormatterWithPrettyExpressions_init;
  package$impl.TermFormatterWithPrettyExpressions = TermFormatterWithPrettyExpressions;
  package$impl.TermFormatterWithPrettyVariables = TermFormatterWithPrettyVariables;
  package$impl.TermImpl = TermImpl;
  Object.defineProperty(TruthImpl, 'True', {
    get: TruthImpl$True_getInstance
  });
  Object.defineProperty(TruthImpl, 'Fail', {
    get: TruthImpl$Fail_getInstance
  });
  Object.defineProperty(TruthImpl, 'False', {
    get: TruthImpl$False_getInstance
  });
  package$impl.TruthImpl = TruthImpl;
  package$impl.TupleImpl = TupleImpl;
  Object.defineProperty(VarImpl, 'Companion', {
    get: VarImpl$Companion_getInstance
  });
  package$impl.VarImpl = VarImpl;
  Object.defineProperty(Operator, 'Companion', {
    get: Operator$Companion_getInstance
  });
  var package$operators = package$core.operators || (package$core.operators = {});
  package$operators.Operator = Operator;
  Object.defineProperty(OperatorSet, 'Companion', {
    get: OperatorSet$Companion_getInstance
  });
  package$operators.OperatorSet_init_1gzv2l$ = OperatorSet_init;
  package$operators.OperatorSet_init_gbk1n9$ = OperatorSet_init_0;
  package$operators.OperatorSet = OperatorSet;
  package$operators.toOperatorsIndex_8qh18a$ = toOperatorsIndex;
  package$operators.toOperatorsIndex_9sa6ns$ = toOperatorsIndex_0;
  Object.defineProperty(Specifier, 'XF', {
    get: Specifier$XF_getInstance
  });
  Object.defineProperty(Specifier, 'YF', {
    get: Specifier$YF_getInstance
  });
  Object.defineProperty(Specifier, 'FX', {
    get: Specifier$FX_getInstance
  });
  Object.defineProperty(Specifier, 'FY', {
    get: Specifier$FY_getInstance
  });
  Object.defineProperty(Specifier, 'XFX', {
    get: Specifier$XFX_getInstance
  });
  Object.defineProperty(Specifier, 'XFY', {
    get: Specifier$XFY_getInstance
  });
  Object.defineProperty(Specifier, 'YFX', {
    get: Specifier$YFX_getInstance
  });
  Object.defineProperty(Specifier, 'Companion', {
    get: Specifier$Companion_getInstance
  });
  package$operators.Specifier = Specifier;
  Struct.prototype.getSubstituted = Term.prototype.getSubstituted;
  Struct.prototype.as_6ddzm9$ = Term.prototype.as_6ddzm9$;
  Struct.prototype.castTo_6ddzm9$ = Term.prototype.castTo_6ddzm9$;
  Object.defineProperty(Struct.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Term.prototype, 'isVariable'));
  Object.defineProperty(Struct.prototype, 'isBound', Object.getOwnPropertyDescriptor(Term.prototype, 'isBound'));
  Object.defineProperty(Struct.prototype, 'isGround', Object.getOwnPropertyDescriptor(Term.prototype, 'isGround'));
  Object.defineProperty(Struct.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Term.prototype, 'isConstant'));
  Object.defineProperty(Struct.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Term.prototype, 'isNumber'));
  Object.defineProperty(Struct.prototype, 'isInt', Object.getOwnPropertyDescriptor(Term.prototype, 'isInt'));
  Object.defineProperty(Struct.prototype, 'isReal', Object.getOwnPropertyDescriptor(Term.prototype, 'isReal'));
  Struct.prototype.applySubstitution = Term.prototype.applySubstitution;
  Struct.prototype.apply = Term.prototype.apply;
  Struct.prototype.accept = Term.prototype.accept;
  Constant.prototype.as_6ddzm9$ = Term.prototype.as_6ddzm9$;
  Constant.prototype.castTo_6ddzm9$ = Term.prototype.castTo_6ddzm9$;
  Object.defineProperty(Constant.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Term.prototype, 'isVariable'));
  Object.defineProperty(Constant.prototype, 'isBound', Object.getOwnPropertyDescriptor(Term.prototype, 'isBound'));
  Object.defineProperty(Constant.prototype, 'isGround', Object.getOwnPropertyDescriptor(Term.prototype, 'isGround'));
  Object.defineProperty(Constant.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Term.prototype, 'isStruct'));
  Object.defineProperty(Constant.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Term.prototype, 'isAtom'));
  Object.defineProperty(Constant.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Term.prototype, 'isNumber'));
  Object.defineProperty(Constant.prototype, 'isInt', Object.getOwnPropertyDescriptor(Term.prototype, 'isInt'));
  Object.defineProperty(Constant.prototype, 'isReal', Object.getOwnPropertyDescriptor(Term.prototype, 'isReal'));
  Object.defineProperty(Constant.prototype, 'isList', Object.getOwnPropertyDescriptor(Term.prototype, 'isList'));
  Object.defineProperty(Constant.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Term.prototype, 'isTuple'));
  Object.defineProperty(Constant.prototype, 'isSet', Object.getOwnPropertyDescriptor(Term.prototype, 'isSet'));
  Object.defineProperty(Constant.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptySet'));
  Object.defineProperty(Constant.prototype, 'isClause', Object.getOwnPropertyDescriptor(Term.prototype, 'isClause'));
  Object.defineProperty(Constant.prototype, 'isRule', Object.getOwnPropertyDescriptor(Term.prototype, 'isRule'));
  Object.defineProperty(Constant.prototype, 'isFact', Object.getOwnPropertyDescriptor(Term.prototype, 'isFact'));
  Object.defineProperty(Constant.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Term.prototype, 'isDirective'));
  Object.defineProperty(Constant.prototype, 'isCons', Object.getOwnPropertyDescriptor(Term.prototype, 'isCons'));
  Object.defineProperty(Constant.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptyList'));
  Object.defineProperty(Constant.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Term.prototype, 'isTrue'));
  Object.defineProperty(Constant.prototype, 'isFail', Object.getOwnPropertyDescriptor(Term.prototype, 'isFail'));
  Object.defineProperty(Constant.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Term.prototype, 'isIndicator'));
  Constant.prototype.freshCopy = Term.prototype.freshCopy;
  Constant.prototype.freshCopyFromScope = Term.prototype.freshCopyFromScope;
  Constant.prototype.applySubstitution = Term.prototype.applySubstitution;
  Constant.prototype.apply = Term.prototype.apply;
  Constant.prototype.getSubstituted = Term.prototype.getSubstituted;
  Constant.prototype.accept = Term.prototype.accept;
  Object.defineProperty(Atom.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Struct.prototype, 'isStruct'));
  Object.defineProperty(Atom.prototype, 'isClause', Object.getOwnPropertyDescriptor(Struct.prototype, 'isClause'));
  Object.defineProperty(Atom.prototype, 'isRule', Object.getOwnPropertyDescriptor(Struct.prototype, 'isRule'));
  Object.defineProperty(Atom.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Struct.prototype, 'isDirective'));
  Object.defineProperty(Atom.prototype, 'isFact', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFact'));
  Object.defineProperty(Atom.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTuple'));
  Object.defineProperty(Atom.prototype, 'isList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isList'));
  Object.defineProperty(Atom.prototype, 'isCons', Object.getOwnPropertyDescriptor(Struct.prototype, 'isCons'));
  Object.defineProperty(Atom.prototype, 'isSet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isSet'));
  Object.defineProperty(Atom.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'isIndicator'));
  Object.defineProperty(Atom.prototype, 'indicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'indicator'));
  Object.defineProperty(Atom.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsSequence'));
  Atom.prototype.getArgAt = Struct.prototype.getArgAt;
  Atom.prototype.get = Struct.prototype.get;
  Atom.prototype.getSubstituted = Struct.prototype.getSubstituted;
  Atom.prototype.as_6ddzm9$ = Struct.prototype.as_6ddzm9$;
  Atom.prototype.castTo_6ddzm9$ = Struct.prototype.castTo_6ddzm9$;
  Object.defineProperty(Atom.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Struct.prototype, 'isVariable'));
  Object.defineProperty(Atom.prototype, 'isBound', Object.getOwnPropertyDescriptor(Struct.prototype, 'isBound'));
  Object.defineProperty(Atom.prototype, 'isGround', Object.getOwnPropertyDescriptor(Struct.prototype, 'isGround'));
  Object.defineProperty(Atom.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Constant.prototype, 'isConstant'));
  Object.defineProperty(Atom.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Struct.prototype, 'isNumber'));
  Object.defineProperty(Atom.prototype, 'isInt', Object.getOwnPropertyDescriptor(Struct.prototype, 'isInt'));
  Object.defineProperty(Atom.prototype, 'isReal', Object.getOwnPropertyDescriptor(Struct.prototype, 'isReal'));
  Atom.prototype.applySubstitution = Struct.prototype.applySubstitution;
  Atom.prototype.apply = Struct.prototype.apply;
  Atom.prototype.accept = Struct.prototype.accept;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToTerm = TermVisitor.prototype.visitToTerm;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToConstant = TermVisitor.prototype.visitToConstant;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToAtom = TermVisitor.prototype.visitToAtom;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToTruth = TermVisitor.prototype.visitToTruth;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToNumeric = TermVisitor.prototype.visitToNumeric;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToInteger = TermVisitor.prototype.visitToInteger;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToReal = TermVisitor.prototype.visitToReal;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToSet = TermVisitor.prototype.visitToSet;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToEmpty = TermVisitor.prototype.visitToEmpty;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToEmptySet = TermVisitor.prototype.visitToEmptySet;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToList = TermVisitor.prototype.visitToList;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToCons = TermVisitor.prototype.visitToCons;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToEmptyList = TermVisitor.prototype.visitToEmptyList;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToTuple = TermVisitor.prototype.visitToTuple;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToIndicator = TermVisitor.prototype.visitToIndicator;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToRule = TermVisitor.prototype.visitToRule;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToFact = TermVisitor.prototype.visitToFact;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitToDirective = TermVisitor.prototype.visitToDirective;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitTerm = TermVisitor.prototype.visitTerm;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitVar = TermVisitor.prototype.visitVar;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitConstant = TermVisitor.prototype.visitConstant;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitStruct = TermVisitor.prototype.visitStruct;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitAtom = TermVisitor.prototype.visitAtom;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitTruth = TermVisitor.prototype.visitTruth;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitNumeric = TermVisitor.prototype.visitNumeric;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitInteger = TermVisitor.prototype.visitInteger;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitReal = TermVisitor.prototype.visitReal;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitSet = TermVisitor.prototype.visitSet;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitEmpty = TermVisitor.prototype.visitEmpty;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitEmptySet = TermVisitor.prototype.visitEmptySet;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitList = TermVisitor.prototype.visitList;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitCons = TermVisitor.prototype.visitCons;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitEmptyList = TermVisitor.prototype.visitEmptyList;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitTuple = TermVisitor.prototype.visitTuple;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitIndicator = TermVisitor.prototype.visitIndicator;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitClause = TermVisitor.prototype.visitClause;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitRule = TermVisitor.prototype.visitRule;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitFact = TermVisitor.prototype.visitFact;
  Clause$Companion$preparationForExecutionVisitor$ObjectLiteral.prototype.visitDirective = TermVisitor.prototype.visitDirective;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToTerm = TermVisitor.prototype.visitToTerm;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToVar = TermVisitor.prototype.visitToVar;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToConstant = TermVisitor.prototype.visitToConstant;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToAtom = TermVisitor.prototype.visitToAtom;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToTruth = TermVisitor.prototype.visitToTruth;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToNumeric = TermVisitor.prototype.visitToNumeric;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToInteger = TermVisitor.prototype.visitToInteger;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToReal = TermVisitor.prototype.visitToReal;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToSet = TermVisitor.prototype.visitToSet;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToEmpty = TermVisitor.prototype.visitToEmpty;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToEmptySet = TermVisitor.prototype.visitToEmptySet;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToList = TermVisitor.prototype.visitToList;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToCons = TermVisitor.prototype.visitToCons;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToEmptyList = TermVisitor.prototype.visitToEmptyList;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToTuple = TermVisitor.prototype.visitToTuple;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToIndicator = TermVisitor.prototype.visitToIndicator;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToClause = TermVisitor.prototype.visitToClause;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToRule = TermVisitor.prototype.visitToRule;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToFact = TermVisitor.prototype.visitToFact;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitToDirective = TermVisitor.prototype.visitToDirective;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitTerm = TermVisitor.prototype.visitTerm;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitVar = TermVisitor.prototype.visitVar;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitConstant = TermVisitor.prototype.visitConstant;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitStruct = TermVisitor.prototype.visitStruct;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitAtom = TermVisitor.prototype.visitAtom;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitTruth = TermVisitor.prototype.visitTruth;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitNumeric = TermVisitor.prototype.visitNumeric;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitInteger = TermVisitor.prototype.visitInteger;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitReal = TermVisitor.prototype.visitReal;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitSet = TermVisitor.prototype.visitSet;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitEmpty = TermVisitor.prototype.visitEmpty;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitEmptySet = TermVisitor.prototype.visitEmptySet;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitList = TermVisitor.prototype.visitList;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitCons = TermVisitor.prototype.visitCons;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitEmptyList = TermVisitor.prototype.visitEmptyList;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitTuple = TermVisitor.prototype.visitTuple;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitIndicator = TermVisitor.prototype.visitIndicator;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitClause = TermVisitor.prototype.visitClause;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitRule = TermVisitor.prototype.visitRule;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitFact = TermVisitor.prototype.visitFact;
  Clause$Companion$bodyWellFormedVisitor$ObjectLiteral.prototype.visitDirective = TermVisitor.prototype.visitDirective;
  Object.defineProperty(Clause.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Struct.prototype, 'isStruct'));
  Object.defineProperty(Clause.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTuple'));
  Object.defineProperty(Clause.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Struct.prototype, 'isAtom'));
  Object.defineProperty(Clause.prototype, 'isList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isList'));
  Object.defineProperty(Clause.prototype, 'isCons', Object.getOwnPropertyDescriptor(Struct.prototype, 'isCons'));
  Object.defineProperty(Clause.prototype, 'isSet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isSet'));
  Object.defineProperty(Clause.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptySet'));
  Object.defineProperty(Clause.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptyList'));
  Object.defineProperty(Clause.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTrue'));
  Object.defineProperty(Clause.prototype, 'isFail', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFail'));
  Object.defineProperty(Clause.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'isIndicator'));
  Object.defineProperty(Clause.prototype, 'variables', Object.getOwnPropertyDescriptor(Struct.prototype, 'variables'));
  Object.defineProperty(Clause.prototype, 'indicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'indicator'));
  Object.defineProperty(Clause.prototype, 'argsList', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsList'));
  Object.defineProperty(Clause.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsSequence'));
  Clause.prototype.getArgAt = Struct.prototype.getArgAt;
  Clause.prototype.get = Struct.prototype.get;
  Clause.prototype.getSubstituted = Struct.prototype.getSubstituted;
  Clause.prototype.as_6ddzm9$ = Struct.prototype.as_6ddzm9$;
  Clause.prototype.castTo_6ddzm9$ = Struct.prototype.castTo_6ddzm9$;
  Object.defineProperty(Clause.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Struct.prototype, 'isVariable'));
  Object.defineProperty(Clause.prototype, 'isBound', Object.getOwnPropertyDescriptor(Struct.prototype, 'isBound'));
  Object.defineProperty(Clause.prototype, 'isGround', Object.getOwnPropertyDescriptor(Struct.prototype, 'isGround'));
  Object.defineProperty(Clause.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Struct.prototype, 'isConstant'));
  Object.defineProperty(Clause.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Struct.prototype, 'isNumber'));
  Object.defineProperty(Clause.prototype, 'isInt', Object.getOwnPropertyDescriptor(Struct.prototype, 'isInt'));
  Object.defineProperty(Clause.prototype, 'isReal', Object.getOwnPropertyDescriptor(Struct.prototype, 'isReal'));
  Clause.prototype.applySubstitution = Struct.prototype.applySubstitution;
  Clause.prototype.apply = Struct.prototype.apply;
  Clause.prototype.accept = Struct.prototype.accept;
  Object.defineProperty(Collection_0.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Struct.prototype, 'isStruct'));
  Object.defineProperty(Collection_0.prototype, 'isClause', Object.getOwnPropertyDescriptor(Struct.prototype, 'isClause'));
  Object.defineProperty(Collection_0.prototype, 'isRule', Object.getOwnPropertyDescriptor(Struct.prototype, 'isRule'));
  Object.defineProperty(Collection_0.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Struct.prototype, 'isDirective'));
  Object.defineProperty(Collection_0.prototype, 'isFact', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFact'));
  Object.defineProperty(Collection_0.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTuple'));
  Object.defineProperty(Collection_0.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Struct.prototype, 'isAtom'));
  Object.defineProperty(Collection_0.prototype, 'isList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isList'));
  Object.defineProperty(Collection_0.prototype, 'isCons', Object.getOwnPropertyDescriptor(Struct.prototype, 'isCons'));
  Object.defineProperty(Collection_0.prototype, 'isSet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isSet'));
  Object.defineProperty(Collection_0.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptySet'));
  Object.defineProperty(Collection_0.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptyList'));
  Object.defineProperty(Collection_0.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTrue'));
  Object.defineProperty(Collection_0.prototype, 'isFail', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFail'));
  Object.defineProperty(Collection_0.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'isIndicator'));
  Object.defineProperty(Collection_0.prototype, 'variables', Object.getOwnPropertyDescriptor(Struct.prototype, 'variables'));
  Collection_0.prototype.freshCopy = Struct.prototype.freshCopy;
  Collection_0.prototype.freshCopyFromScope = Struct.prototype.freshCopyFromScope;
  Object.defineProperty(Collection_0.prototype, 'arity', Object.getOwnPropertyDescriptor(Struct.prototype, 'arity'));
  Object.defineProperty(Collection_0.prototype, 'indicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'indicator'));
  Object.defineProperty(Collection_0.prototype, 'argsList', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsList'));
  Object.defineProperty(Collection_0.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsSequence'));
  Collection_0.prototype.getArgAt = Struct.prototype.getArgAt;
  Collection_0.prototype.get = Struct.prototype.get;
  Collection_0.prototype.getSubstituted = Struct.prototype.getSubstituted;
  Collection_0.prototype.as_6ddzm9$ = Struct.prototype.as_6ddzm9$;
  Collection_0.prototype.castTo_6ddzm9$ = Struct.prototype.castTo_6ddzm9$;
  Object.defineProperty(Collection_0.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Struct.prototype, 'isVariable'));
  Object.defineProperty(Collection_0.prototype, 'isBound', Object.getOwnPropertyDescriptor(Struct.prototype, 'isBound'));
  Object.defineProperty(Collection_0.prototype, 'isGround', Object.getOwnPropertyDescriptor(Struct.prototype, 'isGround'));
  Object.defineProperty(Collection_0.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Struct.prototype, 'isConstant'));
  Object.defineProperty(Collection_0.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Struct.prototype, 'isNumber'));
  Object.defineProperty(Collection_0.prototype, 'isInt', Object.getOwnPropertyDescriptor(Struct.prototype, 'isInt'));
  Object.defineProperty(Collection_0.prototype, 'isReal', Object.getOwnPropertyDescriptor(Struct.prototype, 'isReal'));
  Collection_0.prototype.applySubstitution = Struct.prototype.applySubstitution;
  Collection_0.prototype.apply = Struct.prototype.apply;
  Collection_0.prototype.accept = Struct.prototype.accept;
  Object.defineProperty(List.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isStruct'));
  Object.defineProperty(List.prototype, 'isClause', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isClause'));
  Object.defineProperty(List.prototype, 'isRule', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isRule'));
  Object.defineProperty(List.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isDirective'));
  Object.defineProperty(List.prototype, 'isFact', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFact'));
  Object.defineProperty(List.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isTuple'));
  Object.defineProperty(List.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isAtom'));
  Object.defineProperty(List.prototype, 'isCons', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isCons'));
  Object.defineProperty(List.prototype, 'isSet', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isSet'));
  Object.defineProperty(List.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isEmptySet'));
  Object.defineProperty(List.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isEmptyList'));
  Object.defineProperty(List.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isTrue'));
  Object.defineProperty(List.prototype, 'isFail', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFail'));
  Object.defineProperty(List.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isIndicator'));
  Object.defineProperty(List.prototype, 'variables', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'variables'));
  Object.defineProperty(List.prototype, 'arity', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'arity'));
  Object.defineProperty(List.prototype, 'indicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'indicator'));
  Object.defineProperty(List.prototype, 'argsList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsList'));
  Object.defineProperty(List.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsSequence'));
  List.prototype.getArgAt = Collection_0.prototype.getArgAt;
  List.prototype.get = Collection_0.prototype.get;
  List.prototype.getSubstituted = Collection_0.prototype.getSubstituted;
  List.prototype.as_6ddzm9$ = Collection_0.prototype.as_6ddzm9$;
  List.prototype.castTo_6ddzm9$ = Collection_0.prototype.castTo_6ddzm9$;
  Object.defineProperty(List.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isVariable'));
  Object.defineProperty(List.prototype, 'isBound', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isBound'));
  Object.defineProperty(List.prototype, 'isGround', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isGround'));
  Object.defineProperty(List.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isConstant'));
  Object.defineProperty(List.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isNumber'));
  Object.defineProperty(List.prototype, 'isInt', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isInt'));
  Object.defineProperty(List.prototype, 'isReal', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isReal'));
  List.prototype.applySubstitution = Collection_0.prototype.applySubstitution;
  List.prototype.apply = Collection_0.prototype.apply;
  List.prototype.accept = Collection_0.prototype.accept;
  Object.defineProperty(Cons.prototype, 'isList', Object.getOwnPropertyDescriptor(List.prototype, 'isList'));
  Object.defineProperty(Cons.prototype, 'size', Object.getOwnPropertyDescriptor(List.prototype, 'size'));
  Cons.prototype.toArray = List.prototype.toArray;
  Cons.prototype.toList = List.prototype.toList;
  Cons.prototype.toSequence = List.prototype.toSequence;
  Object.defineProperty(Cons.prototype, 'isStruct', Object.getOwnPropertyDescriptor(List.prototype, 'isStruct'));
  Object.defineProperty(Cons.prototype, 'isClause', Object.getOwnPropertyDescriptor(List.prototype, 'isClause'));
  Object.defineProperty(Cons.prototype, 'isRule', Object.getOwnPropertyDescriptor(List.prototype, 'isRule'));
  Object.defineProperty(Cons.prototype, 'isDirective', Object.getOwnPropertyDescriptor(List.prototype, 'isDirective'));
  Object.defineProperty(Cons.prototype, 'isFact', Object.getOwnPropertyDescriptor(List.prototype, 'isFact'));
  Object.defineProperty(Cons.prototype, 'isTuple', Object.getOwnPropertyDescriptor(List.prototype, 'isTuple'));
  Object.defineProperty(Cons.prototype, 'isAtom', Object.getOwnPropertyDescriptor(List.prototype, 'isAtom'));
  Object.defineProperty(Cons.prototype, 'isSet', Object.getOwnPropertyDescriptor(List.prototype, 'isSet'));
  Object.defineProperty(Cons.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(List.prototype, 'isEmptySet'));
  Object.defineProperty(Cons.prototype, 'isTrue', Object.getOwnPropertyDescriptor(List.prototype, 'isTrue'));
  Object.defineProperty(Cons.prototype, 'isFail', Object.getOwnPropertyDescriptor(List.prototype, 'isFail'));
  Object.defineProperty(Cons.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(List.prototype, 'isIndicator'));
  Object.defineProperty(Cons.prototype, 'variables', Object.getOwnPropertyDescriptor(List.prototype, 'variables'));
  Object.defineProperty(Cons.prototype, 'indicator', Object.getOwnPropertyDescriptor(List.prototype, 'indicator'));
  Object.defineProperty(Cons.prototype, 'argsList', Object.getOwnPropertyDescriptor(List.prototype, 'argsList'));
  Object.defineProperty(Cons.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(List.prototype, 'argsSequence'));
  Cons.prototype.getArgAt = List.prototype.getArgAt;
  Cons.prototype.get = List.prototype.get;
  Cons.prototype.getSubstituted = List.prototype.getSubstituted;
  Cons.prototype.as_6ddzm9$ = List.prototype.as_6ddzm9$;
  Cons.prototype.castTo_6ddzm9$ = List.prototype.castTo_6ddzm9$;
  Object.defineProperty(Cons.prototype, 'isVariable', Object.getOwnPropertyDescriptor(List.prototype, 'isVariable'));
  Object.defineProperty(Cons.prototype, 'isBound', Object.getOwnPropertyDescriptor(List.prototype, 'isBound'));
  Object.defineProperty(Cons.prototype, 'isGround', Object.getOwnPropertyDescriptor(List.prototype, 'isGround'));
  Object.defineProperty(Cons.prototype, 'isConstant', Object.getOwnPropertyDescriptor(List.prototype, 'isConstant'));
  Object.defineProperty(Cons.prototype, 'isNumber', Object.getOwnPropertyDescriptor(List.prototype, 'isNumber'));
  Object.defineProperty(Cons.prototype, 'isInt', Object.getOwnPropertyDescriptor(List.prototype, 'isInt'));
  Object.defineProperty(Cons.prototype, 'isReal', Object.getOwnPropertyDescriptor(List.prototype, 'isReal'));
  Cons.prototype.applySubstitution = List.prototype.applySubstitution;
  Cons.prototype.apply = List.prototype.apply;
  Cons.prototype.accept = List.prototype.accept;
  Object.defineProperty(Directive.prototype, 'functor', Object.getOwnPropertyDescriptor(Clause.prototype, 'functor'));
  Object.defineProperty(Directive.prototype, 'args', Object.getOwnPropertyDescriptor(Clause.prototype, 'args'));
  Object.defineProperty(Directive.prototype, 'arity', Object.getOwnPropertyDescriptor(Clause.prototype, 'arity'));
  Object.defineProperty(Directive.prototype, 'isClause', Object.getOwnPropertyDescriptor(Clause.prototype, 'isClause'));
  Object.defineProperty(Directive.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Clause.prototype, 'isStruct'));
  Object.defineProperty(Directive.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Clause.prototype, 'isTuple'));
  Object.defineProperty(Directive.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Clause.prototype, 'isAtom'));
  Object.defineProperty(Directive.prototype, 'isList', Object.getOwnPropertyDescriptor(Clause.prototype, 'isList'));
  Object.defineProperty(Directive.prototype, 'isCons', Object.getOwnPropertyDescriptor(Clause.prototype, 'isCons'));
  Object.defineProperty(Directive.prototype, 'isSet', Object.getOwnPropertyDescriptor(Clause.prototype, 'isSet'));
  Object.defineProperty(Directive.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Clause.prototype, 'isEmptySet'));
  Object.defineProperty(Directive.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Clause.prototype, 'isEmptyList'));
  Object.defineProperty(Directive.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Clause.prototype, 'isTrue'));
  Object.defineProperty(Directive.prototype, 'isFail', Object.getOwnPropertyDescriptor(Clause.prototype, 'isFail'));
  Object.defineProperty(Directive.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Clause.prototype, 'isIndicator'));
  Object.defineProperty(Directive.prototype, 'variables', Object.getOwnPropertyDescriptor(Clause.prototype, 'variables'));
  Object.defineProperty(Directive.prototype, 'indicator', Object.getOwnPropertyDescriptor(Clause.prototype, 'indicator'));
  Object.defineProperty(Directive.prototype, 'argsList', Object.getOwnPropertyDescriptor(Clause.prototype, 'argsList'));
  Object.defineProperty(Directive.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Clause.prototype, 'argsSequence'));
  Directive.prototype.getArgAt = Clause.prototype.getArgAt;
  Directive.prototype.get = Clause.prototype.get;
  Directive.prototype.getSubstituted = Clause.prototype.getSubstituted;
  Directive.prototype.as_6ddzm9$ = Clause.prototype.as_6ddzm9$;
  Directive.prototype.castTo_6ddzm9$ = Clause.prototype.castTo_6ddzm9$;
  Object.defineProperty(Directive.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Clause.prototype, 'isVariable'));
  Object.defineProperty(Directive.prototype, 'isBound', Object.getOwnPropertyDescriptor(Clause.prototype, 'isBound'));
  Object.defineProperty(Directive.prototype, 'isGround', Object.getOwnPropertyDescriptor(Clause.prototype, 'isGround'));
  Object.defineProperty(Directive.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Clause.prototype, 'isConstant'));
  Object.defineProperty(Directive.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Clause.prototype, 'isNumber'));
  Object.defineProperty(Directive.prototype, 'isInt', Object.getOwnPropertyDescriptor(Clause.prototype, 'isInt'));
  Object.defineProperty(Directive.prototype, 'isReal', Object.getOwnPropertyDescriptor(Clause.prototype, 'isReal'));
  Directive.prototype.applySubstitution = Clause.prototype.applySubstitution;
  Directive.prototype.apply = Clause.prototype.apply;
  Directive.prototype.accept = Clause.prototype.accept;
  Object.defineProperty(Empty.prototype, 'args', Object.getOwnPropertyDescriptor(Atom.prototype, 'args'));
  Object.defineProperty(Empty.prototype, 'arity', Object.getOwnPropertyDescriptor(Atom.prototype, 'arity'));
  Object.defineProperty(Empty.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Atom.prototype, 'isAtom'));
  Object.defineProperty(Empty.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptySet'));
  Object.defineProperty(Empty.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptyList'));
  Object.defineProperty(Empty.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Atom.prototype, 'isTrue'));
  Object.defineProperty(Empty.prototype, 'isFail', Object.getOwnPropertyDescriptor(Atom.prototype, 'isFail'));
  Object.defineProperty(Empty.prototype, 'value', Object.getOwnPropertyDescriptor(Atom.prototype, 'value'));
  Object.defineProperty(Empty.prototype, 'argsList', Object.getOwnPropertyDescriptor(Atom.prototype, 'argsList'));
  Object.defineProperty(Empty.prototype, 'variables', Object.getOwnPropertyDescriptor(Atom.prototype, 'variables'));
  Object.defineProperty(Empty.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Atom.prototype, 'isStruct'));
  Object.defineProperty(Empty.prototype, 'isClause', Object.getOwnPropertyDescriptor(Atom.prototype, 'isClause'));
  Object.defineProperty(Empty.prototype, 'isRule', Object.getOwnPropertyDescriptor(Atom.prototype, 'isRule'));
  Object.defineProperty(Empty.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Atom.prototype, 'isDirective'));
  Object.defineProperty(Empty.prototype, 'isFact', Object.getOwnPropertyDescriptor(Atom.prototype, 'isFact'));
  Object.defineProperty(Empty.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Atom.prototype, 'isTuple'));
  Object.defineProperty(Empty.prototype, 'isList', Object.getOwnPropertyDescriptor(Atom.prototype, 'isList'));
  Object.defineProperty(Empty.prototype, 'isCons', Object.getOwnPropertyDescriptor(Atom.prototype, 'isCons'));
  Object.defineProperty(Empty.prototype, 'isSet', Object.getOwnPropertyDescriptor(Atom.prototype, 'isSet'));
  Object.defineProperty(Empty.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Atom.prototype, 'isIndicator'));
  Object.defineProperty(Empty.prototype, 'indicator', Object.getOwnPropertyDescriptor(Atom.prototype, 'indicator'));
  Object.defineProperty(Empty.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Atom.prototype, 'argsSequence'));
  Empty.prototype.getArgAt = Atom.prototype.getArgAt;
  Empty.prototype.get = Atom.prototype.get;
  Empty.prototype.getSubstituted = Atom.prototype.getSubstituted;
  Empty.prototype.as_6ddzm9$ = Atom.prototype.as_6ddzm9$;
  Empty.prototype.castTo_6ddzm9$ = Atom.prototype.castTo_6ddzm9$;
  Object.defineProperty(Empty.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Atom.prototype, 'isVariable'));
  Object.defineProperty(Empty.prototype, 'isBound', Object.getOwnPropertyDescriptor(Atom.prototype, 'isBound'));
  Object.defineProperty(Empty.prototype, 'isGround', Object.getOwnPropertyDescriptor(Atom.prototype, 'isGround'));
  Object.defineProperty(Empty.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Atom.prototype, 'isConstant'));
  Object.defineProperty(Empty.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Atom.prototype, 'isNumber'));
  Object.defineProperty(Empty.prototype, 'isInt', Object.getOwnPropertyDescriptor(Atom.prototype, 'isInt'));
  Object.defineProperty(Empty.prototype, 'isReal', Object.getOwnPropertyDescriptor(Atom.prototype, 'isReal'));
  Empty.prototype.applySubstitution = Atom.prototype.applySubstitution;
  Empty.prototype.apply = Atom.prototype.apply;
  Empty.prototype.accept = Atom.prototype.accept;
  Object.defineProperty(EmptyList.prototype, 'args', Object.getOwnPropertyDescriptor(Empty.prototype, 'args'));
  Object.defineProperty(EmptyList.prototype, 'arity', Object.getOwnPropertyDescriptor(Empty.prototype, 'arity'));
  Object.defineProperty(EmptyList.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Empty.prototype, 'isAtom'));
  Object.defineProperty(EmptyList.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Empty.prototype, 'isEmptySet'));
  Object.defineProperty(EmptyList.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Empty.prototype, 'isTrue'));
  Object.defineProperty(EmptyList.prototype, 'isFail', Object.getOwnPropertyDescriptor(Empty.prototype, 'isFail'));
  Object.defineProperty(EmptyList.prototype, 'value', Object.getOwnPropertyDescriptor(Empty.prototype, 'value'));
  Object.defineProperty(EmptyList.prototype, 'argsList', Object.getOwnPropertyDescriptor(Empty.prototype, 'argsList'));
  Object.defineProperty(EmptyList.prototype, 'variables', Object.getOwnPropertyDescriptor(Empty.prototype, 'variables'));
  Object.defineProperty(EmptyList.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Empty.prototype, 'isStruct'));
  Object.defineProperty(EmptyList.prototype, 'isClause', Object.getOwnPropertyDescriptor(Empty.prototype, 'isClause'));
  Object.defineProperty(EmptyList.prototype, 'isRule', Object.getOwnPropertyDescriptor(Empty.prototype, 'isRule'));
  Object.defineProperty(EmptyList.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Empty.prototype, 'isDirective'));
  Object.defineProperty(EmptyList.prototype, 'isFact', Object.getOwnPropertyDescriptor(Empty.prototype, 'isFact'));
  Object.defineProperty(EmptyList.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Empty.prototype, 'isTuple'));
  Object.defineProperty(EmptyList.prototype, 'isSet', Object.getOwnPropertyDescriptor(Empty.prototype, 'isSet'));
  Object.defineProperty(EmptyList.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Empty.prototype, 'isIndicator'));
  Object.defineProperty(EmptyList.prototype, 'indicator', Object.getOwnPropertyDescriptor(Empty.prototype, 'indicator'));
  Object.defineProperty(EmptyList.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Empty.prototype, 'argsSequence'));
  EmptyList.prototype.getArgAt = Empty.prototype.getArgAt;
  EmptyList.prototype.get = Empty.prototype.get;
  EmptyList.prototype.getSubstituted = Empty.prototype.getSubstituted;
  EmptyList.prototype.as_6ddzm9$ = Empty.prototype.as_6ddzm9$;
  EmptyList.prototype.castTo_6ddzm9$ = Empty.prototype.castTo_6ddzm9$;
  Object.defineProperty(EmptyList.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Empty.prototype, 'isVariable'));
  Object.defineProperty(EmptyList.prototype, 'isBound', Object.getOwnPropertyDescriptor(Empty.prototype, 'isBound'));
  Object.defineProperty(EmptyList.prototype, 'isGround', Object.getOwnPropertyDescriptor(Empty.prototype, 'isGround'));
  Object.defineProperty(EmptyList.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Empty.prototype, 'isConstant'));
  Object.defineProperty(EmptyList.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Empty.prototype, 'isNumber'));
  Object.defineProperty(EmptyList.prototype, 'isInt', Object.getOwnPropertyDescriptor(Empty.prototype, 'isInt'));
  Object.defineProperty(EmptyList.prototype, 'isReal', Object.getOwnPropertyDescriptor(Empty.prototype, 'isReal'));
  EmptyList.prototype.applySubstitution = Empty.prototype.applySubstitution;
  EmptyList.prototype.apply = Empty.prototype.apply;
  EmptyList.prototype.accept = Empty.prototype.accept;
  Object.defineProperty(EmptyList.prototype, 'size', Object.getOwnPropertyDescriptor(List.prototype, 'size'));
  Object.defineProperty(Set_0.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isStruct'));
  Object.defineProperty(Set_0.prototype, 'isClause', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isClause'));
  Object.defineProperty(Set_0.prototype, 'isRule', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isRule'));
  Object.defineProperty(Set_0.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isDirective'));
  Object.defineProperty(Set_0.prototype, 'isFact', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFact'));
  Object.defineProperty(Set_0.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isTuple'));
  Object.defineProperty(Set_0.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isAtom'));
  Object.defineProperty(Set_0.prototype, 'isList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isList'));
  Object.defineProperty(Set_0.prototype, 'isCons', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isCons'));
  Object.defineProperty(Set_0.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isEmptyList'));
  Object.defineProperty(Set_0.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isTrue'));
  Object.defineProperty(Set_0.prototype, 'isFail', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFail'));
  Object.defineProperty(Set_0.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isIndicator'));
  Object.defineProperty(Set_0.prototype, 'variables', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'variables'));
  Object.defineProperty(Set_0.prototype, 'arity', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'arity'));
  Object.defineProperty(Set_0.prototype, 'indicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'indicator'));
  Object.defineProperty(Set_0.prototype, 'argsList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsList'));
  Object.defineProperty(Set_0.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsSequence'));
  Set_0.prototype.getArgAt = Collection_0.prototype.getArgAt;
  Set_0.prototype.get = Collection_0.prototype.get;
  Set_0.prototype.getSubstituted = Collection_0.prototype.getSubstituted;
  Set_0.prototype.as_6ddzm9$ = Collection_0.prototype.as_6ddzm9$;
  Set_0.prototype.castTo_6ddzm9$ = Collection_0.prototype.castTo_6ddzm9$;
  Object.defineProperty(Set_0.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isVariable'));
  Object.defineProperty(Set_0.prototype, 'isBound', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isBound'));
  Object.defineProperty(Set_0.prototype, 'isGround', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isGround'));
  Object.defineProperty(Set_0.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isConstant'));
  Object.defineProperty(Set_0.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isNumber'));
  Object.defineProperty(Set_0.prototype, 'isInt', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isInt'));
  Object.defineProperty(Set_0.prototype, 'isReal', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isReal'));
  Set_0.prototype.applySubstitution = Collection_0.prototype.applySubstitution;
  Set_0.prototype.apply = Collection_0.prototype.apply;
  Set_0.prototype.accept = Collection_0.prototype.accept;
  Object.defineProperty(EmptySet.prototype, 'args', Object.getOwnPropertyDescriptor(Empty.prototype, 'args'));
  Object.defineProperty(EmptySet.prototype, 'arity', Object.getOwnPropertyDescriptor(Empty.prototype, 'arity'));
  Object.defineProperty(EmptySet.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Empty.prototype, 'isAtom'));
  Object.defineProperty(EmptySet.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Empty.prototype, 'isEmptyList'));
  Object.defineProperty(EmptySet.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Empty.prototype, 'isTrue'));
  Object.defineProperty(EmptySet.prototype, 'isFail', Object.getOwnPropertyDescriptor(Empty.prototype, 'isFail'));
  Object.defineProperty(EmptySet.prototype, 'value', Object.getOwnPropertyDescriptor(Empty.prototype, 'value'));
  Object.defineProperty(EmptySet.prototype, 'argsList', Object.getOwnPropertyDescriptor(Empty.prototype, 'argsList'));
  Object.defineProperty(EmptySet.prototype, 'variables', Object.getOwnPropertyDescriptor(Empty.prototype, 'variables'));
  Object.defineProperty(EmptySet.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Empty.prototype, 'isStruct'));
  Object.defineProperty(EmptySet.prototype, 'isClause', Object.getOwnPropertyDescriptor(Empty.prototype, 'isClause'));
  Object.defineProperty(EmptySet.prototype, 'isRule', Object.getOwnPropertyDescriptor(Empty.prototype, 'isRule'));
  Object.defineProperty(EmptySet.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Empty.prototype, 'isDirective'));
  Object.defineProperty(EmptySet.prototype, 'isFact', Object.getOwnPropertyDescriptor(Empty.prototype, 'isFact'));
  Object.defineProperty(EmptySet.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Empty.prototype, 'isTuple'));
  Object.defineProperty(EmptySet.prototype, 'isList', Object.getOwnPropertyDescriptor(Empty.prototype, 'isList'));
  Object.defineProperty(EmptySet.prototype, 'isCons', Object.getOwnPropertyDescriptor(Empty.prototype, 'isCons'));
  Object.defineProperty(EmptySet.prototype, 'isSet', Object.getOwnPropertyDescriptor(Set_0.prototype, 'isSet'));
  Object.defineProperty(EmptySet.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Empty.prototype, 'isIndicator'));
  Object.defineProperty(EmptySet.prototype, 'functor', Object.getOwnPropertyDescriptor(Set_0.prototype, 'functor'));
  Object.defineProperty(EmptySet.prototype, 'indicator', Object.getOwnPropertyDescriptor(Empty.prototype, 'indicator'));
  Object.defineProperty(EmptySet.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Empty.prototype, 'argsSequence'));
  EmptySet.prototype.getArgAt = Empty.prototype.getArgAt;
  EmptySet.prototype.get = Empty.prototype.get;
  EmptySet.prototype.getSubstituted = Empty.prototype.getSubstituted;
  EmptySet.prototype.as_6ddzm9$ = Empty.prototype.as_6ddzm9$;
  EmptySet.prototype.castTo_6ddzm9$ = Empty.prototype.castTo_6ddzm9$;
  Object.defineProperty(EmptySet.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Empty.prototype, 'isVariable'));
  Object.defineProperty(EmptySet.prototype, 'isBound', Object.getOwnPropertyDescriptor(Empty.prototype, 'isBound'));
  Object.defineProperty(EmptySet.prototype, 'isGround', Object.getOwnPropertyDescriptor(Empty.prototype, 'isGround'));
  Object.defineProperty(EmptySet.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Empty.prototype, 'isConstant'));
  Object.defineProperty(EmptySet.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Empty.prototype, 'isNumber'));
  Object.defineProperty(EmptySet.prototype, 'isInt', Object.getOwnPropertyDescriptor(Empty.prototype, 'isInt'));
  Object.defineProperty(EmptySet.prototype, 'isReal', Object.getOwnPropertyDescriptor(Empty.prototype, 'isReal'));
  EmptySet.prototype.applySubstitution = Empty.prototype.applySubstitution;
  EmptySet.prototype.apply = Empty.prototype.apply;
  EmptySet.prototype.accept = Empty.prototype.accept;
  EmptySet.prototype.toArray = Set_0.prototype.toArray;
  EmptySet.prototype.toList = Set_0.prototype.toList;
  EmptySet.prototype.toSequence = Set_0.prototype.toSequence;
  Object.defineProperty(Rule.prototype, 'functor', Object.getOwnPropertyDescriptor(Clause.prototype, 'functor'));
  Object.defineProperty(Rule.prototype, 'args', Object.getOwnPropertyDescriptor(Clause.prototype, 'args'));
  Object.defineProperty(Rule.prototype, 'arity', Object.getOwnPropertyDescriptor(Clause.prototype, 'arity'));
  Object.defineProperty(Rule.prototype, 'isClause', Object.getOwnPropertyDescriptor(Clause.prototype, 'isClause'));
  Object.defineProperty(Rule.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Clause.prototype, 'isStruct'));
  Object.defineProperty(Rule.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Clause.prototype, 'isTuple'));
  Object.defineProperty(Rule.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Clause.prototype, 'isAtom'));
  Object.defineProperty(Rule.prototype, 'isList', Object.getOwnPropertyDescriptor(Clause.prototype, 'isList'));
  Object.defineProperty(Rule.prototype, 'isCons', Object.getOwnPropertyDescriptor(Clause.prototype, 'isCons'));
  Object.defineProperty(Rule.prototype, 'isSet', Object.getOwnPropertyDescriptor(Clause.prototype, 'isSet'));
  Object.defineProperty(Rule.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Clause.prototype, 'isEmptySet'));
  Object.defineProperty(Rule.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Clause.prototype, 'isEmptyList'));
  Object.defineProperty(Rule.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Clause.prototype, 'isTrue'));
  Object.defineProperty(Rule.prototype, 'isFail', Object.getOwnPropertyDescriptor(Clause.prototype, 'isFail'));
  Object.defineProperty(Rule.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Clause.prototype, 'isIndicator'));
  Object.defineProperty(Rule.prototype, 'variables', Object.getOwnPropertyDescriptor(Clause.prototype, 'variables'));
  Object.defineProperty(Rule.prototype, 'indicator', Object.getOwnPropertyDescriptor(Clause.prototype, 'indicator'));
  Object.defineProperty(Rule.prototype, 'argsList', Object.getOwnPropertyDescriptor(Clause.prototype, 'argsList'));
  Object.defineProperty(Rule.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Clause.prototype, 'argsSequence'));
  Rule.prototype.getArgAt = Clause.prototype.getArgAt;
  Rule.prototype.get = Clause.prototype.get;
  Rule.prototype.getSubstituted = Clause.prototype.getSubstituted;
  Rule.prototype.as_6ddzm9$ = Clause.prototype.as_6ddzm9$;
  Rule.prototype.castTo_6ddzm9$ = Clause.prototype.castTo_6ddzm9$;
  Object.defineProperty(Rule.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Clause.prototype, 'isVariable'));
  Object.defineProperty(Rule.prototype, 'isBound', Object.getOwnPropertyDescriptor(Clause.prototype, 'isBound'));
  Object.defineProperty(Rule.prototype, 'isGround', Object.getOwnPropertyDescriptor(Clause.prototype, 'isGround'));
  Object.defineProperty(Rule.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Clause.prototype, 'isConstant'));
  Object.defineProperty(Rule.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Clause.prototype, 'isNumber'));
  Object.defineProperty(Rule.prototype, 'isInt', Object.getOwnPropertyDescriptor(Clause.prototype, 'isInt'));
  Object.defineProperty(Rule.prototype, 'isReal', Object.getOwnPropertyDescriptor(Clause.prototype, 'isReal'));
  Rule.prototype.applySubstitution = Clause.prototype.applySubstitution;
  Rule.prototype.apply = Clause.prototype.apply;
  Rule.prototype.accept = Clause.prototype.accept;
  Object.defineProperty(Fact.prototype, 'isRule', Object.getOwnPropertyDescriptor(Rule.prototype, 'isRule'));
  Object.defineProperty(Fact.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Rule.prototype, 'isDirective'));
  Object.defineProperty(Fact.prototype, 'functor', Object.getOwnPropertyDescriptor(Rule.prototype, 'functor'));
  Object.defineProperty(Fact.prototype, 'args', Object.getOwnPropertyDescriptor(Rule.prototype, 'args'));
  Object.defineProperty(Fact.prototype, 'arity', Object.getOwnPropertyDescriptor(Rule.prototype, 'arity'));
  Object.defineProperty(Fact.prototype, 'isClause', Object.getOwnPropertyDescriptor(Rule.prototype, 'isClause'));
  Object.defineProperty(Fact.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Rule.prototype, 'isStruct'));
  Object.defineProperty(Fact.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Rule.prototype, 'isTuple'));
  Object.defineProperty(Fact.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Rule.prototype, 'isAtom'));
  Object.defineProperty(Fact.prototype, 'isList', Object.getOwnPropertyDescriptor(Rule.prototype, 'isList'));
  Object.defineProperty(Fact.prototype, 'isCons', Object.getOwnPropertyDescriptor(Rule.prototype, 'isCons'));
  Object.defineProperty(Fact.prototype, 'isSet', Object.getOwnPropertyDescriptor(Rule.prototype, 'isSet'));
  Object.defineProperty(Fact.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Rule.prototype, 'isEmptySet'));
  Object.defineProperty(Fact.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Rule.prototype, 'isEmptyList'));
  Object.defineProperty(Fact.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Rule.prototype, 'isTrue'));
  Object.defineProperty(Fact.prototype, 'isFail', Object.getOwnPropertyDescriptor(Rule.prototype, 'isFail'));
  Object.defineProperty(Fact.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Rule.prototype, 'isIndicator'));
  Object.defineProperty(Fact.prototype, 'variables', Object.getOwnPropertyDescriptor(Rule.prototype, 'variables'));
  Object.defineProperty(Fact.prototype, 'indicator', Object.getOwnPropertyDescriptor(Rule.prototype, 'indicator'));
  Object.defineProperty(Fact.prototype, 'argsList', Object.getOwnPropertyDescriptor(Rule.prototype, 'argsList'));
  Object.defineProperty(Fact.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Rule.prototype, 'argsSequence'));
  Fact.prototype.getArgAt = Rule.prototype.getArgAt;
  Fact.prototype.get = Rule.prototype.get;
  Fact.prototype.getSubstituted = Rule.prototype.getSubstituted;
  Fact.prototype.as_6ddzm9$ = Rule.prototype.as_6ddzm9$;
  Fact.prototype.castTo_6ddzm9$ = Rule.prototype.castTo_6ddzm9$;
  Object.defineProperty(Fact.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Rule.prototype, 'isVariable'));
  Object.defineProperty(Fact.prototype, 'isBound', Object.getOwnPropertyDescriptor(Rule.prototype, 'isBound'));
  Object.defineProperty(Fact.prototype, 'isGround', Object.getOwnPropertyDescriptor(Rule.prototype, 'isGround'));
  Object.defineProperty(Fact.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Rule.prototype, 'isConstant'));
  Object.defineProperty(Fact.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Rule.prototype, 'isNumber'));
  Object.defineProperty(Fact.prototype, 'isInt', Object.getOwnPropertyDescriptor(Rule.prototype, 'isInt'));
  Object.defineProperty(Fact.prototype, 'isReal', Object.getOwnPropertyDescriptor(Rule.prototype, 'isReal'));
  Fact.prototype.applySubstitution = Rule.prototype.applySubstitution;
  Fact.prototype.apply = Rule.prototype.apply;
  Fact.prototype.accept = Rule.prototype.accept;
  Object.defineProperty(Indicator.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Struct.prototype, 'isStruct'));
  Object.defineProperty(Indicator.prototype, 'isClause', Object.getOwnPropertyDescriptor(Struct.prototype, 'isClause'));
  Object.defineProperty(Indicator.prototype, 'isRule', Object.getOwnPropertyDescriptor(Struct.prototype, 'isRule'));
  Object.defineProperty(Indicator.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Struct.prototype, 'isDirective'));
  Object.defineProperty(Indicator.prototype, 'isFact', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFact'));
  Object.defineProperty(Indicator.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTuple'));
  Object.defineProperty(Indicator.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Struct.prototype, 'isAtom'));
  Object.defineProperty(Indicator.prototype, 'isList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isList'));
  Object.defineProperty(Indicator.prototype, 'isCons', Object.getOwnPropertyDescriptor(Struct.prototype, 'isCons'));
  Object.defineProperty(Indicator.prototype, 'isSet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isSet'));
  Object.defineProperty(Indicator.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptySet'));
  Object.defineProperty(Indicator.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptyList'));
  Object.defineProperty(Indicator.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTrue'));
  Object.defineProperty(Indicator.prototype, 'isFail', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFail'));
  Object.defineProperty(Indicator.prototype, 'variables', Object.getOwnPropertyDescriptor(Struct.prototype, 'variables'));
  Object.defineProperty(Indicator.prototype, 'indicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'indicator'));
  Object.defineProperty(Indicator.prototype, 'argsList', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsList'));
  Object.defineProperty(Indicator.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Struct.prototype, 'argsSequence'));
  Indicator.prototype.getArgAt = Struct.prototype.getArgAt;
  Indicator.prototype.get = Struct.prototype.get;
  Indicator.prototype.getSubstituted = Struct.prototype.getSubstituted;
  Indicator.prototype.as_6ddzm9$ = Struct.prototype.as_6ddzm9$;
  Indicator.prototype.castTo_6ddzm9$ = Struct.prototype.castTo_6ddzm9$;
  Object.defineProperty(Indicator.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Struct.prototype, 'isVariable'));
  Object.defineProperty(Indicator.prototype, 'isBound', Object.getOwnPropertyDescriptor(Struct.prototype, 'isBound'));
  Object.defineProperty(Indicator.prototype, 'isGround', Object.getOwnPropertyDescriptor(Struct.prototype, 'isGround'));
  Object.defineProperty(Indicator.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Struct.prototype, 'isConstant'));
  Object.defineProperty(Indicator.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Struct.prototype, 'isNumber'));
  Object.defineProperty(Indicator.prototype, 'isInt', Object.getOwnPropertyDescriptor(Struct.prototype, 'isInt'));
  Object.defineProperty(Indicator.prototype, 'isReal', Object.getOwnPropertyDescriptor(Struct.prototype, 'isReal'));
  Indicator.prototype.applySubstitution = Struct.prototype.applySubstitution;
  Indicator.prototype.apply = Struct.prototype.apply;
  Indicator.prototype.accept = Struct.prototype.accept;
  Object.defineProperty(Numeric.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Constant.prototype, 'isConstant'));
  Numeric.prototype.as_6ddzm9$ = Constant.prototype.as_6ddzm9$;
  Numeric.prototype.castTo_6ddzm9$ = Constant.prototype.castTo_6ddzm9$;
  Object.defineProperty(Numeric.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Constant.prototype, 'isVariable'));
  Object.defineProperty(Numeric.prototype, 'isBound', Object.getOwnPropertyDescriptor(Constant.prototype, 'isBound'));
  Object.defineProperty(Numeric.prototype, 'isGround', Object.getOwnPropertyDescriptor(Constant.prototype, 'isGround'));
  Object.defineProperty(Numeric.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Constant.prototype, 'isStruct'));
  Object.defineProperty(Numeric.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Constant.prototype, 'isAtom'));
  Object.defineProperty(Numeric.prototype, 'isInt', Object.getOwnPropertyDescriptor(Constant.prototype, 'isInt'));
  Object.defineProperty(Numeric.prototype, 'isReal', Object.getOwnPropertyDescriptor(Constant.prototype, 'isReal'));
  Object.defineProperty(Numeric.prototype, 'isList', Object.getOwnPropertyDescriptor(Constant.prototype, 'isList'));
  Object.defineProperty(Numeric.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Constant.prototype, 'isTuple'));
  Object.defineProperty(Numeric.prototype, 'isSet', Object.getOwnPropertyDescriptor(Constant.prototype, 'isSet'));
  Object.defineProperty(Numeric.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Constant.prototype, 'isEmptySet'));
  Object.defineProperty(Numeric.prototype, 'isClause', Object.getOwnPropertyDescriptor(Constant.prototype, 'isClause'));
  Object.defineProperty(Numeric.prototype, 'isRule', Object.getOwnPropertyDescriptor(Constant.prototype, 'isRule'));
  Object.defineProperty(Numeric.prototype, 'isFact', Object.getOwnPropertyDescriptor(Constant.prototype, 'isFact'));
  Object.defineProperty(Numeric.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Constant.prototype, 'isDirective'));
  Object.defineProperty(Numeric.prototype, 'isCons', Object.getOwnPropertyDescriptor(Constant.prototype, 'isCons'));
  Object.defineProperty(Numeric.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Constant.prototype, 'isEmptyList'));
  Object.defineProperty(Numeric.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Constant.prototype, 'isTrue'));
  Object.defineProperty(Numeric.prototype, 'isFail', Object.getOwnPropertyDescriptor(Constant.prototype, 'isFail'));
  Object.defineProperty(Numeric.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Constant.prototype, 'isIndicator'));
  Numeric.prototype.applySubstitution = Constant.prototype.applySubstitution;
  Numeric.prototype.apply = Constant.prototype.apply;
  Numeric.prototype.getSubstituted = Constant.prototype.getSubstituted;
  Numeric.prototype.accept = Constant.prototype.accept;
  Object.defineProperty(Integer.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isNumber'));
  Object.defineProperty(Integer.prototype, 'variables', Object.getOwnPropertyDescriptor(Numeric.prototype, 'variables'));
  Integer.prototype.compareTo_11rb$ = Numeric.prototype.compareTo_11rb$;
  Object.defineProperty(Integer.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isConstant'));
  Integer.prototype.as_6ddzm9$ = Numeric.prototype.as_6ddzm9$;
  Integer.prototype.castTo_6ddzm9$ = Numeric.prototype.castTo_6ddzm9$;
  Object.defineProperty(Integer.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isVariable'));
  Object.defineProperty(Integer.prototype, 'isBound', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isBound'));
  Object.defineProperty(Integer.prototype, 'isGround', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isGround'));
  Object.defineProperty(Integer.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isStruct'));
  Object.defineProperty(Integer.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isAtom'));
  Object.defineProperty(Integer.prototype, 'isReal', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isReal'));
  Object.defineProperty(Integer.prototype, 'isList', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isList'));
  Object.defineProperty(Integer.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isTuple'));
  Object.defineProperty(Integer.prototype, 'isSet', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isSet'));
  Object.defineProperty(Integer.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isEmptySet'));
  Object.defineProperty(Integer.prototype, 'isClause', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isClause'));
  Object.defineProperty(Integer.prototype, 'isRule', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isRule'));
  Object.defineProperty(Integer.prototype, 'isFact', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isFact'));
  Object.defineProperty(Integer.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isDirective'));
  Object.defineProperty(Integer.prototype, 'isCons', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isCons'));
  Object.defineProperty(Integer.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isEmptyList'));
  Object.defineProperty(Integer.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isTrue'));
  Object.defineProperty(Integer.prototype, 'isFail', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isFail'));
  Object.defineProperty(Integer.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isIndicator'));
  Integer.prototype.applySubstitution = Numeric.prototype.applySubstitution;
  Integer.prototype.apply = Numeric.prototype.apply;
  Integer.prototype.getSubstituted = Numeric.prototype.getSubstituted;
  Integer.prototype.accept = Numeric.prototype.accept;
  Object.defineProperty(Real.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isNumber'));
  Object.defineProperty(Real.prototype, 'variables', Object.getOwnPropertyDescriptor(Numeric.prototype, 'variables'));
  Real.prototype.compareTo_11rb$ = Numeric.prototype.compareTo_11rb$;
  Object.defineProperty(Real.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isConstant'));
  Real.prototype.as_6ddzm9$ = Numeric.prototype.as_6ddzm9$;
  Real.prototype.castTo_6ddzm9$ = Numeric.prototype.castTo_6ddzm9$;
  Object.defineProperty(Real.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isVariable'));
  Object.defineProperty(Real.prototype, 'isBound', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isBound'));
  Object.defineProperty(Real.prototype, 'isGround', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isGround'));
  Object.defineProperty(Real.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isStruct'));
  Object.defineProperty(Real.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isAtom'));
  Object.defineProperty(Real.prototype, 'isInt', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isInt'));
  Object.defineProperty(Real.prototype, 'isList', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isList'));
  Object.defineProperty(Real.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isTuple'));
  Object.defineProperty(Real.prototype, 'isSet', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isSet'));
  Object.defineProperty(Real.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isEmptySet'));
  Object.defineProperty(Real.prototype, 'isClause', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isClause'));
  Object.defineProperty(Real.prototype, 'isRule', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isRule'));
  Object.defineProperty(Real.prototype, 'isFact', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isFact'));
  Object.defineProperty(Real.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isDirective'));
  Object.defineProperty(Real.prototype, 'isCons', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isCons'));
  Object.defineProperty(Real.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isEmptyList'));
  Object.defineProperty(Real.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isTrue'));
  Object.defineProperty(Real.prototype, 'isFail', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isFail'));
  Object.defineProperty(Real.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isIndicator'));
  Real.prototype.applySubstitution = Numeric.prototype.applySubstitution;
  Real.prototype.apply = Numeric.prototype.apply;
  Real.prototype.getSubstituted = Numeric.prototype.getSubstituted;
  Real.prototype.accept = Numeric.prototype.accept;
  TermFormatter.prototype.visitToTerm = TermVisitor.prototype.visitToTerm;
  TermFormatter.prototype.visitToVar = TermVisitor.prototype.visitToVar;
  TermFormatter.prototype.visitToConstant = TermVisitor.prototype.visitToConstant;
  TermFormatter.prototype.visitToStruct = TermVisitor.prototype.visitToStruct;
  TermFormatter.prototype.visitToAtom = TermVisitor.prototype.visitToAtom;
  TermFormatter.prototype.visitToTruth = TermVisitor.prototype.visitToTruth;
  TermFormatter.prototype.visitToNumeric = TermVisitor.prototype.visitToNumeric;
  TermFormatter.prototype.visitToInteger = TermVisitor.prototype.visitToInteger;
  TermFormatter.prototype.visitToReal = TermVisitor.prototype.visitToReal;
  TermFormatter.prototype.visitToSet = TermVisitor.prototype.visitToSet;
  TermFormatter.prototype.visitToEmpty = TermVisitor.prototype.visitToEmpty;
  TermFormatter.prototype.visitToEmptySet = TermVisitor.prototype.visitToEmptySet;
  TermFormatter.prototype.visitToList = TermVisitor.prototype.visitToList;
  TermFormatter.prototype.visitToCons = TermVisitor.prototype.visitToCons;
  TermFormatter.prototype.visitToEmptyList = TermVisitor.prototype.visitToEmptyList;
  TermFormatter.prototype.visitToTuple = TermVisitor.prototype.visitToTuple;
  TermFormatter.prototype.visitToIndicator = TermVisitor.prototype.visitToIndicator;
  TermFormatter.prototype.visitToClause = TermVisitor.prototype.visitToClause;
  TermFormatter.prototype.visitToRule = TermVisitor.prototype.visitToRule;
  TermFormatter.prototype.visitToFact = TermVisitor.prototype.visitToFact;
  TermFormatter.prototype.visitToDirective = TermVisitor.prototype.visitToDirective;
  TermFormatter.prototype.visitTerm = TermVisitor.prototype.visitTerm;
  TermFormatter.prototype.visitVar = TermVisitor.prototype.visitVar;
  TermFormatter.prototype.visitConstant = TermVisitor.prototype.visitConstant;
  TermFormatter.prototype.visitStruct = TermVisitor.prototype.visitStruct;
  TermFormatter.prototype.visitAtom = TermVisitor.prototype.visitAtom;
  TermFormatter.prototype.visitTruth = TermVisitor.prototype.visitTruth;
  TermFormatter.prototype.visitNumeric = TermVisitor.prototype.visitNumeric;
  TermFormatter.prototype.visitInteger = TermVisitor.prototype.visitInteger;
  TermFormatter.prototype.visitReal = TermVisitor.prototype.visitReal;
  TermFormatter.prototype.visitSet = TermVisitor.prototype.visitSet;
  TermFormatter.prototype.visitEmpty = TermVisitor.prototype.visitEmpty;
  TermFormatter.prototype.visitEmptySet = TermVisitor.prototype.visitEmptySet;
  TermFormatter.prototype.visitList = TermVisitor.prototype.visitList;
  TermFormatter.prototype.visitCons = TermVisitor.prototype.visitCons;
  TermFormatter.prototype.visitEmptyList = TermVisitor.prototype.visitEmptyList;
  TermFormatter.prototype.visitTuple = TermVisitor.prototype.visitTuple;
  TermFormatter.prototype.visitIndicator = TermVisitor.prototype.visitIndicator;
  TermFormatter.prototype.visitClause = TermVisitor.prototype.visitClause;
  TermFormatter.prototype.visitRule = TermVisitor.prototype.visitRule;
  TermFormatter.prototype.visitFact = TermVisitor.prototype.visitFact;
  TermFormatter.prototype.visitDirective = TermVisitor.prototype.visitDirective;
  Object.defineProperty(Truth.prototype, 'args', Object.getOwnPropertyDescriptor(Atom.prototype, 'args'));
  Object.defineProperty(Truth.prototype, 'arity', Object.getOwnPropertyDescriptor(Atom.prototype, 'arity'));
  Object.defineProperty(Truth.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Atom.prototype, 'isAtom'));
  Object.defineProperty(Truth.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptySet'));
  Object.defineProperty(Truth.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptyList'));
  Object.defineProperty(Truth.prototype, 'value', Object.getOwnPropertyDescriptor(Atom.prototype, 'value'));
  Object.defineProperty(Truth.prototype, 'argsList', Object.getOwnPropertyDescriptor(Atom.prototype, 'argsList'));
  Object.defineProperty(Truth.prototype, 'variables', Object.getOwnPropertyDescriptor(Atom.prototype, 'variables'));
  Object.defineProperty(Truth.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Atom.prototype, 'isStruct'));
  Object.defineProperty(Truth.prototype, 'isClause', Object.getOwnPropertyDescriptor(Atom.prototype, 'isClause'));
  Object.defineProperty(Truth.prototype, 'isRule', Object.getOwnPropertyDescriptor(Atom.prototype, 'isRule'));
  Object.defineProperty(Truth.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Atom.prototype, 'isDirective'));
  Object.defineProperty(Truth.prototype, 'isFact', Object.getOwnPropertyDescriptor(Atom.prototype, 'isFact'));
  Object.defineProperty(Truth.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Atom.prototype, 'isTuple'));
  Object.defineProperty(Truth.prototype, 'isList', Object.getOwnPropertyDescriptor(Atom.prototype, 'isList'));
  Object.defineProperty(Truth.prototype, 'isCons', Object.getOwnPropertyDescriptor(Atom.prototype, 'isCons'));
  Object.defineProperty(Truth.prototype, 'isSet', Object.getOwnPropertyDescriptor(Atom.prototype, 'isSet'));
  Object.defineProperty(Truth.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Atom.prototype, 'isIndicator'));
  Object.defineProperty(Truth.prototype, 'indicator', Object.getOwnPropertyDescriptor(Atom.prototype, 'indicator'));
  Object.defineProperty(Truth.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Atom.prototype, 'argsSequence'));
  Truth.prototype.getArgAt = Atom.prototype.getArgAt;
  Truth.prototype.get = Atom.prototype.get;
  Truth.prototype.getSubstituted = Atom.prototype.getSubstituted;
  Truth.prototype.as_6ddzm9$ = Atom.prototype.as_6ddzm9$;
  Truth.prototype.castTo_6ddzm9$ = Atom.prototype.castTo_6ddzm9$;
  Object.defineProperty(Truth.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Atom.prototype, 'isVariable'));
  Object.defineProperty(Truth.prototype, 'isBound', Object.getOwnPropertyDescriptor(Atom.prototype, 'isBound'));
  Object.defineProperty(Truth.prototype, 'isGround', Object.getOwnPropertyDescriptor(Atom.prototype, 'isGround'));
  Object.defineProperty(Truth.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Atom.prototype, 'isConstant'));
  Object.defineProperty(Truth.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Atom.prototype, 'isNumber'));
  Object.defineProperty(Truth.prototype, 'isInt', Object.getOwnPropertyDescriptor(Atom.prototype, 'isInt'));
  Object.defineProperty(Truth.prototype, 'isReal', Object.getOwnPropertyDescriptor(Atom.prototype, 'isReal'));
  Truth.prototype.applySubstitution = Atom.prototype.applySubstitution;
  Truth.prototype.apply = Atom.prototype.apply;
  Truth.prototype.accept = Atom.prototype.accept;
  Object.defineProperty(Tuple.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isStruct'));
  Object.defineProperty(Tuple.prototype, 'isClause', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isClause'));
  Object.defineProperty(Tuple.prototype, 'isRule', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isRule'));
  Object.defineProperty(Tuple.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isDirective'));
  Object.defineProperty(Tuple.prototype, 'isFact', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFact'));
  Object.defineProperty(Tuple.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isAtom'));
  Object.defineProperty(Tuple.prototype, 'isList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isList'));
  Object.defineProperty(Tuple.prototype, 'isCons', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isCons'));
  Object.defineProperty(Tuple.prototype, 'isSet', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isSet'));
  Object.defineProperty(Tuple.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isEmptySet'));
  Object.defineProperty(Tuple.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isEmptyList'));
  Object.defineProperty(Tuple.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isTrue'));
  Object.defineProperty(Tuple.prototype, 'isFail', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isFail'));
  Object.defineProperty(Tuple.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isIndicator'));
  Object.defineProperty(Tuple.prototype, 'variables', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'variables'));
  Object.defineProperty(Tuple.prototype, 'indicator', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'indicator'));
  Object.defineProperty(Tuple.prototype, 'argsList', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsList'));
  Object.defineProperty(Tuple.prototype, 'argsSequence', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'argsSequence'));
  Tuple.prototype.getArgAt = Collection_0.prototype.getArgAt;
  Tuple.prototype.get = Collection_0.prototype.get;
  Tuple.prototype.getSubstituted = Collection_0.prototype.getSubstituted;
  Tuple.prototype.as_6ddzm9$ = Collection_0.prototype.as_6ddzm9$;
  Tuple.prototype.castTo_6ddzm9$ = Collection_0.prototype.castTo_6ddzm9$;
  Object.defineProperty(Tuple.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isVariable'));
  Object.defineProperty(Tuple.prototype, 'isBound', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isBound'));
  Object.defineProperty(Tuple.prototype, 'isGround', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isGround'));
  Object.defineProperty(Tuple.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isConstant'));
  Object.defineProperty(Tuple.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isNumber'));
  Object.defineProperty(Tuple.prototype, 'isInt', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isInt'));
  Object.defineProperty(Tuple.prototype, 'isReal', Object.getOwnPropertyDescriptor(Collection_0.prototype, 'isReal'));
  Tuple.prototype.applySubstitution = Collection_0.prototype.applySubstitution;
  Tuple.prototype.apply = Collection_0.prototype.apply;
  Tuple.prototype.accept = Collection_0.prototype.accept;
  Var.prototype.as_6ddzm9$ = Term.prototype.as_6ddzm9$;
  Var.prototype.castTo_6ddzm9$ = Term.prototype.castTo_6ddzm9$;
  Object.defineProperty(Var.prototype, 'isBound', Object.getOwnPropertyDescriptor(Term.prototype, 'isBound'));
  Object.defineProperty(Var.prototype, 'isGround', Object.getOwnPropertyDescriptor(Term.prototype, 'isGround'));
  Object.defineProperty(Var.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Term.prototype, 'isStruct'));
  Object.defineProperty(Var.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Term.prototype, 'isAtom'));
  Object.defineProperty(Var.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Term.prototype, 'isConstant'));
  Object.defineProperty(Var.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Term.prototype, 'isNumber'));
  Object.defineProperty(Var.prototype, 'isInt', Object.getOwnPropertyDescriptor(Term.prototype, 'isInt'));
  Object.defineProperty(Var.prototype, 'isReal', Object.getOwnPropertyDescriptor(Term.prototype, 'isReal'));
  Object.defineProperty(Var.prototype, 'isList', Object.getOwnPropertyDescriptor(Term.prototype, 'isList'));
  Object.defineProperty(Var.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Term.prototype, 'isTuple'));
  Object.defineProperty(Var.prototype, 'isSet', Object.getOwnPropertyDescriptor(Term.prototype, 'isSet'));
  Object.defineProperty(Var.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptySet'));
  Object.defineProperty(Var.prototype, 'isClause', Object.getOwnPropertyDescriptor(Term.prototype, 'isClause'));
  Object.defineProperty(Var.prototype, 'isRule', Object.getOwnPropertyDescriptor(Term.prototype, 'isRule'));
  Object.defineProperty(Var.prototype, 'isFact', Object.getOwnPropertyDescriptor(Term.prototype, 'isFact'));
  Object.defineProperty(Var.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Term.prototype, 'isDirective'));
  Object.defineProperty(Var.prototype, 'isCons', Object.getOwnPropertyDescriptor(Term.prototype, 'isCons'));
  Object.defineProperty(Var.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptyList'));
  Object.defineProperty(Var.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Term.prototype, 'isTrue'));
  Object.defineProperty(Var.prototype, 'isFail', Object.getOwnPropertyDescriptor(Term.prototype, 'isFail'));
  Object.defineProperty(Var.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Term.prototype, 'isIndicator'));
  Var.prototype.applySubstitution = Term.prototype.applySubstitution;
  Var.prototype.apply = Term.prototype.apply;
  Var.prototype.getSubstituted = Term.prototype.getSubstituted;
  Var.prototype.accept = Term.prototype.accept;
  AbstractTermFormatter.prototype.format = TermFormatter.prototype.format;
  AbstractTermFormatter.prototype.visitToTerm = TermFormatter.prototype.visitToTerm;
  AbstractTermFormatter.prototype.visitToVar = TermFormatter.prototype.visitToVar;
  AbstractTermFormatter.prototype.visitToConstant = TermFormatter.prototype.visitToConstant;
  AbstractTermFormatter.prototype.visitToStruct = TermFormatter.prototype.visitToStruct;
  AbstractTermFormatter.prototype.visitToAtom = TermFormatter.prototype.visitToAtom;
  AbstractTermFormatter.prototype.visitToTruth = TermFormatter.prototype.visitToTruth;
  AbstractTermFormatter.prototype.visitToNumeric = TermFormatter.prototype.visitToNumeric;
  AbstractTermFormatter.prototype.visitToInteger = TermFormatter.prototype.visitToInteger;
  AbstractTermFormatter.prototype.visitToReal = TermFormatter.prototype.visitToReal;
  AbstractTermFormatter.prototype.visitToSet = TermFormatter.prototype.visitToSet;
  AbstractTermFormatter.prototype.visitToEmpty = TermFormatter.prototype.visitToEmpty;
  AbstractTermFormatter.prototype.visitToEmptySet = TermFormatter.prototype.visitToEmptySet;
  AbstractTermFormatter.prototype.visitToList = TermFormatter.prototype.visitToList;
  AbstractTermFormatter.prototype.visitToCons = TermFormatter.prototype.visitToCons;
  AbstractTermFormatter.prototype.visitToEmptyList = TermFormatter.prototype.visitToEmptyList;
  AbstractTermFormatter.prototype.visitToTuple = TermFormatter.prototype.visitToTuple;
  AbstractTermFormatter.prototype.visitToIndicator = TermFormatter.prototype.visitToIndicator;
  AbstractTermFormatter.prototype.visitToClause = TermFormatter.prototype.visitToClause;
  AbstractTermFormatter.prototype.visitToRule = TermFormatter.prototype.visitToRule;
  AbstractTermFormatter.prototype.visitToFact = TermFormatter.prototype.visitToFact;
  AbstractTermFormatter.prototype.visitToDirective = TermFormatter.prototype.visitToDirective;
  AbstractTermFormatter.prototype.visitTerm = TermFormatter.prototype.visitTerm;
  AbstractTermFormatter.prototype.visitVar = TermFormatter.prototype.visitVar;
  AbstractTermFormatter.prototype.visitConstant = TermFormatter.prototype.visitConstant;
  AbstractTermFormatter.prototype.visitAtom = TermFormatter.prototype.visitAtom;
  AbstractTermFormatter.prototype.visitTruth = TermFormatter.prototype.visitTruth;
  AbstractTermFormatter.prototype.visitNumeric = TermFormatter.prototype.visitNumeric;
  AbstractTermFormatter.prototype.visitInteger = TermFormatter.prototype.visitInteger;
  AbstractTermFormatter.prototype.visitReal = TermFormatter.prototype.visitReal;
  AbstractTermFormatter.prototype.visitEmpty = TermFormatter.prototype.visitEmpty;
  AbstractTermFormatter.prototype.visitEmptySet = TermFormatter.prototype.visitEmptySet;
  AbstractTermFormatter.prototype.visitList = TermFormatter.prototype.visitList;
  AbstractTermFormatter.prototype.visitEmptyList = TermFormatter.prototype.visitEmptyList;
  AbstractTermFormatter.prototype.visitClause = TermFormatter.prototype.visitClause;
  TermImpl.prototype.as_6ddzm9$ = Term.prototype.as_6ddzm9$;
  TermImpl.prototype.castTo_6ddzm9$ = Term.prototype.castTo_6ddzm9$;
  Object.defineProperty(TermImpl.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Term.prototype, 'isVariable'));
  Object.defineProperty(TermImpl.prototype, 'isBound', Object.getOwnPropertyDescriptor(Term.prototype, 'isBound'));
  Object.defineProperty(TermImpl.prototype, 'isGround', Object.getOwnPropertyDescriptor(Term.prototype, 'isGround'));
  Object.defineProperty(TermImpl.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Term.prototype, 'isStruct'));
  Object.defineProperty(TermImpl.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Term.prototype, 'isAtom'));
  Object.defineProperty(TermImpl.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Term.prototype, 'isConstant'));
  Object.defineProperty(TermImpl.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Term.prototype, 'isNumber'));
  Object.defineProperty(TermImpl.prototype, 'isInt', Object.getOwnPropertyDescriptor(Term.prototype, 'isInt'));
  Object.defineProperty(TermImpl.prototype, 'isReal', Object.getOwnPropertyDescriptor(Term.prototype, 'isReal'));
  Object.defineProperty(TermImpl.prototype, 'isList', Object.getOwnPropertyDescriptor(Term.prototype, 'isList'));
  Object.defineProperty(TermImpl.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Term.prototype, 'isTuple'));
  Object.defineProperty(TermImpl.prototype, 'isSet', Object.getOwnPropertyDescriptor(Term.prototype, 'isSet'));
  Object.defineProperty(TermImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptySet'));
  Object.defineProperty(TermImpl.prototype, 'isClause', Object.getOwnPropertyDescriptor(Term.prototype, 'isClause'));
  Object.defineProperty(TermImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Term.prototype, 'isRule'));
  Object.defineProperty(TermImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Term.prototype, 'isFact'));
  Object.defineProperty(TermImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Term.prototype, 'isDirective'));
  Object.defineProperty(TermImpl.prototype, 'isCons', Object.getOwnPropertyDescriptor(Term.prototype, 'isCons'));
  Object.defineProperty(TermImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptyList'));
  Object.defineProperty(TermImpl.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Term.prototype, 'isTrue'));
  Object.defineProperty(TermImpl.prototype, 'isFail', Object.getOwnPropertyDescriptor(Term.prototype, 'isFail'));
  Object.defineProperty(TermImpl.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Term.prototype, 'isIndicator'));
  TermImpl.prototype.freshCopy = Term.prototype.freshCopy;
  TermImpl.prototype.freshCopyFromScope = Term.prototype.freshCopyFromScope;
  TermImpl.prototype.applySubstitution = Term.prototype.applySubstitution;
  TermImpl.prototype.apply = Term.prototype.apply;
  TermImpl.prototype.getSubstituted = Term.prototype.getSubstituted;
  TermImpl.prototype.accept = Term.prototype.accept;
  Object.defineProperty(StructImpl.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Struct.prototype, 'isStruct'));
  Object.defineProperty(StructImpl.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Struct.prototype, 'isAtom'));
  Object.defineProperty(StructImpl.prototype, 'isList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isList'));
  Object.defineProperty(StructImpl.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTuple'));
  Object.defineProperty(StructImpl.prototype, 'isSet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isSet'));
  Object.defineProperty(StructImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptySet'));
  Object.defineProperty(StructImpl.prototype, 'isClause', Object.getOwnPropertyDescriptor(Struct.prototype, 'isClause'));
  Object.defineProperty(StructImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Struct.prototype, 'isRule'));
  Object.defineProperty(StructImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFact'));
  Object.defineProperty(StructImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Struct.prototype, 'isDirective'));
  Object.defineProperty(StructImpl.prototype, 'isCons', Object.getOwnPropertyDescriptor(Struct.prototype, 'isCons'));
  Object.defineProperty(StructImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Struct.prototype, 'isEmptyList'));
  Object.defineProperty(StructImpl.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Struct.prototype, 'isTrue'));
  Object.defineProperty(StructImpl.prototype, 'isFail', Object.getOwnPropertyDescriptor(Struct.prototype, 'isFail'));
  Object.defineProperty(StructImpl.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Struct.prototype, 'isIndicator'));
  StructImpl.prototype.freshCopy = Struct.prototype.freshCopy;
  StructImpl.prototype.freshCopyFromScope = Struct.prototype.freshCopyFromScope;
  StructImpl.prototype.get = Struct.prototype.get;
  Object.defineProperty(StructImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Struct.prototype, 'arity'));
  StructImpl.prototype.getArgAt = Struct.prototype.getArgAt;
  Object.defineProperty(AtomImpl.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Atom.prototype, 'isAtom'));
  Object.defineProperty(AtomImpl.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Atom.prototype, 'isConstant'));
  Object.defineProperty(AtomImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptySet'));
  Object.defineProperty(AtomImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Atom.prototype, 'isEmptyList'));
  Object.defineProperty(AtomImpl.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Atom.prototype, 'isTrue'));
  Object.defineProperty(AtomImpl.prototype, 'isFail', Object.getOwnPropertyDescriptor(Atom.prototype, 'isFail'));
  AtomImpl.prototype.freshCopy = Atom.prototype.freshCopy;
  AtomImpl.prototype.freshCopyFromScope = Atom.prototype.freshCopyFromScope;
  Object.defineProperty(AtomImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Atom.prototype, 'arity'));
  Object.defineProperty(AtomImpl.prototype, 'value', Object.getOwnPropertyDescriptor(Atom.prototype, 'value'));
  Object.defineProperty(ClauseImpl.prototype, 'isClause', Object.getOwnPropertyDescriptor(Clause.prototype, 'isClause'));
  Object.defineProperty(ClauseImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Clause.prototype, 'isRule'));
  Object.defineProperty(ClauseImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Clause.prototype, 'isFact'));
  Object.defineProperty(ClauseImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Clause.prototype, 'isDirective'));
  ClauseImpl.prototype.freshCopy = Clause.prototype.freshCopy;
  ClauseImpl.prototype.freshCopyFromScope = Clause.prototype.freshCopyFromScope;
  Object.defineProperty(ClauseImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Clause.prototype, 'arity'));
  Object.defineProperty(ConsImpl.prototype, 'isList', Object.getOwnPropertyDescriptor(Cons.prototype, 'isList'));
  Object.defineProperty(ConsImpl.prototype, 'isCons', Object.getOwnPropertyDescriptor(Cons.prototype, 'isCons'));
  Object.defineProperty(ConsImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Cons.prototype, 'isEmptyList'));
  ConsImpl.prototype.freshCopy = Cons.prototype.freshCopy;
  ConsImpl.prototype.freshCopyFromScope = Cons.prototype.freshCopyFromScope;
  Object.defineProperty(ConsImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Cons.prototype, 'arity'));
  Object.defineProperty(ConsImpl.prototype, 'size', Object.getOwnPropertyDescriptor(Cons.prototype, 'size'));
  ConsImpl.prototype.toArray = Cons.prototype.toArray;
  ConsImpl.prototype.toList = Cons.prototype.toList;
  ConsImpl.prototype.toSequence = Cons.prototype.toSequence;
  Object.defineProperty(DirectiveImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Directive.prototype, 'isRule'));
  Object.defineProperty(DirectiveImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Directive.prototype, 'isFact'));
  Object.defineProperty(DirectiveImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Directive.prototype, 'isDirective'));
  DirectiveImpl.prototype.freshCopy = Directive.prototype.freshCopy;
  DirectiveImpl.prototype.freshCopyFromScope = Directive.prototype.freshCopyFromScope;
  Object.defineProperty(EmptyListImpl.prototype, 'isList', Object.getOwnPropertyDescriptor(EmptyList.prototype, 'isList'));
  Object.defineProperty(EmptyListImpl.prototype, 'isCons', Object.getOwnPropertyDescriptor(EmptyList.prototype, 'isCons'));
  Object.defineProperty(EmptyListImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(EmptyList.prototype, 'isEmptyList'));
  EmptyListImpl.prototype.freshCopy = EmptyList.prototype.freshCopy;
  EmptyListImpl.prototype.freshCopyFromScope = EmptyList.prototype.freshCopyFromScope;
  Object.defineProperty(EmptyListImpl.prototype, 'isWellFormed', Object.getOwnPropertyDescriptor(EmptyList.prototype, 'isWellFormed'));
  EmptyListImpl.prototype.toArray = EmptyList.prototype.toArray;
  EmptyListImpl.prototype.toList = EmptyList.prototype.toList;
  EmptyListImpl.prototype.toSequence = EmptyList.prototype.toSequence;
  Object.defineProperty(EmptyListImpl.prototype, 'size', Object.getOwnPropertyDescriptor(EmptyList.prototype, 'size'));
  Object.defineProperty(SetImpl.prototype, 'isSet', Object.getOwnPropertyDescriptor(Set_0.prototype, 'isSet'));
  Object.defineProperty(SetImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Set_0.prototype, 'isEmptySet'));
  SetImpl.prototype.freshCopy = Set_0.prototype.freshCopy;
  SetImpl.prototype.freshCopyFromScope = Set_0.prototype.freshCopyFromScope;
  SetImpl.prototype.toArray = Set_0.prototype.toArray;
  SetImpl.prototype.toList = Set_0.prototype.toList;
  SetImpl.prototype.toSequence = Set_0.prototype.toSequence;
  Object.defineProperty(EmptySetImpl.prototype, 'isAtom', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isAtom'));
  Object.defineProperty(EmptySetImpl.prototype, 'isConstant', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isConstant'));
  Object.defineProperty(EmptySetImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isEmptySet'));
  Object.defineProperty(EmptySetImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isEmptyList'));
  Object.defineProperty(EmptySetImpl.prototype, 'isTrue', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isTrue'));
  Object.defineProperty(EmptySetImpl.prototype, 'isFail', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'isFail'));
  EmptySetImpl.prototype.freshCopy = EmptySet.prototype.freshCopy;
  EmptySetImpl.prototype.freshCopyFromScope = EmptySet.prototype.freshCopyFromScope;
  Object.defineProperty(EmptySetImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'arity'));
  Object.defineProperty(EmptySetImpl.prototype, 'value', Object.getOwnPropertyDescriptor(EmptySet.prototype, 'value'));
  Object.defineProperty(RuleImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Rule.prototype, 'isRule'));
  Object.defineProperty(RuleImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Rule.prototype, 'isFact'));
  Object.defineProperty(RuleImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Rule.prototype, 'isDirective'));
  RuleImpl.prototype.freshCopy = Rule.prototype.freshCopy;
  RuleImpl.prototype.freshCopyFromScope = Rule.prototype.freshCopyFromScope;
  Object.defineProperty(FactImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Fact.prototype, 'isFact'));
  FactImpl.prototype.freshCopy = Fact.prototype.freshCopy;
  FactImpl.prototype.freshCopyFromScope = Fact.prototype.freshCopyFromScope;
  Object.defineProperty(IndicatorImpl.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Indicator.prototype, 'isIndicator'));
  IndicatorImpl.prototype.freshCopy = Indicator.prototype.freshCopy;
  IndicatorImpl.prototype.freshCopyFromScope = Indicator.prototype.freshCopyFromScope;
  Object.defineProperty(IndicatorImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Indicator.prototype, 'arity'));
  Object.defineProperty(IndicatorImpl.prototype, 'isWellFormed', Object.getOwnPropertyDescriptor(Indicator.prototype, 'isWellFormed'));
  Object.defineProperty(NumericImpl.prototype, 'variables', Object.getOwnPropertyDescriptor(Numeric.prototype, 'variables'));
  Object.defineProperty(NumericImpl.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isConstant'));
  Object.defineProperty(NumericImpl.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Numeric.prototype, 'isNumber'));
  NumericImpl.prototype.freshCopy = Numeric.prototype.freshCopy;
  NumericImpl.prototype.freshCopyFromScope = Numeric.prototype.freshCopyFromScope;
  NumericImpl.prototype.compareTo_11rb$ = Numeric.prototype.compareTo_11rb$;
  Object.defineProperty(IntegerImpl.prototype, 'isInt', Object.getOwnPropertyDescriptor(Integer.prototype, 'isInt'));
  IntegerImpl.prototype.freshCopy = Integer.prototype.freshCopy;
  IntegerImpl.prototype.freshCopyFromScope = Integer.prototype.freshCopyFromScope;
  Object.defineProperty(RealImpl.prototype, 'isReal', Object.getOwnPropertyDescriptor(Real.prototype, 'isReal'));
  RealImpl.prototype.freshCopy = Real.prototype.freshCopy;
  RealImpl.prototype.freshCopyFromScope = Real.prototype.freshCopyFromScope;
  Object.defineProperty(ScopeImpl.prototype, '_', Object.getOwnPropertyDescriptor(Scope.prototype, '_'));
  ScopeImpl.prototype.listFrom = Scope.prototype.listFrom;
  Object.defineProperty(TruthImpl.prototype, 'isFail', Object.getOwnPropertyDescriptor(Truth.prototype, 'isFail'));
  TruthImpl.prototype.freshCopy = Truth.prototype.freshCopy;
  TruthImpl.prototype.freshCopyFromScope = Truth.prototype.freshCopyFromScope;
  Object.defineProperty(TruthImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Truth.prototype, 'arity'));
  Object.defineProperty(TruthImpl.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Truth.prototype, 'isAtom'));
  Object.defineProperty(TruthImpl.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Truth.prototype, 'isEmptySet'));
  Object.defineProperty(TruthImpl.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Truth.prototype, 'isEmptyList'));
  Object.defineProperty(TruthImpl.prototype, 'value', Object.getOwnPropertyDescriptor(Truth.prototype, 'value'));
  Object.defineProperty(TruthImpl.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Truth.prototype, 'isStruct'));
  Object.defineProperty(TruthImpl.prototype, 'isClause', Object.getOwnPropertyDescriptor(Truth.prototype, 'isClause'));
  Object.defineProperty(TruthImpl.prototype, 'isRule', Object.getOwnPropertyDescriptor(Truth.prototype, 'isRule'));
  Object.defineProperty(TruthImpl.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Truth.prototype, 'isDirective'));
  Object.defineProperty(TruthImpl.prototype, 'isFact', Object.getOwnPropertyDescriptor(Truth.prototype, 'isFact'));
  Object.defineProperty(TruthImpl.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Truth.prototype, 'isTuple'));
  Object.defineProperty(TruthImpl.prototype, 'isList', Object.getOwnPropertyDescriptor(Truth.prototype, 'isList'));
  Object.defineProperty(TruthImpl.prototype, 'isCons', Object.getOwnPropertyDescriptor(Truth.prototype, 'isCons'));
  Object.defineProperty(TruthImpl.prototype, 'isSet', Object.getOwnPropertyDescriptor(Truth.prototype, 'isSet'));
  Object.defineProperty(TruthImpl.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Truth.prototype, 'isIndicator'));
  TruthImpl.prototype.getArgAt = Truth.prototype.getArgAt;
  TruthImpl.prototype.get = Truth.prototype.get;
  TruthImpl.prototype.getSubstituted = Truth.prototype.getSubstituted;
  TruthImpl.prototype.as_6ddzm9$ = Truth.prototype.as_6ddzm9$;
  TruthImpl.prototype.castTo_6ddzm9$ = Truth.prototype.castTo_6ddzm9$;
  Object.defineProperty(TruthImpl.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Truth.prototype, 'isVariable'));
  Object.defineProperty(TruthImpl.prototype, 'isBound', Object.getOwnPropertyDescriptor(Truth.prototype, 'isBound'));
  Object.defineProperty(TruthImpl.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Truth.prototype, 'isConstant'));
  Object.defineProperty(TruthImpl.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Truth.prototype, 'isNumber'));
  Object.defineProperty(TruthImpl.prototype, 'isInt', Object.getOwnPropertyDescriptor(Truth.prototype, 'isInt'));
  Object.defineProperty(TruthImpl.prototype, 'isReal', Object.getOwnPropertyDescriptor(Truth.prototype, 'isReal'));
  TruthImpl.prototype.applySubstitution = Truth.prototype.applySubstitution;
  TruthImpl.prototype.apply = Truth.prototype.apply;
  TruthImpl.prototype.accept = Truth.prototype.accept;
  Object.defineProperty(TupleImpl.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Tuple.prototype, 'isTuple'));
  TupleImpl.prototype.freshCopy = Tuple.prototype.freshCopy;
  TupleImpl.prototype.freshCopyFromScope = Tuple.prototype.freshCopyFromScope;
  Object.defineProperty(TupleImpl.prototype, 'arity', Object.getOwnPropertyDescriptor(Tuple.prototype, 'arity'));
  TupleImpl.prototype.toArray = Tuple.prototype.toArray;
  TupleImpl.prototype.toList = Tuple.prototype.toList;
  TupleImpl.prototype.toSequence = Tuple.prototype.toSequence;
  VarImpl.prototype.freshCopyFromScope = Var.prototype.freshCopyFromScope;
  Object.defineProperty(VarImpl.prototype, 'variables', Object.getOwnPropertyDescriptor(Var.prototype, 'variables'));
  Object.defineProperty(VarImpl.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Var.prototype, 'isVariable'));
  Kotlin.defineModule('@tuprolog/2p-core', _);
  return _;
}));



},{"kotlin":66,"kt-math":67}],5:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-core', 'antlr4', './PrologParser', 'antlr4/error', 'antlr4/atn', '@tuprolog/2p-parser-js', './PrologLexer', './Associativity', 'kt-math', './PrologParserVisitor'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-core'), require('antlr4'), require('./PrologParser'), require('antlr4/error'), require('antlr4/atn'), require('@tuprolog/2p-parser-js'), require('./PrologLexer'), require('./Associativity'), require('kt-math'), require('./PrologParserVisitor'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof antlr4 === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency 'antlr4' was not found. Please, check whether 'antlr4' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['./PrologParser'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency './PrologParser' was not found. Please, check whether './PrologParser' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['antlr4/error'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency 'antlr4/error' was not found. Please, check whether 'antlr4/error' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['antlr4/atn'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency 'antlr4/atn' was not found. Please, check whether 'antlr4/atn' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['@tuprolog/2p-parser-js'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency '@tuprolog/2p-parser-js' was not found. Please, check whether '@tuprolog/2p-parser-js' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['./PrologLexer'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency './PrologLexer' was not found. Please, check whether './PrologLexer' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['./Associativity'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency './Associativity' was not found. Please, check whether './Associativity' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['kt-math'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency 'kt-math' was not found. Please, check whether 'kt-math' is loaded prior to '@tuprolog/2p-parser-core'.");
    }if (typeof this['./PrologParserVisitor'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-core'. Its dependency './PrologParserVisitor' was not found. Please, check whether './PrologParserVisitor' is loaded prior to '@tuprolog/2p-parser-core'.");
    }root['@tuprolog/2p-parser-core'] = factory(typeof this['@tuprolog/2p-parser-core'] === 'undefined' ? {} : this['@tuprolog/2p-parser-core'], kotlin, this['@tuprolog/2p-core'], antlr4, this['./PrologParser'], this['antlr4/error'], this['antlr4/atn'], this['@tuprolog/2p-parser-js'], this['./PrologLexer'], this['./Associativity'], this['kt-math'], this['./PrologParserVisitor']);
  }
}(this, function (_, Kotlin, $module$_2p_core, $module$antlr4, $module$__PrologParser, $module$antlr4_error, $module$antlr4_atn, $module$_2p_parser_js, $module$__PrologLexer, $module$__Associativity, $module$kt_math, $module$__PrologParserVisitor) {
  'use strict';
  var toString = Kotlin.toString;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var ensureNotNull = Kotlin.ensureNotNull;
  var replace = Kotlin.kotlin.text.replace_680rmw$;
  var toBoxedChar = Kotlin.toBoxedChar;
  var TuPrologException = $module$_2p_core.it.unibo.tuprolog.core.exception.TuPrologException;
  var Struct = $module$_2p_core.it.unibo.tuprolog.core.Struct;
  var throwCCE = Kotlin.throwCCE;
  var Constant = $module$_2p_core.it.unibo.tuprolog.core.Constant;
  var Var = $module$_2p_core.it.unibo.tuprolog.core.Var;
  var Atom = $module$_2p_core.it.unibo.tuprolog.core.Atom;
  var Numeric = $module$_2p_core.it.unibo.tuprolog.core.Numeric;
  var Integer = $module$_2p_core.it.unibo.tuprolog.core.Integer;
  var Real = $module$_2p_core.it.unibo.tuprolog.core.Real;
  var Clause = $module$_2p_core.it.unibo.tuprolog.core.Clause;
  var equals = Kotlin.equals;
  var OperatorSet_init = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet_init_1gzv2l$;
  var OperatorSet = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Collection = Kotlin.kotlin.collections.Collection;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Fact = $module$_2p_core.it.unibo.tuprolog.core.Fact;
  var getKClass = Kotlin.getKClass;
  var Token = $module$antlr4.Token;
  var PrologParser = $module$__PrologParser.PrologParser;
  var ErrorListener = $module$antlr4_error.ErrorListener;
  var coerceAtLeast = Kotlin.kotlin.ranges.coerceAtLeast_dqglrj$;
  var PredictionMode = $module$antlr4_atn.PredictionMode;
  var isParseCancellationException = $module$_2p_parser_js.it.unibo.tuprolog.parser.isParseCancellationException_za3rmp$;
  var RecognitionException = $module$antlr4_error.RecognitionException;
  var isRecognitionException = $module$_2p_parser_js.it.unibo.tuprolog.parser.isRecognitionException_za3rmp$;
  var Throwable = Error;
  var InputStream_init = $module$antlr4.InputStream;
  var PrologLexer = $module$__PrologLexer.PrologLexer;
  var CommonTokenStream_init = $module$antlr4.CommonTokenStream;
  var BailErrorStrategy = $module$antlr4_error.BailErrorStrategy;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var Associativity = $module$__Associativity.Associativity;
  var generateSequence = Kotlin.kotlin.sequences.generateSequence_gexuht$;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var takeWhile = Kotlin.kotlin.sequences.takeWhile_euau3h$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var contains = Kotlin.kotlin.collections.contains_mjy6jw$;
  var asList = Kotlin.kotlin.collections.asList_us0mfu$;
  var Term = $module$_2p_core.it.unibo.tuprolog.core.Term;
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var asSequence = Kotlin.kotlin.collections.asSequence_us0mfu$;
  var getCallableRef = Kotlin.getCallableRef;
  var BigInteger = $module$kt_math.org.gciatto.kt.math.BigInteger;
  var contains_0 = Kotlin.kotlin.text.contains_li3zpu$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init;
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var toList = Kotlin.kotlin.collections.toList_us0mfu$;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var plus_0 = Kotlin.kotlin.sequences.plus_v0iwhp$;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var asSequence_0 = Kotlin.kotlin.collections.asSequence_7wnvza$;
  var toList_0 = Kotlin.kotlin.sequences.toList_veqyi0$;
  var PrologParserVisitor = $module$__PrologParserVisitor.PrologParserVisitor;
  var Scope = $module$_2p_core.it.unibo.tuprolog.core.Scope;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  ParseException.prototype = Object.create(TuPrologException.prototype);
  ParseException.prototype.constructor = ParseException;
  InvalidTermTypeException.prototype = Object.create(ParseException.prototype);
  InvalidTermTypeException.prototype.constructor = InvalidTermTypeException;
  PrologParserFactory$newErrorListener$ObjectLiteral.prototype = Object.create(ErrorListener.prototype);
  PrologParserFactory$newErrorListener$ObjectLiteral.prototype.constructor = PrologParserFactory$newErrorListener$ObjectLiteral;
  PrologVisitor.prototype = Object.create(PrologParserVisitor.prototype);
  PrologVisitor.prototype.constructor = PrologVisitor;
  function InvalidTermTypeException(input, offendingSymbol, expected, line, column, cause) {
    if (cause === void 0)
      cause = null;
    ParseException.call(this, input, offendingSymbol, line, column, 'Expecting ' + toString(expected.simpleName) + ', got `' + offendingSymbol + '` instead', cause);
    this.name = 'InvalidTermTypeException';
  }
  InvalidTermTypeException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InvalidTermTypeException',
    interfaces: [ParseException]
  };
  function ParseException(input, offendingSymbol, line, column, message, throwable) {
    TuPrologException.call(this, message, throwable);
    this.input = input;
    this.offendingSymbol = offendingSymbol;
    this.line = line;
    this.column = column;
    this.name = 'ParseException';
    this.clauseIndex = -1;
  }
  ParseException.prototype.toString = function () {
    return 'ParseException{' + "message='" + replace(ensureNotNull(this.message), '\\n', '\\\\n') + String.fromCharCode(toBoxedChar(39)) + ', line=' + toString(this.line) + ', column=' + toString(this.column) + ", offendingSymbol='" + this.offendingSymbol + String.fromCharCode(toBoxedChar(39)) + String.fromCharCode(toBoxedChar(125));
  };
  ParseException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ParseException',
    interfaces: [TuPrologException]
  };
  function TermParser() {
    TermParser$Companion_getInstance();
  }
  TermParser.prototype.parseTerm = function (input) {
    return this.parseTermWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseStructWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Struct) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseStruct = function (input) {
    return this.parseStructWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseConstantWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Constant) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseConstant = function (input) {
    return this.parseConstantWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseVarWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Var) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseVar = function (input) {
    return this.parseVarWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseAtomWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Atom) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseAtom = function (input) {
    return this.parseAtomWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseNumericWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Numeric) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseNumeric = function (input) {
    return this.parseNumericWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseIntegerWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Integer) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseInteger = function (input) {
    return this.parseIntegerWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseRealWithOperators = function (input, operators) {
    var tmp$;
    return Kotlin.isType(tmp$ = this.parseTermWithOperators(input, operators), Real) ? tmp$ : throwCCE();
  };
  TermParser.prototype.parseReal = function (input) {
    return this.parseRealWithOperators(input, this.defaultOperatorSet);
  };
  TermParser.prototype.parseClauseWithOperators = function (input, operators) {
    var any$result;
    any$break: do {
      var tmp$;
      if (Kotlin.isType(operators, Collection) && operators.isEmpty()) {
        any$result = false;
        break any$break;
      }tmp$ = operators.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (equals(element.functor, Clause.Companion.FUNCTOR)) {
          any$result = true;
          break any$break;
        }}
      any$result = false;
    }
     while (false);
    if (!any$result) {
      var message = 'Error while parsing string as Clause: the provided operator set has no ' + "operator for ':-'/1 or ':-'/1";
      throw IllegalArgumentException_init(message.toString());
    }return toClause(this.parseTermWithOperators(input, operators));
  };
  TermParser.prototype.parseClause = function (input) {
    return this.parseClauseWithOperators(input, this.defaultOperatorSet);
  };
  function TermParser$Companion() {
    TermParser$Companion_instance = this;
    this.withNoOperator = termParserWithOperators(OperatorSet.Companion.EMPTY);
    this.withStandardOperators = this.withOperatorSet(OperatorSet.Companion.STANDARD);
    this.withDefaultOperators = this.withOperatorSet(OperatorSet.Companion.DEFAULT);
  }
  TermParser$Companion.prototype.withOperatorSet = function (operators) {
    return termParserWithOperators(operators);
  };
  TermParser$Companion.prototype.withOperators = function (operators) {
    return this.withOperatorSet(OperatorSet_init(operators.slice()));
  };
  TermParser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TermParser$Companion_instance = null;
  function TermParser$Companion_getInstance() {
    if (TermParser$Companion_instance === null) {
      new TermParser$Companion();
    }return TermParser$Companion_instance;
  }
  TermParser.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'TermParser',
    interfaces: []
  };
  var defaultParser;
  function toClause($receiver, source, line, column) {
    if (source === void 0)
      source = null;
    if (line === void 0)
      line = 0;
    if (column === void 0)
      column = 0;
    if (Kotlin.isType($receiver, Clause))
      return $receiver;
    else if (Kotlin.isType($receiver, Struct))
      return Fact.Companion.of($receiver);
    else
      throw new InvalidTermTypeException(source, $receiver.toString(), getKClass(Clause), line, column);
  }
  function parse($receiver, input, operators) {
    return defaultParser.parseTermWithOperators(input, operators);
  }
  function parse_0($receiver, input) {
    return defaultParser.parseTerm(input);
  }
  function parseAsTerm($receiver, operators) {
    return defaultParser.parseTermWithOperators($receiver, operators);
  }
  function parseAsTerm_0($receiver) {
    return defaultParser.parseTerm($receiver);
  }
  function parse_1($receiver, input, operators) {
    return defaultParser.parseStructWithOperators(input, operators);
  }
  function parse_2($receiver, input) {
    return defaultParser.parseStruct(input);
  }
  function parseAsStruct($receiver, operators) {
    return defaultParser.parseStructWithOperators($receiver, operators);
  }
  function parseAsStruct_0($receiver) {
    return defaultParser.parseStruct($receiver);
  }
  function parse_3($receiver, input, operators) {
    return defaultParser.parseConstantWithOperators(input, operators);
  }
  function parse_4($receiver, input) {
    return defaultParser.parseConstant(input);
  }
  function parseAsConstant($receiver, operators) {
    return defaultParser.parseConstantWithOperators($receiver, operators);
  }
  function parseAsConstant_0($receiver) {
    return defaultParser.parseConstant($receiver);
  }
  function parse_5($receiver, input, operators) {
    return defaultParser.parseVarWithOperators(input, operators);
  }
  function parse_6($receiver, input) {
    return defaultParser.parseVar(input);
  }
  function parseAsVar($receiver, operators) {
    return defaultParser.parseVarWithOperators($receiver, operators);
  }
  function parseAsVar_0($receiver) {
    return defaultParser.parseVar($receiver);
  }
  function parse_7($receiver, input, operators) {
    return defaultParser.parseAtomWithOperators(input, operators);
  }
  function parse_8($receiver, input) {
    return defaultParser.parseAtom(input);
  }
  function parseAsAtom($receiver, operators) {
    return defaultParser.parseAtomWithOperators($receiver, operators);
  }
  function parseAsAtom_0($receiver) {
    return defaultParser.parseAtom($receiver);
  }
  function parse_9($receiver, input, operators) {
    return defaultParser.parseNumericWithOperators(input, operators);
  }
  function parse_10($receiver, input) {
    return defaultParser.parseNumeric(input);
  }
  function parseAsNumeric($receiver, operators) {
    return defaultParser.parseNumericWithOperators($receiver, operators);
  }
  function parseAsNumeric_0($receiver) {
    return defaultParser.parseNumeric($receiver);
  }
  function parse_11($receiver, input, operators) {
    return defaultParser.parseIntegerWithOperators(input, operators);
  }
  function parse_12($receiver, input) {
    return defaultParser.parseInteger(input);
  }
  function parseAsInteger($receiver, operators) {
    return defaultParser.parseIntegerWithOperators($receiver, operators);
  }
  function parseAsInteger_0($receiver) {
    return defaultParser.parseInteger($receiver);
  }
  function parse_13($receiver, input, operators) {
    return defaultParser.parseRealWithOperators(input, operators);
  }
  function parse_14($receiver, input) {
    return defaultParser.parseReal(input);
  }
  function parseAsReal($receiver, operators) {
    return defaultParser.parseRealWithOperators($receiver, operators);
  }
  function parseAsReal_0($receiver) {
    return defaultParser.parseReal($receiver);
  }
  function parse_15($receiver, input, operators) {
    return defaultParser.parseClauseWithOperators(input, operators);
  }
  function parse_16($receiver, input) {
    return defaultParser.parseClause(input);
  }
  function parseAsClause($receiver, operators) {
    return defaultParser.parseClauseWithOperators($receiver, operators);
  }
  function parseAsClause_0($receiver) {
    return defaultParser.parseClause($receiver);
  }
  function parseException(input, token, message, throwable) {
    return new ParseException(input, token.text, token.line, token.column, message, throwable);
  }
  function parseException_0(token, message, throwable) {
    return new ParseException(null, token.text, token.line, token.column, message, throwable);
  }
  function parseException_1(token, message) {
    return new ParseException(null, token.text, token.line, token.column, message, null);
  }
  function parseException_2(token, throwable) {
    return new ParseException(null, token.text, token.line, token.column, '', throwable);
  }
  function PrologParserFactory() {
    PrologParserFactory_instance = this;
  }
  function PrologParserFactory$newErrorListener$ObjectLiteral(closure$whileParsing) {
    this.closure$whileParsing = closure$whileParsing;
    ErrorListener.call(this);
  }
  PrologParserFactory$newErrorListener$ObjectLiteral.prototype.symbolToString_0 = function (obj) {
    var tmp$;
    if (Kotlin.isType(obj, Token)) {
      tmp$ = obj.text;
    } else {
      tmp$ = obj.toString();
    }
    return tmp$;
  };
  PrologParserFactory$newErrorListener$ObjectLiteral.prototype.syntaxError = function (recognizer, offendingSymbol, line, column, msg, e) {
    if (Kotlin.isType(recognizer, PrologParser)) {
      recognizer.removeParseListeners();
    }throw new ParseException(this.closure$whileParsing, this.symbolToString_0(offendingSymbol), line, column + 1 | 0, msg, e);
  };
  PrologParserFactory$newErrorListener$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: []
  };
  PrologParserFactory.prototype.newErrorListener_0 = function (whileParsing) {
    return new PrologParserFactory$newErrorListener$ObjectLiteral(whileParsing);
  };
  PrologParserFactory.prototype.parseExpression_61zpoe$ = function (string) {
    return this.parseExpression_z2gvgg$(string, OperatorSet.Companion.EMPTY);
  };
  PrologParserFactory.prototype.parseExpression_z2gvgg$ = function (string, withOperators) {
    var parser = this.createParser_z2gvgg$(string, withOperators);
    return this.parseExpression_0(parser, string);
  };
  PrologParserFactory.prototype.parseExpression_0 = function (parserAndErrorStrategy, source) {
    var tmp$, tmp$_0, tmp$_1;
    var mark = -1;
    var index = -1;
    var parser = parserAndErrorStrategy.first;
    try {
      mark = parser.getTokenStream().mark();
      index = coerceAtLeast(parser.getTokenStream().index, 0);
      tmp$_1 = parser.singletonExpression();
    } catch (e) {
      if (isParseCancellationException(e) && parser._interp.predictionMode === PredictionMode.SLL) {
        parser.getTokenStream().seek(index);
        parser._interp.predictionMode = PredictionMode.LL;
        parser._errHandler = parserAndErrorStrategy.second;
        parser.addErrorListener(this.newErrorListener_0(source));
        tmp$_1 = this.parseExpression_0(parserAndErrorStrategy, source);
      } else if (e.clause !== null && isRecognitionException(e.cause))
        throw Kotlin.isType(tmp$ = e.cause, RecognitionException) ? tmp$ : throwCCE();
      else {
        throw Kotlin.isType(tmp$_0 = e, Throwable) ? tmp$_0 : throwCCE();
      }
    }
    finally {
      parser.getTokenStream().release(mark);
    }
    return tmp$_1;
  };
  PrologParserFactory.prototype.parseExpressionWithStandardOperators_61zpoe$ = function (string) {
    return this.parseExpression_z2gvgg$(string, OperatorSet.Companion.DEFAULT);
  };
  PrologParserFactory.prototype.parseClauses_z2gvgg$ = function (source, withOperators) {
    var parser = this.createParser_z2gvgg$(source, withOperators);
    return this.parseClauses_0(parser, source);
  };
  PrologParserFactory.prototype.parseClauses_61zpoe$ = function (source) {
    return this.parseClauses_z2gvgg$(source, OperatorSet.Companion.EMPTY);
  };
  PrologParserFactory.prototype.parseClausesWithStandardOperators_61zpoe$ = function (source) {
    return this.parseClauses_z2gvgg$(source, OperatorSet.Companion.DEFAULT);
  };
  PrologParserFactory.prototype.createParser_61zpoe$ = function (string) {
    return this.createParser_z2gvgg$(string, OperatorSet.Companion.DEFAULT);
  };
  PrologParserFactory.prototype.createParser_z2gvgg$ = function (source, operators) {
    var stream = new InputStream_init(source);
    var lexer = new PrologLexer(stream);
    lexer.removeErrorListeners();
    var tokenStream = new CommonTokenStream_init(lexer);
    var parser = new PrologParser(tokenStream);
    parser.removeErrorListeners();
    var originalErrorStrategy = parser._errHandler;
    parser._errHandler = new BailErrorStrategy();
    parser._interp.predictionMode = PredictionMode.SLL;
    return to(this.addOperators_42chln$(parser, operators), originalErrorStrategy);
  };
  PrologParserFactory.prototype.addOperators_42chln$ = function (prologParser, operators) {
    var tmp$, tmp$_0;
    var ops = ArrayList_init();
    tmp$ = operators.iterator();
    while (tmp$.hasNext()) {
      var it = tmp$.next();
      switch (it.specifier.name.toUpperCase()) {
        case 'FX':
          tmp$_0 = Associativity.FX;
          break;
        case 'FY':
          tmp$_0 = Associativity.FY;
          break;
        case 'YF':
          tmp$_0 = Associativity.YF;
          break;
        case 'YFX':
          tmp$_0 = Associativity.YFX;
          break;
        case 'XFY':
          tmp$_0 = Associativity.XFY;
          break;
        case 'XF':
          tmp$_0 = Associativity.XF;
          break;
        case 'XFX':
          tmp$_0 = Associativity.XFX;
          break;
        default:tmp$_0 = Associativity.YFX;
          break;
      }
      var op = tmp$_0;
      ops.add_11rb$(it.functor);
      prologParser.addOperator(it.functor, op, it.priority);
    }
    return prologParser;
  };
  PrologParserFactory.prototype.parseClause_0 = function (parserAndErrorStrategy, source) {
    var tmp$, tmp$_0, tmp$_1;
    var mark = -1;
    var index = -1;
    var parser = parserAndErrorStrategy.first;
    try {
      mark = parser.getTokenStream().mark();
      index = coerceAtLeast(parser.getTokenStream().index, 0);
      tmp$_1 = parser.optClause();
    } catch (e) {
      if (isParseCancellationException(e) && parser._interp.predictionMode === PredictionMode.SLL) {
        parser.getTokenStream().seek(index);
        parser._interp.predictionMode = PredictionMode.LL;
        parser._errHandler = parserAndErrorStrategy.second;
        parser.addErrorListener(this.newErrorListener_0(source));
        tmp$_1 = this.parseClause_0(parserAndErrorStrategy, source);
      } else if (e.clause !== null && isRecognitionException(e.cause))
        throw Kotlin.isType(tmp$ = e.cause, RecognitionException) ? tmp$ : throwCCE();
      else {
        throw Kotlin.isType(tmp$_0 = e, Throwable) ? tmp$_0 : throwCCE();
      }
    }
    finally {
      parser.getTokenStream().release(mark);
    }
    return tmp$_1;
  };
  function PrologParserFactory$parseClauses$lambda(it) {
    return it + 1 | 0;
  }
  function PrologParserFactory$parseClauses$lambda_0(closure$parser, closure$source, this$PrologParserFactory) {
    return function (it) {
      try {
        return this$PrologParserFactory.parseClause_0(closure$parser, closure$source);
      } catch (e) {
        if (Kotlin.isType(e, ParseException)) {
          e.clauseIndex = it;
          throw e;
        } else
          throw e;
      }
    };
  }
  function PrologParserFactory$parseClauses$lambda_1(it) {
    return !it.isOver;
  }
  function PrologParserFactory$parseClauses$lambda_2(it) {
    return it.clause();
  }
  PrologParserFactory.prototype.parseClauses_0 = function (parser, source) {
    return map(takeWhile(map(generateSequence(0, PrologParserFactory$parseClauses$lambda), PrologParserFactory$parseClauses$lambda_0(parser, source, this)), PrologParserFactory$parseClauses$lambda_1), PrologParserFactory$parseClauses$lambda_2);
  };
  PrologParserFactory.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'PrologParserFactory',
    interfaces: []
  };
  var PrologParserFactory_instance = null;
  function PrologParserFactory_getInstance() {
    if (PrologParserFactory_instance === null) {
      new PrologParserFactory();
    }return PrologParserFactory_instance;
  }
  function PrologVisitor() {
    PrologParserVisitor.call(this);
    this.scope_0 = Scope.Companion.empty();
  }
  PrologVisitor.prototype.visitSingletonTerm = function (ctx) {
    return this.visitTerm(ctx.term());
  };
  PrologVisitor.prototype.visitSingletonExpression = function (ctx) {
    return this.visitExpression(ctx.expression());
  };
  PrologVisitor.prototype.visitClause = function (ctx) {
    return toClause(ctx.expression().accept(this), null, ensureNotNull(ctx.start).line, ensureNotNull(ctx.start).column);
  };
  PrologVisitor.prototype.visitExpression = function (ctx) {
    var tmp$;
    if (ctx.isTerm)
      tmp$ = this.visitTerm(ensureNotNull(ctx.left));
    else if (contains(Associativity.INFIX, ctx.associativity))
      tmp$ = this.visitInfixExpression_0(ctx);
    else if (contains(Associativity.POSTFIX, ctx.associativity))
      tmp$ = this.visitPostfixExpression_0(ctx);
    else if (contains(Associativity.PREFIX, ctx.associativity))
      tmp$ = this.visitPrefixExpression_0(ctx);
    else
      throw IllegalArgumentException_init('Associativity unknown: ' + ctx.associativity + ' INFIX=' + Associativity.INFIX + ' PREFIX=' + Associativity.PREFIX + ' POSTFIX=' + Associativity.POSTFIX);
    return this.handleOuters_0(tmp$, this.flatten_0(asList(ctx.outers)));
  };
  PrologVisitor.prototype.visitTerm = function (ctx) {
    var tmp$;
    if (ctx.isExpr) {
      return this.visitExpression(ctx.expression());
    } else {
      return Kotlin.isType(tmp$ = ctx.children[0].accept(this), Term) ? tmp$ : throwCCE();
    }
  };
  PrologVisitor.prototype.visitInteger = function (ctx) {
    var value = this.parseInteger_0(ctx);
    return Integer.Companion.ofBigInteger(value);
  };
  PrologVisitor.prototype.visitNumber = function (ctx) {
    var tmp$;
    return Kotlin.isType(tmp$ = ctx.children[0].accept(this), Term) ? tmp$ : throwCCE();
  };
  PrologVisitor.prototype.visitReal = function (ctx) {
    var tmp$, tmp$_0;
    var raw = ctx.value.text;
    if (ctx.sign != null) {
      raw = ((tmp$ = ctx.sign) != null ? tmp$.text : null) + raw;
    }try {
      tmp$_0 = Real.Companion.parse(raw);
    } catch (notAFloating) {
      if (Kotlin.isType(notAFloating, NumberFormatException)) {
        throw parseException_1(ctx.value, 'Invalid real number format: ' + ctx.value.text);
      } else
        throw notAFloating;
    }
    return tmp$_0;
  };
  PrologVisitor.prototype.visitVariable = function (ctx) {
    if (ctx.isAnonymous) {
      return this.scope_0.anonymous();
    } else {
      return this.scope_0.varOf(ctx.value.text);
    }
  };
  PrologVisitor.prototype.visitStructure = function (ctx) {
    var tmp$;
    if (ctx.isList)
      return this.scope_0.listOf([]);
    else if (ctx.isSet)
      return this.scope_0.setOf([]);
    if (ctx.arity === 0) {
      tmp$ = this.scope_0.atomOf(ctx.functor.text);
    } else {
      tmp$ = this.scope_0.structOfSequence(ctx.functor.text, map(asSequence(ctx.args), getCallableRef('visitExpression', function ($receiver, ctx) {
        return $receiver.visitExpression(ctx);
      }.bind(null, this))));
    }
    return tmp$;
  };
  PrologVisitor.prototype.visitList = function (ctx) {
    var tmp$, tmp$_0;
    var $receiver = ctx.items;
    var transform = getCallableRef('visitExpression', function ($receiver, ctx) {
      return $receiver.visitExpression(ctx);
    }.bind(null, this));
    var destination = ArrayList_init_0($receiver.length);
    var tmp$_1;
    for (tmp$_1 = 0; tmp$_1 !== $receiver.length; ++tmp$_1) {
      var item = $receiver[tmp$_1];
      destination.add_11rb$(transform(item));
    }
    var terms = destination;
    if (ctx.hasTail) {
      tmp$_0 = this.scope_0.listFrom(terms, (tmp$ = ctx.tail) != null ? tmp$.accept(this) : null);
    } else {
      tmp$_0 = this.scope_0.listOfIterable(terms);
    }
    return tmp$_0;
  };
  PrologVisitor.prototype.visitSet = function (ctx) {
    var tmp$;
    if (ctx.length === 1)
      tmp$ = this.scope_0.setOf([ctx.items[0].accept(this)]);
    else {
      var tmp$_0 = this.scope_0;
      var $receiver = ctx.items;
      var transform = getCallableRef('visitExpression', function ($receiver, ctx) {
        return $receiver.visitExpression(ctx);
      }.bind(null, this));
      var destination = ArrayList_init_0($receiver.length);
      var tmp$_1;
      for (tmp$_1 = 0; tmp$_1 !== $receiver.length; ++tmp$_1) {
        var item = $receiver[tmp$_1];
        destination.add_11rb$(transform(item));
      }
      tmp$ = tmp$_0.setOfIterable(destination);
    }
    return tmp$;
  };
  PrologVisitor.prototype.parseInteger_0 = function (ctx) {
    var tmp$;
    var str = ctx.value.text;
    var base;
    var clean;
    if (ctx.isBin) {
      base = 2;
      clean = str.substring(2);
    } else if (ctx.isOct) {
      base = 8;
      clean = str.substring(2);
    } else if (ctx.isHex) {
      base = 16;
      clean = str.substring(2);
    } else if (ctx.isChar) {
      clean = str.substring(2);
      if (clean.length !== 1) {
        throw parseException_1(ctx.value, 'Invalid character literal: ' + ctx.value.text);
      }var $receiver = BigInteger.Companion.of(clean.charCodeAt(0) | 0);
      var block$result;
      var tmp$_0, tmp$_1, tmp$_2;
      if ((tmp$_2 = (tmp$_1 = (tmp$_0 = ctx.sign) != null ? tmp$_0.text : null) != null ? contains_0(tmp$_1, '-') : null) != null ? tmp$_2 : false) {
        block$result = $receiver.unaryMinus();
      } else {
        block$result = $receiver;
      }
      return block$result;
    } else {
      base = 10;
      clean = str;
    }
    if (ctx.sign != null) {
      clean = ((tmp$ = ctx.sign) != null ? tmp$.text : null) + clean;
    }return BigInteger.Companion.parseWithRadix(clean, base);
  };
  PrologVisitor.prototype.visitPostfixExpression_0 = function (ctx) {
    var tmp$, tmp$_0;
    tmp$_0 = ensureNotNull((tmp$ = ctx.left) != null ? tmp$.accept(this) : null);
    var $receiver = ctx.operators;
    var destination = ArrayList_init_0($receiver.length);
    var tmp$_1;
    for (tmp$_1 = 0; tmp$_1 !== $receiver.length; ++tmp$_1) {
      var item = $receiver[tmp$_1];
      destination.add_11rb$(item.symbol.text);
    }
    return this.postfix_0(tmp$_0, destination);
  };
  PrologVisitor.prototype.postfix_0 = function (term, ops) {
    var operator = ops.iterator();
    var result = this.scope_0.structOf(operator.next(), [term]);
    while (operator.hasNext()) {
      result = this.scope_0.structOf(operator.next(), [result]);
    }
    return result;
  };
  PrologVisitor.prototype.visitPrefixExpression_0 = function (ctx) {
    var tmp$ = ctx.right[0].accept(this);
    var $receiver = ctx.operators;
    var destination = ArrayList_init_0($receiver.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== $receiver.length; ++tmp$_0) {
      var item = $receiver[tmp$_0];
      destination.add_11rb$(item.symbol.text);
    }
    return this.prefix_0(tmp$, destination);
  };
  PrologVisitor.prototype.prefix_0 = function (term, ops) {
    var tmp$;
    var i = ops.size - 1 | 0;
    var result = this.scope_0.structOf(ops.get_za3lpa$((tmp$ = i, i = tmp$ - 1 | 0, tmp$)), [term]);
    while (i >= 0) {
      result = this.scope_0.structOf(ops.get_za3lpa$(i), [result]);
      i = i - 1 | 0;
    }
    return result;
  };
  PrologVisitor.prototype.visitInfixExpression_0 = function (ctx) {
    var tmp$, tmp$_0;
    tmp$ = ctx.associativity;
    if (equals(tmp$, Associativity.XFY))
      tmp$_0 = this.visitInfixRightAssociativeExpression_0(ctx);
    else if (equals(tmp$, Associativity.YFX))
      tmp$_0 = this.visitInfixLeftAssociativeExpression_0(ctx);
    else if (equals(tmp$, Associativity.XFX))
      tmp$_0 = this.visitInfixNonAssociativeExpression_0(ctx);
    else
      throw IllegalStateException_init();
    return tmp$_0;
  };
  PrologVisitor.prototype.visitInfixNonAssociativeExpression_0 = function (ctx) {
    var $receiver = plus(listOf(ensureNotNull(ctx.left)), asList(ctx.right));
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.accept(this));
    }
    var operands = destination;
    var $receiver_0 = ctx.operators;
    var destination_0 = ArrayList_init_0($receiver_0.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== $receiver_0.length; ++tmp$_0) {
      var item_0 = $receiver_0[tmp$_0];
      destination_0.add_11rb$(item_0.symbol.text);
    }
    var operators = destination_0;
    return this.infixNonAssociative_0(operands, operators);
  };
  PrologVisitor.prototype.infixNonAssociative_0 = function (terms, ops) {
    return this.scope_0.structOf(ops.get_za3lpa$(0), [terms.get_za3lpa$(0), terms.get_za3lpa$(1)]);
  };
  PrologVisitor.prototype.handleOuters_0 = function (expression, outers) {
    var tmp$, tmp$_0, tmp$_1;
    var result = expression;
    tmp$ = outers.iterator();
    while (tmp$.hasNext()) {
      var o = tmp$.next();
      var tmp$_2 = listOf(result);
      var $receiver = o.right;
      var destination = ArrayList_init_0($receiver.length);
      var tmp$_3;
      for (tmp$_3 = 0; tmp$_3 !== $receiver.length; ++tmp$_3) {
        var item = $receiver[tmp$_3];
        destination.add_11rb$(item.accept(this));
      }
      var operands = plus(tmp$_2, destination);
      var $receiver_0 = o.operators;
      var destination_0 = ArrayList_init_0($receiver_0.length);
      var tmp$_4;
      for (tmp$_4 = 0; tmp$_4 !== $receiver_0.length; ++tmp$_4) {
        var item_0 = $receiver_0[tmp$_4];
        destination_0.add_11rb$(item_0.symbol.text);
      }
      var operators = destination_0;
      tmp$_0 = o.associativity;
      if (equals(tmp$_0, Associativity.XFY))
        tmp$_1 = this.infixRight_0(operands, operators);
      else if (equals(tmp$_0, Associativity.XF) || equals(tmp$_0, Associativity.YF))
        tmp$_1 = this.postfix_0(result, operators);
      else if (equals(tmp$_0, Associativity.XFX))
        tmp$_1 = this.infixNonAssociative_0(operands, operators);
      else if (equals(tmp$_0, Associativity.YFX))
        tmp$_1 = this.infixLeft_0(operands, operators);
      else if (equals(tmp$_0, Associativity.FX) || equals(tmp$_0, Associativity.FY))
        tmp$_1 = this.prefix_0(result, operators);
      else
        throw IllegalStateException_init();
      result = tmp$_1;
    }
    return result;
  };
  PrologVisitor.prototype.infixRight_0 = function (terms, ops) {
    var tmp$, tmp$_0;
    var i = terms.size - 1 | 0;
    var j = ops.size - 1 | 0;
    var result = this.scope_0.structOf(ops.get_za3lpa$((tmp$ = j, j = tmp$ - 1 | 0, tmp$)), [terms.get_za3lpa$(i - 1 | 0), terms.get_za3lpa$(i)]);
    i = i - 2 | 0;
    while (i >= 0) {
      result = this.scope_0.structOf(ops.get_za3lpa$((tmp$_0 = j, j = tmp$_0 - 1 | 0, tmp$_0)), [terms.get_za3lpa$(i), result]);
      i = i - 1 | 0;
    }
    return result;
  };
  PrologVisitor.prototype.infixLeft_0 = function (terms, ops) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var i = 0;
    var j = 0;
    var result = this.scope_0.structOf(ops.get_za3lpa$((tmp$ = j, j = tmp$ + 1 | 0, tmp$)), [terms.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), terms.get_za3lpa$((tmp$_1 = i, i = tmp$_1 + 1 | 0, tmp$_1))]);
    while (i < terms.size) {
      result = this.scope_0.structOf(ops.get_za3lpa$((tmp$_2 = j, j = tmp$_2 + 1 | 0, tmp$_2)), [result, terms.get_za3lpa$(i)]);
      i = i + 1 | 0;
    }
    return result;
  };
  PrologVisitor.prototype.listOfOperands_0 = function (ctx) {
    var $receiver = plus(listOf(ctx.left), toList(ctx.right));
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(ensureNotNull(item).accept(this));
    }
    return destination;
  };
  PrologVisitor.prototype.listOfOperators_0 = function (ctx) {
    var $receiver = ctx.operators;
    var destination = ArrayList_init_0($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(item.symbol.text);
    }
    return destination;
  };
  PrologVisitor.prototype.visitInfixRightAssociativeExpression_0 = function (ctx) {
    return this.infixRight_0(this.listOfOperands_0(ctx), this.listOfOperators_0(ctx));
  };
  PrologVisitor.prototype.visitInfixLeftAssociativeExpression_0 = function (ctx) {
    return this.infixLeft_0(this.listOfOperands_0(ctx), this.listOfOperators_0(ctx));
  };
  function PrologVisitor$flatten$lambda(this$PrologVisitor) {
    return function (it) {
      return plus_0(sequenceOf([it]), this$PrologVisitor.flatten_1(asSequence(it.outers)));
    };
  }
  PrologVisitor.prototype.flatten_1 = function (outers) {
    return flatMap(outers, PrologVisitor$flatten$lambda(this));
  };
  PrologVisitor.prototype.flatten_0 = function (outers) {
    return toList_0(this.flatten_1(asSequence_0(outers)));
  };
  PrologVisitor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrologVisitor',
    interfaces: []
  };
  function termParserWithOperators(operators) {
    return new TermParserImpl(operators);
  }
  function TermParserImpl(defaultOperatorSet) {
    this.defaultOperatorSet_xbye0r$_0 = defaultOperatorSet;
  }
  Object.defineProperty(TermParserImpl.prototype, 'defaultOperatorSet', {
    get: function () {
      return this.defaultOperatorSet_xbye0r$_0;
    }
  });
  TermParserImpl.prototype.parseTermWithOperators = function (input, operators) {
    return PrologParserFactory_getInstance().parseExpression_z2gvgg$(input, operators).accept(new PrologVisitor());
  };
  TermParserImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TermParserImpl',
    interfaces: [TermParser]
  };
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$core = package$tuprolog.core || (package$tuprolog.core = {});
  var package$parsing = package$core.parsing || (package$core.parsing = {});
  package$parsing.InvalidTermTypeException = InvalidTermTypeException;
  package$parsing.ParseException = ParseException;
  Object.defineProperty(TermParser, 'Companion', {
    get: TermParser$Companion_getInstance
  });
  package$parsing.TermParser = TermParser;
  package$parsing.termToClause = toClause;
  package$parsing.parseTermWithOperators = parse;
  package$parsing.parseTerm = parse_0;
  package$parsing.parseStringAsTermWithOperators = parseAsTerm;
  package$parsing.parseStringAsTerm = parseAsTerm_0;
  package$parsing.parseStructWithOperators = parse_1;
  package$parsing.parseStruct = parse_2;
  package$parsing.parseStringAsStructWithOperators = parseAsStruct;
  package$parsing.parseStringAsStruct = parseAsStruct_0;
  package$parsing.parseConstantWithOperators = parse_3;
  package$parsing.parseConstant = parse_4;
  package$parsing.parseStringAsConstantWithOperators = parseAsConstant;
  package$parsing.parseStringAsConstant = parseAsConstant_0;
  package$parsing.parseVarWithOperators = parse_5;
  package$parsing.parseVar = parse_6;
  package$parsing.parseStringAsVarWithOperators = parseAsVar;
  package$parsing.parseStringAs = parseAsVar_0;
  package$parsing.parseAtomWithOperators = parse_7;
  package$parsing.parseAtom = parse_8;
  package$parsing.parseStringAsAtomWithOperators = parseAsAtom;
  package$parsing.parseStringAsAtom = parseAsAtom_0;
  package$parsing.parseNumericWithOperators = parse_9;
  package$parsing.parseNumeric = parse_10;
  package$parsing.parseStringAsNumericWithOperators = parseAsNumeric;
  package$parsing.parseStringAsNumeric = parseAsNumeric_0;
  package$parsing.parseIntegerWithOperators = parse_11;
  package$parsing.parseInteger = parse_12;
  package$parsing.parseStringAsIntegerWithOperators = parseAsInteger;
  package$parsing.parseStringAsInteger = parseAsInteger_0;
  package$parsing.parseRealWithOperators = parse_13;
  package$parsing.parseReal = parse_14;
  package$parsing.parseStringAsRealWithOperators = parseAsReal;
  package$parsing.parseStringAsReal = parseAsReal_0;
  package$parsing.parseClauseWithOperators = parse_15;
  package$parsing.parseClause = parse_16;
  package$parsing.parseStringAsClauseWithOperators = parseAsClause;
  package$parsing.parseStringAsClause = parseAsClause_0;
  package$parsing.parseException_anpir9$ = parseException;
  package$parsing.parseException_h37ye7$ = parseException_0;
  package$parsing.parseException_9jsxy9$ = parseException_1;
  package$parsing.parseException_ky5y0k$ = parseException_2;
  Object.defineProperty(package$parsing, 'PrologParserFactory', {
    get: PrologParserFactory_getInstance
  });
  package$parsing.PrologVisitor = PrologVisitor;
  package$parsing.termParserWithOperators_7gu0wi$ = termParserWithOperators;
  package$parsing.TermParserImpl = TermParserImpl;
  TermParserImpl.prototype.parseTerm = TermParser.prototype.parseTerm;
  TermParserImpl.prototype.parseStructWithOperators = TermParser.prototype.parseStructWithOperators;
  TermParserImpl.prototype.parseStruct = TermParser.prototype.parseStruct;
  TermParserImpl.prototype.parseConstantWithOperators = TermParser.prototype.parseConstantWithOperators;
  TermParserImpl.prototype.parseConstant = TermParser.prototype.parseConstant;
  TermParserImpl.prototype.parseVarWithOperators = TermParser.prototype.parseVarWithOperators;
  TermParserImpl.prototype.parseVar = TermParser.prototype.parseVar;
  TermParserImpl.prototype.parseAtomWithOperators = TermParser.prototype.parseAtomWithOperators;
  TermParserImpl.prototype.parseAtom = TermParser.prototype.parseAtom;
  TermParserImpl.prototype.parseNumericWithOperators = TermParser.prototype.parseNumericWithOperators;
  TermParserImpl.prototype.parseNumeric = TermParser.prototype.parseNumeric;
  TermParserImpl.prototype.parseIntegerWithOperators = TermParser.prototype.parseIntegerWithOperators;
  TermParserImpl.prototype.parseInteger = TermParser.prototype.parseInteger;
  TermParserImpl.prototype.parseRealWithOperators = TermParser.prototype.parseRealWithOperators;
  TermParserImpl.prototype.parseReal = TermParser.prototype.parseReal;
  TermParserImpl.prototype.parseClauseWithOperators = TermParser.prototype.parseClauseWithOperators;
  TermParserImpl.prototype.parseClause = TermParser.prototype.parseClause;
  defaultParser = TermParser$Companion_getInstance().withDefaultOperators;
  Kotlin.defineModule('@tuprolog/2p-parser-core', _);
  return _;
}));



},{"./Associativity":6,"./PrologLexer":9,"./PrologParser":10,"./PrologParserVisitor":11,"@tuprolog/2p-core":4,"@tuprolog/2p-parser-js":13,"antlr4":60,"antlr4/atn":50,"antlr4/error":59,"kotlin":66,"kt-math":67}],6:[function(require,module,exports){
const Associativity = Object.freeze({
    XF: "XF",
    YF: "YF",
    XFX: "XFX",
    XFY: "XFY",
    YFX: "YFX",
    FX: "FX",
    FY: "FY",
    PREFIX: ["FX", "FY"],
    NON_PREFIX: ["XF","YF","XFY","YFX","XFX"],
    INFIX: ["XFX","XFY","YFX"],
    POSTFIX: ["XF","YF"]
});


exports.Associativity = Associativity;

},{}],7:[function(require,module,exports){
const StringType = require("./StringType").StringType;

const enableLogging = false;

function log(...args) {
    if (enableLogging) {
        console.log("Lexer: ", ...args)
    }
}

function DynamicLexer() {

    this.operators = [];

    this.isOperator = function isOperator(string) {
        return this.operators.includes(string);
    };

    this.getOperators = function getOperators() {
        return [...this.operators];
    };

    this.unquote = function (string) {
        return string.substring(1, string.length - 1);
    };

    this.escapeChar = function (repr) {
        switch (repr) {
            case 'a':
                return "\u0007";
            case 'b':
                return "\b";
            case 'f':
                return "\f";
            case 'n':
                return "\n";
            case 'r':
                return "\r";
            case 't':
                return "\t";
            case 'v':
                return "\u000b";
            case '\\':
                return "\\";
            case '"':
                return "\"";
            case '`':
                return "`";
            case '\'':
                return "\'";
            default:
                return "\\" + repr;
        }
    };

    this.escape = function (string, stringType) {
        let res = "";
        const last = string.length - 1;
        for (let i = 0; i <= last; i++) {
            let curChar = string[i];
            let lookahead = i < last ? string[i + 1] : -1;
            if (curChar === '\\') {
                if (i === last) {
                    res += '\\';
                } else if (lookahead === '\n') {
                    i += 1;
                } else if (lookahead === 'x' || lookahead === 'X') {
                    let nextSlashPos = string.indexOf('\\', i + 2);
                    if (nextSlashPos > i && nextSlashPos <= last) {
                        const hexStr = string.substring(i + 2, nextSlashPos);
                        const hex = parseInt(hexStr, 16);
                        if (isNaN(hex)) {
                            res += curChar;
                        } else {
                            res += hex;
                            i += hexStr.length + 2;
                        }
                    } else {
                        res += curChar
                    }
                } else if (!isNaN(parseInt(lookahead)) || !isNaN(parseFloat(lookahead))) {
                    let nextSlashPos = string.indexOf('\\', i + 1);
                    if (nextSlashPos > i && nextSlashPos <= last) {
                        const octStr = string.substring(i + 1, nextSlashPos);
                        const oct = parseInt(octStr, 8);
                        if (isNaN(oct)) {
                            res += curChar;
                        } else {
                            res += oct;
                            i += octStr.length + 1;
                        }
                    } else {
                        res += curChar
                    }
                } else if (i < last - 1 && lookahead === '\r' && string[i + 2] === '\n') {
                    i += 2;
                } else {
                    const escaped = this.escapeChar(lookahead);
                    res += escaped;
                    i += 1;
                }
            } else if ((stringType === StringType.DOUBLE_QUOTED && curChar === '"' && lookahead === '"')
                || (stringType === StringType.SINGLE_QUOTED && curChar === '\'' && lookahead === '\'')) {
                res += curChar;
                i += 1;
            } else {
                res += curChar;
            }
            log("Escape: String=" + string + " StringType=" + stringType + " Iteration: " + i + " curChar=" + curChar + " lookahead: " + lookahead + " actual res=" + res)
        }
        return res
    };

    this.addOperators = function addOperators(...args) {
        for (const op of args) {
            this.operators.push(op)
        }
    }

}

exports.DynamicLexer = DynamicLexer;

},{"./StringType":12}],8:[function(require,module,exports){
const Associativity = require("./Associativity").Associativity;

const OP = 0;
const ASSOCIATIVITY = 1;
const PRIORITY = 2;


const enableLogging = false;

function log(...args) {
    if (enableLogging) {
        console.log("Parser: ", ...args)
    }
}

function DynamicParser(input) {
    const _operators = {}; // map<string, map<assoc, int>>
    let _input = input;
    let _lexer = input.tokenSource;

    this.isAnonymous = function (token) {
        return ((token.length === 1) && (token[0] === '_')) || ((token.text.length === 1) && (token.text[0] === '_'))
    };

    this.getOperatorPriority = function (operator, associativity) {
        const functor = operator.text || operator;

        if (functor in _operators) {
            const assocPriority = _operators[functor];
            if (associativity in assocPriority) {
                return assocPriority[associativity];
            }
        }
        return 1201;
    };

    this.isOperator = function (operator) {
        return _lexer.isOperator(operator);
    };

    this.addOperator = function (functor, associativity, priority) {
        _lexer.addOperators(functor);
        if (!(functor in _operators)) {
            _operators[functor] = {}
        }
        const assocPriority = _operators[functor];
        assocPriority[associativity] = priority;
    };

    this.isOperatorAssociativity = function (operator, associativity) {
        const functor = operator.text || operator;

        if (functor in _operators) {
            return associativity in _operators[functor];
        }
        return false
    };

    this.mustBeExcluded = function (lookahead, except) {
        for (const e of except) {
            if (this.isOperator(e) && lookahead.text === e) {
                return true;
            }
        }
        return false;
    };

    this.lookaheadFunc = function (f, associativity, priority, except) {
        const lookahead = _input.LT(1);
        log("lookahead: " + lookahead);
        if (!this.isOperator(lookahead.text)) {
            return null;
        }
        if (this.mustBeExcluded(lookahead, except)) {
            return null;
        }
        if (!this.isOperatorAssociativity(lookahead, associativity)) {
            return null;
        }
        return f(this.getOperatorPriority(lookahead, associativity), priority);
    };

    this.lookaheadIs = function (associativity, except) {
        let associativities;
        if (associativity.__proto__ !== Array.prototype) {
            associativities = [associativity];
        } else {
            associativities = associativity;
        }
        const lookahead = _input.LT(1);
        if (this.mustBeExcluded(lookahead, except || [])) {
            return false;
        }
        for (const a of associativities) {
            if (this.isOperatorAssociativity(lookahead, a)) {
                return true;
            }
        }
        return false;
    };

    const _compare = function (x, y) {
        return (x < y) ? -1 : ((x === y) ? 0 : 1);
    };

    this.lookaheadGt = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = -1;
        return res > 0;
    };

    this.lookaheadEq = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = -1;
        return res === 0;
    };

    this.lookaheadNeq = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = 0;
        return res !== 0;
    };

    this.lookaheadGeq = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = -1;
        return res >= 0;
    };

    this.lookaheadLeq = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = 1;
        return res <= 0;
    };

    this.lookaheadLt = function (associativity, priority, except) {
        let res = this.lookaheadFunc(_compare, associativity, priority, except);
        if (res === null)
            res = 1;
        return res < 0;
    };

    this.lookahead = function (associativity, top, bottom, except) {
        let associativities;
        if (associativity.__proto__ !== Array.prototype) {
            associativities = [associativity];
        } else {
            associativities = associativity;
        }
        const lookahead = _input.LT(1);
        if (this.mustBeExcluded(lookahead, except)) {
            return false;
        }
        for (const a of associativities) {
            if (this.isOperatorAssociativity(lookahead, a)) {
                const priority = this.getOperatorPriority(lookahead, a);
                if (priority <= top && priority >= bottom) {
                    return true;
                }
            }
        }
        return false;
    }

}

exports.DynamicParser = DynamicParser;

},{"./Associativity":6}],9:[function(require,module,exports){
// Generated from /builds/pika-lab/tuprolog/2p-in-kotlin/parser-js/src/main/antlr/PrologLexer.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');


var DynamicLexer = require("./DynamicLexer").DynamicLexer
var StringType = require("./StringType").StringType



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\u001e\u0159\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0003\u0002\u0006\u0002W\n\u0002\r\u0002\u000e\u0002X\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0006\u0003^\n\u0003\r\u0003\u000e\u0003_\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0006\u0004e\n\u0004\r\u0004\u000e\u0004",
    "f\u0003\u0005\u0003\u0005\u0003\u0005\u0006\u0005l\n\u0005\r\u0005\u000e",
    "\u0005m\u0003\u0006\u0003\u0006\u0003\u0007\u0006\u0007s\n\u0007\r\u0007",
    "\u000e\u0007t\u0003\u0007\u0003\u0007\u0006\u0007y\n\u0007\r\u0007\u000e",
    "\u0007z\u0003\u0007\u0003\u0007\u0005\u0007\u007f\n\u0007\u0003\u0007",
    "\u0006\u0007\u0082\n\u0007\r\u0007\u000e\u0007\u0083\u0005\u0007\u0086",
    "\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u008e",
    "\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u009a\n\t\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u00a6\n\u000e\f\u000e\u000e\u000e\u00a9\u000b\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0007\u0011\u00b3\n\u0011\f\u0011\u000e\u0011\u00b6\u000b",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0007\u0012\u00bc",
    "\n\u0012\f\u0012\u000e\u0012\u00bf\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u00c5\n\u0013\f\u0013\u000e\u0013",
    "\u00c8\u000b\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u00d1\n\u0014\f\u0014\u000e",
    "\u0014\u00d4\u000b\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u00e1\n\u0018\f\u0018\u000e\u0018\u00e4\u000b",
    "\u0018\u0003\u0018\u0005\u0018\u00e7\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0006\u0019\u00ee\n\u0019\r\u0019",
    "\u000e\u0019\u00ef\u0005\u0019\u00f2\n\u0019\u0003\u001a\u0006\u001a",
    "\u00f5\n\u001a\r\u001a\u000e\u001a\u00f6\u0003\u001a\u0003\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u00ff\n\u001b",
    "\f\u001b\u000e\u001b\u0102\u000b\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0007\u001c\u010b",
    "\n\u001c\f\u001c\u000e\u001c\u010e\u000b\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u0114\n\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u011a\n\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001f\u0006\u001f\u011f\n\u001f\r\u001f\u000e\u001f",
    "\u0120\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0126\n\u001f",
    "\u0003 \u0003 \u0003 \u0005 \u012b\n \u0003 \u0003 \u0006 \u012f\n ",
    "\r \u000e \u0130\u0003 \u0003 \u0003 \u0003 \u0006 \u0137\n \r \u000e",
    " \u0138\u0003 \u0003 \u0005 \u013d\n \u0003!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0007$\u0149\n$\f$\u000e$\u014c",
    "\u000b$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003",
    ")\u0003)\u0003*\u0003*\u0003\u0100\u0002+\u0003\u0004\u0005\u0005\u0007",
    "\u0006\t\u0007\u000b\b\r\t\u000f\n\u0011\u000b\u0013\f\u0015\r\u0017",
    "\u000e\u0019\u000f\u001b\u0010\u001d\u0011\u001f\u0012!\u0013#\u0003",
    "%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u00023\u001a5\u001b7\u001c",
    "9\u001d;\u001e=\u0002?\u0002A\u0002C\u0002E\u0002G\u0002I\u0002K\u0002",
    "M\u0002O\u0002Q\u0002S\u0002\u0003\u0002\u0016\u0004\u0002ZZzz\u0004",
    "\u0002QQqq\u0004\u0002DDdd\u0004\u0002--//\u0004\u0002GGgg\u0004\u0002",
    "\u000b\f\u000e\u000f\u0004\u0002C\\aa\u0006\u00022;C\\aac|\u0005\u0002",
    "\f\f))^^\u0005\u0002\f\f$$^^\u0004\u0002\f\f\u000f\u000f\u0004\u0002",
    "##==\u000b\u0002$$))^^bdhhppttvvxx\u000b\u0002%&((,-/1<<>B^^``\u0080",
    "\u0080\u0003\u0002c|\u0005\u0002\u000b\f\u000f\u000f\"\"\u0003\u0002",
    "29\u0003\u000223\u0005\u00022;CHch\u0003\u00022;\u0002\u0174\u0002\u0003",
    "\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007",
    "\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\u000b",
    "\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f",
    "\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013",
    "\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017",
    "\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b",
    "\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f",
    "\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003",
    "\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002",
    "\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002",
    "\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002\u0002",
    "\u00023\u0003\u0002\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u0002",
    "7\u0003\u0002\u0002\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003",
    "\u0002\u0002\u0002\u0003V\u0003\u0002\u0002\u0002\u0005Z\u0003\u0002",
    "\u0002\u0002\u0007a\u0003\u0002\u0002\u0002\th\u0003\u0002\u0002\u0002",
    "\u000bo\u0003\u0002\u0002\u0002\rr\u0003\u0002\u0002\u0002\u000f\u0087",
    "\u0003\u0002\u0002\u0002\u0011\u0099\u0003\u0002\u0002\u0002\u0013\u009b",
    "\u0003\u0002\u0002\u0002\u0015\u009d\u0003\u0002\u0002\u0002\u0017\u009f",
    "\u0003\u0002\u0002\u0002\u0019\u00a1\u0003\u0002\u0002\u0002\u001b\u00a3",
    "\u0003\u0002\u0002\u0002\u001d\u00ac\u0003\u0002\u0002\u0002\u001f\u00ae",
    "\u0003\u0002\u0002\u0002!\u00b0\u0003\u0002\u0002\u0002#\u00b9\u0003",
    "\u0002\u0002\u0002%\u00c0\u0003\u0002\u0002\u0002\'\u00cc\u0003\u0002",
    "\u0002\u0002)\u00d8\u0003\u0002\u0002\u0002+\u00da\u0003\u0002\u0002",
    "\u0002-\u00dc\u0003\u0002\u0002\u0002/\u00de\u0003\u0002\u0002\u0002",
    "1\u00f1\u0003\u0002\u0002\u00023\u00f4\u0003\u0002\u0002\u00025\u00fa",
    "\u0003\u0002\u0002\u00027\u0108\u0003\u0002\u0002\u00029\u0113\u0003",
    "\u0002\u0002\u0002;\u0119\u0003\u0002\u0002\u0002=\u0125\u0003\u0002",
    "\u0002\u0002?\u0127\u0003\u0002\u0002\u0002A\u013e\u0003\u0002\u0002",
    "\u0002C\u0141\u0003\u0002\u0002\u0002E\u0144\u0003\u0002\u0002\u0002",
    "G\u0146\u0003\u0002\u0002\u0002I\u014d\u0003\u0002\u0002\u0002K\u014f",
    "\u0003\u0002\u0002\u0002M\u0151\u0003\u0002\u0002\u0002O\u0153\u0003",
    "\u0002\u0002\u0002Q\u0155\u0003\u0002\u0002\u0002S\u0157\u0003\u0002",
    "\u0002\u0002UW\u0005Q)\u0002VU\u0003\u0002\u0002\u0002WX\u0003\u0002",
    "\u0002\u0002XV\u0003\u0002\u0002\u0002XY\u0003\u0002\u0002\u0002Y\u0004",
    "\u0003\u0002\u0002\u0002Z[\u0005S*\u0002[]\t\u0002\u0002\u0002\\^\u0005",
    "O(\u0002]\\\u0003\u0002\u0002\u0002^_\u0003\u0002\u0002\u0002_]\u0003",
    "\u0002\u0002\u0002_`\u0003\u0002\u0002\u0002`\u0006\u0003\u0002\u0002",
    "\u0002ab\u0005S*\u0002bd\t\u0003\u0002\u0002ce\u0005K&\u0002dc\u0003",
    "\u0002\u0002\u0002ef\u0003\u0002\u0002\u0002fd\u0003\u0002\u0002\u0002",
    "fg\u0003\u0002\u0002\u0002g\b\u0003\u0002\u0002\u0002hi\u0005S*\u0002",
    "ik\t\u0004\u0002\u0002jl\u0005M\'\u0002kj\u0003\u0002\u0002\u0002lm",
    "\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002mn\u0003\u0002\u0002",
    "\u0002n\n\u0003\u0002\u0002\u0002op\t\u0005\u0002\u0002p\f\u0003\u0002",
    "\u0002\u0002qs\u0005Q)\u0002rq\u0003\u0002\u0002\u0002st\u0003\u0002",
    "\u0002\u0002tr\u0003\u0002\u0002\u0002tu\u0003\u0002\u0002\u0002uv\u0003",
    "\u0002\u0002\u0002vx\u00070\u0002\u0002wy\u0005Q)\u0002xw\u0003\u0002",
    "\u0002\u0002yz\u0003\u0002\u0002\u0002zx\u0003\u0002\u0002\u0002z{\u0003",
    "\u0002\u0002\u0002{\u0085\u0003\u0002\u0002\u0002|~\t\u0006\u0002\u0002",
    "}\u007f\u0005\u000b\u0006\u0002~}\u0003\u0002\u0002\u0002~\u007f\u0003",
    "\u0002\u0002\u0002\u007f\u0081\u0003\u0002\u0002\u0002\u0080\u0082\u0005",
    "Q)\u0002\u0081\u0080\u0003\u0002\u0002\u0002\u0082\u0083\u0003\u0002",
    "\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0083\u0084\u0003\u0002",
    "\u0002\u0002\u0084\u0086\u0003\u0002\u0002\u0002\u0085|\u0003\u0002",
    "\u0002\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086\u000e\u0003\u0002",
    "\u0002\u0002\u0087\u0088\u0005S*\u0002\u0088\u008d\u0007)\u0002\u0002",
    "\u0089\u008e\n\u0007\u0002\u0002\u008a\u008e\u0005? \u0002\u008b\u008e",
    "\u0005C\"\u0002\u008c\u008e\u0005A!\u0002\u008d\u0089\u0003\u0002\u0002",
    "\u0002\u008d\u008a\u0003\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002",
    "\u0002\u008d\u008c\u0003\u0002\u0002\u0002\u008e\u008f\u0003\u0002\u0002",
    "\u0002\u008f\u0090\b\b\u0002\u0002\u0090\u0010\u0003\u0002\u0002\u0002",
    "\u0091\u0092\u0007v\u0002\u0002\u0092\u0093\u0007t\u0002\u0002\u0093",
    "\u0094\u0007w\u0002\u0002\u0094\u009a\u0007g\u0002\u0002\u0095\u0096",
    "\u0007h\u0002\u0002\u0096\u0097\u0007c\u0002\u0002\u0097\u0098\u0007",
    "k\u0002\u0002\u0098\u009a\u0007n\u0002\u0002\u0099\u0091\u0003\u0002",
    "\u0002\u0002\u0099\u0095\u0003\u0002\u0002\u0002\u009a\u0012\u0003\u0002",
    "\u0002\u0002\u009b\u009c\u0007*\u0002\u0002\u009c\u0014\u0003\u0002",
    "\u0002\u0002\u009d\u009e\u0007+\u0002\u0002\u009e\u0016\u0003\u0002",
    "\u0002\u0002\u009f\u00a0\u0007]\u0002\u0002\u00a0\u0018\u0003\u0002",
    "\u0002\u0002\u00a1\u00a2\u0007_\u0002\u0002\u00a2\u001a\u0003\u0002",
    "\u0002\u0002\u00a3\u00a7\u0005\u0017\f\u0002\u00a4\u00a6\u0005I%\u0002",
    "\u00a5\u00a4\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002\u0002\u0002",
    "\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002",
    "\u00a8\u00aa\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002\u0002",
    "\u00aa\u00ab\u0005\u0019\r\u0002\u00ab\u001c\u0003\u0002\u0002\u0002",
    "\u00ac\u00ad\u0007}\u0002\u0002\u00ad\u001e\u0003\u0002\u0002\u0002",
    "\u00ae\u00af\u0007\u007f\u0002\u0002\u00af \u0003\u0002\u0002\u0002",
    "\u00b0\u00b4\u0005\u001d\u000f\u0002\u00b1\u00b3\u0005I%\u0002\u00b2",
    "\u00b1\u0003\u0002\u0002\u0002\u00b3\u00b6\u0003\u0002\u0002\u0002\u00b4",
    "\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5",
    "\u00b7\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002\u00b7",
    "\u00b8\u0005\u001f\u0010\u0002\u00b8\"\u0003\u0002\u0002\u0002\u00b9",
    "\u00bd\t\b\u0002\u0002\u00ba\u00bc\t\t\u0002\u0002\u00bb\u00ba\u0003",
    "\u0002\u0002\u0002\u00bc\u00bf\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003",
    "\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be$\u0003",
    "\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00c0\u00c6\u0007",
    ")\u0002\u0002\u00c1\u00c5\n\n\u0002\u0002\u00c2\u00c5\u0005? \u0002",
    "\u00c3\u00c5\u0005A!\u0002\u00c4\u00c1\u0003\u0002\u0002\u0002\u00c4",
    "\u00c2\u0003\u0002\u0002\u0002\u00c4\u00c3\u0003\u0002\u0002\u0002\u00c5",
    "\u00c8\u0003\u0002\u0002\u0002\u00c6\u00c4\u0003\u0002\u0002\u0002\u00c6",
    "\u00c7\u0003\u0002\u0002\u0002\u00c7\u00c9\u0003\u0002\u0002\u0002\u00c8",
    "\u00c6\u0003\u0002\u0002\u0002\u00c9\u00ca\u0007)\u0002\u0002\u00ca",
    "\u00cb\b\u0013\u0003\u0002\u00cb&\u0003\u0002\u0002\u0002\u00cc\u00d2",
    "\u0007$\u0002\u0002\u00cd\u00d1\n\u000b\u0002\u0002\u00ce\u00d1\u0005",
    "? \u0002\u00cf\u00d1\u0005C\"\u0002\u00d0\u00cd\u0003\u0002\u0002\u0002",
    "\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002",
    "\u00d1\u00d4\u0003\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002",
    "\u00d2\u00d3\u0003\u0002\u0002\u0002\u00d3\u00d5\u0003\u0002\u0002\u0002",
    "\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d5\u00d6\u0007$\u0002\u0002",
    "\u00d6\u00d7\b\u0014\u0004\u0002\u00d7(\u0003\u0002\u0002\u0002\u00d8",
    "\u00d9\u0007.\u0002\u0002\u00d9*\u0003\u0002\u0002\u0002\u00da\u00db",
    "\u0007~\u0002\u0002\u00db,\u0003\u0002\u0002\u0002\u00dc\u00dd\u0007",
    "#\u0002\u0002\u00dd.\u0003\u0002\u0002\u0002\u00de\u00e2\u00070\u0002",
    "\u0002\u00df\u00e1\u0005I%\u0002\u00e0\u00df\u0003\u0002\u0002\u0002",
    "\u00e1\u00e4\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002",
    "\u00e2\u00e3\u0003\u0002\u0002\u0002\u00e3\u00e6\u0003\u0002\u0002\u0002",
    "\u00e4\u00e2\u0003\u0002\u0002\u0002\u00e5\u00e7\u00055\u001b\u0002",
    "\u00e6\u00e5\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002",
    "\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00e9\u00051\u0019\u0002",
    "\u00e90\u0003\u0002\u0002\u0002\u00ea\u00f2\u0007\u0002\u0002\u0003",
    "\u00eb\u00f2\u00057\u001c\u0002\u00ec\u00ee\u0005I%\u0002\u00ed\u00ec",
    "\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00ed",
    "\u0003\u0002\u0002\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0\u00f2",
    "\u0003\u0002\u0002\u0002\u00f1\u00ea\u0003\u0002\u0002\u0002\u00f1\u00eb",
    "\u0003\u0002\u0002\u0002\u00f1\u00ed\u0003\u0002\u0002\u0002\u00f22",
    "\u0003\u0002\u0002\u0002\u00f3\u00f5\u0005I%\u0002\u00f4\u00f3\u0003",
    "\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6\u00f4\u0003",
    "\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003",
    "\u0002\u0002\u0002\u00f8\u00f9\b\u001a\u0005\u0002\u00f94\u0003\u0002",
    "\u0002\u0002\u00fa\u00fb\u00071\u0002\u0002\u00fb\u00fc\u0007,\u0002",
    "\u0002\u00fc\u0100\u0003\u0002\u0002\u0002\u00fd\u00ff\u000b\u0002\u0002",
    "\u0002\u00fe\u00fd\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002",
    "\u0002\u0100\u0101\u0003\u0002\u0002\u0002\u0100\u00fe\u0003\u0002\u0002",
    "\u0002\u0101\u0103\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002",
    "\u0002\u0103\u0104\u0007,\u0002\u0002\u0104\u0105\u00071\u0002\u0002",
    "\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0107\b\u001b\u0005\u0002",
    "\u01076\u0003\u0002\u0002\u0002\u0108\u010c\u0007\'\u0002\u0002\u0109",
    "\u010b\n\f\u0002\u0002\u010a\u0109\u0003\u0002\u0002\u0002\u010b\u010e",
    "\u0003\u0002\u0002\u0002\u010c\u010a\u0003\u0002\u0002\u0002\u010c\u010d",
    "\u0003\u0002\u0002\u0002\u010d\u010f\u0003\u0002\u0002\u0002\u010e\u010c",
    "\u0003\u0002\u0002\u0002\u010f\u0110\b\u001c\u0005\u0002\u01108\u0003",
    "\u0002\u0002\u0002\u0111\u0114\u0005=\u001f\u0002\u0112\u0114\u0005",
    "G$\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0112\u0003\u0002",
    "\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0116\u0006\u001d",
    "\u0002\u0002\u0116:\u0003\u0002\u0002\u0002\u0117\u011a\u0005=\u001f",
    "\u0002\u0118\u011a\u0005G$\u0002\u0119\u0117\u0003\u0002\u0002\u0002",
    "\u0119\u0118\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002",
    "\u011b\u011c\u0006\u001e\u0003\u0002\u011c<\u0003\u0002\u0002\u0002",
    "\u011d\u011f\u0005E#\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f",
    "\u0120\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120",
    "\u0121\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122",
    "\u0123\u0006\u001f\u0004\u0002\u0123\u0126\u0003\u0002\u0002\u0002\u0124",
    "\u0126\t\r\u0002\u0002\u0125\u011e\u0003\u0002\u0002\u0002\u0125\u0124",
    "\u0003\u0002\u0002\u0002\u0126>\u0003\u0002\u0002\u0002\u0127\u013c",
    "\u0007^\u0002\u0002\u0128\u013d\t\u000e\u0002\u0002\u0129\u012b\u0007",
    "\u000f\u0002\u0002\u012a\u0129\u0003\u0002\u0002\u0002\u012a\u012b\u0003",
    "\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u013d\u0007",
    "\f\u0002\u0002\u012d\u012f\u0005K&\u0002\u012e\u012d\u0003\u0002\u0002",
    "\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002",
    "\u0002\u0130\u0131\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002",
    "\u0002\u0132\u0133\u0007^\u0002\u0002\u0133\u013d\u0003\u0002\u0002",
    "\u0002\u0134\u0136\t\u0002\u0002\u0002\u0135\u0137\u0005O(\u0002\u0136",
    "\u0135\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138",
    "\u0136\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0007^\u0002\u0002\u013b",
    "\u013d\u0003\u0002\u0002\u0002\u013c\u0128\u0003\u0002\u0002\u0002\u013c",
    "\u012a\u0003\u0002\u0002\u0002\u013c\u012e\u0003\u0002\u0002\u0002\u013c",
    "\u0134\u0003\u0002\u0002\u0002\u013d@\u0003\u0002\u0002\u0002\u013e",
    "\u013f\u0007)\u0002\u0002\u013f\u0140\u0007)\u0002\u0002\u0140B\u0003",
    "\u0002\u0002\u0002\u0141\u0142\u0007$\u0002\u0002\u0142\u0143\u0007",
    "$\u0002\u0002\u0143D\u0003\u0002\u0002\u0002\u0144\u0145\t\u000f\u0002",
    "\u0002\u0145F\u0003\u0002\u0002\u0002\u0146\u014a\t\u0010\u0002\u0002",
    "\u0147\u0149\t\t\u0002\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0149",
    "\u014c\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014a",
    "\u014b\u0003\u0002\u0002\u0002\u014bH\u0003\u0002\u0002\u0002\u014c",
    "\u014a\u0003\u0002\u0002\u0002\u014d\u014e\t\u0011\u0002\u0002\u014e",
    "J\u0003\u0002\u0002\u0002\u014f\u0150\t\u0012\u0002\u0002\u0150L\u0003",
    "\u0002\u0002\u0002\u0151\u0152\t\u0013\u0002\u0002\u0152N\u0003\u0002",
    "\u0002\u0002\u0153\u0154\t\u0014\u0002\u0002\u0154P\u0003\u0002\u0002",
    "\u0002\u0155\u0156\t\u0015\u0002\u0002\u0156R\u0003\u0002\u0002\u0002",
    "\u0157\u0158\u00072\u0002\u0002\u0158T\u0003\u0002\u0002\u0002%\u0002",
    "X_fmtz~\u0083\u0085\u008d\u0099\u00a7\u00b4\u00bd\u00c4\u00c6\u00d0",
    "\u00d2\u00e2\u00e6\u00ef\u00f1\u00f6\u0100\u010c\u0113\u0119\u0120\u0125",
    "\u012a\u0130\u0138\u013c\u014a\u0006\u0003\b\u0002\u0003\u0013\u0003",
    "\u0003\u0014\u0004\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function PrologLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());

	DynamicLexer.call(this);


    return this;
}

PrologLexer.prototype = Object.create(antlr4.Lexer.prototype);
PrologLexer.prototype.constructor = PrologLexer;

Object.defineProperty(PrologLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

PrologLexer.EOF = antlr4.Token.EOF;
PrologLexer.VARIABLE = 1;
PrologLexer.INTEGER = 2;
PrologLexer.HEX = 3;
PrologLexer.OCT = 4;
PrologLexer.BINARY = 5;
PrologLexer.SIGN = 6;
PrologLexer.FLOAT = 7;
PrologLexer.CHAR = 8;
PrologLexer.BOOL = 9;
PrologLexer.LPAR = 10;
PrologLexer.RPAR = 11;
PrologLexer.LSQUARE = 12;
PrologLexer.RSQUARE = 13;
PrologLexer.EMPTY_LIST = 14;
PrologLexer.LBRACE = 15;
PrologLexer.RBRACE = 16;
PrologLexer.EMPTY_SET = 17;
PrologLexer.SQ_STRING = 18;
PrologLexer.DQ_STRING = 19;
PrologLexer.COMMA = 20;
PrologLexer.PIPE = 21;
PrologLexer.CUT = 22;
PrologLexer.FULL_STOP = 23;
PrologLexer.WHITE_SPACES = 24;
PrologLexer.COMMENT = 25;
PrologLexer.LINE_COMMENT = 26;
PrologLexer.OPERATOR = 27;
PrologLexer.ATOM = 28;

PrologLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

PrologLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

PrologLexer.prototype.literalNames = [ null, null, null, null, null, null, 
                                       null, null, null, null, "'('", "')'", 
                                       "'['", "']'", null, "'{'", "'}'", 
                                       null, null, null, "','", "'|'", "'!'" ];

PrologLexer.prototype.symbolicNames = [ null, "VARIABLE", "INTEGER", "HEX", 
                                        "OCT", "BINARY", "SIGN", "FLOAT", 
                                        "CHAR", "BOOL", "LPAR", "RPAR", 
                                        "LSQUARE", "RSQUARE", "EMPTY_LIST", 
                                        "LBRACE", "RBRACE", "EMPTY_SET", 
                                        "SQ_STRING", "DQ_STRING", "COMMA", 
                                        "PIPE", "CUT", "FULL_STOP", "WHITE_SPACES", 
                                        "COMMENT", "LINE_COMMENT", "OPERATOR", 
                                        "ATOM" ];

PrologLexer.prototype.ruleNames = [ "INTEGER", "HEX", "OCT", "BINARY", "SIGN", 
                                    "FLOAT", "CHAR", "BOOL", "LPAR", "RPAR", 
                                    "LSQUARE", "RSQUARE", "EMPTY_LIST", 
                                    "LBRACE", "RBRACE", "EMPTY_SET", "VARIABLE", 
                                    "SQ_STRING", "DQ_STRING", "COMMA", "PIPE", 
                                    "CUT", "FULL_STOP", "FullStopTerminator", 
                                    "WHITE_SPACES", "COMMENT", "LINE_COMMENT", 
                                    "OPERATOR", "ATOM", "Symbols", "Escapable", 
                                    "DoubleSQ", "DoubleDQ", "OpSymbol", 
                                    "Atom", "Ws", "OctDigit", "BinDigit", 
                                    "HexDigit", "Digit", "Zero" ];

PrologLexer.prototype.grammarFileName = "PrologLexer.g4";

PrologLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 6:
		this.CHAR_action(localctx, actionIndex);
		break;
	case 17:
		this.SQ_STRING_action(localctx, actionIndex);
		break;
	case 18:
		this.DQ_STRING_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};


PrologLexer.prototype.CHAR_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:
		 this.text = this.escape(this.text, StringType.SINGLE_QUOTED); 
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PrologLexer.prototype.SQ_STRING_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		 this.text = this.escape(this.unquote(this.text), StringType.SINGLE_QUOTED); 
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PrologLexer.prototype.DQ_STRING_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		 this.text = this.escape(this.unquote(this.text), StringType.DOUBLE_QUOTED); 
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
PrologLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 27:
			return this.OPERATOR_sempred(localctx, predIndex);
		case 28:
			return this.ATOM_sempred(localctx, predIndex);
		case 29:
			return this.Symbols_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

PrologLexer.prototype.OPERATOR_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.isOperator(this.text) ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PrologLexer.prototype.ATOM_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return  !this.isOperator(this.text) ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PrologLexer.prototype.Symbols_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return  !this.text.startsWith("/*") ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};



exports.PrologLexer = PrologLexer;


},{"./DynamicLexer":7,"./StringType":12,"antlr4/index":60}],10:[function(require,module,exports){
// Generated from /builds/pika-lab/tuprolog/2p-in-kotlin/parser-js/src/main/antlr/PrologParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PrologParserVisitor = require('./PrologParserVisitor').PrologParserVisitor;


var DynamicParserModule = require("./DynamicParser")
var DynamicParser = DynamicParserModule.DynamicParser
var Associativity = require("./Associativity").Associativity

var P0 = 1201;
var TOP = 1200;
var BOTTOM = 0;
var WITH_COMMA = [];
var NO_COMMA = [","];
var NO_COMMA_PIPE = [",", "|"];

var XF = Associativity.XF;
var YF = Associativity.YF;
var XFX = Associativity.XFX;
var XFY = Associativity.XFY;
var YFX = Associativity.YFX;
var FX = Associativity.FX;
var FY = Associativity.FY;
var PREFIX = Associativity.PREFIX;
var NON_PREFIX = Associativity.NON_PREFIX;
var INFIX = Associativity.INFIX;

var grammarFileName = "PrologParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u001e\u0161\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0003\u0002\u0003\u0002\u0005\u0002%\n\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0005\u0003+\n\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0007\u00040\n\u0004\f\u0004\u000e\u0004",
    "3\u000b\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005:\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007I\n\u0007\f\u0007",
    "\u000e\u0007L\u000b\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007V",
    "\n\u0007\f\u0007\u000e\u0007Y\u000b\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0007\u0007e\n\u0007\f\u0007\u000e\u0007h\u000b\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007n\n\u0007",
    "\u0003\u0007\u0003\u0007\u0005\u0007r\n\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0007\u0007~\n\u0007\f\u0007\u000e\u0007\u0081",
    "\u000b\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u0086\n",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u008c",
    "\n\u0007\f\u0007\u000e\u0007\u008f\u000b\u0007\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u0099\n\b\f\b\u000e",
    "\b\u009c\u000b\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0007\b\u00a6\n\b\f\b\u000e\b\u00a9\u000b\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u00b5\n\b\f\b\u000e\b\u00b8\u000b\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u00be\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00c4\n",
    "\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00dd\n\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u00e5\n\u000b\u0003\f\u0005\f\u00e8\n\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00f3\n\f\u0003\r",
    "\u0005\r\u00f6\n\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0113\n",
    "\u000f\f\u000f\u000e\u000f\u0116\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u011a\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0124",
    "\n\u000f\f\u000f\u000e\u000f\u0127\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u012b\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007",
    "\u000f\u0136\n\u000f\f\u000f\u000e\u000f\u0139\u000b\u000f\u0003\u000f",
    "\u0005\u000f\u013c\n\u000f\u0005\u000f\u013e\n\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007",
    "\u0010\u0147\n\u0010\f\u0010\u000e\u0010\u014a\u000b\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u014f\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u015a\n\u0011\f\u0011\u000e\u0011\u015d",
    "\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0002\u0002\u0012\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \u0002\u0004\u0005\u0002\b\b\u0016\u0017\u001d\u001d\u0004\u0002\u0013",
    "\u0013\u001e\u001e\u0002\u0185\u0002\"\u0003\u0002\u0002\u0002\u0004",
    "(\u0003\u0002\u0002\u0002\u00061\u0003\u0002\u0002\u0002\b9\u0003\u0002",
    "\u0002\u0002\n;\u0003\u0002\u0002\u0002\f\u0085\u0003\u0002\u0002\u0002",
    "\u000e\u00bd\u0003\u0002\u0002\u0002\u0010\u00c5\u0003\u0002\u0002\u0002",
    "\u0012\u00dc\u0003\u0002\u0002\u0002\u0014\u00e4\u0003\u0002\u0002\u0002",
    "\u0016\u00e7\u0003\u0002\u0002\u0002\u0018\u00f5\u0003\u0002\u0002\u0002",
    "\u001a\u00f9\u0003\u0002\u0002\u0002\u001c\u013d\u0003\u0002\u0002\u0002",
    "\u001e\u013f\u0003\u0002\u0002\u0002 \u0152\u0003\u0002\u0002\u0002",
    "\"$\u0005\u0012\n\u0002#%\u0007\u0019\u0002\u0002$#\u0003\u0002\u0002",
    "\u0002$%\u0003\u0002\u0002\u0002%&\u0003\u0002\u0002\u0002&\'\u0007",
    "\u0002\u0002\u0003\'\u0003\u0003\u0002\u0002\u0002(*\u0005\f\u0007\u0002",
    ")+\u0007\u0019\u0002\u0002*)\u0003\u0002\u0002\u0002*+\u0003\u0002\u0002",
    "\u0002+,\u0003\u0002\u0002\u0002,-\u0007\u0002\u0002\u0003-\u0005\u0003",
    "\u0002\u0002\u0002.0\u0005\n\u0006\u0002/.\u0003\u0002\u0002\u00020",
    "3\u0003\u0002\u0002\u00021/\u0003\u0002\u0002\u000212\u0003\u0002\u0002",
    "\u000224\u0003\u0002\u0002\u000231\u0003\u0002\u0002\u000245\u0007\u0002",
    "\u0002\u00035\u0007\u0003\u0002\u0002\u00026:\u0005\n\u0006\u000278",
    "\u0007\u0002\u0002\u00038:\b\u0005\u0001\u000296\u0003\u0002\u0002\u0002",
    "97\u0003\u0002\u0002\u0002:\t\u0003\u0002\u0002\u0002;<\u0005\f\u0007",
    "\u0002<=\u0007\u0019\u0002\u0002=\u000b\u0003\u0002\u0002\u0002>?\u0005",
    "\u0012\n\u0002?q\b\u0007\u0001\u0002@A\u0006\u0007\u0002\u0003AB\u0005",
    "\u0010\t\u0002BC\u0005\f\u0007\u0002CJ\b\u0007\u0001\u0002DE\u0006\u0007",
    "\u0003\u0003EF\u0005\u0010\t\u0002FG\u0005\f\u0007\u0002GI\u0003\u0002",
    "\u0002\u0002HD\u0003\u0002\u0002\u0002IL\u0003\u0002\u0002\u0002JH\u0003",
    "\u0002\u0002\u0002JK\u0003\u0002\u0002\u0002Kn\u0003\u0002\u0002\u0002",
    "LJ\u0003\u0002\u0002\u0002MN\u0006\u0007\u0004\u0003NO\u0005\u0010\t",
    "\u0002OP\u0005\f\u0007\u0002PW\b\u0007\u0001\u0002QR\u0006\u0007\u0005",
    "\u0003RS\u0005\u0010\t\u0002ST\u0005\f\u0007\u0002TV\u0003\u0002\u0002",
    "\u0002UQ\u0003\u0002\u0002\u0002VY\u0003\u0002\u0002\u0002WU\u0003\u0002",
    "\u0002\u0002WX\u0003\u0002\u0002\u0002Xn\u0003\u0002\u0002\u0002YW\u0003",
    "\u0002\u0002\u0002Z[\u0006\u0007\u0006\u0003[\\\u0005\u0010\t\u0002",
    "\\]\u0005\f\u0007\u0002]^\b\u0007\u0001\u0002^n\u0003\u0002\u0002\u0002",
    "_`\u0006\u0007\u0007\u0003`a\u0005\u0010\t\u0002af\b\u0007\u0001\u0002",
    "bc\u0006\u0007\b\u0003ce\u0005\u0010\t\u0002db\u0003\u0002\u0002\u0002",
    "eh\u0003\u0002\u0002\u0002fd\u0003\u0002\u0002\u0002fg\u0003\u0002\u0002",
    "\u0002gn\u0003\u0002\u0002\u0002hf\u0003\u0002\u0002\u0002ij\u0006\u0007",
    "\t\u0003jk\u0005\u0010\t\u0002kl\b\u0007\u0001\u0002ln\u0003\u0002\u0002",
    "\u0002m@\u0003\u0002\u0002\u0002mM\u0003\u0002\u0002\u0002mZ\u0003\u0002",
    "\u0002\u0002m_\u0003\u0002\u0002\u0002mi\u0003\u0002\u0002\u0002no\u0003",
    "\u0002\u0002\u0002op\b\u0007\u0001\u0002pr\u0003\u0002\u0002\u0002q",
    "m\u0003\u0002\u0002\u0002qr\u0003\u0002\u0002\u0002r\u0086\u0003\u0002",
    "\u0002\u0002st\u0006\u0007\n\u0003tu\u0005\u0010\t\u0002uv\b\u0007\u0001",
    "\u0002vw\u0005\f\u0007\u0002w\u0086\u0003\u0002\u0002\u0002xy\u0006",
    "\u0007\u000b\u0003yz\u0005\u0010\t\u0002z\u007f\b\u0007\u0001\u0002",
    "{|\u0006\u0007\f\u0003|~\u0005\u0010\t\u0002}{\u0003\u0002\u0002\u0002",
    "~\u0081\u0003\u0002\u0002\u0002\u007f}\u0003\u0002\u0002\u0002\u007f",
    "\u0080\u0003\u0002\u0002\u0002\u0080\u0082\u0003\u0002\u0002\u0002\u0081",
    "\u007f\u0003\u0002\u0002\u0002\u0082\u0083\u0005\f\u0007\u0002\u0083",
    "\u0084\b\u0007\u0001\u0002\u0084\u0086\u0003\u0002\u0002\u0002\u0085",
    ">\u0003\u0002\u0002\u0002\u0085s\u0003\u0002\u0002\u0002\u0085x\u0003",
    "\u0002\u0002\u0002\u0086\u008d\u0003\u0002\u0002\u0002\u0087\u0088\u0006",
    "\u0007\r\u0003\u0088\u0089\u0005\u000e\b\u0002\u0089\u008a\b\u0007\u0001",
    "\u0002\u008a\u008c\u0003\u0002\u0002\u0002\u008b\u0087\u0003\u0002\u0002",
    "\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002",
    "\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\r\u0003\u0002\u0002",
    "\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090\u0091\u0006\b\u000e",
    "\u0003\u0091\u0092\u0005\u0010\t\u0002\u0092\u0093\b\b\u0001\u0002\u0093",
    "\u009a\u0005\f\u0007\u0002\u0094\u0095\u0006\b\u000f\u0003\u0095\u0096",
    "\u0005\u0010\t\u0002\u0096\u0097\u0005\f\u0007\u0002\u0097\u0099\u0003",
    "\u0002\u0002\u0002\u0098\u0094\u0003\u0002\u0002\u0002\u0099\u009c\u0003",
    "\u0002\u0002\u0002\u009a\u0098\u0003\u0002\u0002\u0002\u009a\u009b\u0003",
    "\u0002\u0002\u0002\u009b\u00be\u0003\u0002\u0002\u0002\u009c\u009a\u0003",
    "\u0002\u0002\u0002\u009d\u009e\u0006\b\u0010\u0003\u009e\u009f\u0005",
    "\u0010\t\u0002\u009f\u00a0\b\b\u0001\u0002\u00a0\u00a7\u0005\f\u0007",
    "\u0002\u00a1\u00a2\u0006\b\u0011\u0003\u00a2\u00a3\u0005\u0010\t\u0002",
    "\u00a3\u00a4\u0005\f\u0007\u0002\u00a4\u00a6\u0003\u0002\u0002\u0002",
    "\u00a5\u00a1\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002\u0002\u0002",
    "\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002",
    "\u00a8\u00be\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002\u0002",
    "\u00aa\u00ab\u0006\b\u0012\u0003\u00ab\u00ac\u0005\u0010\t\u0002\u00ac",
    "\u00ad\b\b\u0001\u0002\u00ad\u00ae\u0005\f\u0007\u0002\u00ae\u00be\u0003",
    "\u0002\u0002\u0002\u00af\u00b0\u0006\b\u0013\u0003\u00b0\u00b1\u0005",
    "\u0010\t\u0002\u00b1\u00b6\b\b\u0001\u0002\u00b2\u00b3\u0006\b\u0014",
    "\u0003\u00b3\u00b5\u0005\u0010\t\u0002\u00b4\u00b2\u0003\u0002\u0002",
    "\u0002\u00b5\u00b8\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002",
    "\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00be\u0003\u0002\u0002",
    "\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b9\u00ba\u0006\b\u0015",
    "\u0003\u00ba\u00bb\u0005\u0010\t\u0002\u00bb\u00bc\b\b\u0001\u0002\u00bc",
    "\u00be\u0003\u0002\u0002\u0002\u00bd\u0090\u0003\u0002\u0002\u0002\u00bd",
    "\u009d\u0003\u0002\u0002\u0002\u00bd\u00aa\u0003\u0002\u0002\u0002\u00bd",
    "\u00af\u0003\u0002\u0002\u0002\u00bd\u00b9\u0003\u0002\u0002\u0002\u00be",
    "\u00c3\u0003\u0002\u0002\u0002\u00bf\u00c0\u0006\b\u0016\u0003\u00c0",
    "\u00c1\u0005\u000e\b\u0002\u00c1\u00c2\b\b\u0001\u0002\u00c2\u00c4\u0003",
    "\u0002\u0002\u0002\u00c3\u00bf\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003",
    "\u0002\u0002\u0002\u00c4\u000f\u0003\u0002\u0002\u0002\u00c5\u00c6\t",
    "\u0002\u0002\u0002\u00c6\u00c7\b\t\u0001\u0002\u00c7\u0011\u0003\u0002",
    "\u0002\u0002\u00c8\u00c9\u0007\f\u0002\u0002\u00c9\u00ca\u0005\f\u0007",
    "\u0002\u00ca\u00cb\b\n\u0001\u0002\u00cb\u00cc\u0007\r\u0002\u0002\u00cc",
    "\u00dd\u0003\u0002\u0002\u0002\u00cd\u00ce\u0005\u0014\u000b\u0002\u00ce",
    "\u00cf\b\n\u0001\u0002\u00cf\u00dd\u0003\u0002\u0002\u0002\u00d0\u00d1",
    "\u0005\u001a\u000e\u0002\u00d1\u00d2\b\n\u0001\u0002\u00d2\u00dd\u0003",
    "\u0002\u0002\u0002\u00d3\u00d4\u0005\u001c\u000f\u0002\u00d4\u00d5\b",
    "\n\u0001\u0002\u00d5\u00dd\u0003\u0002\u0002\u0002\u00d6\u00d7\u0005",
    "\u001e\u0010\u0002\u00d7\u00d8\b\n\u0001\u0002\u00d8\u00dd\u0003\u0002",
    "\u0002\u0002\u00d9\u00da\u0005 \u0011\u0002\u00da\u00db\b\n\u0001\u0002",
    "\u00db\u00dd\u0003\u0002\u0002\u0002\u00dc\u00c8\u0003\u0002\u0002\u0002",
    "\u00dc\u00cd\u0003\u0002\u0002\u0002\u00dc\u00d0\u0003\u0002\u0002\u0002",
    "\u00dc\u00d3\u0003\u0002\u0002\u0002\u00dc\u00d6\u0003\u0002\u0002\u0002",
    "\u00dc\u00d9\u0003\u0002\u0002\u0002\u00dd\u0013\u0003\u0002\u0002\u0002",
    "\u00de\u00df\u0005\u0016\f\u0002\u00df\u00e0\b\u000b\u0001\u0002\u00e0",
    "\u00e5\u0003\u0002\u0002\u0002\u00e1\u00e2\u0005\u0018\r\u0002\u00e2",
    "\u00e3\b\u000b\u0001\u0002\u00e3\u00e5\u0003\u0002\u0002\u0002\u00e4",
    "\u00de\u0003\u0002\u0002\u0002\u00e4\u00e1\u0003\u0002\u0002\u0002\u00e5",
    "\u0015\u0003\u0002\u0002\u0002\u00e6\u00e8\u0007\b\u0002\u0002\u00e7",
    "\u00e6\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8",
    "\u00f2\u0003\u0002\u0002\u0002\u00e9\u00f3\u0007\u0004\u0002\u0002\u00ea",
    "\u00eb\u0007\u0005\u0002\u0002\u00eb\u00f3\b\f\u0001\u0002\u00ec\u00ed",
    "\u0007\u0006\u0002\u0002\u00ed\u00f3\b\f\u0001\u0002\u00ee\u00ef\u0007",
    "\u0007\u0002\u0002\u00ef\u00f3\b\f\u0001\u0002\u00f0\u00f1\u0007\n\u0002",
    "\u0002\u00f1\u00f3\b\f\u0001\u0002\u00f2\u00e9\u0003\u0002\u0002\u0002",
    "\u00f2\u00ea\u0003\u0002\u0002\u0002\u00f2\u00ec\u0003\u0002\u0002\u0002",
    "\u00f2\u00ee\u0003\u0002\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002",
    "\u00f3\u0017\u0003\u0002\u0002\u0002\u00f4\u00f6\u0007\b\u0002\u0002",
    "\u00f5\u00f4\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002",
    "\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0007\t\u0002\u0002",
    "\u00f8\u0019\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007\u0003\u0002\u0002",
    "\u00fa\u00fb\b\u000e\u0001\u0002\u00fb\u001b\u0003\u0002\u0002\u0002",
    "\u00fc\u00fd\u0007\u000b\u0002\u0002\u00fd\u013e\b\u000f\u0001\u0002",
    "\u00fe\u00ff\u0007\u0010\u0002\u0002\u00ff\u013e\b\u000f\u0001\u0002",
    "\u0100\u0101\u0007\u0018\u0002\u0002\u0101\u013e\b\u000f\u0001\u0002",
    "\u0102\u0103\u0007\u0013\u0002\u0002\u0103\u013e\b\u000f\u0001\u0002",
    "\u0104\u0105\u0007\u0015\u0002\u0002\u0105\u013e\b\u000f\u0001\u0002",
    "\u0106\u0107\u0007\f\u0002\u0002\u0107\u0108\t\u0002\u0002\u0002\u0108",
    "\u013e\u0007\r\u0002\u0002\u0109\u010a\u0007\u0014\u0002\u0002\u010a",
    "\u0119\b\u000f\u0001\u0002\u010b\u010c\u0007\f\u0002\u0002\u010c\u010d",
    "\u0005\f\u0007\u0002\u010d\u0114\b\u000f\u0001\u0002\u010e\u010f\u0007",
    "\u0016\u0002\u0002\u010f\u0110\u0005\f\u0007\u0002\u0110\u0111\b\u000f",
    "\u0001\u0002\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u010e\u0003\u0002",
    "\u0002\u0002\u0113\u0116\u0003\u0002\u0002\u0002\u0114\u0112\u0003\u0002",
    "\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0117\u0003\u0002",
    "\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002\u0117\u0118\u0007\r",
    "\u0002\u0002\u0118\u011a\u0003\u0002\u0002\u0002\u0119\u010b\u0003\u0002",
    "\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u013e\u0003\u0002",
    "\u0002\u0002\u011b\u012a\t\u0003\u0002\u0002\u011c\u011d\u0007\f\u0002",
    "\u0002\u011d\u011e\u0005\f\u0007\u0002\u011e\u0125\b\u000f\u0001\u0002",
    "\u011f\u0120\u0007\u0016\u0002\u0002\u0120\u0121\u0005\f\u0007\u0002",
    "\u0121\u0122\b\u000f\u0001\u0002\u0122\u0124\u0003\u0002\u0002\u0002",
    "\u0123\u011f\u0003\u0002\u0002\u0002\u0124\u0127\u0003\u0002\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002",
    "\u0126\u0128\u0003\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002\u0002",
    "\u0128\u0129\u0007\r\u0002\u0002\u0129\u012b\u0003\u0002\u0002\u0002",
    "\u012a\u011c\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002",
    "\u012b\u013e\u0003\u0002\u0002\u0002\u012c\u012d\u0006\u000f\u0017\u0002",
    "\u012d\u012e\t\u0002\u0002\u0002\u012e\u012f\u0007\f\u0002\u0002\u012f",
    "\u0130\u0005\f\u0007\u0002\u0130\u0137\b\u000f\u0001\u0002\u0131\u0132",
    "\u0007\u0016\u0002\u0002\u0132\u0133\u0005\f\u0007\u0002\u0133\u0134",
    "\b\u000f\u0001\u0002\u0134\u0136\u0003\u0002\u0002\u0002\u0135\u0131",
    "\u0003\u0002\u0002\u0002\u0136\u0139\u0003\u0002\u0002\u0002\u0137\u0135",
    "\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138\u013b",
    "\u0003\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u013a\u013c",
    "\u0007\r\u0002\u0002\u013b\u013a\u0003\u0002\u0002\u0002\u013b\u013c",
    "\u0003\u0002\u0002\u0002\u013c\u013e\u0003\u0002\u0002\u0002\u013d\u00fc",
    "\u0003\u0002\u0002\u0002\u013d\u00fe\u0003\u0002\u0002\u0002\u013d\u0100",
    "\u0003\u0002\u0002\u0002\u013d\u0102\u0003\u0002\u0002\u0002\u013d\u0104",
    "\u0003\u0002\u0002\u0002\u013d\u0106\u0003\u0002\u0002\u0002\u013d\u0109",
    "\u0003\u0002\u0002\u0002\u013d\u011b\u0003\u0002\u0002\u0002\u013d\u012c",
    "\u0003\u0002\u0002\u0002\u013e\u001d\u0003\u0002\u0002\u0002\u013f\u0140",
    "\u0007\u000e\u0002\u0002\u0140\u0141\u0005\f\u0007\u0002\u0141\u0148",
    "\b\u0010\u0001\u0002\u0142\u0143\u0007\u0016\u0002\u0002\u0143\u0144",
    "\u0005\f\u0007\u0002\u0144\u0145\b\u0010\u0001\u0002\u0145\u0147\u0003",
    "\u0002\u0002\u0002\u0146\u0142\u0003\u0002\u0002\u0002\u0147\u014a\u0003",
    "\u0002\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003",
    "\u0002\u0002\u0002\u0149\u014e\u0003\u0002\u0002\u0002\u014a\u0148\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0007\u0017\u0002\u0002\u014c\u014d\b",
    "\u0010\u0001\u0002\u014d\u014f\u0005\f\u0007\u0002\u014e\u014b\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007\u000f\u0002\u0002\u0151\u001f\u0003",
    "\u0002\u0002\u0002\u0152\u0153\u0007\u0011\u0002\u0002\u0153\u0154\u0005",
    "\f\u0007\u0002\u0154\u015b\b\u0011\u0001\u0002\u0155\u0156\u0007\u0016",
    "\u0002\u0002\u0156\u0157\u0005\f\u0007\u0002\u0157\u0158\b\u0011\u0001",
    "\u0002\u0158\u015a\u0003\u0002\u0002\u0002\u0159\u0155\u0003\u0002\u0002",
    "\u0002\u015a\u015d\u0003\u0002\u0002\u0002\u015b\u0159\u0003\u0002\u0002",
    "\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u015e\u0003\u0002\u0002",
    "\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015e\u015f\u0007\u0012\u0002",
    "\u0002\u015f!\u0003\u0002\u0002\u0002\"$*19JWfmq\u007f\u0085\u008d\u009a",
    "\u00a7\u00b6\u00bd\u00c3\u00dc\u00e4\u00e7\u00f2\u00f5\u0114\u0119\u0125",
    "\u012a\u0137\u013b\u013d\u0148\u014e\u015b"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, "'('", "')'", "'['", "']'", null, "'{'", "'}'", 
                     null, null, null, "','", "'|'", "'!'" ];

var symbolicNames = [ null, "VARIABLE", "INTEGER", "HEX", "OCT", "BINARY", 
                      "SIGN", "FLOAT", "CHAR", "BOOL", "LPAR", "RPAR", "LSQUARE", 
                      "RSQUARE", "EMPTY_LIST", "LBRACE", "RBRACE", "EMPTY_SET", 
                      "SQ_STRING", "DQ_STRING", "COMMA", "PIPE", "CUT", 
                      "FULL_STOP", "WHITE_SPACES", "COMMENT", "LINE_COMMENT", 
                      "OPERATOR", "ATOM" ];

var ruleNames =  [ "singletonTerm", "singletonExpression", "theory", "optClause", 
                   "clause", "expression", "outer", "op", "term", "number", 
                   "integer", "real", "variable", "structure", "list", "set" ];

function PrologParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

	   DynamicParser.call(this,input);

    return this;
}

PrologParser.prototype = Object.create(antlr4.Parser.prototype);
PrologParser.prototype.constructor = PrologParser;

Object.defineProperty(PrologParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PrologParser.EOF = antlr4.Token.EOF;
PrologParser.VARIABLE = 1;
PrologParser.INTEGER = 2;
PrologParser.HEX = 3;
PrologParser.OCT = 4;
PrologParser.BINARY = 5;
PrologParser.SIGN = 6;
PrologParser.FLOAT = 7;
PrologParser.CHAR = 8;
PrologParser.BOOL = 9;
PrologParser.LPAR = 10;
PrologParser.RPAR = 11;
PrologParser.LSQUARE = 12;
PrologParser.RSQUARE = 13;
PrologParser.EMPTY_LIST = 14;
PrologParser.LBRACE = 15;
PrologParser.RBRACE = 16;
PrologParser.EMPTY_SET = 17;
PrologParser.SQ_STRING = 18;
PrologParser.DQ_STRING = 19;
PrologParser.COMMA = 20;
PrologParser.PIPE = 21;
PrologParser.CUT = 22;
PrologParser.FULL_STOP = 23;
PrologParser.WHITE_SPACES = 24;
PrologParser.COMMENT = 25;
PrologParser.LINE_COMMENT = 26;
PrologParser.OPERATOR = 27;
PrologParser.ATOM = 28;

PrologParser.RULE_singletonTerm = 0;
PrologParser.RULE_singletonExpression = 1;
PrologParser.RULE_theory = 2;
PrologParser.RULE_optClause = 3;
PrologParser.RULE_clause = 4;
PrologParser.RULE_expression = 5;
PrologParser.RULE_outer = 6;
PrologParser.RULE_op = 7;
PrologParser.RULE_term = 8;
PrologParser.RULE_number = 9;
PrologParser.RULE_integer = 10;
PrologParser.RULE_real = 11;
PrologParser.RULE_variable = 12;
PrologParser.RULE_structure = 13;
PrologParser.RULE_list = 14;
PrologParser.RULE_set = 15;


function SingletonTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_singletonTerm;
    return this;
}

SingletonTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingletonTermContext.prototype.constructor = SingletonTermContext;

SingletonTermContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

SingletonTermContext.prototype.EOF = function() {
    return this.getToken(PrologParser.EOF, 0);
};

SingletonTermContext.prototype.FULL_STOP = function() {
    return this.getToken(PrologParser.FULL_STOP, 0);
};

SingletonTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitSingletonTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.SingletonTermContext = SingletonTermContext;

PrologParser.prototype.singletonTerm = function() {

    var localctx = new SingletonTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PrologParser.RULE_singletonTerm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 32;
        this.term();
        this.state = 34;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PrologParser.FULL_STOP) {
            this.state = 33;
            this.match(PrologParser.FULL_STOP);
        }

        this.state = 36;
        this.match(PrologParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingletonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_singletonExpression;
    return this;
}

SingletonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingletonExpressionContext.prototype.constructor = SingletonExpressionContext;

SingletonExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SingletonExpressionContext.prototype.EOF = function() {
    return this.getToken(PrologParser.EOF, 0);
};

SingletonExpressionContext.prototype.FULL_STOP = function() {
    return this.getToken(PrologParser.FULL_STOP, 0);
};

SingletonExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitSingletonExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.SingletonExpressionContext = SingletonExpressionContext;

PrologParser.prototype.singletonExpression = function() {

    var localctx = new SingletonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PrologParser.RULE_singletonExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 38;
        this.expression(P0, WITH_COMMA);
        this.state = 40;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PrologParser.FULL_STOP) {
            this.state = 39;
            this.match(PrologParser.FULL_STOP);
        }

        this.state = 42;
        this.match(PrologParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TheoryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_theory;
    this._clause = null; // ClauseContext
    this.clauses = []; // of ClauseContexts
    return this;
}

TheoryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TheoryContext.prototype.constructor = TheoryContext;

TheoryContext.prototype.EOF = function() {
    return this.getToken(PrologParser.EOF, 0);
};

TheoryContext.prototype.clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClauseContext);
    } else {
        return this.getTypedRuleContext(ClauseContext,i);
    }
};

TheoryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitTheory(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.TheoryContext = TheoryContext;

PrologParser.prototype.theory = function() {

    var localctx = new TheoryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PrologParser.RULE_theory);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 47;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 44;
                localctx._clause = this.clause();
                localctx.clauses.push(localctx._clause); 
            }
            this.state = 49;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
        }

        this.state = 50;
        this.match(PrologParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_optClause;
    this.isOver = null
    return this;
}

OptClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptClauseContext.prototype.constructor = OptClauseContext;

OptClauseContext.prototype.clause = function() {
    return this.getTypedRuleContext(ClauseContext,0);
};

OptClauseContext.prototype.EOF = function() {
    return this.getToken(PrologParser.EOF, 0);
};

OptClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitOptClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.OptClauseContext = OptClauseContext;

PrologParser.prototype.optClause = function() {

    var localctx = new OptClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PrologParser.RULE_optClause);
    try {
        this.state = 55;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 52;
            this.clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 53;
            this.match(PrologParser.EOF);
             localctx.isOver =  true 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_clause;
    return this;
}

ClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClauseContext.prototype.constructor = ClauseContext;

ClauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ClauseContext.prototype.FULL_STOP = function() {
    return this.getToken(PrologParser.FULL_STOP, 0);
};

ClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.ClauseContext = ClauseContext;

PrologParser.prototype.clause = function() {

    var localctx = new ClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PrologParser.RULE_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 57;
        this.expression(P0, WITH_COMMA);
        this.state = 58;
        this.match(PrologParser.FULL_STOP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState, priority, disabled) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_expression;
    this.priority = null
    this.disabled = null
    this.isTerm = null
    this.associativity = null
    this.bottom = null
    this.left = null; // TermContext
    this._op = null; // OpContext
    this.operators = []; // of OpContexts
    this._expression = null; // ExpressionContext
    this.right = []; // of ExpressionContexts
    this._outer = null; // OuterContext
    this.outers = []; // of OuterContexts
    this.priority = priority || null;
    this.disabled = disabled || null;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.term = function() {
    return this.getTypedRuleContext(TermContext,0);
};

ExpressionContext.prototype.op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OpContext);
    } else {
        return this.getTypedRuleContext(OpContext,i);
    }
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.outer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OuterContext);
    } else {
        return this.getTypedRuleContext(OuterContext,i);
    }
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.ExpressionContext = ExpressionContext;

PrologParser.prototype.expression = function(priority, disabled) {

    var localctx = new ExpressionContext(this, this._ctx, this.state, priority, disabled);
    this.enterRule(localctx, 10, PrologParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 131;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.state = 60;
            localctx.left = this.term();
             localctx.isTerm =  true 
            this.state = 111;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 107;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 62;
                    if (!(  this.lookaheadLeq(YFX, localctx.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(YFX, $priority, $disabled) ");
                    }
                    this.state = 63;
                    localctx._op = localctx._op = this.op(YFX);
                    localctx.operators.push(localctx._op);
                    this.state = 64;
                    localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
                    localctx.right.push(localctx._expression);
                     localctx.associativity =  YFX; localctx.bottom =  localctx._op.priority + 1 
                    this.state = 72;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 66;
                            if (!(  this.lookaheadEq(YFX, localctx._op.priority, localctx.disabled) )) {
                                throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(YFX, $op.priority, $disabled) ");
                            }
                            this.state = 67;
                            localctx._op = localctx._op = this.op(YFX);
                            localctx.operators.push(localctx._op);
                            this.state = 68;
                            localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
                            localctx.right.push(localctx._expression); 
                        }
                        this.state = 74;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
                    }

                    break;

                case 2:
                    this.state = 75;
                    if (!(  this.lookaheadLeq(XFY, localctx.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(XFY, $priority, $disabled) ");
                    }
                    this.state = 76;
                    localctx._op = localctx._op = this.op(XFY);
                    localctx.operators.push(localctx._op);
                    this.state = 77;
                    localctx._expression = this.expression(localctx._op.priority, localctx.disabled);
                    localctx.right.push(localctx._expression);
                     localctx.associativity =  XFY ; localctx.bottom =  localctx._op.priority 
                    this.state = 85;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 79;
                            if (!(  this.lookaheadEq(XFY, localctx._op.priority, localctx.disabled) )) {
                                throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(XFY, $op.priority, $disabled) ");
                            }
                            this.state = 80;
                            localctx._op = localctx._op = this.op(XFY);
                            localctx.operators.push(localctx._op);
                            this.state = 81;
                            localctx._expression = this.expression(localctx._op.priority, localctx.disabled);
                            localctx.right.push(localctx._expression); 
                        }
                        this.state = 87;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
                    }

                    break;

                case 3:
                    this.state = 88;
                    if (!(  this.lookaheadLeq(XFX, localctx.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(XFX, $priority, $disabled) ");
                    }
                    this.state = 89;
                    localctx._op = localctx._op = this.op(XFX);
                    localctx.operators.push(localctx._op);
                    this.state = 90;
                    localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
                    localctx.right.push(localctx._expression);
                     localctx.associativity =  XFX ; localctx.bottom =  localctx._op.priority + 1 
                    break;

                case 4:
                    this.state = 93;
                    if (!(  this.lookaheadLeq(YF, localctx.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(YF, $priority, $disabled) ");
                    }
                    this.state = 94;
                    localctx._op = localctx._op = this.op(YF);
                    localctx.operators.push(localctx._op);
                     localctx.associativity =  YF ; localctx.bottom =  localctx._op.priority 
                    this.state = 100;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 96;
                            if (!(  this.lookaheadEq(YF, localctx._op.priority, localctx.disabled) )) {
                                throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(YF, $op.priority, $disabled) ");
                            }
                            this.state = 97;
                            localctx._op = localctx._op = this.op(YF);
                            localctx.operators.push(localctx._op); 
                        }
                        this.state = 102;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
                    }

                    break;

                case 5:
                    this.state = 103;
                    if (!(  this.lookaheadLeq(XF, localctx.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(XF, $priority, $disabled) ");
                    }
                    this.state = 104;
                    localctx._op = localctx._op = this.op(XF);
                    localctx.operators.push(localctx._op);
                     localctx.associativity =  XF ; localctx.bottom =  localctx._op.priority + 1 
                    break;

                }
                 localctx.isTerm =  false 

            }
            break;

        case 2:
            this.state = 113;
            if (!(  this.lookaheadLeq(FX, localctx.priority, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(FX, $priority, $disabled) ");
            }
            this.state = 114;
            localctx._op = localctx._op = this.op(FX);
            localctx.operators.push(localctx._op);
             localctx.isTerm =  false
                    localctx.associativity =  FX ; localctx.bottom =  localctx._op.priority + 1; 
            this.state = 116;
            localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
            localctx.right.push(localctx._expression);
            break;

        case 3:
            this.state = 118;
            if (!(  this.lookaheadLeq(FY, localctx.priority, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookaheadLeq(FY, $priority, $disabled) ");
            }
            this.state = 119;
            localctx._op = localctx._op = this.op(FY);
            localctx.operators.push(localctx._op);
             localctx.isTerm =  false; localctx.associativity =  FY ; localctx.bottom =  localctx._op.priority; 
            this.state = 125;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 121;
                    if (!(  this.lookaheadEq(FY, localctx._op.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(FY, $op.priority, $disabled) ");
                    }
                    this.state = 122;
                    localctx._op = localctx._op = this.op(FY);
                    localctx.operators.push(localctx._op); 
                }
                this.state = 127;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
            }

            this.state = 128;
            localctx._expression = this.expression(localctx._op.priority, localctx.disabled);
            localctx.right.push(localctx._expression);
             localctx.associativity =  FY  
            break;

        }
        this.state = 139;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 133;
                if (!(  this.lookahead(NON_PREFIX, localctx.priority, localctx.bottom, localctx.disabled) )) {
                    throw new antlr4.error.FailedPredicateException(this, " this.lookahead(NON_PREFIX, $priority, $bottom, $disabled) ");
                }
                this.state = 134;
                localctx._outer = localctx._outer = this.outer(localctx.priority, localctx.bottom, localctx.disabled);
                localctx.outers.push(localctx._outer);
                 localctx.bottom =  localctx._outer.priority  
            }
            this.state = 141;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OuterContext(parser, parent, invokingState, top, bottom, disabled) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_outer;
    this.top = null
    this.bottom = null
    this.disabled = null
    this.priority = null
    this.isTerm = null
    this.associativity = null
    this.newBottom = null
    this._op = null; // OpContext
    this.operators = []; // of OpContexts
    this._expression = null; // ExpressionContext
    this.right = []; // of ExpressionContexts
    this._outer = null; // OuterContext
    this.outers = []; // of OuterContexts
    this.top = top || null;
    this.bottom = bottom || null;
    this.disabled = disabled || null;
    return this;
}

OuterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OuterContext.prototype.constructor = OuterContext;

OuterContext.prototype.op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OpContext);
    } else {
        return this.getTypedRuleContext(OpContext,i);
    }
};

OuterContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

OuterContext.prototype.outer = function() {
    return this.getTypedRuleContext(OuterContext,0);
};

OuterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitOuter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.OuterContext = OuterContext;

PrologParser.prototype.outer = function(top, bottom, disabled) {

    var localctx = new OuterContext(this, this._ctx, this.state, top, bottom, disabled);
    this.enterRule(localctx, 12, PrologParser.RULE_outer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.state = 142;
            if (!(  this.lookahead(YFX, localctx.top, localctx.bottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(YFX, $top, $bottom, $disabled) ");
            }
            this.state = 143;
            localctx._op = localctx._op = this.op(YFX);
            localctx.operators.push(localctx._op);
             localctx.associativity =  YFX ;localctx.priority =  localctx._op.priority;localctx.newBottom =  localctx._op.priority + 1 
            this.state = 145;
            localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
            localctx.right.push(localctx._expression);
            this.state = 152;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 146;
                    if (!(  this.lookaheadEq(YFX, localctx._op.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(YFX, $op.priority, $disabled) ");
                    }
                    this.state = 147;
                    localctx._op = localctx._op = this.op(YFX);
                    localctx.operators.push(localctx._op);
                    this.state = 148;
                    localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
                    localctx.right.push(localctx._expression); 
                }
                this.state = 154;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
            }

            break;

        case 2:
            this.state = 155;
            if (!(  this.lookahead(XFY, localctx.top, localctx.bottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(XFY, $top, $bottom, $disabled) ");
            }
            this.state = 156;
            localctx._op = localctx._op = this.op(XFY);
            localctx.operators.push(localctx._op);
             localctx.associativity =  XFY ;localctx.priority =  localctx._op.priority;localctx.newBottom =  localctx._op.priority 
            this.state = 158;
            localctx._expression = this.expression(localctx._op.priority, localctx.disabled);
            localctx.right.push(localctx._expression);
            this.state = 165;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 159;
                    if (!(  this.lookaheadEq(XFY, localctx._op.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(XFY, $op.priority, $disabled) ");
                    }
                    this.state = 160;
                    localctx._op = localctx._op = this.op(XFY);
                    localctx.operators.push(localctx._op);
                    this.state = 161;
                    localctx._expression = this.expression(localctx._op.priority, localctx.disabled);
                    localctx.right.push(localctx._expression); 
                }
                this.state = 167;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
            }

            break;

        case 3:
            this.state = 168;
            if (!(  this.lookahead(XFX, localctx.top, localctx.bottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(XFX, $top, $bottom, $disabled) ");
            }
            this.state = 169;
            localctx._op = localctx._op = this.op(XFX);
            localctx.operators.push(localctx._op);
             localctx.associativity =  XFX ; localctx.priority =  localctx._op.priority;localctx.newBottom =  localctx._op.priority + 1 
            this.state = 171;
            localctx._expression = this.expression(localctx._op.priority - 1, localctx.disabled);
            localctx.right.push(localctx._expression);
            break;

        case 4:
            this.state = 173;
            if (!(  this.lookahead(YF, localctx.top, localctx.bottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(YF, $top, $bottom, $disabled) ");
            }
            this.state = 174;
            localctx._op = localctx._op = this.op(YF);
            localctx.operators.push(localctx._op);
             localctx.associativity =  YF ; localctx.priority =  localctx._op.priority;localctx.newBottom =  localctx._op.priority 
            this.state = 180;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 176;
                    if (!(  this.lookaheadEq(YF, localctx._op.priority, localctx.disabled) )) {
                        throw new antlr4.error.FailedPredicateException(this, " this.lookaheadEq(YF, $op.priority, $disabled) ");
                    }
                    this.state = 177;
                    localctx._op = localctx._op = this.op(YF);
                    localctx.operators.push(localctx._op); 
                }
                this.state = 182;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
            }

            break;

        case 5:
            this.state = 183;
            if (!(  this.lookahead(XF, localctx.top, localctx.bottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(XF, $top, $bottom, $disabled) ");
            }
            this.state = 184;
            localctx._op = localctx._op = this.op(XF);
            localctx.operators.push(localctx._op);
             localctx.associativity =  XF ;localctx.priority =  localctx._op.priority;localctx.newBottom =  localctx._op.priority + 1 
            break;

        }
        this.state = 193;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        if(la_===1) {
            this.state = 189;
            if (!(  this.lookahead(NON_PREFIX, localctx.top, localctx.newBottom, localctx.disabled) )) {
                throw new antlr4.error.FailedPredicateException(this, " this.lookahead(NON_PREFIX, $top, $newBottom, $disabled) ");
            }
            this.state = 190;
            localctx._outer = localctx._outer = this.outer(localctx.top, localctx.newBottom, localctx.disabled);
            localctx.outers.push(localctx._outer);
             localctx.priority =  localctx._outer.priority 

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OpContext(parser, parent, invokingState, associativity) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_op;
    this.associativity = null
    this.priority = null
    this.symbol = null; // Token
    this.associativity = associativity || null;
    return this;
}

OpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpContext.prototype.constructor = OpContext;

OpContext.prototype.OPERATOR = function() {
    return this.getToken(PrologParser.OPERATOR, 0);
};

OpContext.prototype.COMMA = function() {
    return this.getToken(PrologParser.COMMA, 0);
};

OpContext.prototype.PIPE = function() {
    return this.getToken(PrologParser.PIPE, 0);
};

OpContext.prototype.SIGN = function() {
    return this.getToken(PrologParser.SIGN, 0);
};

OpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.OpContext = OpContext;

PrologParser.prototype.op = function(associativity) {

    var localctx = new OpContext(this, this._ctx, this.state, associativity);
    this.enterRule(localctx, 14, PrologParser.RULE_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        localctx.symbol = this._input.LT(1);
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PrologParser.SIGN) | (1 << PrologParser.COMMA) | (1 << PrologParser.PIPE) | (1 << PrologParser.OPERATOR))) !== 0))) {
            localctx.symbol = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
         localctx.priority =  this.getOperatorPriority(localctx.symbol, localctx.associativity) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_term;
    this.isNum = null
    this.isVar = null
    this.isList = null
    this.isStruct = null
    this.isExpr = null
    this.isSet = null
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.LPAR = function() {
    return this.getToken(PrologParser.LPAR, 0);
};

TermContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TermContext.prototype.RPAR = function() {
    return this.getToken(PrologParser.RPAR, 0);
};

TermContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

TermContext.prototype.variable = function() {
    return this.getTypedRuleContext(VariableContext,0);
};

TermContext.prototype.structure = function() {
    return this.getTypedRuleContext(StructureContext,0);
};

TermContext.prototype.list = function() {
    return this.getTypedRuleContext(ListContext,0);
};

TermContext.prototype.set = function() {
    return this.getTypedRuleContext(SetContext,0);
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.TermContext = TermContext;

PrologParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PrologParser.RULE_term);
    try {
        this.state = 218;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 198;
            this.match(PrologParser.LPAR);
            this.state = 199;
            this.expression(P0, WITH_COMMA);
             localctx.isExpr =  true 
            this.state = 201;
            this.match(PrologParser.RPAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 203;
            this.number();
             localctx.isNum =  true 
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 206;
            this.variable();
             localctx.isVar =  true 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 209;
            this.structure();
             localctx.isStruct =  true 
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 212;
            this.list();
             localctx.isList =  true  
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 215;
            this.set();
             localctx.isSet =  true  
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_number;
    this.isInt = null
    this.isReal = null
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.integer = function() {
    return this.getTypedRuleContext(IntegerContext,0);
};

NumberContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

NumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.NumberContext = NumberContext;

PrologParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PrologParser.RULE_number);
    try {
        this.state = 226;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 220;
            this.integer();
             localctx.isInt =  true 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 223;
            this.real();
             localctx.isReal =  true 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_integer;
    this.isHex = null
    this.isOct = null
    this.isBin = null
    this.isChar = null
    this.sign = null; // Token
    this.value = null; // Token
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.INTEGER = function() {
    return this.getToken(PrologParser.INTEGER, 0);
};

IntegerContext.prototype.HEX = function() {
    return this.getToken(PrologParser.HEX, 0);
};

IntegerContext.prototype.OCT = function() {
    return this.getToken(PrologParser.OCT, 0);
};

IntegerContext.prototype.BINARY = function() {
    return this.getToken(PrologParser.BINARY, 0);
};

IntegerContext.prototype.CHAR = function() {
    return this.getToken(PrologParser.CHAR, 0);
};

IntegerContext.prototype.SIGN = function() {
    return this.getToken(PrologParser.SIGN, 0);
};

IntegerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitInteger(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.IntegerContext = IntegerContext;

PrologParser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PrologParser.RULE_integer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PrologParser.SIGN) {
            this.state = 228;
            localctx.sign = this.match(PrologParser.SIGN);
        }

        this.state = 240;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case PrologParser.INTEGER:
            this.state = 231;
            localctx.value = this.match(PrologParser.INTEGER);
            break;
        case PrologParser.HEX:
            this.state = 232;
            localctx.value = this.match(PrologParser.HEX);
             localctx.isHex =  true 
            break;
        case PrologParser.OCT:
            this.state = 234;
            localctx.value = this.match(PrologParser.OCT);
             localctx.isOct =  true 
            break;
        case PrologParser.BINARY:
            this.state = 236;
            localctx.value = this.match(PrologParser.BINARY);
             localctx.isBin =  true 
            break;
        case PrologParser.CHAR:
            this.state = 238;
            localctx.value = this.match(PrologParser.CHAR);
             localctx.isChar =  true 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RealContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_real;
    this.sign = null; // Token
    this.value = null; // Token
    return this;
}

RealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealContext.prototype.constructor = RealContext;

RealContext.prototype.FLOAT = function() {
    return this.getToken(PrologParser.FLOAT, 0);
};

RealContext.prototype.SIGN = function() {
    return this.getToken(PrologParser.SIGN, 0);
};

RealContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitReal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.RealContext = RealContext;

PrologParser.prototype.real = function() {

    var localctx = new RealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PrologParser.RULE_real);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PrologParser.SIGN) {
            this.state = 242;
            localctx.sign = this.match(PrologParser.SIGN);
        }

        this.state = 245;
        localctx.value = this.match(PrologParser.FLOAT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_variable;
    this.isAnonymous = null
    this.value = null; // Token
    return this;
}

VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableContext.prototype.constructor = VariableContext;

VariableContext.prototype.VARIABLE = function() {
    return this.getToken(PrologParser.VARIABLE, 0);
};

VariableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitVariable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.VariableContext = VariableContext;

PrologParser.prototype.variable = function() {

    var localctx = new VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PrologParser.RULE_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 247;
        localctx.value = this.match(PrologParser.VARIABLE);
         localctx.isAnonymous =  this.isAnonymous(localctx.value) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StructureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_structure;
    this.arity = 0
    this.isTruth = null
    this.isList = null
    this.isSet = null
    this.isString = null
    this.isCut = null
    this.functor = null; // Token
    this._expression = null; // ExpressionContext
    this.args = []; // of ExpressionContexts
    return this;
}

StructureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructureContext.prototype.constructor = StructureContext;

StructureContext.prototype.BOOL = function() {
    return this.getToken(PrologParser.BOOL, 0);
};

StructureContext.prototype.EMPTY_LIST = function() {
    return this.getToken(PrologParser.EMPTY_LIST, 0);
};

StructureContext.prototype.CUT = function() {
    return this.getToken(PrologParser.CUT, 0);
};

StructureContext.prototype.EMPTY_SET = function() {
    return this.getToken(PrologParser.EMPTY_SET, 0);
};

StructureContext.prototype.DQ_STRING = function() {
    return this.getToken(PrologParser.DQ_STRING, 0);
};

StructureContext.prototype.LPAR = function() {
    return this.getToken(PrologParser.LPAR, 0);
};

StructureContext.prototype.RPAR = function() {
    return this.getToken(PrologParser.RPAR, 0);
};

StructureContext.prototype.OPERATOR = function() {
    return this.getToken(PrologParser.OPERATOR, 0);
};

StructureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PrologParser.COMMA);
    } else {
        return this.getToken(PrologParser.COMMA, i);
    }
};


StructureContext.prototype.PIPE = function() {
    return this.getToken(PrologParser.PIPE, 0);
};

StructureContext.prototype.SIGN = function() {
    return this.getToken(PrologParser.SIGN, 0);
};

StructureContext.prototype.SQ_STRING = function() {
    return this.getToken(PrologParser.SQ_STRING, 0);
};

StructureContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StructureContext.prototype.ATOM = function() {
    return this.getToken(PrologParser.ATOM, 0);
};

StructureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitStructure(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.StructureContext = StructureContext;

PrologParser.prototype.structure = function() {

    var localctx = new StructureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PrologParser.RULE_structure);
    var _la = 0; // Token type
    try {
        this.state = 315;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 250;
            localctx.functor = this.match(PrologParser.BOOL);
             localctx.isTruth =  true 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 252;
            localctx.functor = this.match(PrologParser.EMPTY_LIST);
             localctx.isList =  true 
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 254;
            localctx.functor = this.match(PrologParser.CUT);
             localctx.isCut =  true 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 256;
            localctx.functor = this.match(PrologParser.EMPTY_SET);
             localctx.isSet =  true 
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 258;
            localctx.functor = this.match(PrologParser.DQ_STRING);
             localctx.isString =  true 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 260;
            this.match(PrologParser.LPAR);
            this.state = 261;
            localctx.functor = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PrologParser.SIGN) | (1 << PrologParser.COMMA) | (1 << PrologParser.PIPE) | (1 << PrologParser.OPERATOR))) !== 0))) {
                localctx.functor = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 262;
            this.match(PrologParser.RPAR);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 263;
            localctx.functor = this.match(PrologParser.SQ_STRING);
             localctx.isString =  true 
            this.state = 279;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 265;
                this.match(PrologParser.LPAR);
                this.state = 266;
                localctx._expression = this.expression(P0, NO_COMMA);
                localctx.args.push(localctx._expression);
                 localctx.arity++; 
                this.state = 274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PrologParser.COMMA) {
                    this.state = 268;
                    this.match(PrologParser.COMMA);
                    this.state = 269;
                    localctx._expression = this.expression(P0, NO_COMMA);
                    localctx.args.push(localctx._expression);
                     localctx.arity++; 
                    this.state = 276;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 277;
                this.match(PrologParser.RPAR);

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 281;
            localctx.functor = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===PrologParser.EMPTY_SET || _la===PrologParser.ATOM)) {
                localctx.functor = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 282;
                this.match(PrologParser.LPAR);
                this.state = 283;
                localctx._expression = this.expression(P0, NO_COMMA);
                localctx.args.push(localctx._expression);
                 localctx.arity++; 
                this.state = 291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===PrologParser.COMMA) {
                    this.state = 285;
                    this.match(PrologParser.COMMA);
                    this.state = 286;
                    localctx._expression = this.expression(P0, NO_COMMA);
                    localctx.args.push(localctx._expression);
                     localctx.arity++; 
                    this.state = 293;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 294;
                this.match(PrologParser.RPAR);

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 298;
            if (!(  !this.lookaheadIs(PREFIX) )) {
                throw new antlr4.error.FailedPredicateException(this, " !this.lookaheadIs(PREFIX) ");
            }
            this.state = 299;
            localctx.functor = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PrologParser.SIGN) | (1 << PrologParser.COMMA) | (1 << PrologParser.PIPE) | (1 << PrologParser.OPERATOR))) !== 0))) {
                localctx.functor = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 300;
            this.match(PrologParser.LPAR);
            this.state = 301;
            localctx._expression = this.expression(P0, NO_COMMA);
            localctx.args.push(localctx._expression);
             localctx.arity++; 
            this.state = 309;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 303;
                    this.match(PrologParser.COMMA);
                    this.state = 304;
                    localctx._expression = this.expression(P0, NO_COMMA);
                    localctx.args.push(localctx._expression);
                     localctx.arity++;  
                }
                this.state = 311;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
            }

            this.state = 313;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 312;
                this.match(PrologParser.RPAR);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_list;
    this.length = 0
    this.hasTail = null
    this._expression = null; // ExpressionContext
    this.items = []; // of ExpressionContexts
    this.tail = null; // ExpressionContext
    return this;
}

ListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListContext.prototype.constructor = ListContext;

ListContext.prototype.LSQUARE = function() {
    return this.getToken(PrologParser.LSQUARE, 0);
};

ListContext.prototype.RSQUARE = function() {
    return this.getToken(PrologParser.RSQUARE, 0);
};

ListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PrologParser.COMMA);
    } else {
        return this.getToken(PrologParser.COMMA, i);
    }
};


ListContext.prototype.PIPE = function() {
    return this.getToken(PrologParser.PIPE, 0);
};

ListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.ListContext = ListContext;

PrologParser.prototype.list = function() {

    var localctx = new ListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PrologParser.RULE_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.match(PrologParser.LSQUARE);
        this.state = 318;
        localctx._expression = this.expression(P0, NO_COMMA_PIPE);
        localctx.items.push(localctx._expression);
         localctx.length++; 
        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PrologParser.COMMA) {
            this.state = 320;
            this.match(PrologParser.COMMA);
            this.state = 321;
            localctx._expression = this.expression(P0, NO_COMMA_PIPE);
            localctx.items.push(localctx._expression);
             localctx.length++; 
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 332;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===PrologParser.PIPE) {
            this.state = 329;
            this.match(PrologParser.PIPE);
             localctx.hasTail =  true 
            this.state = 331;
            localctx.tail = this.expression(P0, WITH_COMMA);
        }

        this.state = 334;
        this.match(PrologParser.RSQUARE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PrologParser.RULE_set;
    this.length = 0
    this._expression = null; // ExpressionContext
    this.items = []; // of ExpressionContexts
    return this;
}

SetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetContext.prototype.constructor = SetContext;

SetContext.prototype.LBRACE = function() {
    return this.getToken(PrologParser.LBRACE, 0);
};

SetContext.prototype.RBRACE = function() {
    return this.getToken(PrologParser.RBRACE, 0);
};

SetContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PrologParser.COMMA);
    } else {
        return this.getToken(PrologParser.COMMA, i);
    }
};


SetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PrologParserVisitor ) {
        return visitor.visitSet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PrologParser.SetContext = SetContext;

PrologParser.prototype.set = function() {

    var localctx = new SetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PrologParser.RULE_set);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(PrologParser.LBRACE);
        this.state = 337;
        localctx._expression = this.expression(P0, NO_COMMA);
        localctx.items.push(localctx._expression);
         localctx.length++; 
        this.state = 345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PrologParser.COMMA) {
            this.state = 339;
            this.match(PrologParser.COMMA);
            this.state = 340;
            localctx._expression = this.expression(P0, NO_COMMA);
            localctx.items.push(localctx._expression);
             localctx.length++; 
            this.state = 347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 348;
        this.match(PrologParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


PrologParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 5:
			return this.expression_sempred(localctx, predIndex);
	case 6:
			return this.outer_sempred(localctx, predIndex);
	case 13:
			return this.structure_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

PrologParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return  this.lookaheadLeq(YFX, localctx.priority, localctx.disabled) ;
		case 1:
			return  this.lookaheadEq(YFX, localctx._op.priority, localctx.disabled) ;
		case 2:
			return  this.lookaheadLeq(XFY, localctx.priority, localctx.disabled) ;
		case 3:
			return  this.lookaheadEq(XFY, localctx._op.priority, localctx.disabled) ;
		case 4:
			return  this.lookaheadLeq(XFX, localctx.priority, localctx.disabled) ;
		case 5:
			return  this.lookaheadLeq(YF, localctx.priority, localctx.disabled) ;
		case 6:
			return  this.lookaheadEq(YF, localctx._op.priority, localctx.disabled) ;
		case 7:
			return  this.lookaheadLeq(XF, localctx.priority, localctx.disabled) ;
		case 8:
			return  this.lookaheadLeq(FX, localctx.priority, localctx.disabled) ;
		case 9:
			return  this.lookaheadLeq(FY, localctx.priority, localctx.disabled) ;
		case 10:
			return  this.lookaheadEq(FY, localctx._op.priority, localctx.disabled) ;
		case 11:
			return  this.lookahead(NON_PREFIX, localctx.priority, localctx.bottom, localctx.disabled) ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PrologParser.prototype.outer_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return  this.lookahead(YFX, localctx.top, localctx.bottom, localctx.disabled) ;
		case 13:
			return  this.lookaheadEq(YFX, localctx._op.priority, localctx.disabled) ;
		case 14:
			return  this.lookahead(XFY, localctx.top, localctx.bottom, localctx.disabled) ;
		case 15:
			return  this.lookaheadEq(XFY, localctx._op.priority, localctx.disabled) ;
		case 16:
			return  this.lookahead(XFX, localctx.top, localctx.bottom, localctx.disabled) ;
		case 17:
			return  this.lookahead(YF, localctx.top, localctx.bottom, localctx.disabled) ;
		case 18:
			return  this.lookaheadEq(YF, localctx._op.priority, localctx.disabled) ;
		case 19:
			return  this.lookahead(XF, localctx.top, localctx.bottom, localctx.disabled) ;
		case 20:
			return  this.lookahead(NON_PREFIX, localctx.top, localctx.newBottom, localctx.disabled) ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};

PrologParser.prototype.structure_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return  !this.lookaheadIs(PREFIX) ;
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.PrologParser = PrologParser;

},{"./Associativity":6,"./DynamicParser":8,"./PrologParserVisitor":11,"antlr4/index":60}],11:[function(require,module,exports){
// Generated from /builds/pika-lab/tuprolog/2p-in-kotlin/parser-js/src/main/antlr/PrologParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete generic visitor for a parse tree produced by PrologParser.

function PrologParserVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

PrologParserVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
PrologParserVisitor.prototype.constructor = PrologParserVisitor;

// Visit a parse tree produced by PrologParser#singletonTerm.
PrologParserVisitor.prototype.visitSingletonTerm = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#singletonExpression.
PrologParserVisitor.prototype.visitSingletonExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#theory.
PrologParserVisitor.prototype.visitTheory = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#optClause.
PrologParserVisitor.prototype.visitOptClause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#clause.
PrologParserVisitor.prototype.visitClause = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#expression.
PrologParserVisitor.prototype.visitExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#outer.
PrologParserVisitor.prototype.visitOuter = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#op.
PrologParserVisitor.prototype.visitOp = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#term.
PrologParserVisitor.prototype.visitTerm = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#number.
PrologParserVisitor.prototype.visitNumber = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#integer.
PrologParserVisitor.prototype.visitInteger = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#real.
PrologParserVisitor.prototype.visitReal = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#variable.
PrologParserVisitor.prototype.visitVariable = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#structure.
PrologParserVisitor.prototype.visitStructure = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#list.
PrologParserVisitor.prototype.visitList = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by PrologParser#set.
PrologParserVisitor.prototype.visitSet = function(ctx) {
  return this.visitChildren(ctx);
};



exports.PrologParserVisitor = PrologParserVisitor;

},{"antlr4/index":60}],12:[function(require,module,exports){
const StringType = Object.freeze({
    SINGLE_QUOTED: 0,
    DOUBLE_QUOTED: 1
});

exports.StringType = StringType;

},{}],13:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '2p-parser-js'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '2p-parser-js'.");
    }root['2p-parser-js'] = factory(typeof this['2p-parser-js'] === 'undefined' ? {} : this['2p-parser-js'], kotlin);
  }
}(this, function (_, Kotlin) {
  'use strict';
  var throwCCE = Kotlin.throwCCE;
  var equals = Kotlin.equals;
  function getNameAccordingTo($receiver, lexer) {
    var tmp$;
    return typeof (tmp$ = lexer.symbolicNames[$receiver.type]) === 'string' ? tmp$ : throwCCE();
  }
  function jsClassName(obj) {
    var tmp$, tmp$_0, tmp$_1;
    return (tmp$_1 = (tmp$_0 = (tmp$ = obj != null ? obj.__proto__ : null) != null ? tmp$.constructor : null) != null ? tmp$_0.name : null) == null || typeof tmp$_1 === 'string' ? tmp$_1 : throwCCE();
  }
  function isParseCancellationException(obj) {
    return equals(jsClassName(obj), 'ParseCancellationException');
  }
  function isRecognitionException(obj) {
    return equals(jsClassName(obj), 'RecognitionException');
  }
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$parser = package$tuprolog.parser || (package$tuprolog.parser = {});
  package$parser.getNameAccordingTo_5n8wua$ = getNameAccordingTo;
  package$parser.jsClassName_za3rmp$ = jsClassName;
  package$parser.isParseCancellationException_za3rmp$ = isParseCancellationException;
  package$parser.isRecognitionException_za3rmp$ = isRecognitionException;
  Kotlin.defineModule('2p-parser-js', _);
  return _;
}));



},{"kotlin":66}],14:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-theory', '@tuprolog/2p-core', '@tuprolog/2p-parser-core'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-theory'), require('@tuprolog/2p-core'), require('@tuprolog/2p-parser-core'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-theory'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-parser-theory'.");
    }if (typeof this['@tuprolog/2p-theory'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-theory'. Its dependency '@tuprolog/2p-theory' was not found. Please, check whether '@tuprolog/2p-theory' is loaded prior to '@tuprolog/2p-parser-theory'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-theory'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-parser-theory'.");
    }if (typeof this['@tuprolog/2p-parser-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-parser-theory'. Its dependency '@tuprolog/2p-parser-core' was not found. Please, check whether '@tuprolog/2p-parser-core' is loaded prior to '@tuprolog/2p-parser-theory'.");
    }root['@tuprolog/2p-parser-theory'] = factory(typeof this['@tuprolog/2p-parser-theory'] === 'undefined' ? {} : this['@tuprolog/2p-parser-theory'], kotlin, this['@tuprolog/2p-theory'], this['@tuprolog/2p-core'], this['@tuprolog/2p-parser-core']);
  }
}(this, function (_, Kotlin, $module$_2p_theory, $module$_2p_core, $module$_2p_parser_core) {
  'use strict';
  var ClauseDatabase = $module$_2p_theory.it.unibo.tuprolog.theory.ClauseDatabase;
  var toList = Kotlin.kotlin.sequences.toList_veqyi0$;
  var OperatorSet_init = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet_init_1gzv2l$;
  var OperatorSet = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var parsing = $module$_2p_parser_core.it.unibo.tuprolog.core.parsing;
  var PrologVisitor = $module$_2p_parser_core.it.unibo.tuprolog.core.parsing.PrologVisitor;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var toClause = $module$_2p_parser_core.it.unibo.tuprolog.core.parsing.termToClause;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  function ClausesParser() {
    ClausesParser$Companion_getInstance();
  }
  ClausesParser.prototype.parseClauseDatabaseWithOperators = function (input, operators) {
    return ClauseDatabase.Companion.ofSequence(this.parseClausesLazilyWithOperators(input, operators));
  };
  ClausesParser.prototype.parseClauseDatabase = function (input) {
    return this.parseClauseDatabaseWithOperators(input, this.defaultOperatorSet);
  };
  ClausesParser.prototype.parseClausesLazily = function (input) {
    return this.parseClausesLazilyWithOperators(input, this.defaultOperatorSet);
  };
  ClausesParser.prototype.parseClausesWithOperators = function (input, operators) {
    return toList(this.parseClausesLazilyWithOperators(input, operators));
  };
  ClausesParser.prototype.parseClauses = function (input) {
    return this.parseClausesWithOperators(input, this.defaultOperatorSet);
  };
  function ClausesParser$Companion() {
    ClausesParser$Companion_instance = this;
    this.withNoOperator = this.withOperators([]);
    this.withStandardOperators = this.withOperatorSet(OperatorSet.Companion.STANDARD);
    this.withDefaultOperators = this.withOperatorSet(OperatorSet.Companion.DEFAULT);
  }
  ClausesParser$Companion.prototype.withOperatorSet = function (operators) {
    return clausesParserWithOperators(operators);
  };
  ClausesParser$Companion.prototype.withOperators = function (operators) {
    return this.withOperatorSet(OperatorSet_init(operators.slice()));
  };
  ClausesParser$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ClausesParser$Companion_instance = null;
  function ClausesParser$Companion_getInstance() {
    if (ClausesParser$Companion_instance === null) {
      new ClausesParser$Companion();
    }return ClausesParser$Companion_instance;
  }
  ClausesParser.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ClausesParser',
    interfaces: []
  };
  var defaultParser;
  function parse($receiver, input, operators) {
    return defaultParser.parseClauseDatabaseWithOperators(input, operators);
  }
  function parse_0($receiver, input) {
    return defaultParser.parseClauseDatabase(input);
  }
  function parseAsClauseDatabase($receiver, operators) {
    return defaultParser.parseClauseDatabaseWithOperators($receiver, operators);
  }
  function parseAsClauseDatabase_0($receiver) {
    return defaultParser.parseClauseDatabase($receiver);
  }
  function parseAsClauses($receiver, operators) {
    return defaultParser.parseClausesWithOperators($receiver, operators);
  }
  function parseAsClauses_0($receiver) {
    return defaultParser.parseClauses($receiver);
  }
  function parseAsClausesLazily($receiver, operators) {
    return defaultParser.parseClausesLazilyWithOperators($receiver, operators);
  }
  function parseAsClausesLazily_0($receiver) {
    return defaultParser.parseClausesLazily($receiver);
  }
  function clausesParserWithOperators(operators) {
    return new ClausesParserImpl(operators);
  }
  function ClausesParserImpl(defaultOperatorSet) {
    this.defaultOperatorSet_177oz7$_0 = defaultOperatorSet;
  }
  Object.defineProperty(ClausesParserImpl.prototype, 'defaultOperatorSet', {
    get: function () {
      return this.defaultOperatorSet_177oz7$_0;
    }
  });
  function ClausesParserImpl$parseClausesLazily$lambda(it) {
    return it.accept(new PrologVisitor());
  }
  function ClausesParserImpl$parseClausesLazily$lambda_0(it) {
    return toClause(it);
  }
  ClausesParserImpl.prototype.parseClausesLazilyWithOperators = function (input, operators) {
    return map(map(parsing.PrologParserFactory.parseClauses_z2gvgg$(input, operators), ClausesParserImpl$parseClausesLazily$lambda), ClausesParserImpl$parseClausesLazily$lambda_0);
  };
  ClausesParserImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClausesParserImpl',
    interfaces: [ClausesParser]
  };
  Object.defineProperty(ClausesParser, 'Companion', {
    get: ClausesParser$Companion_getInstance
  });
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$theory = package$tuprolog.theory || (package$tuprolog.theory = {});
  var package$parsing = package$theory.parsing || (package$theory.parsing = {});
  package$parsing.ClausesParser = ClausesParser;
  package$parsing.parseClauseDatabaseWithOperators = parse;
  package$parsing.parseClauseDatabase = parse_0;
  package$parsing.parseAsClauseDatabaseWithOperators = parseAsClauseDatabase;
  package$parsing.parseAsClauseDatabase = parseAsClauseDatabase_0;
  package$parsing.parseAsClausesWithOperators = parseAsClauses;
  package$parsing.parseAsClauses = parseAsClauses_0;
  package$parsing.parseAsClausesLazilyWithOperators = parseAsClausesLazily;
  package$parsing.parseAsClausesLazily = parseAsClausesLazily_0;
  package$parsing.clausesParserWithOperators_7gu0wi$ = clausesParserWithOperators;
  package$parsing.ClausesParserImpl = ClausesParserImpl;
  ClausesParserImpl.prototype.parseClausesLazily = ClausesParser.prototype.parseClausesLazily;
  ClausesParserImpl.prototype.parseClauseDatabaseWithOperators = ClausesParser.prototype.parseClauseDatabaseWithOperators;
  ClausesParserImpl.prototype.parseClauseDatabase = ClausesParser.prototype.parseClauseDatabase;
  ClausesParserImpl.prototype.parseClausesWithOperators = ClausesParser.prototype.parseClausesWithOperators;
  ClausesParserImpl.prototype.parseClauses = ClausesParser.prototype.parseClauses;
  defaultParser = ClausesParser$Companion_getInstance().withDefaultOperators;
  Kotlin.defineModule('@tuprolog/2p-parser-theory', _);
  return _;
}));



},{"@tuprolog/2p-core":4,"@tuprolog/2p-parser-core":5,"@tuprolog/2p-theory":17,"kotlin":66}],15:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-solve', '@tuprolog/2p-theory', '@tuprolog/2p-core', '@tuprolog/2p-unify'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-solve'), require('@tuprolog/2p-theory'), require('@tuprolog/2p-core'), require('@tuprolog/2p-unify'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve-classic'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-solve-classic'.");
    }if (typeof this['@tuprolog/2p-solve'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve-classic'. Its dependency '@tuprolog/2p-solve' was not found. Please, check whether '@tuprolog/2p-solve' is loaded prior to '@tuprolog/2p-solve-classic'.");
    }if (typeof this['@tuprolog/2p-theory'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve-classic'. Its dependency '@tuprolog/2p-theory' was not found. Please, check whether '@tuprolog/2p-theory' is loaded prior to '@tuprolog/2p-solve-classic'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve-classic'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-solve-classic'.");
    }if (typeof this['@tuprolog/2p-unify'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve-classic'. Its dependency '@tuprolog/2p-unify' was not found. Please, check whether '@tuprolog/2p-unify' is loaded prior to '@tuprolog/2p-solve-classic'.");
    }root['@tuprolog/2p-solve-classic'] = factory(typeof this['@tuprolog/2p-solve-classic'] === 'undefined' ? {} : this['@tuprolog/2p-solve-classic'], kotlin, this['@tuprolog/2p-solve'], this['@tuprolog/2p-theory'], this['@tuprolog/2p-core'], this['@tuprolog/2p-unify']);
  }
}(this, function (_, Kotlin, $module$_2p_solve, $module$_2p_theory, $module$_2p_core, $module$_2p_unify) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var ensureNotNull = Kotlin.ensureNotNull;
  var Unit = Kotlin.kotlin.Unit;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var sequence = Kotlin.kotlin.sequences.sequence_o0x0bg$;
  var toString = Kotlin.toString;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Libraries_init = $module$_2p_solve.it.unibo.tuprolog.solve.library.Libraries_init_93upih$;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var ClauseDatabase = $module$_2p_theory.it.unibo.tuprolog.theory.ClauseDatabase;
  var ExecutionContextAware = $module$_2p_solve.it.unibo.tuprolog.solve.ExecutionContextAware;
  var Substitution = $module$_2p_core.it.unibo.tuprolog.core.Substitution;
  var Truth = $module$_2p_core.it.unibo.tuprolog.core.Truth;
  var L0 = Kotlin.Long.ZERO;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var toSet = Kotlin.kotlin.sequences.toSet_veqyi0$;
  var emptySet = Kotlin.kotlin.collections.emptySet_287e2$;
  var plus = Kotlin.kotlin.collections.plus_khz7k3$;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var filter = Kotlin.kotlin.sequences.filter_euau3h$;
  var Struct = $module$_2p_core.it.unibo.tuprolog.core.Struct;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var ExecutionContext = $module$_2p_solve.it.unibo.tuprolog.solve.ExecutionContext;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Var = $module$_2p_core.it.unibo.tuprolog.core.Var;
  var currentTimeInstant = $module$_2p_solve.it.unibo.tuprolog.solve.currentTimeInstant;
  var equals = Kotlin.equals;
  var throwCCE = Kotlin.throwCCE;
  var Solution$Yes = $module$_2p_solve.it.unibo.tuprolog.solve.Solution.Yes;
  var Solver = $module$_2p_solve.it.unibo.tuprolog.solve.Solver;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var mapOf = Kotlin.kotlin.collections.mapOf_x2b85n$;
  var mapOf_0 = Kotlin.kotlin.collections.mapOf_qfcya0$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var SolverFactory = $module$_2p_solve.it.unibo.tuprolog.solve.SolverFactory;
  var MutableSolver = $module$_2p_solve.it.unibo.tuprolog.solve.MutableSolver;
  var InputChannel = $module$_2p_solve.it.unibo.tuprolog.solve.channel.InputChannel;
  var OutputChannel = $module$_2p_solve.it.unibo.tuprolog.solve.channel.OutputChannel;
  var NoSuchElementException_init = Kotlin.kotlin.NoSuchElementException_init;
  var TimeOutException = $module$_2p_solve.it.unibo.tuprolog.solve.exception.TimeOutException;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init;
  var Solution$No = $module$_2p_solve.it.unibo.tuprolog.solve.Solution.No;
  var NoSuchElementException_init_0 = Kotlin.kotlin.NoSuchElementException;
  var MessageError = $module$_2p_solve.it.unibo.tuprolog.solve.exception.error.MessageError;
  var SystemError = $module$_2p_solve.it.unibo.tuprolog.solve.exception.error.SystemError;
  var Unificator = $module$_2p_unify.it.unibo.tuprolog.unify.Unificator;
  var Substitution$Unifier = $module$_2p_core.it.unibo.tuprolog.core.Substitution.Unifier;
  var PrologError = $module$_2p_solve.it.unibo.tuprolog.solve.exception.PrologError;
  var Solution$Halt = $module$_2p_solve.it.unibo.tuprolog.solve.Solution.Halt;
  var L1 = Kotlin.Long.ONE;
  var TuPrologRuntimeException = $module$_2p_solve.it.unibo.tuprolog.solve.exception.TuPrologRuntimeException;
  var InstantiationError = $module$_2p_solve.it.unibo.tuprolog.solve.exception.error.InstantiationError;
  var extractSignature = $module$_2p_solve.it.unibo.tuprolog.solve.extractSignature;
  var TypeError = $module$_2p_solve.it.unibo.tuprolog.solve.exception.error.TypeError;
  var Signature = $module$_2p_solve.it.unibo.tuprolog.solve.Signature;
  var TypeError$Expected = $module$_2p_solve.it.unibo.tuprolog.solve.exception.error.TypeError.Expected;
  var IllegalStateException_init_0 = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var prepareForExecution = $module$_2p_core.it.unibo.tuprolog.core.prepareForExecutionWithUnifier;
  var setOf = Kotlin.kotlin.collections.setOf_i5x0yv$;
  var Atom = $module$_2p_core.it.unibo.tuprolog.core.Atom;
  var firstOrNull = Kotlin.kotlin.sequences.firstOrNull_veqyi0$;
  var contains = Kotlin.kotlin.collections.contains_2ws7j4$;
  var any = Kotlin.kotlin.sequences.any_veqyi0$;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var magic = $module$_2p_solve.it.unibo.tuprolog.solve.library.stdlib.magic;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var Rule = $module$_2p_core.it.unibo.tuprolog.core.Rule;
  var Tuple = $module$_2p_core.it.unibo.tuprolog.core.Tuple;
  var Solve$Request = $module$_2p_solve.it.unibo.tuprolog.solve.Solve.Request;
  var stdlib = $module$_2p_solve.it.unibo.tuprolog.solve.library.stdlib;
  var toMap = Kotlin.kotlin.collections.toMap_ah2ab9$;
  var plus_0 = Kotlin.kotlin.collections.plus_iwxh38$;
  var AliasedLibrary = $module$_2p_solve.it.unibo.tuprolog.solve.library.AliasedLibrary;
  var PrimitiveWrapper = $module$_2p_solve.it.unibo.tuprolog.solve.primitive.PrimitiveWrapper;
  var UnaryPredicate = $module$_2p_solve.it.unibo.tuprolog.solve.library.stdlib.primitive.UnaryPredicate;
  var listOf = Kotlin.kotlin.collections.listOf_mh5how$;
  var primitive = $module$_2p_solve.it.unibo.tuprolog.solve.library.stdlib.primitive;
  var RuleWrapper_init = $module$_2p_solve.it.unibo.tuprolog.solve.rule.RuleWrapper_init_kn9vy1$;
  var RuleWrapper = $module$_2p_solve.it.unibo.tuprolog.solve.rule.RuleWrapper;
  var listOf_0 = Kotlin.kotlin.collections.listOf_i5x0yv$;
  ChoicePointContext$Primitives.prototype = Object.create(ChoicePointContext.prototype);
  ChoicePointContext$Primitives.prototype.constructor = ChoicePointContext$Primitives;
  ChoicePointContext$Rules.prototype = Object.create(ChoicePointContext.prototype);
  ChoicePointContext$Rules.prototype.constructor = ChoicePointContext$Rules;
  MutableClassicSolver.prototype = Object.create(ClassicSolver.prototype);
  MutableClassicSolver.prototype.constructor = MutableClassicSolver;
  AbstractEndState.prototype = Object.create(AbstractState.prototype);
  AbstractEndState.prototype.constructor = AbstractEndState;
  StateBacktracking.prototype = Object.create(AbstractState.prototype);
  StateBacktracking.prototype.constructor = StateBacktracking;
  StateEnd.prototype = Object.create(AbstractEndState.prototype);
  StateEnd.prototype.constructor = StateEnd;
  StateException.prototype = Object.create(AbstractState.prototype);
  StateException.prototype.constructor = StateException;
  StateGoalSelection.prototype = Object.create(AbstractState.prototype);
  StateGoalSelection.prototype.constructor = StateGoalSelection;
  StateHalt.prototype = Object.create(AbstractEndState.prototype);
  StateHalt.prototype.constructor = StateHalt;
  StateInit.prototype = Object.create(AbstractState.prototype);
  StateInit.prototype.constructor = StateInit;
  StatePrimitiveExecution.prototype = Object.create(AbstractState.prototype);
  StatePrimitiveExecution.prototype.constructor = StatePrimitiveExecution;
  StatePrimitiveSelection.prototype = Object.create(AbstractState.prototype);
  StatePrimitiveSelection.prototype.constructor = StatePrimitiveSelection;
  StateRuleExecution.prototype = Object.create(AbstractState.prototype);
  StateRuleExecution.prototype.constructor = StateRuleExecution;
  StateRuleSelection$Companion$CutLimit$None.prototype = Object.create(StateRuleSelection$Companion$CutLimit.prototype);
  StateRuleSelection$Companion$CutLimit$None.prototype.constructor = StateRuleSelection$Companion$CutLimit$None;
  StateRuleSelection$Companion$CutLimit$Actual.prototype = Object.create(StateRuleSelection$Companion$CutLimit.prototype);
  StateRuleSelection$Companion$CutLimit$Actual.prototype.constructor = StateRuleSelection$Companion$CutLimit$Actual;
  StateRuleSelection.prototype = Object.create(AbstractState.prototype);
  StateRuleSelection.prototype.constructor = StateRuleSelection;
  Throw.prototype = Object.create(UnaryPredicate.prototype);
  Throw.prototype.constructor = Throw;
  Call.prototype = Object.create(RuleWrapper.prototype);
  Call.prototype.constructor = Call;
  Catch.prototype = Object.create(RuleWrapper.prototype);
  Catch.prototype.constructor = Catch;
  Comma.prototype = Object.create(RuleWrapper.prototype);
  Comma.prototype.constructor = Comma;
  Cut.prototype = Object.create(RuleWrapper.prototype);
  Cut.prototype.constructor = Cut;
  NegationAsFailure.prototype = Object.create(RuleWrapper.prototype);
  NegationAsFailure.prototype.constructor = NegationAsFailure;
  NegationAsFailure$Fail.prototype = Object.create(NegationAsFailure.prototype);
  NegationAsFailure$Fail.prototype.constructor = NegationAsFailure$Fail;
  NegationAsFailure$Success.prototype = Object.create(NegationAsFailure.prototype);
  NegationAsFailure$Success.prototype.constructor = NegationAsFailure$Success;
  ConjunctionCursor.prototype = Object.create(AbstractCursor.prototype);
  ConjunctionCursor.prototype.constructor = ConjunctionCursor;
  EmptyCursor.prototype = Object.create(AbstractCursor.prototype);
  EmptyCursor.prototype.constructor = EmptyCursor;
  LazyCursor.prototype = Object.create(AbstractCursor.prototype);
  LazyCursor.prototype.constructor = LazyCursor;
  MapperCursor.prototype = Object.create(AbstractCursor.prototype);
  MapperCursor.prototype.constructor = MapperCursor;
  NonLastCursor.prototype = Object.create(AbstractCursor.prototype);
  NonLastCursor.prototype.constructor = NonLastCursor;
  function ChoicePointContext(alternatives, executionContext, parent, depth) {
    if (depth === void 0)
      depth = 0;
    this.alternatives_lgj05z$_0 = alternatives;
    this.executionContext_nsyvc6$_0 = executionContext;
    this.parent_ferqb1$_0 = parent;
    this.depth_8er26k$_0 = depth;
  }
  Object.defineProperty(ChoicePointContext.prototype, 'alternatives', {
    get: function () {
      return this.alternatives_lgj05z$_0;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'executionContext', {
    get: function () {
      return this.executionContext_nsyvc6$_0;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'parent', {
    get: function () {
      return this.parent_ferqb1$_0;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'depth', {
    get: function () {
      return this.depth_8er26k$_0;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'isRoot', {
    get: function () {
      return this.depth === 0;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'hasOpenAlternatives', {
    get: function () {
      var $receiver = this.pathToRoot;
      var any$result;
      any$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (element.alternatives.hasNext) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      return any$result;
    }
  });
  function Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda(this$ChoicePointContext_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$ChoicePointContext = this$ChoicePointContext_0;
    this.local$curr = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda.prototype.constructor = Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda;
  Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$curr = this.local$this$ChoicePointContext;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$curr == null) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(ensureNotNull(this.local$curr), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$curr = this.local$curr.parent;
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda(this$ChoicePointContext_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda(this$ChoicePointContext_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Object.defineProperty(ChoicePointContext.prototype, 'pathToRoot', {
    get: function () {
      return sequence(ChoicePointContext$get_ChoicePointContext$pathToRoot$lambda(this));
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'executionContextDepth', {
    get: function () {
      var tmp$;
      return (tmp$ = this.executionContext) != null ? tmp$.depth : null;
    }
  });
  Object.defineProperty(ChoicePointContext.prototype, 'executionContextProcedure', {
    get: function () {
      var tmp$;
      return (tmp$ = this.executionContext) != null ? tmp$.procedure : null;
    }
  });
  ChoicePointContext.prototype.toString = function () {
    var tmp$, tmp$_0;
    tmp$_0 = this.typeName + '(' + ('alternatives=' + this.alternatives + ', ');
    if (this.executionContext === null) {
      tmp$ = 'executionContext=' + toString(this.executionContext) + ', ';
    } else {
      'executionContextDepth=' + toString(this.executionContextDepth) + ', ';
      tmp$ = 'executionContextProcedure=' + toString(this.executionContextProcedure) + ', ';
    }
    return tmp$_0 + tmp$ + ('depth=' + this.depth) + ')';
  };
  function ChoicePointContext$Primitives(alternatives, executionContext, parent, depth) {
    ChoicePointContext.call(this, alternatives, executionContext, parent, depth);
    this.alternatives_pgisx$_0 = alternatives;
    this.executionContext_ezf61q$_0 = executionContext;
    this.parent_18wk7f$_0 = parent;
    this.depth_5kx43o$_0 = depth;
  }
  Object.defineProperty(ChoicePointContext$Primitives.prototype, 'alternatives', {
    get: function () {
      return this.alternatives_pgisx$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Primitives.prototype, 'executionContext', {
    get: function () {
      return this.executionContext_ezf61q$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Primitives.prototype, 'parent', {
    get: function () {
      return this.parent_18wk7f$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Primitives.prototype, 'depth', {
    get: function () {
      return this.depth_5kx43o$_0;
    }
  });
  ChoicePointContext$Primitives.prototype.toString = function () {
    return ChoicePointContext.prototype.toString.call(this);
  };
  Object.defineProperty(ChoicePointContext$Primitives.prototype, 'typeName', {
    get: function () {
      return 'Primitives';
    }
  });
  ChoicePointContext$Primitives.prototype.backtrack_s8cxhz$ = function (nextStep) {
    var tempContext = ensureNotNull(this.executionContext).copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.alternatives, void 0, void 0, void 0, void 0, void 0, nextStep);
    var nextChoicePointContext = this.copy_6u6h1u$(this.alternatives.next, tempContext);
    return tempContext.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, nextChoicePointContext);
  };
  ChoicePointContext$Primitives.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Primitives',
    interfaces: [ChoicePointContext]
  };
  ChoicePointContext$Primitives.prototype.component1 = function () {
    return this.alternatives;
  };
  ChoicePointContext$Primitives.prototype.component2 = function () {
    return this.executionContext;
  };
  ChoicePointContext$Primitives.prototype.component3 = function () {
    return this.parent;
  };
  ChoicePointContext$Primitives.prototype.component4 = function () {
    return this.depth;
  };
  ChoicePointContext$Primitives.prototype.copy_6u6h1u$ = function (alternatives, executionContext, parent, depth) {
    return new ChoicePointContext$Primitives(alternatives === void 0 ? this.alternatives : alternatives, executionContext === void 0 ? this.executionContext : executionContext, parent === void 0 ? this.parent : parent, depth === void 0 ? this.depth : depth);
  };
  ChoicePointContext$Primitives.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.alternatives) | 0;
    result = result * 31 + Kotlin.hashCode(this.executionContext) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.depth) | 0;
    return result;
  };
  ChoicePointContext$Primitives.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.alternatives, other.alternatives) && Kotlin.equals(this.executionContext, other.executionContext) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.depth, other.depth)))));
  };
  function ChoicePointContext$Rules(alternatives, executionContext, parent, depth) {
    ChoicePointContext.call(this, alternatives, executionContext, parent, depth);
    this.alternatives_l4w2gw$_0 = alternatives;
    this.executionContext_zcrp81$_0 = executionContext;
    this.parent_xhyblw$_0 = parent;
    this.depth_dkqdg5$_0 = depth;
  }
  Object.defineProperty(ChoicePointContext$Rules.prototype, 'alternatives', {
    get: function () {
      return this.alternatives_l4w2gw$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Rules.prototype, 'executionContext', {
    get: function () {
      return this.executionContext_zcrp81$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Rules.prototype, 'parent', {
    get: function () {
      return this.parent_xhyblw$_0;
    }
  });
  Object.defineProperty(ChoicePointContext$Rules.prototype, 'depth', {
    get: function () {
      return this.depth_dkqdg5$_0;
    }
  });
  ChoicePointContext$Rules.prototype.toString = function () {
    return ChoicePointContext.prototype.toString.call(this);
  };
  Object.defineProperty(ChoicePointContext$Rules.prototype, 'typeName', {
    get: function () {
      return 'Rules';
    }
  });
  ChoicePointContext$Rules.prototype.backtrack_s8cxhz$ = function (nextStep) {
    var tempContext = ensureNotNull(this.executionContext).copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.alternatives, void 0, void 0, void 0, void 0, void 0, void 0, nextStep);
    var nextChoicePointContext = this.copy_v6erym$(this.alternatives.next, tempContext);
    return tempContext.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, nextChoicePointContext);
  };
  ChoicePointContext$Rules.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Rules',
    interfaces: [ChoicePointContext]
  };
  ChoicePointContext$Rules.prototype.component1 = function () {
    return this.alternatives;
  };
  ChoicePointContext$Rules.prototype.component2 = function () {
    return this.executionContext;
  };
  ChoicePointContext$Rules.prototype.component3 = function () {
    return this.parent;
  };
  ChoicePointContext$Rules.prototype.component4 = function () {
    return this.depth;
  };
  ChoicePointContext$Rules.prototype.copy_v6erym$ = function (alternatives, executionContext, parent, depth) {
    return new ChoicePointContext$Rules(alternatives === void 0 ? this.alternatives : alternatives, executionContext === void 0 ? this.executionContext : executionContext, parent === void 0 ? this.parent : parent, depth === void 0 ? this.depth : depth);
  };
  ChoicePointContext$Rules.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.alternatives) | 0;
    result = result * 31 + Kotlin.hashCode(this.executionContext) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.depth) | 0;
    return result;
  };
  ChoicePointContext$Rules.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.alternatives, other.alternatives) && Kotlin.equals(this.executionContext, other.executionContext) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.depth, other.depth)))));
  };
  ChoicePointContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ChoicePointContext',
    interfaces: []
  };
  function nextDepth($receiver) {
    return $receiver == null ? 0 : $receiver.depth + 1 | 0;
  }
  function appendPrimitives($receiver, alternatives, executionContext) {
    if (executionContext === void 0)
      executionContext = null;
    return new ChoicePointContext$Primitives(alternatives, executionContext, $receiver, nextDepth($receiver));
  }
  function appendRules($receiver, alternatives, executionContext) {
    if (executionContext === void 0)
      executionContext = null;
    return new ChoicePointContext$Rules(alternatives, executionContext, $receiver, nextDepth($receiver));
  }
  function ClassicExecutionContext(procedure, libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels, substitution, query, goals, rules, primitives, startTime, maxDuration, choicePoints, parent, depth, step) {
    if (procedure === void 0)
      procedure = null;
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (inputChannels === void 0)
      inputChannels = ExecutionContextAware.Companion.defaultInputChannels();
    if (outputChannels === void 0)
      outputChannels = ExecutionContextAware.Companion.defaultOutputChannels();
    if (substitution === void 0)
      substitution = Substitution.Companion.empty();
    if (query === void 0)
      query = Truth.Companion.TRUE;
    if (goals === void 0)
      goals = Cursor$Companion_getInstance().empty();
    if (rules === void 0)
      rules = Cursor$Companion_getInstance().empty();
    if (primitives === void 0)
      primitives = Cursor$Companion_getInstance().empty();
    if (startTime === void 0)
      startTime = L0;
    if (maxDuration === void 0)
      maxDuration = Long$Companion$MAX_VALUE;
    if (choicePoints === void 0)
      choicePoints = null;
    if (parent === void 0)
      parent = null;
    if (depth === void 0)
      depth = 0;
    if (step === void 0)
      step = L0;
    this.procedure_ikpbab$_0 = procedure;
    this.libraries_ytsju1$_0 = libraries;
    this.flags_perh3$_0 = flags;
    this.staticKb_cbz5ep$_0 = staticKb;
    this.dynamicKb_u1t3ja$_0 = dynamicKb;
    this.inputChannels_gjb23u$_0 = inputChannels;
    this.outputChannels_kql7e5$_0 = outputChannels;
    this.substitution_ur6xfd$_0 = substitution;
    this.query = query;
    this.goals = goals;
    this.rules = rules;
    this.primitives = primitives;
    this.startTime = startTime;
    this.maxDuration = maxDuration;
    this.choicePoints = choicePoints;
    this.parent = parent;
    this.depth = depth;
    this.step = step;
    if (!(this.depth === 0 && this.parent == null || (this.depth > 0 && this.parent != null))) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }this.pathToRoot = sequence(ClassicExecutionContext$pathToRoot$lambda(this));
    this.interestingVariables_2t6jf$_0 = lazy(ClassicExecutionContext$interestingVariables$lambda(this));
    this.prologStackTrace_rmc0c0$_0 = lazy(ClassicExecutionContext$prologStackTrace$lambda(this));
  }
  Object.defineProperty(ClassicExecutionContext.prototype, 'procedure', {
    get: function () {
      return this.procedure_ikpbab$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'libraries', {
    get: function () {
      return this.libraries_ytsju1$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'flags', {
    get: function () {
      return this.flags_perh3$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'staticKb', {
    get: function () {
      return this.staticKb_cbz5ep$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'dynamicKb', {
    get: function () {
      return this.dynamicKb_u1t3ja$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'inputChannels', {
    get: function () {
      return this.inputChannels_gjb23u$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'outputChannels', {
    get: function () {
      return this.outputChannels_kql7e5$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'substitution', {
    get: function () {
      return this.substitution_ur6xfd$_0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'isRoot', {
    get: function () {
      return this.depth === 0;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'hasOpenAlternatives', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.choicePoints) != null ? tmp$.hasOpenAlternatives : null) != null ? tmp$_0 : false;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'isActivationRecord', {
    get: function () {
      return this.parent == null || this.parent.depth === (this.depth - 1 | 0);
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'currentGoal', {
    get: function () {
      return this.goals.isOver ? null : this.goals.current;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'interestingVariables', {
    get: function () {
      return this.interestingVariables_2t6jf$_0.value;
    }
  });
  Object.defineProperty(ClassicExecutionContext.prototype, 'prologStackTrace', {
    get: function () {
      return this.prologStackTrace_rmc0c0$_0.value;
    }
  });
  ClassicExecutionContext.prototype.toString = function () {
    return 'ClassicExecutionContext(' + ('query=' + this.query + ', ') + ('procedure=' + toString(this.procedure) + ', ') + ('substitution=' + this.substitution + ', ') + ('goals=' + this.goals + ', ') + ('rules=' + this.rules + ', ') + ('primitives=' + this.primitives + ', ') + ('startTime=' + this.startTime.toString() + ', ') + ('inputChannels=' + this.inputChannels.keys + ', ') + ('outputChannels=' + this.outputChannels.keys + ', ') + ('maxDuration=' + this.maxDuration.toString() + ', ') + ('choicePoints=' + toString(this.choicePoints) + ', ') + ('depth=' + this.depth + ', ') + ('step=' + this.step.toString()) + ')';
  };
  function Coroutine$ClassicExecutionContext$pathToRoot$lambda(this$ClassicExecutionContext_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$ClassicExecutionContext = this$ClassicExecutionContext_0;
    this.local$current = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ClassicExecutionContext$pathToRoot$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ClassicExecutionContext$pathToRoot$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ClassicExecutionContext$pathToRoot$lambda.prototype.constructor = Coroutine$ClassicExecutionContext$pathToRoot$lambda;
  Coroutine$ClassicExecutionContext$pathToRoot$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$current = this.local$this$ClassicExecutionContext;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$current == null) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(ensureNotNull(this.local$current), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$current = this.local$current.parent;
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ClassicExecutionContext$pathToRoot$lambda(this$ClassicExecutionContext_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ClassicExecutionContext$pathToRoot$lambda(this$ClassicExecutionContext_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function ClassicExecutionContext$interestingVariables$lambda(this$ClassicExecutionContext) {
    return function () {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
      var baseInterestingVars = (tmp$_0 = (tmp$ = this$ClassicExecutionContext.parent) != null ? tmp$.interestingVariables : null) != null ? tmp$_0 : toSet(this$ClassicExecutionContext.query.variables);
      var currInterestingVars = this$ClassicExecutionContext.goals.isOver ? emptySet() : (tmp$_3 = (tmp$_2 = (tmp$_1 = this$ClassicExecutionContext.goals.current) != null ? tmp$_1.variables : null) != null ? toSet(tmp$_2) : null) != null ? tmp$_3 : emptySet();
      return plus(baseInterestingVars, currInterestingVars);
    };
  }
  function ClassicExecutionContext$prologStackTrace$lambda$lambda(it) {
    return it.isActivationRecord;
  }
  function ClassicExecutionContext$prologStackTrace$lambda$lambda_0(this$ClassicExecutionContext) {
    return function (it) {
      var tmp$;
      return (tmp$ = it.procedure) != null ? tmp$ : Struct.Companion.of('?-', [this$ClassicExecutionContext.query]);
    };
  }
  function ClassicExecutionContext$prologStackTrace$lambda(this$ClassicExecutionContext) {
    return function () {
      return map(filter(this$ClassicExecutionContext.pathToRoot, ClassicExecutionContext$prologStackTrace$lambda$lambda), ClassicExecutionContext$prologStackTrace$lambda$lambda_0(this$ClassicExecutionContext));
    };
  }
  ClassicExecutionContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClassicExecutionContext',
    interfaces: [ExecutionContext]
  };
  ClassicExecutionContext.prototype.component1 = function () {
    return this.procedure;
  };
  ClassicExecutionContext.prototype.component2 = function () {
    return this.libraries;
  };
  ClassicExecutionContext.prototype.component3 = function () {
    return this.flags;
  };
  ClassicExecutionContext.prototype.component4 = function () {
    return this.staticKb;
  };
  ClassicExecutionContext.prototype.component5 = function () {
    return this.dynamicKb;
  };
  ClassicExecutionContext.prototype.component6 = function () {
    return this.inputChannels;
  };
  ClassicExecutionContext.prototype.component7 = function () {
    return this.outputChannels;
  };
  ClassicExecutionContext.prototype.component8 = function () {
    return this.substitution;
  };
  ClassicExecutionContext.prototype.component9 = function () {
    return this.query;
  };
  ClassicExecutionContext.prototype.component10 = function () {
    return this.goals;
  };
  ClassicExecutionContext.prototype.component11 = function () {
    return this.rules;
  };
  ClassicExecutionContext.prototype.component12 = function () {
    return this.primitives;
  };
  ClassicExecutionContext.prototype.component13 = function () {
    return this.startTime;
  };
  ClassicExecutionContext.prototype.component14 = function () {
    return this.maxDuration;
  };
  ClassicExecutionContext.prototype.component15 = function () {
    return this.choicePoints;
  };
  ClassicExecutionContext.prototype.component16 = function () {
    return this.parent;
  };
  ClassicExecutionContext.prototype.component17 = function () {
    return this.depth;
  };
  ClassicExecutionContext.prototype.component18 = function () {
    return this.step;
  };
  ClassicExecutionContext.prototype.copy_nbkcvy$ = function (procedure, libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels, substitution, query, goals, rules, primitives, startTime, maxDuration, choicePoints, parent, depth, step) {
    return new ClassicExecutionContext(procedure === void 0 ? this.procedure : procedure, libraries === void 0 ? this.libraries : libraries, flags === void 0 ? this.flags : flags, staticKb === void 0 ? this.staticKb : staticKb, dynamicKb === void 0 ? this.dynamicKb : dynamicKb, inputChannels === void 0 ? this.inputChannels : inputChannels, outputChannels === void 0 ? this.outputChannels : outputChannels, substitution === void 0 ? this.substitution : substitution, query === void 0 ? this.query : query, goals === void 0 ? this.goals : goals, rules === void 0 ? this.rules : rules, primitives === void 0 ? this.primitives : primitives, startTime === void 0 ? this.startTime : startTime, maxDuration === void 0 ? this.maxDuration : maxDuration, choicePoints === void 0 ? this.choicePoints : choicePoints, parent === void 0 ? this.parent : parent, depth === void 0 ? this.depth : depth, step === void 0 ? this.step : step);
  };
  ClassicExecutionContext.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.procedure) | 0;
    result = result * 31 + Kotlin.hashCode(this.libraries) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.staticKb) | 0;
    result = result * 31 + Kotlin.hashCode(this.dynamicKb) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputChannels) | 0;
    result = result * 31 + Kotlin.hashCode(this.outputChannels) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitution) | 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    result = result * 31 + Kotlin.hashCode(this.goals) | 0;
    result = result * 31 + Kotlin.hashCode(this.rules) | 0;
    result = result * 31 + Kotlin.hashCode(this.primitives) | 0;
    result = result * 31 + Kotlin.hashCode(this.startTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxDuration) | 0;
    result = result * 31 + Kotlin.hashCode(this.choicePoints) | 0;
    result = result * 31 + Kotlin.hashCode(this.parent) | 0;
    result = result * 31 + Kotlin.hashCode(this.depth) | 0;
    result = result * 31 + Kotlin.hashCode(this.step) | 0;
    return result;
  };
  ClassicExecutionContext.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.procedure, other.procedure) && Kotlin.equals(this.libraries, other.libraries) && Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.staticKb, other.staticKb) && Kotlin.equals(this.dynamicKb, other.dynamicKb) && Kotlin.equals(this.inputChannels, other.inputChannels) && Kotlin.equals(this.outputChannels, other.outputChannels) && Kotlin.equals(this.substitution, other.substitution) && Kotlin.equals(this.query, other.query) && Kotlin.equals(this.goals, other.goals) && Kotlin.equals(this.rules, other.rules) && Kotlin.equals(this.primitives, other.primitives) && Kotlin.equals(this.startTime, other.startTime) && Kotlin.equals(this.maxDuration, other.maxDuration) && Kotlin.equals(this.choicePoints, other.choicePoints) && Kotlin.equals(this.parent, other.parent) && Kotlin.equals(this.depth, other.depth) && Kotlin.equals(this.step, other.step)))));
  };
  function ClassicSolver(libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (inputChannels === void 0)
      inputChannels = ExecutionContextAware.Companion.defaultInputChannels();
    if (outputChannels === void 0)
      outputChannels = ExecutionContextAware.Companion.defaultOutputChannels();
    this.state_0 = new StateInit(new ClassicExecutionContext(void 0, libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels));
  }
  ClassicSolver.prototype.updateContext_0 = function (contextMapper) {
    var ctx = this.state_0.context;
    var newCtx = contextMapper(ctx);
    if (!(newCtx != null ? newCtx.equals(ctx) : null)) {
      this.state_0 = clone(this.state_0, newCtx);
    }};
  function ClassicSolver$cleanUp$lambda(f, term) {
    return !Kotlin.isType(term, Var);
  }
  ClassicSolver.prototype.cleanUp_0 = function ($receiver) {
    return $receiver.filter(ClassicSolver$cleanUp$lambda);
  };
  ClassicSolver.prototype.cleanUp_1 = function ($receiver) {
    return $receiver.copy_4dyrv6$(void 0, this.cleanUp_0($receiver.substitution));
  };
  function Coroutine$ClassicSolver$solve$lambda(closure$goal_0, this$ClassicSolver_0, closure$maxDuration_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$goal = closure$goal_0;
    this.local$this$ClassicSolver = this$ClassicSolver_0;
    this.local$closure$maxDuration = closure$maxDuration_0;
    this.local$step = void 0;
    this.local$endState = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ClassicSolver$solve$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ClassicSolver$solve$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ClassicSolver$solve$lambda.prototype.constructor = Coroutine$ClassicSolver$solve$lambda;
  Coroutine$ClassicSolver$solve$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
            tmp$ = this.local$this$ClassicSolver.libraries;
            tmp$_0 = this.local$this$ClassicSolver.flags;
            tmp$_1 = this.local$this$ClassicSolver.staticKb;
            tmp$_2 = this.local$this$ClassicSolver.dynamicKb;
            tmp$_3 = this.local$this$ClassicSolver.inputChannels;
            tmp$_4 = this.local$this$ClassicSolver.outputChannels;
            tmp$_5 = currentTimeInstant();
            var initialContext = new ClassicExecutionContext(void 0, tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, void 0, this.local$closure$goal, void 0, void 0, void 0, tmp$_5, this.local$closure$maxDuration);
            this.local$this$ClassicSolver.state_0 = new StateInit(initialContext);
            this.local$step = L0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!equals(this.local$this$ClassicSolver.state_0.context.step, this.local$step)) {
              var message = 'Failed requirement.';
              throw IllegalArgumentException_init(message.toString());
            }
            this.local$this$ClassicSolver.state_0 = this.local$this$ClassicSolver.state_0.next();
            this.local$step = this.local$step.add(Kotlin.Long.fromInt(1));
            if (Kotlin.isType(this.local$this$ClassicSolver.state_0, EndState)) {
              this.local$endState = Kotlin.isType(tmp$_6 = this.local$this$ClassicSolver.state_0, EndState) ? tmp$_6 : throwCCE();
              var sol = this.local$endState.solution;
              if (Kotlin.isType(sol, Solution$Yes))
                tmp$_7 = this.local$this$ClassicSolver.cleanUp_1(sol);
              else
                tmp$_7 = sol;
              this.state_0 = 3;
              this.result_0 = this.local$$receiver.yield_11rb$(tmp$_7, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 3:
            if (!this.local$endState.hasOpenAlternatives) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 2;
            continue;
          case 6:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ClassicSolver$solve$lambda(closure$goal_0, this$ClassicSolver_0, closure$maxDuration_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ClassicSolver$solve$lambda(closure$goal_0, this$ClassicSolver_0, closure$maxDuration_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  ClassicSolver.prototype.solve$default = function (goal, maxDuration) {
    return sequence(ClassicSolver$solve$lambda(goal, this, maxDuration));
  };
  Object.defineProperty(ClassicSolver.prototype, 'libraries', {
    get: function () {
      return this.state_0.context.libraries;
    }
  });
  Object.defineProperty(ClassicSolver.prototype, 'flags', {
    get: function () {
      return this.state_0.context.flags;
    }
  });
  Object.defineProperty(ClassicSolver.prototype, 'staticKb', {
    get: function () {
      return this.state_0.context.staticKb;
    }
  });
  Object.defineProperty(ClassicSolver.prototype, 'dynamicKb', {
    get: function () {
      return this.state_0.context.dynamicKb;
    }
  });
  Object.defineProperty(ClassicSolver.prototype, 'inputChannels', {
    get: function () {
      return this.state_0.context.inputChannels;
    }
  });
  Object.defineProperty(ClassicSolver.prototype, 'outputChannels', {
    get: function () {
      return this.state_0.context.outputChannels;
    }
  });
  ClassicSolver.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClassicSolver',
    interfaces: [Solver]
  };
  function ClassicSolverFactory() {
    ClassicSolverFactory_instance = this;
  }
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultBuiltins', {
    get: function () {
      return DefaultBuiltins_getInstance();
    }
  });
  ClassicSolverFactory.prototype.solverOf$default = function (libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    return new ClassicSolver(libraries, flags, staticKb, dynamicKb, mapOf(to(ExecutionContextAware.Companion.STDIN, stdIn)), mapOf_0([to(ExecutionContextAware.Companion.STDOUT, stdOut), to(ExecutionContextAware.Companion.STDERR, stdErr), to(ExecutionContextAware.Companion.WARNINGS, warnings)]));
  };
  ClassicSolverFactory.prototype.mutableSolverOf$default = function (libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    return new MutableClassicSolver(libraries, flags, staticKb, dynamicKb, mapOf(to(ExecutionContextAware.Companion.STDIN, stdIn)), mapOf_0([to(ExecutionContextAware.Companion.STDOUT, stdOut), to(ExecutionContextAware.Companion.STDERR, stdErr), to(ExecutionContextAware.Companion.WARNINGS, warnings)]));
  };
  ClassicSolverFactory.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ClassicSolverFactory',
    interfaces: [SolverFactory]
  };
  var ClassicSolverFactory_instance = null;
  function ClassicSolverFactory_getInstance() {
    if (ClassicSolverFactory_instance === null) {
      new ClassicSolverFactory();
    }return ClassicSolverFactory_instance;
  }
  function MutableClassicSolver(libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (inputChannels === void 0)
      inputChannels = ExecutionContextAware.Companion.defaultInputChannels();
    if (outputChannels === void 0)
      outputChannels = ExecutionContextAware.Companion.defaultOutputChannels();
    ClassicSolver.call(this, libraries, flags, staticKb, dynamicKb, inputChannels, outputChannels);
  }
  function MutableClassicSolver$loadLibrary$lambda(closure$library) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, $receiver.libraries.plus(closure$library));
    };
  }
  MutableClassicSolver.prototype.loadLibrary = function (library) {
    this.updateContext_0(MutableClassicSolver$loadLibrary$lambda(library));
  };
  function MutableClassicSolver$unloadLibrary$lambda(closure$library) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, $receiver.libraries.minus(closure$library));
    };
  }
  MutableClassicSolver.prototype.unloadLibrary = function (library) {
    this.updateContext_0(MutableClassicSolver$unloadLibrary$lambda(library));
  };
  function MutableClassicSolver$setLibraries$lambda(closure$libraries) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, closure$libraries);
    };
  }
  MutableClassicSolver.prototype.setLibraries = function (libraries) {
    this.updateContext_0(MutableClassicSolver$setLibraries$lambda(libraries));
  };
  function MutableClassicSolver$loadStaticKb$lambda(closure$theory) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, closure$theory);
    };
  }
  MutableClassicSolver.prototype.loadStaticKb = function (theory) {
    this.updateContext_0(MutableClassicSolver$loadStaticKb$lambda(theory));
  };
  function MutableClassicSolver$appendStaticKb$lambda(closure$theory) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, $receiver.staticKb.plusClauseDatabase(closure$theory));
    };
  }
  MutableClassicSolver.prototype.appendStaticKb = function (theory) {
    this.updateContext_0(MutableClassicSolver$appendStaticKb$lambda(theory));
  };
  function MutableClassicSolver$resetStaticKb$lambda($receiver) {
    return $receiver.copy_nbkcvy$(void 0, void 0, void 0, ClauseDatabase.Companion.empty());
  }
  MutableClassicSolver.prototype.resetStaticKb = function () {
    this.updateContext_0(MutableClassicSolver$resetStaticKb$lambda);
  };
  function MutableClassicSolver$loadDynamicKb$lambda(closure$theory) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, closure$theory);
    };
  }
  MutableClassicSolver.prototype.loadDynamicKb = function (theory) {
    this.updateContext_0(MutableClassicSolver$loadDynamicKb$lambda(theory));
  };
  function MutableClassicSolver$appendDynamicKb$lambda(closure$theory) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, $receiver.dynamicKb.plusClauseDatabase(closure$theory));
    };
  }
  MutableClassicSolver.prototype.appendDynamicKb = function (theory) {
    this.updateContext_0(MutableClassicSolver$appendDynamicKb$lambda(theory));
  };
  function MutableClassicSolver$resetDynamicKb$lambda($receiver) {
    return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, ClauseDatabase.Companion.empty());
  }
  MutableClassicSolver.prototype.resetDynamicKb = function () {
    this.updateContext_0(MutableClassicSolver$resetDynamicKb$lambda);
  };
  function MutableClassicSolver$assertA$lambda(closure$clause) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, $receiver.dynamicKb.assertA(closure$clause));
    };
  }
  MutableClassicSolver.prototype.assertA = function (clause) {
    this.updateContext_0(MutableClassicSolver$assertA$lambda(clause));
  };
  function MutableClassicSolver$assertA$lambda_0(closure$fact) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, $receiver.dynamicKb.assertAFact(closure$fact));
    };
  }
  MutableClassicSolver.prototype.assertAFact = function (fact) {
    this.updateContext_0(MutableClassicSolver$assertA$lambda_0(fact));
  };
  function MutableClassicSolver$assertZ$lambda(closure$clause) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, $receiver.dynamicKb.assertZ(closure$clause));
    };
  }
  MutableClassicSolver.prototype.assertZ = function (clause) {
    this.updateContext_0(MutableClassicSolver$assertZ$lambda(clause));
  };
  function MutableClassicSolver$assertZ$lambda_0(closure$fact) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, $receiver.dynamicKb.assertZFact(closure$fact));
    };
  }
  MutableClassicSolver.prototype.assertZFact = function (fact) {
    this.updateContext_0(MutableClassicSolver$assertZ$lambda_0(fact));
  };
  function MutableClassicSolver$retract$lambda(closure$result) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, closure$result.clauseDatabase);
    };
  }
  MutableClassicSolver.prototype.retract = function (clause) {
    var result = this.dynamicKb.retract(clause);
    this.updateContext_0(MutableClassicSolver$retract$lambda(result));
    return result;
  };
  function MutableClassicSolver$retract$lambda_0(closure$result) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, closure$result.clauseDatabase);
    };
  }
  MutableClassicSolver.prototype.retractByHead = function (fact) {
    var result = this.dynamicKb.retractByHead(fact);
    this.updateContext_0(MutableClassicSolver$retract$lambda_0(result));
    return result;
  };
  function MutableClassicSolver$retractAll$lambda(closure$result) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, closure$result.clauseDatabase);
    };
  }
  MutableClassicSolver.prototype.retractAll = function (clause) {
    var result = this.dynamicKb.retractAll(clause);
    this.updateContext_0(MutableClassicSolver$retractAll$lambda(result));
    return result;
  };
  function MutableClassicSolver$retractAll$lambda_0(closure$result) {
    return function ($receiver) {
      return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, closure$result.clauseDatabase);
    };
  }
  MutableClassicSolver.prototype.retractAllBeHead = function (fact) {
    var result = this.dynamicKb.retractAllByHead(fact);
    this.updateContext_0(MutableClassicSolver$retractAll$lambda_0(result));
    return result;
  };
  MutableClassicSolver.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableClassicSolver',
    interfaces: [MutableSolver, ClassicSolver]
  };
  function classic($receiver, libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (stdIn === void 0)
      stdIn = InputChannel.Companion.stdIn();
    if (stdOut === void 0)
      stdOut = OutputChannel.Companion.stdOut();
    if (stdErr === void 0)
      stdErr = OutputChannel.Companion.stdOut();
    if (warnings === void 0)
      warnings = OutputChannel.Companion.stdOut();
    return ClassicSolverFactory_getInstance().solverOf(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  }
  function classicWithDefaultBuiltins($receiver, libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (stdIn === void 0)
      stdIn = InputChannel.Companion.stdIn();
    if (stdOut === void 0)
      stdOut = OutputChannel.Companion.stdOut();
    if (stdErr === void 0)
      stdErr = OutputChannel.Companion.stdOut();
    if (warnings === void 0)
      warnings = OutputChannel.Companion.stdOut();
    return ClassicSolverFactory_getInstance().solverWithDefaultBuiltins(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  }
  function classic_0($receiver, libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (stdIn === void 0)
      stdIn = InputChannel.Companion.stdIn();
    if (stdOut === void 0)
      stdOut = OutputChannel.Companion.stdOut();
    if (stdErr === void 0)
      stdErr = OutputChannel.Companion.stdOut();
    if (warnings === void 0)
      warnings = OutputChannel.Companion.stdOut();
    return ClassicSolverFactory_getInstance().mutableSolverOf(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  }
  function classicWithDefaultBuiltins_0($receiver, libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    if (libraries === void 0)
      libraries = Libraries_init([]);
    if (flags === void 0)
      flags = emptyMap();
    if (staticKb === void 0)
      staticKb = ClauseDatabase.Companion.empty();
    if (dynamicKb === void 0)
      dynamicKb = ClauseDatabase.Companion.empty();
    if (stdIn === void 0)
      stdIn = InputChannel.Companion.stdIn();
    if (stdOut === void 0)
      stdOut = OutputChannel.Companion.stdOut();
    if (stdErr === void 0)
      stdErr = OutputChannel.Companion.stdOut();
    if (warnings === void 0)
      warnings = OutputChannel.Companion.stdOut();
    return ClassicSolverFactory_getInstance().mutableSolverWithDefaultBuiltins(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  }
  function AbstractEndState(solution, context) {
    AbstractState.call(this, context);
    this.solution_gy5ng6$_0 = solution;
    this.context_vufbc2$_0 = context;
  }
  Object.defineProperty(AbstractEndState.prototype, 'solution', {
    get: function () {
      return this.solution_gy5ng6$_0;
    }
  });
  Object.defineProperty(AbstractEndState.prototype, 'context', {
    get: function () {
      return this.context_vufbc2$_0;
    }
  });
  AbstractEndState.prototype.computeNext = function () {
    throw NoSuchElementException_init();
  };
  AbstractEndState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractEndState',
    interfaces: [AbstractState, EndState]
  };
  function AbstractState(context) {
    this.context_7lo409$_0 = context;
    this.executionTime_wfygj7$_0 = lazy(AbstractState$executionTime$lambda(this));
    this.nextCache_r05zxl$_0 = lazy(AbstractState$nextCache$lambda(this));
  }
  Object.defineProperty(AbstractState.prototype, 'context', {
    get: function () {
      return this.context_7lo409$_0;
    }
  });
  Object.defineProperty(AbstractState.prototype, 'executionTime_0', {
    get: function () {
      return this.executionTime_wfygj7$_0.value;
    }
  });
  Object.defineProperty(AbstractState.prototype, 'nextCache_0', {
    get: function () {
      return this.nextCache_r05zxl$_0.value;
    }
  });
  AbstractState.prototype.next = function () {
    return this.nextCache_0;
  };
  AbstractState.prototype.currentTime_0 = function () {
    return currentTimeInstant();
  };
  AbstractState.prototype.nextStep_0 = function () {
    return this.context.step.add(Kotlin.Long.fromInt(1));
  };
  AbstractState.prototype.nextDepth_0 = function () {
    return this.context.depth + 1 | 0;
  };
  AbstractState.prototype.previousDepth_0 = function () {
    var it = this.context.depth - 1 | 0;
    if (!(it >= 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }return it;
  };
  function AbstractState$executionTime$lambda(this$AbstractState) {
    return function () {
      return this$AbstractState.currentTime_0();
    };
  }
  function AbstractState$nextCache$lambda(this$AbstractState) {
    return function () {
      var tmp$;
      var deltaTime = this$AbstractState.executionTime_0.subtract(this$AbstractState.context.startTime);
      if (deltaTime.compareTo_11rb$(this$AbstractState.context.maxDuration) <= 0) {
        return this$AbstractState.computeNext();
      } else {
        tmp$ = this$AbstractState.context.maxDuration;
        return new StateHalt(new TimeOutException(void 0, void 0, this$AbstractState.context, tmp$), this$AbstractState.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this$AbstractState.nextStep_0()));
      }
    };
  }
  AbstractState.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractState',
    interfaces: [State]
  };
  function EndState() {
  }
  Object.defineProperty(EndState.prototype, 'hasOpenAlternatives', {
    get: function () {
      return Kotlin.isType(this.solution, Solution$Yes) && this.context.hasOpenAlternatives;
    }
  });
  EndState.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'EndState',
    interfaces: [State]
  };
  function ExceptionalState() {
  }
  ExceptionalState.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ExceptionalState',
    interfaces: [State]
  };
  function State() {
  }
  State.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'State',
    interfaces: []
  };
  function clone($receiver, context) {
    if (context === void 0)
      context = $receiver.context;
    if (Kotlin.isType($receiver, StateBacktracking))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StateEnd))
      return $receiver.copy_3crwa2$($receiver.solution, context);
    else if (Kotlin.isType($receiver, StateException))
      return $receiver.copy_z39f11$($receiver.exception, context);
    else if (Kotlin.isType($receiver, StateGoalSelection))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StateHalt))
      return $receiver.copy_z39f11$($receiver.exception, context);
    else if (Kotlin.isType($receiver, StateInit))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StatePrimitiveExecution))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StatePrimitiveSelection))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StateRuleExecution))
      return $receiver.copy_6xnk88$(context);
    else if (Kotlin.isType($receiver, StateRuleSelection))
      return $receiver.copy_6xnk88$(context);
    else
      throw IllegalStateException_init();
  }
  function StateBacktracking(context) {
    AbstractState.call(this, context);
    this.context_mi2hzd$_0 = context;
  }
  Object.defineProperty(StateBacktracking.prototype, 'context', {
    get: function () {
      return this.context_mi2hzd$_0;
    }
  });
  StateBacktracking.prototype.computeNext = function () {
    var $receiver = this.context;
    var block$result;
    if ($receiver.choicePoints === null || !$receiver.choicePoints.hasOpenAlternatives) {
      block$result = new StateEnd(new Solution$No($receiver.query), $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    } else {
      var $receiver_0 = $receiver.choicePoints.pathToRoot;
      var first$result;
      first$break: do {
        var tmp$;
        tmp$ = $receiver_0.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (element.alternatives.hasNext) {
            first$result = element;
            break first$break;
          }}
        throw new NoSuchElementException_init_0('Sequence contains no element matching the predicate.');
      }
       while (false);
      var choicePointContext = first$result;
      block$result = new StateRuleExecution(choicePointContext.backtrack_s8cxhz$(this.nextStep_0()));
    }
    return block$result;
  };
  StateBacktracking.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateBacktracking',
    interfaces: [AbstractState]
  };
  StateBacktracking.prototype.component1 = function () {
    return this.context;
  };
  StateBacktracking.prototype.copy_6xnk88$ = function (context) {
    return new StateBacktracking(context === void 0 ? this.context : context);
  };
  StateBacktracking.prototype.toString = function () {
    return 'StateBacktracking(context=' + Kotlin.toString(this.context) + ')';
  };
  StateBacktracking.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateBacktracking.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StateEnd(solution, context) {
    AbstractEndState.call(this, solution, context);
    this.solution_al6ycc$_0 = solution;
    this.context_s5fgk0$_0 = context;
  }
  Object.defineProperty(StateEnd.prototype, 'solution', {
    get: function () {
      return this.solution_al6ycc$_0;
    }
  });
  Object.defineProperty(StateEnd.prototype, 'context', {
    get: function () {
      return this.context_s5fgk0$_0;
    }
  });
  StateEnd.prototype.computeNext = function () {
    var tmp$, tmp$_0, tmp$_1;
    if (this.context.hasOpenAlternatives) {
      tmp$_0 = this.context;
      tmp$ = this.nextStep_0();
      tmp$_1 = new StateBacktracking(tmp$_0.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.executionTime_0, void 0, void 0, void 0, void 0, tmp$));
    } else {
      tmp$_1 = AbstractEndState.prototype.computeNext.call(this);
    }
    return tmp$_1;
  };
  StateEnd.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateEnd',
    interfaces: [AbstractEndState]
  };
  StateEnd.prototype.component1 = function () {
    return this.solution;
  };
  StateEnd.prototype.component2 = function () {
    return this.context;
  };
  StateEnd.prototype.copy_3crwa2$ = function (solution, context) {
    return new StateEnd(solution === void 0 ? this.solution : solution, context === void 0 ? this.context : context);
  };
  StateEnd.prototype.toString = function () {
    return 'StateEnd(solution=' + Kotlin.toString(this.solution) + (', context=' + Kotlin.toString(this.context)) + ')';
  };
  StateEnd.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.solution) | 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateEnd.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.solution, other.solution) && Kotlin.equals(this.context, other.context)))));
  };
  function StateException(exception, context) {
    AbstractState.call(this, context);
    this.exception_fagfyc$_0 = exception;
    this.context_w8k2zg$_0 = context;
  }
  Object.defineProperty(StateException.prototype, 'exception', {
    get: function () {
      return this.exception_fagfyc$_0;
    }
  });
  Object.defineProperty(StateException.prototype, 'context', {
    get: function () {
      return this.context_w8k2zg$_0;
    }
  });
  StateException.prototype.isCatch_0 = function ($receiver) {
    var tmp$ = $receiver.arity === 3;
    if (tmp$) {
      tmp$ = equals($receiver.functor, Catch_getInstance().signature.name);
    }return tmp$;
  };
  StateException.prototype.getExceptionContent_0 = function ($receiver) {
    var tmp$;
    if (Kotlin.isType($receiver, MessageError))
      tmp$ = $receiver.content;
    else
      tmp$ = $receiver.errorStruct;
    return tmp$;
  };
  StateException.prototype.toPublicException_0 = function ($receiver) {
    if (Kotlin.isType($receiver, MessageError))
      return SystemError.Companion.forUncaughtException_2j2uar$(this.context, $receiver);
    else
      return $receiver;
  };
  Object.defineProperty(StateException.prototype, 'finalState_0', {
    get: function () {
      return new StateHalt(this.toPublicException_0(this.exception), this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
  });
  Object.defineProperty(StateException.prototype, 'handleExceptionInParentContext_0', {
    get: function () {
      return new StateException(this.exception, ensureNotNull(this.context.parent).copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
  });
  StateException.prototype.computeNext = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (Kotlin.isType(this.exception, PrologError)) {
      var catchGoal = ensureNotNull(this.context.currentGoal);
      if (Kotlin.isType(catchGoal, Struct) && this.isCatch_0(catchGoal)) {
        var catcher = Unificator.Companion.mguWith(catchGoal.get(1), this.getExceptionContent_0(this.exception));
        if (Kotlin.isType(catcher, Substitution$Unifier)) {
          var newSubstitution = this.context.substitution.plus(catcher).filterCollection(this.context.interestingVariables);
          var subGoals = catchGoal.get(2).getSubstituted(newSubstitution, []);
          var newGoals = plus_1(toGoals(subGoals), this.context.goals.next);
          tmp$_2 = this.context;
          tmp$ = Cursor$Companion_getInstance().empty();
          tmp$_0 = Cursor$Companion_getInstance().empty();
          tmp$_3 = new StateGoalSelection(tmp$_2.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, Kotlin.isType(tmp$_1 = newSubstitution, Substitution$Unifier) ? tmp$_1 : throwCCE(), void 0, newGoals, tmp$, tmp$_0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
        } else if (this.context.isRoot)
          tmp$_3 = this.finalState_0;
        else
          tmp$_3 = this.handleExceptionInParentContext_0;
      } else if (this.context.isRoot)
        tmp$_3 = this.finalState_0;
      else
        tmp$_3 = this.handleExceptionInParentContext_0;
    } else
      tmp$_3 = this.finalState_0;
    return tmp$_3;
  };
  StateException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateException',
    interfaces: [AbstractState, ExceptionalState]
  };
  StateException.prototype.component1 = function () {
    return this.exception;
  };
  StateException.prototype.component2 = function () {
    return this.context;
  };
  StateException.prototype.copy_z39f11$ = function (exception, context) {
    return new StateException(exception === void 0 ? this.exception : exception, context === void 0 ? this.context : context);
  };
  StateException.prototype.toString = function () {
    return 'StateException(exception=' + Kotlin.toString(this.exception) + (', context=' + Kotlin.toString(this.context)) + ')';
  };
  StateException.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.exception) | 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateException.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.exception, other.exception) && Kotlin.equals(this.context, other.context)))));
  };
  function StateGoalSelection(context) {
    AbstractState.call(this, context);
    this.context_wl4y5u$_0 = context;
  }
  Object.defineProperty(StateGoalSelection.prototype, 'context', {
    get: function () {
      return this.context_wl4y5u$_0;
    }
  });
  function StateGoalSelection$computeNext$lambda(this$StateGoalSelection) {
    return function (it) {
      return it.getSubstituted(this$StateGoalSelection.context.substitution, []);
    };
  }
  StateGoalSelection.prototype.computeNext = function () {
    var tmp$;
    if (this.context.goals.isOver) {
      if (this.context.isRoot) {
        tmp$ = new StateEnd(new Solution$Yes(this.context.query, this.context.substitution), this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
      } else {
        var $receiver = ensureNotNull(this.context.parent);
        var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
        tmp$_0 = this.context.choicePoints;
        tmp$_1 = this.context.flags;
        tmp$_2 = this.context.dynamicKb;
        tmp$_3 = this.context.staticKb;
        tmp$_4 = this.context.substitution.filterCollection($receiver.interestingVariables);
        tmp$_5 = $receiver.goals.next;
        tmp$ = new StateGoalSelection($receiver.copy_nbkcvy$($receiver.procedure, void 0, tmp$_1, tmp$_3, tmp$_2, void 0, void 0, tmp$_4, void 0, tmp$_5, void 0, void 0, void 0, void 0, tmp$_0, void 0, void 0, this.nextStep_0()));
      }
    } else {
      var goalsWithSubstitution = this.context.goals.map(StateGoalSelection$computeNext$lambda(this));
      tmp$ = new StatePrimitiveSelection(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, goalsWithSubstitution, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
    return tmp$;
  };
  StateGoalSelection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateGoalSelection',
    interfaces: [AbstractState]
  };
  StateGoalSelection.prototype.component1 = function () {
    return this.context;
  };
  StateGoalSelection.prototype.copy_6xnk88$ = function (context) {
    return new StateGoalSelection(context === void 0 ? this.context : context);
  };
  StateGoalSelection.prototype.toString = function () {
    return 'StateGoalSelection(context=' + Kotlin.toString(this.context) + ')';
  };
  StateGoalSelection.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateGoalSelection.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StateHalt(exception, context) {
    AbstractEndState.call(this, new Solution$Halt(context.query, exception), context);
    this.exception_mn0zc6$_0 = exception;
    this.context_i4qv96$_0 = context;
  }
  Object.defineProperty(StateHalt.prototype, 'exception', {
    get: function () {
      return this.exception_mn0zc6$_0;
    }
  });
  Object.defineProperty(StateHalt.prototype, 'context', {
    get: function () {
      return this.context_i4qv96$_0;
    }
  });
  StateHalt.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateHalt',
    interfaces: [AbstractEndState, ExceptionalState]
  };
  StateHalt.prototype.component1 = function () {
    return this.exception;
  };
  StateHalt.prototype.component2 = function () {
    return this.context;
  };
  StateHalt.prototype.copy_z39f11$ = function (exception, context) {
    return new StateHalt(exception === void 0 ? this.exception : exception, context === void 0 ? this.context : context);
  };
  StateHalt.prototype.toString = function () {
    return 'StateHalt(exception=' + Kotlin.toString(this.exception) + (', context=' + Kotlin.toString(this.context)) + ')';
  };
  StateHalt.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.exception) | 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateHalt.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.exception, other.exception) && Kotlin.equals(this.context, other.context)))));
  };
  function StateInit(context) {
    AbstractState.call(this, context);
    this.context_mw44ev$_0 = context;
  }
  Object.defineProperty(StateInit.prototype, 'context', {
    get: function () {
      return this.context_mw44ev$_0;
    }
  });
  StateInit.prototype.computeNext = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    tmp$_2 = this.context;
    tmp$ = toGoals(this.context.query);
    tmp$_0 = Cursor$Companion_getInstance().empty();
    tmp$_1 = Cursor$Companion_getInstance().empty();
    return new StateGoalSelection(appendRulesAndChoicePoints(tmp$_2.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, Substitution.Companion.empty(), void 0, tmp$, tmp$_0, tmp$_1, void 0, void 0, null, null, 0, L1), Cursor$Companion_getInstance().empty()));
  };
  StateInit.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateInit',
    interfaces: [AbstractState]
  };
  StateInit.prototype.component1 = function () {
    return this.context;
  };
  StateInit.prototype.copy_6xnk88$ = function (context) {
    return new StateInit(context === void 0 ? this.context : context);
  };
  StateInit.prototype.toString = function () {
    return 'StateInit(context=' + Kotlin.toString(this.context) + ')';
  };
  StateInit.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateInit.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StatePrimitiveExecution(context) {
    AbstractState.call(this, context);
    this.context_3w6zva$_0 = context;
  }
  Object.defineProperty(StatePrimitiveExecution.prototype, 'context', {
    get: function () {
      return this.context_3w6zva$_0;
    }
  });
  StatePrimitiveExecution.prototype.copyFromCurrentPrimitive_0 = function ($receiver, goals, parentProcedure, substitution) {
    if (goals === void 0)
      goals = null;
    if (parentProcedure === void 0)
      parentProcedure = false;
    if (substitution === void 0)
      substitution = null;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18;
    tmp$ = goals != null ? goals : $receiver.goals;
    tmp$_1 = parentProcedure ? (tmp$_0 = $receiver.parent) != null ? tmp$_0.procedure : null : $receiver.procedure;
    tmp$_2 = Cursor$Companion_getInstance().empty();
    tmp$_5 = (tmp$_4 = (tmp$_3 = $receiver.primitives.current) != null ? tmp$_3.libraries : null) != null ? tmp$_4 : $receiver.libraries;
    tmp$_8 = (tmp$_7 = (tmp$_6 = $receiver.primitives.current) != null ? tmp$_6.staticKb : null) != null ? tmp$_7 : $receiver.staticKb;
    tmp$_11 = (tmp$_10 = (tmp$_9 = $receiver.primitives.current) != null ? tmp$_9.dynamicKb : null) != null ? tmp$_10 : $receiver.dynamicKb;
    return $receiver.copy_nbkcvy$(tmp$_1, tmp$_5, (tmp$_13 = (tmp$_12 = $receiver.primitives.current) != null ? tmp$_12.flags : null) != null ? tmp$_13 : $receiver.flags, tmp$_8, tmp$_11, (tmp$_15 = (tmp$_14 = $receiver.primitives.current) != null ? tmp$_14.inputChannels : null) != null ? tmp$_15 : $receiver.inputChannels, (tmp$_17 = (tmp$_16 = $receiver.primitives.current) != null ? tmp$_16.outputChannels : null) != null ? tmp$_17 : $receiver.outputChannels, Kotlin.isType(tmp$_18 = substitution != null ? substitution : $receiver.substitution, Substitution$Unifier) ? tmp$_18 : throwCCE(), void 0, tmp$, void 0, tmp$_2, void 0, void 0, void 0, void 0, void 0, this.nextStep_0());
  };
  StatePrimitiveExecution.prototype.computeNext = function () {
    try {
      var sol = ensureNotNull(this.context.primitives.current).solution;
      if (Kotlin.isType(sol, Solution$Yes))
        return new StateGoalSelection(this.copyFromCurrentPrimitive_0(this.context, this.context.goals.next, true, this.context.substitution.plus(sol.substitution)));
      else if (Kotlin.isType(sol, Solution$No))
        return new StateBacktracking(this.copyFromCurrentPrimitive_0(this.context));
      else if (Kotlin.isType(sol, Solution$Halt))
        return new StateException(sol.exception.updateContext(this.context), this.copyFromCurrentPrimitive_0(this.context));
      else
        return Kotlin.noWhenBranchMatched();
    } catch (exception) {
      if (Kotlin.isType(exception, TuPrologRuntimeException)) {
        return new StateException(exception.updateContext(this.context), this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
      } else
        throw exception;
    }
  };
  StatePrimitiveExecution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StatePrimitiveExecution',
    interfaces: [AbstractState]
  };
  StatePrimitiveExecution.prototype.component1 = function () {
    return this.context;
  };
  StatePrimitiveExecution.prototype.copy_6xnk88$ = function (context) {
    return new StatePrimitiveExecution(context === void 0 ? this.context : context);
  };
  StatePrimitiveExecution.prototype.toString = function () {
    return 'StatePrimitiveExecution(context=' + Kotlin.toString(this.context) + ')';
  };
  StatePrimitiveExecution.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StatePrimitiveExecution.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StatePrimitiveSelection(context) {
    AbstractState.call(this, context);
    this.context_dqasim$_0 = context;
  }
  Object.defineProperty(StatePrimitiveSelection.prototype, 'context', {
    get: function () {
      return this.context_dqasim$_0;
    }
  });
  StatePrimitiveSelection.prototype.exceptionalState_0 = function (exception) {
    return new StateException(exception, this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
  };
  StatePrimitiveSelection.prototype.computeNext = function () {
    var $receiver = this.context;
    var block$result;
    block$break: do {
      var tmp$, tmp$_0, tmp$_1;
      var goal = ensureNotNull($receiver.currentGoal);
      if (Kotlin.isType(goal, Var)) {
        block$result = this.exceptionalState_0(InstantiationError.Companion.forGoal_oefzvh$(this.context, extractSignature(ensureNotNull(this.context.procedure)), goal));
      } else if (Kotlin.isType(goal, Struct)) {
        var signature = extractSignature(goal);
        if ($receiver.libraries.hasPrimitive(signature)) {
          var req = toRequest($receiver, signature, goal.argsList);
          var tmp$_2;
          if ((tmp$ = $receiver.libraries.primitives.get_11rb$(signature)) != null)
            tmp$_2 = tmp$;
          else {
            throw IllegalStateException_init_0('Inconsistent behaviour of Library.contains and Library.get'.toString());
          }
          var primitive = tmp$_2;
          try {
            var primitiveExecutions = cursor_0(primitive(req));
            block$result = new StatePrimitiveExecution(createChildAppendingPrimitivesAndChoicePoints(this.context, primitiveExecutions));
          } catch (exception) {
            if (Kotlin.isType(exception, TuPrologRuntimeException)) {
              block$result = this.exceptionalState_0(exception.updateContext(this.context));
              break block$break;
            } else
              throw exception;
          }
        } else {
          block$result = new StateRuleSelection(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
        }
      } else {
        block$result = this.exceptionalState_0(TypeError.Companion.forGoal_uyjcmc$(this.context, (tmp$_1 = (tmp$_0 = this.context.procedure) != null ? extractSignature(tmp$_0) : null) != null ? tmp$_1 : new Signature('?-', 1), TypeError$Expected.Companion.CALLABLE, goal));
      }
    }
     while (false);
    return block$result;
  };
  StatePrimitiveSelection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StatePrimitiveSelection',
    interfaces: [AbstractState]
  };
  StatePrimitiveSelection.prototype.component1 = function () {
    return this.context;
  };
  StatePrimitiveSelection.prototype.copy_6xnk88$ = function (context) {
    return new StatePrimitiveSelection(context === void 0 ? this.context : context);
  };
  StatePrimitiveSelection.prototype.toString = function () {
    return 'StatePrimitiveSelection(context=' + Kotlin.toString(this.context) + ')';
  };
  StatePrimitiveSelection.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StatePrimitiveSelection.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StateRuleExecution(context) {
    AbstractState.call(this, context);
    this.context_7xm1lb$_0 = context;
  }
  Object.defineProperty(StateRuleExecution.prototype, 'context', {
    get: function () {
      return this.context_7xm1lb$_0;
    }
  });
  Object.defineProperty(StateRuleExecution.prototype, 'failureState_0', {
    get: function () {
      return new StateBacktracking(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, Cursor$Companion_getInstance().empty(), void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
  });
  StateRuleExecution.prototype.computeNext = function () {
    var tmp$, tmp$_0;
    var unifier = Unificator.Companion.mguWith(ensureNotNull(this.context.goals.current), ensureNotNull(this.context.rules.current).head);
    if (Kotlin.isType(unifier, Substitution$Unifier)) {
      var newSubstitution = Kotlin.isType(tmp$ = this.context.substitution.plus(unifier), Substitution$Unifier) ? tmp$ : throwCCE();
      var subGoals = prepareForExecution(ensureNotNull(this.context.rules.current), newSubstitution).body.getSubstituted(newSubstitution, []);
      tmp$_0 = new StateGoalSelection(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, newSubstitution, void 0, toGoals(subGoals), Cursor$Companion_getInstance().empty(), void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    } else
      tmp$_0 = this.failureState_0;
    return tmp$_0;
  };
  StateRuleExecution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateRuleExecution',
    interfaces: [AbstractState]
  };
  StateRuleExecution.prototype.component1 = function () {
    return this.context;
  };
  StateRuleExecution.prototype.copy_6xnk88$ = function (context) {
    return new StateRuleExecution(context === void 0 ? this.context : context);
  };
  StateRuleExecution.prototype.toString = function () {
    return 'StateRuleExecution(context=' + Kotlin.toString(this.context) + ')';
  };
  StateRuleExecution.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateRuleExecution.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function StateRuleSelection(context) {
    StateRuleSelection$Companion_getInstance();
    AbstractState.call(this, context);
    this.context_9ovqsl$_0 = context;
  }
  Object.defineProperty(StateRuleSelection.prototype, 'context', {
    get: function () {
      return this.context_9ovqsl$_0;
    }
  });
  function StateRuleSelection$Companion() {
    StateRuleSelection$Companion_instance = this;
    this.transparentToCut = setOf([new Signature(',', 2), new Signature(';', 2), new Signature('->', 2)]);
  }
  function StateRuleSelection$Companion$CutLimit() {
  }
  function StateRuleSelection$Companion$CutLimit$None() {
    StateRuleSelection$Companion$CutLimit$None_instance = this;
    StateRuleSelection$Companion$CutLimit.call(this);
    this.depthToCut_367qkj$_0 = -1;
    this.procedure_o71yxy$_0 = null;
  }
  Object.defineProperty(StateRuleSelection$Companion$CutLimit$None.prototype, 'depthToCut', {
    get: function () {
      return this.depthToCut_367qkj$_0;
    }
  });
  Object.defineProperty(StateRuleSelection$Companion$CutLimit$None.prototype, 'procedure', {
    get: function () {
      return this.procedure_o71yxy$_0;
    }
  });
  StateRuleSelection$Companion$CutLimit$None.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'None',
    interfaces: [StateRuleSelection$Companion$CutLimit]
  };
  var StateRuleSelection$Companion$CutLimit$None_instance = null;
  function StateRuleSelection$Companion$CutLimit$None_getInstance() {
    if (StateRuleSelection$Companion$CutLimit$None_instance === null) {
      new StateRuleSelection$Companion$CutLimit$None();
    }return StateRuleSelection$Companion$CutLimit$None_instance;
  }
  function StateRuleSelection$Companion$CutLimit$Actual(depthToCut, procedure) {
    StateRuleSelection$Companion$CutLimit.call(this);
    this.depthToCut_akpfl3$_0 = depthToCut;
    this.procedure_ucohhg$_0 = procedure;
  }
  Object.defineProperty(StateRuleSelection$Companion$CutLimit$Actual.prototype, 'depthToCut', {
    get: function () {
      return this.depthToCut_akpfl3$_0;
    }
  });
  Object.defineProperty(StateRuleSelection$Companion$CutLimit$Actual.prototype, 'procedure', {
    get: function () {
      return this.procedure_ucohhg$_0;
    }
  });
  StateRuleSelection$Companion$CutLimit$Actual.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Actual',
    interfaces: [StateRuleSelection$Companion$CutLimit]
  };
  StateRuleSelection$Companion$CutLimit.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CutLimit',
    interfaces: []
  };
  StateRuleSelection$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StateRuleSelection$Companion_instance = null;
  function StateRuleSelection$Companion_getInstance() {
    if (StateRuleSelection$Companion_instance === null) {
      new StateRuleSelection$Companion();
    }return StateRuleSelection$Companion_instance;
  }
  Object.defineProperty(StateRuleSelection.prototype, 'failureState_0', {
    get: function () {
      return new StateBacktracking(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
  });
  StateRuleSelection.prototype.exceptionalState_0 = function (exception) {
    return new StateException(exception, this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
  };
  Object.defineProperty(StateRuleSelection.prototype, 'ignoreState_0', {
    get: function () {
      return new StateGoalSelection(this.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.context.goals.next, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.nextStep_0()));
    }
  });
  StateRuleSelection.prototype.isCut_0 = function ($receiver) {
    return Kotlin.isType($receiver, Atom) && equals($receiver.value, '!');
  };
  StateRuleSelection.prototype.computeCutLimit_0 = function ($receiver, magicCut) {
    if (magicCut === void 0)
      magicCut = false;
    var tmp$, tmp$_0;
    if (magicCut) {
      tmp$ = firstOrNull($receiver.pathToRoot);
    } else {
      var $receiver_0 = $receiver.pathToRoot;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_1;
        tmp$_1 = $receiver_0.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          var tmp$_2;
          if (!contains(StateRuleSelection$Companion_getInstance().transparentToCut, (tmp$_2 = element.procedure) != null ? extractSignature(tmp$_2) : null)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      tmp$ = firstOrNull$result;
    }
    var cutLimit = tmp$;
    if (cutLimit == null) {
      tmp$_0 = StateRuleSelection$Companion$CutLimit$None_getInstance();
    } else {
      tmp$_0 = new StateRuleSelection$Companion$CutLimit$Actual(cutLimit.depth, cutLimit.procedure);
    }
    return tmp$_0;
  };
  function StateRuleSelection$performCut$lambda(closure$cutLimit) {
    return function (it) {
      return equals(ensureNotNull(it.executionContext).procedure, closure$cutLimit.procedure);
    };
  }
  StateRuleSelection.prototype.performCut_0 = function ($receiver, cutLimit) {
    var tmp$, tmp$_0;
    if ($receiver === null)
      tmp$_0 = null;
    else if (Kotlin.isType(cutLimit, StateRuleSelection$Companion$CutLimit$None) || cutLimit.depthToCut > ensureNotNull($receiver.executionContext).depth || (cutLimit.depthToCut === ensureNotNull($receiver.executionContext).depth && !equals(cutLimit.procedure, ensureNotNull($receiver.executionContext).procedure)))
      tmp$_0 = $receiver;
    else {
      var cutCandidates = filter($receiver.pathToRoot, StateRuleSelection$performCut$lambda(cutLimit));
      if (any(cutCandidates)) {
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$_1;
          tmp$_1 = cutCandidates.iterator();
          while (tmp$_1.hasNext()) {
            var element = tmp$_1.next();
            if (ensureNotNull(element.executionContext).depth <= cutLimit.depthToCut) {
              firstOrNull$result = element;
              break firstOrNull$break;
            }}
          firstOrNull$result = null;
        }
         while (false);
        tmp$_0 = (tmp$ = firstOrNull$result) != null ? tmp$.parent : null;
      } else {
        tmp$_0 = $receiver;
      }
    }
    return tmp$_0;
  };
  function StateRuleSelection$computeNext$lambda$lambda(closure$currentGoal) {
    return function (it) {
      return it.getByHead(closure$currentGoal);
    };
  }
  function StateRuleSelection$computeNext$lambda$lambda_0(it) {
    return it.freshCopy();
  }
  StateRuleSelection.prototype.computeNext = function () {
    var tmp$;
    var currentGoal = ensureNotNull(this.context.currentGoal);
    if (Kotlin.isType(currentGoal, Var))
      tmp$ = this.exceptionalState_0(InstantiationError.Companion.forGoal_oefzvh$(this.context, extractSignature(ensureNotNull(this.context.procedure)), currentGoal));
    else if (Kotlin.isType(currentGoal, Struct)) {
      var $receiver = this.context;
      var block$result;
      var ruleSources = sequenceOf([$receiver.libraries.theory, $receiver.staticKb, $receiver.dynamicKb]);
      if (Kotlin.isType(currentGoal, Truth)) {
        block$result = currentGoal.isTrue ? this.ignoreState_0 : this.failureState_0;
      } else if (this.isCut_0(currentGoal)) {
        var cutLimit = this.computeCutLimit_0($receiver, Kotlin.isType(currentGoal, Object.getPrototypeOf(magic.MagicCut).constructor));
        block$result = this.ignoreState_0.copy_6xnk88$(this.ignoreState_0.context.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, this.performCut_0(this.ignoreState_0.context.choicePoints, cutLimit)));
      } else {
        var any$result;
        any$break: do {
          var tmp$_0;
          tmp$_0 = ruleSources.iterator();
          while (tmp$_0.hasNext()) {
            var element = tmp$_0.next();
            if (element.containsHead(currentGoal)) {
              any$result = true;
              break any$break;
            }}
          any$result = false;
        }
         while (false);
        if (any$result) {
          var rules = ensureRules(map(flatMap(ruleSources, StateRuleSelection$computeNext$lambda$lambda(currentGoal)), StateRuleSelection$computeNext$lambda$lambda_0));
          block$result = new StateRuleExecution(createChildAppendingRulesAndChoicePoints(this.context, rules));
        } else {
          block$result = this.failureState_0;
        }
      }
      tmp$ = block$result;
    } else {
      tmp$ = this.exceptionalState_0(TypeError.Companion.forGoal_uyjcmc$(this.context, extractSignature(ensureNotNull(this.context.procedure)), TypeError$Expected.Companion.CALLABLE, currentGoal));
    }
    return tmp$;
  };
  StateRuleSelection.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StateRuleSelection',
    interfaces: [AbstractState]
  };
  StateRuleSelection.prototype.component1 = function () {
    return this.context;
  };
  StateRuleSelection.prototype.copy_6xnk88$ = function (context) {
    return new StateRuleSelection(context === void 0 ? this.context : context);
  };
  StateRuleSelection.prototype.toString = function () {
    return 'StateRuleSelection(context=' + Kotlin.toString(this.context) + ')';
  };
  StateRuleSelection.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    return result;
  };
  StateRuleSelection.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.context, other.context))));
  };
  function ensureRules$lambda(it) {
    var tmp$;
    if (!Kotlin.isType(it, Rule)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }return Kotlin.isType(tmp$ = it, Rule) ? tmp$ : throwCCE();
  }
  function ensureRules($receiver) {
    return cursor_0(map($receiver, ensureRules$lambda));
  }
  function unfoldGoals$lambda(it) {
    return unfoldGoals(it);
  }
  function unfoldGoals($receiver) {
    if (Kotlin.isType($receiver, Tuple))
      return flatMap($receiver.toSequence(), unfoldGoals$lambda);
    else
      return sequenceOf([$receiver]);
  }
  function toGoals$lambda(it) {
    if (Kotlin.isType(it, Var))
      return Struct.Companion.of('call', [it]);
    else
      return it;
  }
  function toGoals($receiver) {
    return cursor_0(map(unfoldGoals($receiver), toGoals$lambda));
  }
  function createTempChild($receiver, inferProcedureFromGoals) {
    if (inferProcedureFromGoals === void 0)
      inferProcedureFromGoals = true;
    var tmp$;
    var currentGoal = Kotlin.isType(tmp$ = $receiver.currentGoal, Struct) ? tmp$ : throwCCE();
    return $receiver.copy_nbkcvy$(inferProcedureFromGoals ? currentGoal : $receiver.procedure, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, toGoals(currentGoal), void 0, void 0, void 0, void 0, void 0, $receiver, $receiver.depth + 1 | 0, $receiver.step.add(Kotlin.Long.fromInt(1)));
  }
  function appendRulesAndChoicePoints($receiver, rules) {
    var tmp$;
    if (rules.hasNext) {
      tmp$ = appendRules($receiver.choicePoints, rules.next, $receiver);
    } else {
      tmp$ = appendRules($receiver.choicePoints, EmptyCursor_getInstance(), $receiver);
    }
    var newChoicePointContext = tmp$;
    return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, rules, void 0, void 0, void 0, newChoicePointContext);
  }
  function appendPrimitivesAndChoicePoints($receiver, primitiveExecutions) {
    var tmp$;
    if (primitiveExecutions.hasNext) {
      tmp$ = appendPrimitives($receiver.choicePoints, primitiveExecutions.next, $receiver);
    } else {
      tmp$ = appendPrimitives($receiver.choicePoints, EmptyCursor_getInstance(), $receiver);
    }
    var newChoicePointContext = tmp$;
    return $receiver.copy_nbkcvy$(void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, primitiveExecutions, void 0, void 0, newChoicePointContext);
  }
  function createChildAppendingRulesAndChoicePoints($receiver, rules, inferProcedureFromGoals) {
    if (inferProcedureFromGoals === void 0)
      inferProcedureFromGoals = true;
    var tempExecutionContext = createTempChild($receiver, inferProcedureFromGoals);
    return appendRulesAndChoicePoints(tempExecutionContext, rules);
  }
  function createChildAppendingPrimitivesAndChoicePoints($receiver, primitiveExecutions, inferProcedureFromGoals) {
    if (inferProcedureFromGoals === void 0)
      inferProcedureFromGoals = true;
    var tempExecutionContext = createTempChild($receiver, inferProcedureFromGoals);
    return appendPrimitivesAndChoicePoints(tempExecutionContext, primitiveExecutions);
  }
  function toRequest($receiver, signature, arguments_0) {
    return new Solve$Request(signature, arguments_0, $receiver.copy_nbkcvy$(void 0, $receiver.libraries, $receiver.flags, $receiver.staticKb, $receiver.dynamicKb, $receiver.inputChannels, $receiver.outputChannels, $receiver.substitution), void 0, $receiver.maxDuration);
  }
  function DefaultBuiltins() {
    DefaultBuiltins_instance = this;
    this.$delegate_xpluon$_0 = stdlib.CommonBuiltins;
    this.theory_hjotxs$_0 = lazy(DefaultBuiltins$theory$lambda);
    this.primitives_dvexc9$_0 = lazy(DefaultBuiltins$primitives$lambda);
  }
  Object.defineProperty(DefaultBuiltins.prototype, 'theory', {
    get: function () {
      return this.theory_hjotxs$_0.value;
    }
  });
  Object.defineProperty(DefaultBuiltins.prototype, 'primitives', {
    get: function () {
      return this.primitives_dvexc9$_0.value;
    }
  });
  Object.defineProperty(DefaultBuiltins.prototype, 'alias', {
    get: function () {
      return this.$delegate_xpluon$_0.alias;
    }
  });
  Object.defineProperty(DefaultBuiltins.prototype, 'functions', {
    get: function () {
      return this.$delegate_xpluon$_0.functions;
    }
  });
  Object.defineProperty(DefaultBuiltins.prototype, 'operators', {
    get: function () {
      return this.$delegate_xpluon$_0.operators;
    }
  });
  DefaultBuiltins.prototype.containsOperator = function (operator) {
    return this.$delegate_xpluon$_0.containsOperator(operator);
  };
  DefaultBuiltins.prototype.containsSignature = function (signature) {
    return this.$delegate_xpluon$_0.containsSignature(signature);
  };
  DefaultBuiltins.prototype.hasPrimitive = function (signature) {
    return this.$delegate_xpluon$_0.hasPrimitive(signature);
  };
  DefaultBuiltins.prototype.hasProtected = function (signature) {
    return this.$delegate_xpluon$_0.hasProtected(signature);
  };
  function DefaultBuiltins$theory$lambda() {
    return stdlib.CommonBuiltins.theory.plusClauseDatabase(SpecificRules_getInstance().clauseDb);
  }
  function DefaultBuiltins$primitives$lambda$lambda(it) {
    return to(it.signature, it.wrappedImplementation);
  }
  function DefaultBuiltins$primitives$lambda() {
    return plus_0(stdlib.CommonBuiltins.primitives, toMap(map(sequenceOf([Throw_getInstance()]), DefaultBuiltins$primitives$lambda$lambda)));
  }
  DefaultBuiltins.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'DefaultBuiltins',
    interfaces: [AliasedLibrary]
  };
  var DefaultBuiltins_instance = null;
  function DefaultBuiltins_getInstance() {
    if (DefaultBuiltins_instance === null) {
      new DefaultBuiltins();
    }return DefaultBuiltins_instance;
  }
  function Throw() {
    Throw_instance = this;
    UnaryPredicate.call(this, 'throw');
  }
  Throw.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequenceOf([PrimitiveWrapper.Companion.ensuringAllArgumentsAreInstantiated_rcoxxl$(request).replyException(this.handleError_0(request.context, request.arguments.get_za3lpa$(0)))]);
  };
  Throw.prototype.handleError_0 = function (context, error) {
    var tmp$;
    var tmp$_0, tmp$_1;
    if (Kotlin.isType(error, Struct) && equals(error.functor, 'error')) {
      tmp$_0 = error.arity;
      tmp$_1 = (1 <= tmp$_0 && tmp$_0 <= 2);
    } else
      tmp$_1 = false;
    if (tmp$_1) {
      return PrologError.Companion.of(void 0, void 0, context, Kotlin.isType(tmp$ = error.get(0), Struct) ? tmp$ : throwCCE(), error.arity > 1 ? error.get(1) : null);
    } else
      return MessageError.Companion.of_obfanv$(error, context);
  };
  Throw.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Throw',
    interfaces: [UnaryPredicate]
  };
  var Throw_instance = null;
  function Throw_getInstance() {
    if (Throw_instance === null) {
      new Throw();
    }return Throw_instance;
  }
  function Call() {
    Call_instance = this;
    RuleWrapper_init('call', 1, void 0, this);
  }
  Call.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf($receiver.varOf('G'));
  };
  Call.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([$receiver.structOf(primitive.EnsureExecutable.signature.name, [$receiver.varOf('G')]), $receiver.varOf('G')]);
  };
  Call.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Call',
    interfaces: [RuleWrapper]
  };
  var Call_instance = null;
  function Call_getInstance() {
    if (Call_instance === null) {
      new Call();
    }return Call_instance;
  }
  function Catch() {
    Catch_instance = this;
    RuleWrapper_init('catch', 3, void 0, this);
  }
  Catch.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf_0([$receiver.varOf('G'), $receiver.varOf('E'), $receiver.varOf('C')]);
  };
  Catch.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.varOf('G');
  };
  Catch.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Catch',
    interfaces: [RuleWrapper]
  };
  var Catch_instance = null;
  function Catch_getInstance() {
    if (Catch_instance === null) {
      new Catch();
    }return Catch_instance;
  }
  function Comma() {
    Comma_instance = this;
    RuleWrapper_init(',', 2, void 0, this);
  }
  Comma.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf_0([$receiver.varOf('A'), $receiver.varOf('B')]);
  };
  Comma.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([$receiver.varOf('A'), $receiver.varOf('B')]);
  };
  Comma.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Comma',
    interfaces: [RuleWrapper]
  };
  var Comma_instance = null;
  function Comma_getInstance() {
    if (Comma_instance === null) {
      new Comma();
    }return Comma_instance;
  }
  function Cut() {
    Cut_instance = this;
    RuleWrapper_init('!', 0, void 0, this);
  }
  Cut.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Cut',
    interfaces: [RuleWrapper]
  };
  var Cut_instance = null;
  function Cut_getInstance() {
    if (Cut_instance === null) {
      new Cut();
    }return Cut_instance;
  }
  function NegationAsFailure() {
    NegationAsFailure$Companion_getInstance();
    RuleWrapper_init(NegationAsFailure$Companion_getInstance().FUNCTOR, 1, void 0, this);
  }
  NegationAsFailure.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf($receiver.varOf('X'));
  };
  function NegationAsFailure$Fail() {
    NegationAsFailure$Fail_instance = this;
    NegationAsFailure.call(this);
  }
  NegationAsFailure$Fail.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([$receiver.structOf(primitive.EnsureExecutable.signature.name, [$receiver.varOf('X')]), $receiver.varOf('X'), magic.MagicCut, $receiver.truthOf(false)]);
  };
  NegationAsFailure$Fail.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Fail',
    interfaces: [NegationAsFailure]
  };
  var NegationAsFailure$Fail_instance = null;
  function NegationAsFailure$Fail_getInstance() {
    if (NegationAsFailure$Fail_instance === null) {
      new NegationAsFailure$Fail();
    }return NegationAsFailure$Fail_instance;
  }
  function NegationAsFailure$Success() {
    NegationAsFailure$Success_instance = this;
    NegationAsFailure.call(this);
  }
  NegationAsFailure$Success.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.truthOf(true);
  };
  NegationAsFailure$Success.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Success',
    interfaces: [NegationAsFailure]
  };
  var NegationAsFailure$Success_instance = null;
  function NegationAsFailure$Success_getInstance() {
    if (NegationAsFailure$Success_instance === null) {
      new NegationAsFailure$Success();
    }return NegationAsFailure$Success_instance;
  }
  function NegationAsFailure$Companion() {
    NegationAsFailure$Companion_instance = this;
    this.FUNCTOR = '\\+';
    this.ARITY = 1;
  }
  NegationAsFailure$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var NegationAsFailure$Companion_instance = null;
  function NegationAsFailure$Companion_getInstance() {
    if (NegationAsFailure$Companion_instance === null) {
      new NegationAsFailure$Companion();
    }return NegationAsFailure$Companion_instance;
  }
  NegationAsFailure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NegationAsFailure',
    interfaces: [RuleWrapper]
  };
  function SpecificRules() {
    SpecificRules_instance = this;
    this.wrappers = sequenceOf([Catch_getInstance(), Call_getInstance(), Comma_getInstance(), Cut_getInstance(), NegationAsFailure$Fail_getInstance(), NegationAsFailure$Success_getInstance()]);
    this.clauseDb = ClauseDatabase.Companion.ofSequence(map(this.wrappers, SpecificRules$clauseDb$lambda));
  }
  function SpecificRules$clauseDb$lambda(it) {
    return it.wrappedImplementation;
  }
  SpecificRules.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SpecificRules',
    interfaces: []
  };
  var SpecificRules_instance = null;
  function SpecificRules_getInstance() {
    if (SpecificRules_instance === null) {
      new SpecificRules();
    }return SpecificRules_instance;
  }
  function AbstractCursor() {
  }
  AbstractCursor.prototype.toString = function () {
    var tmp$;
    if (this.isOver)
      tmp$ = '[]';
    else if (!this.hasNext)
      tmp$ = '[' + toString(this.current) + ']';
    else
      tmp$ = '[' + toString(this.current) + ', ...]';
    return tmp$;
  };
  AbstractCursor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractCursor',
    interfaces: [Cursor]
  };
  function ConjunctionCursor(first, second) {
    AbstractCursor.call(this);
    this.first = first;
    this.second = second;
  }
  Object.defineProperty(ConjunctionCursor.prototype, 'isOver', {
    get: function () {
      return this.first.isOver && this.second.isOver;
    }
  });
  Object.defineProperty(ConjunctionCursor.prototype, 'next', {
    get: function () {
      return this.first.hasNext ? new ConjunctionCursor(this.first.next, this.second) : this.second;
    }
  });
  Object.defineProperty(ConjunctionCursor.prototype, 'current', {
    get: function () {
      return this.first.hasNext ? this.first.current : this.second.current;
    }
  });
  Object.defineProperty(ConjunctionCursor.prototype, 'hasNext', {
    get: function () {
      return this.first.hasNext || this.second.hasNext;
    }
  });
  ConjunctionCursor.prototype.toString = function () {
    return AbstractCursor.prototype.toString.call(this);
  };
  ConjunctionCursor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConjunctionCursor',
    interfaces: [AbstractCursor]
  };
  ConjunctionCursor.prototype.component1 = function () {
    return this.first;
  };
  ConjunctionCursor.prototype.component2 = function () {
    return this.second;
  };
  ConjunctionCursor.prototype.copy_ayt0r0$ = function (first, second) {
    return new ConjunctionCursor(first === void 0 ? this.first : first, second === void 0 ? this.second : second);
  };
  ConjunctionCursor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.first) | 0;
    result = result * 31 + Kotlin.hashCode(this.second) | 0;
    return result;
  };
  ConjunctionCursor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.first, other.first) && Kotlin.equals(this.second, other.second)))));
  };
  function Cursor() {
    Cursor$Companion_getInstance();
  }
  Cursor.prototype.append = function (other) {
    return new ConjunctionCursor(this, other);
  };
  Cursor.prototype.map = function (mapper) {
    return new MapperCursor(this, mapper);
  };
  function Cursor$Companion() {
    Cursor$Companion_instance = this;
  }
  Cursor$Companion.prototype.of = function (iterator) {
    return toCursor(iterator);
  };
  Cursor$Companion.prototype.empty = function () {
    return EmptyCursor_getInstance();
  };
  Cursor$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Cursor$Companion_instance = null;
  function Cursor$Companion_getInstance() {
    if (Cursor$Companion_instance === null) {
      new Cursor$Companion();
    }return Cursor$Companion_instance;
  }
  Cursor.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Cursor',
    interfaces: []
  };
  function plus_1($receiver, other) {
    if (other.hasNext) {
      return new ConjunctionCursor($receiver, other);
    } else if ($receiver.hasNext) {
      return $receiver;
    } else {
      return EmptyCursor_getInstance();
    }
  }
  function toCursor($receiver) {
    var tmp$;
    if ($receiver.hasNext()) {
      tmp$ = new LazyCursor($receiver);
    } else {
      tmp$ = EmptyCursor_getInstance();
    }
    return tmp$;
  }
  function cursor($receiver) {
    return toCursor($receiver.iterator());
  }
  function cursor_0($receiver) {
    return toCursor($receiver.iterator());
  }
  function cursor_1($receiver) {
    return toCursor(Kotlin.arrayIterator($receiver));
  }
  function cursor_2($receiver) {
    return toCursor($receiver.iterator());
  }
  function EmptyCursor() {
    EmptyCursor_instance = this;
    AbstractCursor.call(this);
  }
  Object.defineProperty(EmptyCursor.prototype, 'next', {
    get: function () {
      throw NoSuchElementException_init();
    }
  });
  Object.defineProperty(EmptyCursor.prototype, 'current', {
    get: function () {
      throw NoSuchElementException_init();
    }
  });
  Object.defineProperty(EmptyCursor.prototype, 'hasNext', {
    get: function () {
      return false;
    }
  });
  Object.defineProperty(EmptyCursor.prototype, 'isOver', {
    get: function () {
      return true;
    }
  });
  EmptyCursor.prototype.toString = function () {
    return AbstractCursor.prototype.toString.call(this);
  };
  EmptyCursor.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EmptyCursor',
    interfaces: [AbstractCursor]
  };
  var EmptyCursor_instance = null;
  function EmptyCursor_getInstance() {
    if (EmptyCursor_instance === null) {
      new EmptyCursor();
    }return EmptyCursor_instance;
  }
  function LazyCursor(iterator) {
    AbstractCursor.call(this);
    this.iterator = iterator;
    this.wrapped_qmpxtm$_0 = lazy(LazyCursor$wrapped$lambda(this));
  }
  Object.defineProperty(LazyCursor.prototype, 'wrapped_0', {
    get: function () {
      return this.wrapped_qmpxtm$_0.value;
    }
  });
  Object.defineProperty(LazyCursor.prototype, 'next', {
    get: function () {
      return this.wrapped_0.next;
    }
  });
  Object.defineProperty(LazyCursor.prototype, 'current', {
    get: function () {
      return this.wrapped_0.current;
    }
  });
  Object.defineProperty(LazyCursor.prototype, 'hasNext', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(LazyCursor.prototype, 'isOver', {
    get: function () {
      return false;
    }
  });
  LazyCursor.prototype.toString = function () {
    return AbstractCursor.prototype.toString.call(this);
  };
  function LazyCursor$wrapped$lambda(this$LazyCursor) {
    return function () {
      return new NonLastCursor(this$LazyCursor.iterator);
    };
  }
  LazyCursor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LazyCursor',
    interfaces: [AbstractCursor]
  };
  LazyCursor.prototype.component1 = function () {
    return this.iterator;
  };
  LazyCursor.prototype.copy_1phuh2$ = function (iterator) {
    return new LazyCursor(iterator === void 0 ? this.iterator : iterator);
  };
  LazyCursor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.iterator) | 0;
    return result;
  };
  LazyCursor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.iterator, other.iterator))));
  };
  function MapperCursor(wrapped, mapper) {
    AbstractCursor.call(this);
    this.wrapped = wrapped;
    this.mapper = mapper;
    this.next_ydogtr$_0 = lazy(MapperCursor$next$lambda(this));
    this.current_5mf049$_0 = lazy(MapperCursor$current$lambda(this));
  }
  Object.defineProperty(MapperCursor.prototype, 'next', {
    get: function () {
      return this.next_ydogtr$_0.value;
    }
  });
  Object.defineProperty(MapperCursor.prototype, 'current', {
    get: function () {
      return this.current_5mf049$_0.value;
    }
  });
  Object.defineProperty(MapperCursor.prototype, 'hasNext', {
    get: function () {
      return this.wrapped.hasNext;
    }
  });
  Object.defineProperty(MapperCursor.prototype, 'isOver', {
    get: function () {
      return this.wrapped.isOver;
    }
  });
  MapperCursor.prototype.toString = function () {
    return AbstractCursor.prototype.toString.call(this);
  };
  function MapperCursor$next$lambda(this$MapperCursor) {
    return function () {
      return new MapperCursor(this$MapperCursor.wrapped.next, this$MapperCursor.mapper);
    };
  }
  function MapperCursor$current$lambda(this$MapperCursor) {
    return function () {
      var $receiver = this$MapperCursor.wrapped.current;
      var this$MapperCursor_0 = this$MapperCursor;
      return $receiver == null ? null : this$MapperCursor_0.mapper($receiver);
    };
  }
  MapperCursor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MapperCursor',
    interfaces: [AbstractCursor]
  };
  MapperCursor.prototype.component1 = function () {
    return this.wrapped;
  };
  MapperCursor.prototype.component2 = function () {
    return this.mapper;
  };
  MapperCursor.prototype.copy_y4rvwy$ = function (wrapped, mapper) {
    return new MapperCursor(wrapped === void 0 ? this.wrapped : wrapped, mapper === void 0 ? this.mapper : mapper);
  };
  MapperCursor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.wrapped) | 0;
    result = result * 31 + Kotlin.hashCode(this.mapper) | 0;
    return result;
  };
  MapperCursor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.wrapped, other.wrapped) && Kotlin.equals(this.mapper, other.mapper)))));
  };
  function NonLastCursor(iterator) {
    AbstractCursor.call(this);
    this.iterator = iterator;
    this.next_oyx07n$_0 = lazy(NonLastCursor$next$lambda(this));
    this.current_sytv3p$_0 = this.iterator.next();
  }
  Object.defineProperty(NonLastCursor.prototype, 'next', {
    get: function () {
      return this.next_oyx07n$_0.value;
    }
  });
  Object.defineProperty(NonLastCursor.prototype, 'current', {
    get: function () {
      return this.current_sytv3p$_0;
    }
  });
  Object.defineProperty(NonLastCursor.prototype, 'hasNext', {
    get: function () {
      return true;
    }
  });
  Object.defineProperty(NonLastCursor.prototype, 'isOver', {
    get: function () {
      return false;
    }
  });
  NonLastCursor.prototype.toString = function () {
    return AbstractCursor.prototype.toString.call(this);
  };
  function NonLastCursor$next$lambda(this$NonLastCursor) {
    return function () {
      return toCursor(this$NonLastCursor.iterator);
    };
  }
  NonLastCursor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NonLastCursor',
    interfaces: [AbstractCursor]
  };
  NonLastCursor.prototype.component1 = function () {
    return this.iterator;
  };
  NonLastCursor.prototype.copy_1phuh2$ = function (iterator) {
    return new NonLastCursor(iterator === void 0 ? this.iterator : iterator);
  };
  NonLastCursor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.iterator) | 0;
    return result;
  };
  NonLastCursor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.iterator, other.iterator))));
  };
  ChoicePointContext.Primitives = ChoicePointContext$Primitives;
  ChoicePointContext.Rules = ChoicePointContext$Rules;
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$solve = package$tuprolog.solve || (package$tuprolog.solve = {});
  package$solve.ChoicePointContext = ChoicePointContext;
  package$solve.nextDepth_2kbrgh$ = nextDepth;
  package$solve.appendPrimitives_ra5g91$ = appendPrimitives;
  package$solve.appendRules_bijtkp$ = appendRules;
  package$solve.ClassicExecutionContext = ClassicExecutionContext;
  package$solve.ClassicSolver = ClassicSolver;
  Object.defineProperty(package$solve, 'ClassicSolverFactory', {
    get: ClassicSolverFactory_getInstance
  });
  package$solve.MutableClassicSolver = MutableClassicSolver;
  package$solve.classicSolver = classic;
  package$solve.classicSolverWithDefaultBuiltins = classicWithDefaultBuiltins;
  package$solve.classicMutableSolver = classic_0;
  package$solve.classicMutableSolverWithDefaultBuiltins = classicWithDefaultBuiltins_0;
  var package$fsm = package$solve.fsm || (package$solve.fsm = {});
  package$fsm.AbstractEndState = AbstractEndState;
  package$fsm.AbstractState = AbstractState;
  package$fsm.EndState = EndState;
  package$fsm.ExceptionalState = ExceptionalState;
  package$fsm.State = State;
  package$fsm.clone_uxh4ij$ = clone;
  package$fsm.StateBacktracking = StateBacktracking;
  package$fsm.StateEnd = StateEnd;
  $$importsForInline$$['@tuprolog/2p-solve'] = $module$_2p_solve;
  package$fsm.StateException = StateException;
  package$fsm.StateGoalSelection = StateGoalSelection;
  package$fsm.StateHalt = StateHalt;
  package$fsm.StateInit = StateInit;
  package$fsm.StatePrimitiveExecution = StatePrimitiveExecution;
  package$fsm.StatePrimitiveSelection = StatePrimitiveSelection;
  package$fsm.StateRuleExecution = StateRuleExecution;
  Object.defineProperty(StateRuleSelection, 'Companion', {
    get: StateRuleSelection$Companion_getInstance
  });
  package$fsm.StateRuleSelection = StateRuleSelection;
  package$fsm.ensureRules_q0ft1w$ = ensureRules;
  package$fsm.unfoldGoals_k8edsm$ = unfoldGoals;
  package$fsm.toGoals_k8edsm$ = toGoals;
  package$fsm.createTempChild_cc21wy$ = createTempChild;
  package$fsm.appendRulesAndChoicePoints_2xkyz4$ = appendRulesAndChoicePoints;
  package$fsm.appendPrimitivesAndChoicePoints_4iq0ce$ = appendPrimitivesAndChoicePoints;
  package$fsm.createChildAppendingRulesAndChoicePoints_myslzr$ = createChildAppendingRulesAndChoicePoints;
  package$fsm.createChildAppendingPrimitivesAndChoicePoints_jye9q3$ = createChildAppendingPrimitivesAndChoicePoints;
  package$fsm.toRequest_ul4o0s$ = toRequest;
  var package$library = package$solve.library || (package$solve.library = {});
  var package$stdlib = package$library.stdlib || (package$library.stdlib = {});
  Object.defineProperty(package$stdlib, 'DefaultBuiltins', {
    get: DefaultBuiltins_getInstance
  });
  var package$primitive = package$stdlib.primitive || (package$stdlib.primitive = {});
  Object.defineProperty(package$primitive, 'Throw', {
    get: Throw_getInstance
  });
  var package$rule = package$stdlib.rule || (package$stdlib.rule = {});
  Object.defineProperty(package$rule, 'Call', {
    get: Call_getInstance
  });
  Object.defineProperty(package$rule, 'Catch', {
    get: Catch_getInstance
  });
  Object.defineProperty(package$rule, 'Comma', {
    get: Comma_getInstance
  });
  Object.defineProperty(package$rule, 'Cut', {
    get: Cut_getInstance
  });
  Object.defineProperty(NegationAsFailure, 'Fail', {
    get: NegationAsFailure$Fail_getInstance
  });
  Object.defineProperty(NegationAsFailure, 'Success', {
    get: NegationAsFailure$Success_getInstance
  });
  Object.defineProperty(NegationAsFailure, 'Companion', {
    get: NegationAsFailure$Companion_getInstance
  });
  package$rule.NegationAsFailure = NegationAsFailure;
  Object.defineProperty(package$rule, 'SpecificRules', {
    get: SpecificRules_getInstance
  });
  var package$utils = package$tuprolog.utils || (package$tuprolog.utils = {});
  package$utils.AbstractCursor = AbstractCursor;
  package$utils.ConjunctionCursor = ConjunctionCursor;
  Object.defineProperty(Cursor, 'Companion', {
    get: Cursor$Companion_getInstance
  });
  package$utils.Cursor = Cursor;
  package$utils.plus_56fvmv$ = plus_1;
  package$utils.toCursor_35ci02$ = toCursor;
  package$utils.cursor_7wnvza$ = cursor;
  package$utils.cursor_veqyi0$ = cursor_0;
  package$utils.cursor_4b5429$ = cursor_1;
  package$utils.cursor_4c7yge$ = cursor_2;
  Object.defineProperty(package$utils, 'EmptyCursor', {
    get: EmptyCursor_getInstance
  });
  package$utils.LazyCursor = LazyCursor;
  package$utils.MapperCursor = MapperCursor;
  package$utils.NonLastCursor = NonLastCursor;
  Object.defineProperty(ClassicExecutionContext.prototype, 'standardError', Object.getOwnPropertyDescriptor(ExecutionContext.prototype, 'standardError'));
  Object.defineProperty(ClassicExecutionContext.prototype, 'standardInput', Object.getOwnPropertyDescriptor(ExecutionContext.prototype, 'standardInput'));
  Object.defineProperty(ClassicExecutionContext.prototype, 'standardOutput', Object.getOwnPropertyDescriptor(ExecutionContext.prototype, 'standardOutput'));
  Object.defineProperty(ClassicExecutionContext.prototype, 'warnings', Object.getOwnPropertyDescriptor(ExecutionContext.prototype, 'warnings'));
  Object.defineProperty(ClassicSolver.prototype, 'standardError', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardError'));
  Object.defineProperty(ClassicSolver.prototype, 'standardInput', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardInput'));
  Object.defineProperty(ClassicSolver.prototype, 'standardOutput', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardOutput'));
  Object.defineProperty(ClassicSolver.prototype, 'warnings', Object.getOwnPropertyDescriptor(Solver.prototype, 'warnings'));
  ClassicSolver.prototype.solve = Solver.prototype.solve;
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultDynamicKb', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultDynamicKb'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultErrorChannel', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultErrorChannel'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultFlags', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultFlags'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultInputChannel', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultInputChannel'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultLibraries', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultLibraries'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultOutputChannel', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultOutputChannel'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultStaticKb', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultStaticKb'));
  Object.defineProperty(ClassicSolverFactory.prototype, 'defaultWarningsChannel', Object.getOwnPropertyDescriptor(SolverFactory.prototype, 'defaultWarningsChannel'));
  ClassicSolverFactory.prototype.mutableSolverWithDefaultBuiltins$default = SolverFactory.prototype.mutableSolverWithDefaultBuiltins$default;
  ClassicSolverFactory.prototype.solverWithDefaultBuiltins$default = SolverFactory.prototype.solverWithDefaultBuiltins$default;
  ClassicSolverFactory.prototype.solverOf = SolverFactory.prototype.solverOf;
  ClassicSolverFactory.prototype.mutableSolverOf = SolverFactory.prototype.mutableSolverOf;
  ClassicSolverFactory.prototype.mutableSolverWithDefaultBuiltins = SolverFactory.prototype.mutableSolverWithDefaultBuiltins;
  ClassicSolverFactory.prototype.solverWithDefaultBuiltins = SolverFactory.prototype.solverWithDefaultBuiltins;
  Object.defineProperty(AbstractEndState.prototype, 'hasOpenAlternatives', Object.getOwnPropertyDescriptor(EndState.prototype, 'hasOpenAlternatives'));
  AbstractCursor.prototype.append = Cursor.prototype.append;
  AbstractCursor.prototype.map = Cursor.prototype.map;
  Kotlin.defineModule('@tuprolog/2p-solve-classic', _);
  return _;
}));



},{"@tuprolog/2p-core":4,"@tuprolog/2p-solve":16,"@tuprolog/2p-theory":17,"@tuprolog/2p-unify":18,"kotlin":66}],16:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-core', '@tuprolog/2p-theory', 'kt-math', '@tuprolog/2p-unify'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-core'), require('@tuprolog/2p-theory'), require('kt-math'), require('@tuprolog/2p-unify'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-solve'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-solve'.");
    }if (typeof this['@tuprolog/2p-theory'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve'. Its dependency '@tuprolog/2p-theory' was not found. Please, check whether '@tuprolog/2p-theory' is loaded prior to '@tuprolog/2p-solve'.");
    }if (typeof this['kt-math'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve'. Its dependency 'kt-math' was not found. Please, check whether 'kt-math' is loaded prior to '@tuprolog/2p-solve'.");
    }if (typeof this['@tuprolog/2p-unify'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-solve'. Its dependency '@tuprolog/2p-unify' was not found. Please, check whether '@tuprolog/2p-unify' is loaded prior to '@tuprolog/2p-solve'.");
    }root['@tuprolog/2p-solve'] = factory(typeof this['@tuprolog/2p-solve'] === 'undefined' ? {} : this['@tuprolog/2p-solve'], kotlin, this['@tuprolog/2p-core'], this['@tuprolog/2p-theory'], this['kt-math'], this['@tuprolog/2p-unify']);
  }
}(this, function (_, Kotlin, $module$_2p_core, $module$_2p_theory, $module$kt_math, $module$_2p_unify) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var mapOf = Kotlin.kotlin.collections.mapOf_x2b85n$;
  var mapOf_0 = Kotlin.kotlin.collections.mapOf_qfcya0$;
  var throwCCE = Kotlin.throwCCE;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var ensureNotNull = Kotlin.ensureNotNull;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var Scope = $module$_2p_core.it.unibo.tuprolog.core.Scope;
  var Struct = $module$_2p_core.it.unibo.tuprolog.core.Struct;
  var Atom = $module$_2p_core.it.unibo.tuprolog.core.Atom;
  var Integer = $module$_2p_core.it.unibo.tuprolog.core.Integer;
  var Indicator = $module$_2p_core.it.unibo.tuprolog.core.Indicator;
  var count = Kotlin.kotlin.collections.count_7wnvza$;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var asSequence = Kotlin.kotlin.collections.asSequence_7wnvza$;
  var first = Kotlin.kotlin.collections.first_us0mfu$;
  var last = Kotlin.kotlin.collections.last_us0mfu$;
  var equals = Kotlin.equals;
  var IllegalArgumentException = Kotlin.kotlin.IllegalArgumentException;
  var ToTermConvertible = $module$_2p_core.it.unibo.tuprolog.core.ToTermConvertible;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var Substitution = $module$_2p_core.it.unibo.tuprolog.core.Substitution;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var ClauseDatabase = $module$_2p_theory.it.unibo.tuprolog.theory.ClauseDatabase;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var single = Kotlin.kotlin.collections.single_us0mfu$;
  var TuPrologException = $module$_2p_core.it.unibo.tuprolog.core.exception.TuPrologException;
  var Enum = Kotlin.kotlin.Enum;
  var IllegalStateException = Kotlin.kotlin.IllegalStateException;
  var throwISE = Kotlin.throwISE;
  var toString = Kotlin.toString;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var getValue = Kotlin.kotlin.collections.getValue_t9ocha$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var Var = $module$_2p_core.it.unibo.tuprolog.core.Var;
  var Numeric = $module$_2p_core.it.unibo.tuprolog.core.Numeric;
  var TermVisitor = $module$_2p_core.it.unibo.tuprolog.core.TermVisitor;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var toList_0 = Kotlin.kotlin.sequences.toList_veqyi0$;
  var getCallableRef = Kotlin.getCallableRef;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var plus = Kotlin.kotlin.sequences.plus_v0iwhp$;
  var filter = Kotlin.kotlin.sequences.filter_euau3h$;
  var hashCode = Kotlin.hashCode;
  var toMap_0 = Kotlin.kotlin.collections.toMap_ah2ab9$;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var OperatorSet = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet;
  var Map = Kotlin.kotlin.collections.Map;
  var asSequence_0 = Kotlin.kotlin.collections.asSequence_us0mfu$;
  var Pair_init = Kotlin.kotlin.Pair;
  var OperatorSet_init = $module$_2p_core.it.unibo.tuprolog.core.operators.OperatorSet_init_1gzv2l$;
  var Math_0 = Math;
  var first_0 = Kotlin.kotlin.collections.first_2p1efm$;
  var last_0 = Kotlin.kotlin.collections.last_2p1efm$;
  var Real = $module$_2p_core.it.unibo.tuprolog.core.Real;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var BigDecimal = $module$kt_math.org.gciatto.kt.math.BigDecimal;
  var RoundingMode = $module$kt_math.org.gciatto.kt.math.RoundingMode;
  var MathContext = $module$kt_math.org.gciatto.kt.math.MathContext;
  var BigInteger = $module$kt_math.org.gciatto.kt.math.BigInteger;
  var math = Kotlin.kotlin.math;
  var log = Kotlin.kotlin.math.log_lu1900$;
  var single_0 = Kotlin.kotlin.collections.single_2p1efm$;
  var Term = $module$_2p_core.it.unibo.tuprolog.core.Term;
  var Constant = $module$_2p_core.it.unibo.tuprolog.core.Constant;
  var NotImplementedError = Kotlin.kotlin.NotImplementedError;
  var Unit = Kotlin.kotlin.Unit;
  var Clause = $module$_2p_core.it.unibo.tuprolog.core.Clause;
  var Substitution$Unifier = $module$_2p_core.it.unibo.tuprolog.core.Substitution.Unifier;
  var Unificator = $module$_2p_unify.it.unibo.tuprolog.unify.Unificator;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var sequence = Kotlin.kotlin.sequences.sequence_o0x0bg$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var withIndex = Kotlin.kotlin.collections.withIndex_7wnvza$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var Rule = $module$_2p_core.it.unibo.tuprolog.core.Rule;
  var print = Kotlin.kotlin.io.print_s8jyv4$;
  Solution$Yes.prototype = Object.create(Solution.prototype);
  Solution$Yes.prototype.constructor = Solution$Yes;
  Solution$No.prototype = Object.create(Solution.prototype);
  Solution$No.prototype.constructor = Solution$No;
  Solution$Halt.prototype = Object.create(Solution.prototype);
  Solution$Halt.prototype.constructor = Solution$Halt;
  Solve$Request.prototype = Object.create(Solve.prototype);
  Solve$Request.prototype.constructor = Solve$Request;
  Solve$Response.prototype = Object.create(Solve.prototype);
  Solve$Response.prototype.constructor = Solve$Response;
  AbstractInputChannel.prototype = Object.create(AbstractChannel.prototype);
  AbstractInputChannel.prototype.constructor = AbstractInputChannel;
  AbstractOutputChannel.prototype = Object.create(AbstractChannel.prototype);
  AbstractOutputChannel.prototype.constructor = AbstractOutputChannel;
  InputChannelFromFunction.prototype = Object.create(AbstractInputChannel.prototype);
  InputChannelFromFunction.prototype.constructor = InputChannelFromFunction;
  OutputChannelFromFunction.prototype = Object.create(AbstractOutputChannel.prototype);
  OutputChannelFromFunction.prototype.constructor = OutputChannelFromFunction;
  TuPrologRuntimeException.prototype = Object.create(TuPrologException.prototype);
  TuPrologRuntimeException.prototype.constructor = TuPrologRuntimeException;
  HaltException.prototype = Object.create(TuPrologRuntimeException.prototype);
  HaltException.prototype.constructor = HaltException;
  PrologError.prototype = Object.create(TuPrologRuntimeException.prototype);
  PrologError.prototype.constructor = PrologError;
  PrologError$Companion$of$lambda$ObjectLiteral.prototype = Object.create(PrologError.prototype);
  PrologError$Companion$of$lambda$ObjectLiteral.prototype.constructor = PrologError$Companion$of$lambda$ObjectLiteral;
  PrologWarning.prototype = Object.create(TuPrologRuntimeException.prototype);
  PrologWarning.prototype.constructor = PrologWarning;
  TimeOutException.prototype = Object.create(TuPrologRuntimeException.prototype);
  TimeOutException.prototype.constructor = TimeOutException;
  EvaluationError$Type.prototype = Object.create(Enum.prototype);
  EvaluationError$Type.prototype.constructor = EvaluationError$Type;
  EvaluationError.prototype = Object.create(PrologError.prototype);
  EvaluationError.prototype.constructor = EvaluationError;
  InstantiationError.prototype = Object.create(PrologError.prototype);
  InstantiationError.prototype.constructor = InstantiationError;
  MessageError.prototype = Object.create(PrologError.prototype);
  MessageError.prototype.constructor = MessageError;
  SystemError.prototype = Object.create(PrologError.prototype);
  SystemError.prototype.constructor = SystemError;
  TypeError.prototype = Object.create(PrologError.prototype);
  TypeError.prototype.constructor = TypeError;
  ArithmeticEvaluator.prototype = Object.create(ExpressionEvaluator.prototype);
  ArithmeticEvaluator.prototype.constructor = ArithmeticEvaluator;
  Compute$Request.prototype = Object.create(Compute.prototype);
  Compute$Request.prototype.constructor = Compute$Request;
  Compute$Response.prototype = Object.create(Compute.prototype);
  Compute$Response.prototype.constructor = Compute$Response;
  FunctionWrapper.prototype = Object.create(AbstractWrapper.prototype);
  FunctionWrapper.prototype.constructor = FunctionWrapper;
  LibraryException.prototype = Object.create(TuPrologException.prototype);
  LibraryException.prototype.constructor = LibraryException;
  AlreadyLoadedLibraryException.prototype = Object.create(LibraryException.prototype);
  AlreadyLoadedLibraryException.prototype.constructor = AlreadyLoadedLibraryException;
  NoSuchALibraryException.prototype = Object.create(LibraryException.prototype);
  NoSuchALibraryException.prototype.constructor = NoSuchALibraryException;
  LibraryAliasedImpl.prototype = Object.create(LibraryImpl.prototype);
  LibraryAliasedImpl.prototype.constructor = LibraryAliasedImpl;
  MathFunction.prototype = Object.create(FunctionWrapper.prototype);
  MathFunction.prototype.constructor = MathFunction;
  UnaryMathFunction.prototype = Object.create(MathFunction.prototype);
  UnaryMathFunction.prototype.constructor = UnaryMathFunction;
  AbsoluteValue.prototype = Object.create(UnaryMathFunction.prototype);
  AbsoluteValue.prototype.constructor = AbsoluteValue;
  BinaryMathFunction.prototype = Object.create(MathFunction.prototype);
  BinaryMathFunction.prototype.constructor = BinaryMathFunction;
  Addition.prototype = Object.create(BinaryMathFunction.prototype);
  Addition.prototype.constructor = Addition;
  ArcTangent.prototype = Object.create(UnaryMathFunction.prototype);
  ArcTangent.prototype.constructor = ArcTangent;
  IntegersBinaryMathFunction.prototype = Object.create(BinaryMathFunction.prototype);
  IntegersBinaryMathFunction.prototype.constructor = IntegersBinaryMathFunction;
  BitwiseAnd.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  BitwiseAnd.prototype.constructor = BitwiseAnd;
  BitwiseComplement.prototype = Object.create(UnaryMathFunction.prototype);
  BitwiseComplement.prototype.constructor = BitwiseComplement;
  BitwiseLeftShift.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  BitwiseLeftShift.prototype.constructor = BitwiseLeftShift;
  BitwiseOr.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  BitwiseOr.prototype.constructor = BitwiseOr;
  BitwiseRightShift.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  BitwiseRightShift.prototype.constructor = BitwiseRightShift;
  Ceiling.prototype = Object.create(UnaryMathFunction.prototype);
  Ceiling.prototype.constructor = Ceiling;
  Cosine.prototype = Object.create(UnaryMathFunction.prototype);
  Cosine.prototype.constructor = Cosine;
  Exponential.prototype = Object.create(UnaryMathFunction.prototype);
  Exponential.prototype.constructor = Exponential;
  Exponentiation.prototype = Object.create(BinaryMathFunction.prototype);
  Exponentiation.prototype.constructor = Exponentiation;
  FloatFractionalPart.prototype = Object.create(UnaryMathFunction.prototype);
  FloatFractionalPart.prototype.constructor = FloatFractionalPart;
  FloatIntegerPart.prototype = Object.create(UnaryMathFunction.prototype);
  FloatIntegerPart.prototype.constructor = FloatIntegerPart;
  FloatingPointDivision.prototype = Object.create(BinaryMathFunction.prototype);
  FloatingPointDivision.prototype.constructor = FloatingPointDivision;
  Floor.prototype = Object.create(UnaryMathFunction.prototype);
  Floor.prototype.constructor = Floor;
  IntegerDivision.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  IntegerDivision.prototype.constructor = IntegerDivision;
  Modulo.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  Modulo.prototype.constructor = Modulo;
  Multiplication.prototype = Object.create(BinaryMathFunction.prototype);
  Multiplication.prototype.constructor = Multiplication;
  NaturalLogarithm.prototype = Object.create(UnaryMathFunction.prototype);
  NaturalLogarithm.prototype.constructor = NaturalLogarithm;
  NullaryMathFunction.prototype = Object.create(MathFunction.prototype);
  NullaryMathFunction.prototype.constructor = NullaryMathFunction;
  Remainder.prototype = Object.create(IntegersBinaryMathFunction.prototype);
  Remainder.prototype.constructor = Remainder;
  Round.prototype = Object.create(UnaryMathFunction.prototype);
  Round.prototype.constructor = Round;
  Sign.prototype = Object.create(UnaryMathFunction.prototype);
  Sign.prototype.constructor = Sign;
  SignReversal.prototype = Object.create(UnaryMathFunction.prototype);
  SignReversal.prototype.constructor = SignReversal;
  Sine.prototype = Object.create(UnaryMathFunction.prototype);
  Sine.prototype.constructor = Sine;
  SquareRoot.prototype = Object.create(UnaryMathFunction.prototype);
  SquareRoot.prototype.constructor = SquareRoot;
  Subtraction.prototype = Object.create(BinaryMathFunction.prototype);
  Subtraction.prototype.constructor = Subtraction;
  ToFloat.prototype = Object.create(UnaryMathFunction.prototype);
  ToFloat.prototype.constructor = ToFloat;
  Truncate.prototype = Object.create(UnaryMathFunction.prototype);
  Truncate.prototype.constructor = Truncate;
  PrimitiveWrapper.prototype = Object.create(AbstractWrapper.prototype);
  PrimitiveWrapper.prototype.constructor = PrimitiveWrapper;
  UnaryPredicate.prototype = Object.create(PrimitiveWrapper.prototype);
  UnaryPredicate.prototype.constructor = UnaryPredicate;
  SideEffect1.prototype = Object.create(UnaryPredicate.prototype);
  SideEffect1.prototype.constructor = SideEffect1;
  AbstractAssert.prototype = Object.create(SideEffect1.prototype);
  AbstractAssert.prototype.constructor = AbstractAssert;
  BinaryRelation.prototype = Object.create(PrimitiveWrapper.prototype);
  BinaryRelation.prototype.constructor = BinaryRelation;
  ArithmeticRelation.prototype = Object.create(BinaryRelation.prototype);
  ArithmeticRelation.prototype.constructor = ArithmeticRelation;
  ArithmeticEqual.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticEqual.prototype.constructor = ArithmeticEqual;
  ArithmeticGreaterThan.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticGreaterThan.prototype.constructor = ArithmeticGreaterThan;
  ArithmeticGreaterThanOrEqualTo.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticGreaterThanOrEqualTo.prototype.constructor = ArithmeticGreaterThanOrEqualTo;
  ArithmeticLowerThan.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticLowerThan.prototype.constructor = ArithmeticLowerThan;
  ArithmeticLowerThanOrEqualTo.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticLowerThanOrEqualTo.prototype.constructor = ArithmeticLowerThanOrEqualTo;
  ArithmeticNotEqual.prototype = Object.create(ArithmeticRelation.prototype);
  ArithmeticNotEqual.prototype.constructor = ArithmeticNotEqual;
  Assert.prototype = Object.create(AbstractAssert.prototype);
  Assert.prototype.constructor = Assert;
  AssertA.prototype = Object.create(AbstractAssert.prototype);
  AssertA.prototype.constructor = AssertA;
  AssertZ.prototype = Object.create(AbstractAssert.prototype);
  AssertZ.prototype.constructor = AssertZ;
  TypeTester.prototype = Object.create(UnaryPredicate.prototype);
  TypeTester.prototype.constructor = TypeTester;
  Atom_0.prototype = Object.create(TypeTester.prototype);
  Atom_0.prototype.constructor = Atom_0;
  Atomic.prototype = Object.create(TypeTester.prototype);
  Atomic.prototype.constructor = Atomic;
  Callable.prototype = Object.create(TypeTester.prototype);
  Callable.prototype.constructor = Callable;
  Compound.prototype = Object.create(TypeTester.prototype);
  Compound.prototype.constructor = Compound;
  TypeEnsurer.prototype = Object.create(UnaryPredicate.prototype);
  TypeEnsurer.prototype.constructor = TypeEnsurer;
  EnsureExecutable.prototype = Object.create(TypeEnsurer.prototype);
  EnsureExecutable.prototype.constructor = EnsureExecutable;
  Float.prototype = Object.create(TypeTester.prototype);
  Float.prototype.constructor = Float;
  Ground.prototype = Object.create(TypeTester.prototype);
  Ground.prototype.constructor = Ground;
  Halt.prototype = Object.create(PrimitiveWrapper.prototype);
  Halt.prototype.constructor = Halt;
  Integer_0.prototype = Object.create(TypeTester.prototype);
  Integer_0.prototype.constructor = Integer_0;
  TermRelation.prototype = Object.create(BinaryRelation.prototype);
  TermRelation.prototype.constructor = TermRelation;
  TermRelation$WithSideEffects.prototype = Object.create(TermRelation.prototype);
  TermRelation$WithSideEffects.prototype.constructor = TermRelation$WithSideEffects;
  Is.prototype = Object.create(TermRelation$WithSideEffects.prototype);
  Is.prototype.constructor = Is;
  Natural.prototype = Object.create(UnaryPredicate.prototype);
  Natural.prototype.constructor = Natural;
  PredicateWithoutArguments.prototype = Object.create(PrimitiveWrapper.prototype);
  PredicateWithoutArguments.prototype.constructor = PredicateWithoutArguments;
  SideEffect0.prototype = Object.create(PredicateWithoutArguments.prototype);
  SideEffect0.prototype.constructor = SideEffect0;
  NewLine.prototype = Object.create(SideEffect0.prototype);
  NewLine.prototype.constructor = NewLine;
  NonVar.prototype = Object.create(TypeTester.prototype);
  NonVar.prototype.constructor = NonVar;
  TermRelation$WithoutSideEffects.prototype = Object.create(TermRelation.prototype);
  TermRelation$WithoutSideEffects.prototype.constructor = TermRelation$WithoutSideEffects;
  NotUnifiableWith.prototype = Object.create(TermRelation$WithoutSideEffects.prototype);
  NotUnifiableWith.prototype.constructor = NotUnifiableWith;
  Number_0.prototype = Object.create(TypeTester.prototype);
  Number_0.prototype.constructor = Number_0;
  SideEffect0$Companion$of$ObjectLiteral.prototype = Object.create(SideEffect0.prototype);
  SideEffect0$Companion$of$ObjectLiteral.prototype.constructor = SideEffect0$Companion$of$ObjectLiteral;
  SideEffect1$Companion$of$ObjectLiteral.prototype = Object.create(SideEffect1.prototype);
  SideEffect1$Companion$of$ObjectLiteral.prototype.constructor = SideEffect1$Companion$of$ObjectLiteral;
  TermIdentical.prototype = Object.create(TermRelation$WithoutSideEffects.prototype);
  TermIdentical.prototype.constructor = TermIdentical;
  TermNotIdentical.prototype = Object.create(TermRelation$WithoutSideEffects.prototype);
  TermNotIdentical.prototype.constructor = TermNotIdentical;
  TypeTester$Companion$of$ObjectLiteral.prototype = Object.create(TypeTester.prototype);
  TypeTester$Companion$of$ObjectLiteral.prototype.constructor = TypeTester$Companion$of$ObjectLiteral;
  UnifiesWith.prototype = Object.create(TermRelation$WithSideEffects.prototype);
  UnifiesWith.prototype.constructor = UnifiesWith;
  Var_0.prototype = Object.create(TypeTester.prototype);
  Var_0.prototype.constructor = Var_0;
  Write.prototype = Object.create(SideEffect1.prototype);
  Write.prototype.constructor = Write;
  RuleWrapper.prototype = Object.create(AbstractWrapper.prototype);
  RuleWrapper.prototype.constructor = RuleWrapper;
  Arrow.prototype = Object.create(RuleWrapper.prototype);
  Arrow.prototype.constructor = Arrow;
  Member.prototype = Object.create(RuleWrapper.prototype);
  Member.prototype.constructor = Member;
  Member$Base.prototype = Object.create(Member.prototype);
  Member$Base.prototype.constructor = Member$Base;
  Member$Recursive.prototype = Object.create(Member.prototype);
  Member$Recursive.prototype.constructor = Member$Recursive;
  Not.prototype = Object.create(RuleWrapper.prototype);
  Not.prototype.constructor = Not;
  Semicolon.prototype = Object.create(RuleWrapper.prototype);
  Semicolon.prototype.constructor = Semicolon;
  Semicolon$If.prototype = Object.create(Semicolon.prototype);
  Semicolon$If.prototype.constructor = Semicolon$If;
  Semicolon$If$Then.prototype = Object.create(Semicolon$If.prototype);
  Semicolon$If$Then.prototype.constructor = Semicolon$If$Then;
  Semicolon$If$Else.prototype = Object.create(Semicolon$If.prototype);
  Semicolon$If$Else.prototype.constructor = Semicolon$If$Else;
  Semicolon$Or.prototype = Object.create(Semicolon.prototype);
  Semicolon$Or.prototype.constructor = Semicolon$Or;
  Semicolon$Or$Left.prototype = Object.create(Semicolon$Or.prototype);
  Semicolon$Or$Left.prototype.constructor = Semicolon$Or$Left;
  Semicolon$Or$Right.prototype = Object.create(Semicolon$Or.prototype);
  Semicolon$Or$Right.prototype.constructor = Semicolon$Or$Right;
  PrimitiveWrapper$Companion$FromFunction.prototype = Object.create(PrimitiveWrapper.prototype);
  PrimitiveWrapper$Companion$FromFunction.prototype.constructor = PrimitiveWrapper$Companion$FromFunction;
  function AbstractWrapper(signature) {
    this.signature = signature;
  }
  Object.defineProperty(AbstractWrapper.prototype, 'functor', {
    get: defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.AbstractWrapper.get_functor', function () {
      return this.signature.name;
    })
  });
  Object.defineProperty(AbstractWrapper.prototype, 'descriptionPair', {
    get: defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.AbstractWrapper.get_descriptionPair', wrapFunction(function () {
      var to = Kotlin.kotlin.to_ujzrz7$;
      return function () {
        return to(this.signature, this.wrappedImplementation);
      };
    }))
  });
  AbstractWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractWrapper',
    interfaces: []
  };
  function AbstractWrapper_init(name, arity, vararg, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(AbstractWrapper.prototype);
    AbstractWrapper.call($this, new Signature(name, arity, vararg));
    return $this;
  }
  function ExecutionContext() {
  }
  ExecutionContext.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ExecutionContext',
    interfaces: [ExecutionContextAware]
  };
  function ExecutionContextAware() {
    ExecutionContextAware$Companion_getInstance();
  }
  function ExecutionContextAware$Companion() {
    ExecutionContextAware$Companion_instance = this;
    this.STDIN = '$stdin';
    this.STDOUT = '$stdout';
    this.STDERR = '$stderr';
    this.WARNINGS = '$warnings';
  }
  ExecutionContextAware$Companion.prototype.defaultInputChannels = function () {
    return mapOf(to(this.STDIN, InputChannel$Companion_getInstance().stdIn()));
  };
  ExecutionContextAware$Companion.prototype.defaultOutputChannels = function () {
    return mapOf_0([to(this.STDOUT, OutputChannel$Companion_getInstance().stdOut()), to(this.STDERR, OutputChannel$Companion_getInstance().stdErr()), to(this.WARNINGS, OutputChannel$Companion_getInstance().stdErr())]);
  };
  ExecutionContextAware$Companion.prototype.castOrNull_0 = function (T_0, isT, $receiver) {
    var tmp$;
    return $receiver !== null ? isT(tmp$ = $receiver) ? tmp$ : throwCCE() : null;
  };
  ExecutionContextAware$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ExecutionContextAware$Companion_instance = null;
  function ExecutionContextAware$Companion_getInstance() {
    if (ExecutionContextAware$Companion_instance === null) {
      new ExecutionContextAware$Companion();
    }return ExecutionContextAware$Companion_instance;
  }
  Object.defineProperty(ExecutionContextAware.prototype, 'standardInput', {
    get: function () {
      var $receiver = this.inputChannels.get_11rb$(ExecutionContextAware$Companion_getInstance().STDIN);
      var tmp$;
      return $receiver !== null ? (tmp$ = $receiver) == null || Kotlin.isType(tmp$, InputChannel) ? tmp$ : throwCCE() : null;
    }
  });
  Object.defineProperty(ExecutionContextAware.prototype, 'standardOutput', {
    get: function () {
      var $receiver = this.outputChannels.get_11rb$(ExecutionContextAware$Companion_getInstance().STDOUT);
      var tmp$;
      return $receiver !== null ? (tmp$ = $receiver) == null || Kotlin.isType(tmp$, OutputChannel) ? tmp$ : throwCCE() : null;
    }
  });
  Object.defineProperty(ExecutionContextAware.prototype, 'standardError', {
    get: function () {
      var $receiver = this.outputChannels.get_11rb$(ExecutionContextAware$Companion_getInstance().STDERR);
      var tmp$;
      return $receiver !== null ? (tmp$ = $receiver) == null || Kotlin.isType(tmp$, OutputChannel) ? tmp$ : throwCCE() : null;
    }
  });
  Object.defineProperty(ExecutionContextAware.prototype, 'warnings', {
    get: function () {
      var $receiver = this.outputChannels.get_11rb$(ExecutionContextAware$Companion_getInstance().WARNINGS);
      var tmp$;
      return $receiver !== null ? (tmp$ = $receiver) == null || Kotlin.isType(tmp$, OutputChannel) ? tmp$ : throwCCE() : null;
    }
  });
  ExecutionContextAware.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ExecutionContextAware',
    interfaces: []
  };
  function extractSignature($receiver) {
    return ensureNotNull(Signature$Companion_getInstance().fromIndicator($receiver.indicator));
  }
  function solve($receiver, maxDuration, scopedContext) {
    if (maxDuration === void 0)
      maxDuration = Long$Companion$MAX_VALUE;
    return $receiver.solve(scopedContext(Scope.Companion.empty()), maxDuration);
  }
  function MutableSolver() {
    MutableSolver$Companion_getInstance();
  }
  function MutableSolver$Companion() {
    MutableSolver$Companion_instance = this;
  }
  MutableSolver$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MutableSolver$Companion_instance = null;
  function MutableSolver$Companion_getInstance() {
    if (MutableSolver$Companion_instance === null) {
      new MutableSolver$Companion();
    }return MutableSolver$Companion_instance;
  }
  MutableSolver.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MutableSolver',
    interfaces: [Solver]
  };
  function SideEffectManager() {
  }
  SideEffectManager.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SideEffectManager',
    interfaces: []
  };
  function Signature(name, arity, vararg) {
    Signature$Companion_getInstance();
    if (vararg === void 0)
      vararg = false;
    this.name = name;
    this.arity = arity;
    this.vararg = vararg;
    if (!(this.arity >= 0)) {
      var message = 'Signature arity should be greater than or equals to 0: ' + this.arity;
      throw IllegalArgumentException_init(message.toString());
    }}
  Signature.prototype.toTerm = function () {
    if (this.vararg)
      return Struct.Companion.of(Signature$Companion_getInstance().FUNCTOR, [Atom.Companion.of(this.name), Struct.Companion.of(Signature$Companion_getInstance().varargStructFunctor_0, [Integer.Companion.ofInt(this.arity), Signature$Companion_getInstance().varargAtom_0])]);
    else
      return Struct.Companion.of(Signature$Companion_getInstance().FUNCTOR, [Atom.Companion.of(this.name), Integer.Companion.ofInt(this.arity)]);
  };
  Signature.prototype.toIndicator = function () {
    if (this.vararg)
      return null;
    else
      return Indicator.Companion.ofString(this.name, this.arity);
  };
  Signature.prototype.withArgs = function (arguments_0) {
    if (this.vararg) {
      if (!(count(arguments_0) >= this.arity)) {
        var message = 'Trying to create Struct of signature `' + this + '` with not enough arguments ' + toList(arguments_0);
        throw IllegalArgumentException_init(message.toString());
      }} else {
      if (!(count(arguments_0) === this.arity)) {
        var message_0 = 'Trying to create Struct of signature `' + this + '` with wrong number of arguments ' + toList(arguments_0);
        throw IllegalArgumentException_init(message_0.toString());
      }}
    return Struct.Companion.ofSequence(this.name, asSequence(arguments_0));
  };
  function Signature$Companion() {
    Signature$Companion_instance = this;
    this.varargAtom_0 = Atom.Companion.of('vararg');
    this.varargStructFunctor_0 = '+';
    this.FUNCTOR = Indicator.Companion.FUNCTOR;
  }
  Signature$Companion.prototype.fromSignatureStruct = function (term) {
    try {
      var block$result;
      if (equals(term.functor, this.FUNCTOR) && term.arity === 2 && first(term.args).isAtom)
        if (last(term.args).isInt) {
          block$result = new Signature(first(term.args).as_6ddzm9$().value, last(term.args).as_6ddzm9$().intValue.toInt());
        } else {
          var receiver = last(term.args);
          var tmp$;
          if (Kotlin.isType(receiver, Struct) && equals(receiver.functor, this.varargStructFunctor_0) && receiver.arity === 2 && first(receiver.args).isInt && ((tmp$ = last(receiver.args)) != null ? tmp$.equals(this.varargAtom_0) : null)) {
            block$result = new Signature(first(term.args).as_6ddzm9$().value, last(term.args).as_6ddzm9$().get(0).as_6ddzm9$().intValue.toInt(), true);
          } else {
            block$result = null;
          }
        }
       else {
        block$result = null;
      }
      return block$result;
    } catch (ex) {
      if (Kotlin.isType(ex, IllegalArgumentException)) {
        return null;
      } else
        throw ex;
    }
  };
  Signature$Companion.prototype.fromSignatureTerm = function (term) {
    if (Kotlin.isType(term, Struct))
      return this.fromSignatureStruct(term);
    else
      return null;
  };
  Signature$Companion.prototype.fromIndicator = function (indicator) {
    if (indicator.isWellFormed)
      return new Signature(ensureNotNull(indicator.indicatedName), ensureNotNull(indicator.indicatedArity));
    else
      return null;
  };
  Signature$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Signature$Companion_instance = null;
  function Signature$Companion_getInstance() {
    if (Signature$Companion_instance === null) {
      new Signature$Companion();
    }return Signature$Companion_instance;
  }
  Signature.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Signature',
    interfaces: [ToTermConvertible]
  };
  Signature.prototype.component1 = function () {
    return this.name;
  };
  Signature.prototype.component2 = function () {
    return this.arity;
  };
  Signature.prototype.component3 = function () {
    return this.vararg;
  };
  Signature.prototype.copy_37lk95$ = function (name, arity, vararg) {
    return new Signature(name === void 0 ? this.name : name, arity === void 0 ? this.arity : arity, vararg === void 0 ? this.vararg : vararg);
  };
  Signature.prototype.toString = function () {
    return 'Signature(name=' + Kotlin.toString(this.name) + (', arity=' + Kotlin.toString(this.arity)) + (', vararg=' + Kotlin.toString(this.vararg)) + ')';
  };
  Signature.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.arity) | 0;
    result = result * 31 + Kotlin.hashCode(this.vararg) | 0;
    return result;
  };
  Signature.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.arity, other.arity) && Kotlin.equals(this.vararg, other.vararg)))));
  };
  function Solution() {
    Solution$Companion_getInstance();
    this.substitution_g0w3o9$_0 = Substitution.Companion.failed();
    this.solvedQuery_k3lkt7$_0 = null;
  }
  Object.defineProperty(Solution.prototype, 'substitution', {
    get: function () {
      return this.substitution_g0w3o9$_0;
    }
  });
  Object.defineProperty(Solution.prototype, 'solvedQuery', {
    get: function () {
      return this.solvedQuery_k3lkt7$_0;
    }
  });
  function Solution$Yes(query, substitution) {
    if (substitution === void 0)
      substitution = Substitution.Companion.empty();
    Solution.call(this);
    this.query_tejydf$_0 = query;
    this.substitution_aotg0e$_0 = substitution;
    this.solvedQuery_enlnj6$_0 = lazy(Solution$Yes$solvedQuery$lambda(this));
  }
  Object.defineProperty(Solution$Yes.prototype, 'query', {
    get: function () {
      return this.query_tejydf$_0;
    }
  });
  Object.defineProperty(Solution$Yes.prototype, 'substitution', {
    get: function () {
      return this.substitution_aotg0e$_0;
    }
  });
  Object.defineProperty(Solution$Yes.prototype, 'solvedQuery', {
    get: function () {
      return this.solvedQuery_enlnj6$_0.value;
    }
  });
  function Solution$Yes$solvedQuery$lambda(this$Yes) {
    return function () {
      var tmp$;
      return Kotlin.isType(tmp$ = this$Yes.substitution.applyTo(this$Yes.query), Struct) ? tmp$ : throwCCE();
    };
  }
  Solution$Yes.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Yes',
    interfaces: [Solution]
  };
  function Solution$Solution$Yes_init(signature, arguments_0, substitution, $this) {
    if (substitution === void 0)
      substitution = Substitution.Companion.empty();
    $this = $this || Object.create(Solution$Yes.prototype);
    Solution$Yes.call($this, signature.withArgs(arguments_0), substitution);
    Solution$Companion_getInstance().noVarargSignatureCheck_0(signature);
    return $this;
  }
  Solution$Yes.prototype.component1 = function () {
    return this.query;
  };
  Solution$Yes.prototype.component2 = function () {
    return this.substitution;
  };
  Solution$Yes.prototype.copy_4dyrv6$ = function (query, substitution) {
    return new Solution$Yes(query === void 0 ? this.query : query, substitution === void 0 ? this.substitution : substitution);
  };
  Solution$Yes.prototype.toString = function () {
    return 'Yes(query=' + Kotlin.toString(this.query) + (', substitution=' + Kotlin.toString(this.substitution)) + ')';
  };
  Solution$Yes.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    result = result * 31 + Kotlin.hashCode(this.substitution) | 0;
    return result;
  };
  Solution$Yes.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.query, other.query) && Kotlin.equals(this.substitution, other.substitution)))));
  };
  function Solution$No(query) {
    Solution.call(this);
    this.query_7g261x$_0 = query;
  }
  Object.defineProperty(Solution$No.prototype, 'query', {
    get: function () {
      return this.query_7g261x$_0;
    }
  });
  Solution$No.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'No',
    interfaces: [Solution]
  };
  function Solution$Solution$No_init(signature, arguments_0, $this) {
    $this = $this || Object.create(Solution$No.prototype);
    Solution$No.call($this, signature.withArgs(arguments_0));
    Solution$Companion_getInstance().noVarargSignatureCheck_0(signature);
    return $this;
  }
  Solution$No.prototype.component1 = function () {
    return this.query;
  };
  Solution$No.prototype.copy_caf4da$ = function (query) {
    return new Solution$No(query === void 0 ? this.query : query);
  };
  Solution$No.prototype.toString = function () {
    return 'No(query=' + Kotlin.toString(this.query) + ')';
  };
  Solution$No.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    return result;
  };
  Solution$No.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.query, other.query))));
  };
  function Solution$Halt(query, exception) {
    Solution.call(this);
    this.query_3wnwkl$_0 = query;
    this.exception = exception;
  }
  Object.defineProperty(Solution$Halt.prototype, 'query', {
    get: function () {
      return this.query_3wnwkl$_0;
    }
  });
  Solution$Halt.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Halt',
    interfaces: [Solution]
  };
  function Solution$Solution$Halt_init(signature, arguments_0, exception, $this) {
    $this = $this || Object.create(Solution$Halt.prototype);
    Solution$Halt.call($this, signature.withArgs(arguments_0), exception);
    Solution$Companion_getInstance().noVarargSignatureCheck_0(signature);
    return $this;
  }
  Solution$Halt.prototype.component1 = function () {
    return this.query;
  };
  Solution$Halt.prototype.component2 = function () {
    return this.exception;
  };
  Solution$Halt.prototype.copy_xrxb2h$ = function (query, exception) {
    return new Solution$Halt(query === void 0 ? this.query : query, exception === void 0 ? this.exception : exception);
  };
  Solution$Halt.prototype.toString = function () {
    return 'Halt(query=' + Kotlin.toString(this.query) + (', exception=' + Kotlin.toString(this.exception)) + ')';
  };
  Solution$Halt.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    result = result * 31 + Kotlin.hashCode(this.exception) | 0;
    return result;
  };
  Solution$Halt.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.query, other.query) && Kotlin.equals(this.exception, other.exception)))));
  };
  function Solution$Companion() {
    Solution$Companion_instance = this;
  }
  Solution$Companion.prototype.noVarargSignatureCheck_0 = function (signature) {
    if (!!signature.vararg) {
      var message = 'The signature should be a well-formed indicator, not vararg `' + signature + '`';
      throw IllegalArgumentException_init(message.toString());
    }};
  Solution$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Solution$Companion_instance = null;
  function Solution$Companion_getInstance() {
    if (Solution$Companion_instance === null) {
      new Solution$Companion();
    }return Solution$Companion_instance;
  }
  Solution.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Solution',
    interfaces: []
  };
  function Solve() {
  }
  function Solve$Request(signature, arguments_0, context, requestIssuingInstant, executionMaxDuration) {
    if (requestIssuingInstant === void 0)
      requestIssuingInstant = currentTimeInstant();
    if (executionMaxDuration === void 0)
      executionMaxDuration = Long$Companion$MAX_VALUE;
    Solve.call(this);
    this.signature = signature;
    this.arguments = arguments_0;
    this.context = context;
    this.requestIssuingInstant = requestIssuingInstant;
    this.executionMaxDuration = executionMaxDuration;
    if (this.signature.vararg) {
      if (!(this.arguments.size >= this.signature.arity)) {
        var message = 'Trying to create Solve.Request of signature `' + this.signature + '` with not enough arguments ' + toList(this.arguments);
        throw IllegalArgumentException_init(message.toString());
      }} else {
      if (!(this.arguments.size === this.signature.arity)) {
        var message_0 = 'Trying to create Solve.Request of signature `' + this.signature + '` with wrong number of arguments ' + toList(this.arguments);
        throw IllegalArgumentException_init(message_0.toString());
      }}
    if (!(this.requestIssuingInstant.toNumber() >= 0)) {
      var message_1 = "The request issuing instant can't be negative: " + this.requestIssuingInstant.toString();
      throw IllegalArgumentException_init(message_1.toString());
    }if (!(this.executionMaxDuration.toNumber() >= 0)) {
      var message_2 = "The execution max duration can't be negative: " + this.executionMaxDuration.toString();
      throw IllegalArgumentException_init(message_2.toString());
    }this.query_tt9qmp$_0 = lazy(Solve$Request$query$lambda(this));
  }
  Object.defineProperty(Solve$Request.prototype, 'query', {
    get: function () {
      return this.query_tt9qmp$_0.value;
    }
  });
  Solve$Request.prototype.replyWith = function (solution, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    if (Kotlin.isType(solution, Solution$Yes))
      return this.replySuccess(solution.substitution, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
    else if (Kotlin.isType(solution, Solution$No))
      return this.replyFail(libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
    else if (Kotlin.isType(solution, Solution$Halt))
      return this.replyException(solution.exception, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
    else
      return Kotlin.noWhenBranchMatched();
  };
  Solve$Request.prototype.replyWithCondition = function (condition, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    if (condition === true)
      return this.replySuccess(void 0, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
    else if (condition === false)
      return this.replyFail(libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
    else
      return Kotlin.noWhenBranchMatched();
  };
  Solve$Request.prototype.replySuccess = function (substitution, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (substitution === void 0)
      substitution = Substitution.Companion.empty();
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    return new Solve$Response(new Solution$Yes(this.query, substitution), libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
  };
  Solve$Request.prototype.replyFail = function (libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    return new Solve$Response(new Solution$No(this.query), libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
  };
  Solve$Request.prototype.replyException = function (exception, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    return new Solve$Response(new Solution$Halt(this.query, exception), libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels);
  };
  function Solve$Request$query$lambda(this$Request) {
    return function () {
      return this$Request.signature.withArgs(this$Request.arguments);
    };
  }
  Solve$Request.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Request',
    interfaces: [Solve]
  };
  Solve$Request.prototype.component1 = function () {
    return this.signature;
  };
  Solve$Request.prototype.component2 = function () {
    return this.arguments;
  };
  Solve$Request.prototype.component3 = function () {
    return this.context;
  };
  Solve$Request.prototype.component4 = function () {
    return this.requestIssuingInstant;
  };
  Solve$Request.prototype.component5 = function () {
    return this.executionMaxDuration;
  };
  Solve$Request.prototype.copy_9pk6s9$ = function (signature, arguments_0, context, requestIssuingInstant, executionMaxDuration) {
    return new Solve$Request(signature === void 0 ? this.signature : signature, arguments_0 === void 0 ? this.arguments : arguments_0, context === void 0 ? this.context : context, requestIssuingInstant === void 0 ? this.requestIssuingInstant : requestIssuingInstant, executionMaxDuration === void 0 ? this.executionMaxDuration : executionMaxDuration);
  };
  Solve$Request.prototype.toString = function () {
    return 'Request(signature=' + Kotlin.toString(this.signature) + (', arguments=' + Kotlin.toString(this.arguments)) + (', context=' + Kotlin.toString(this.context)) + (', requestIssuingInstant=' + Kotlin.toString(this.requestIssuingInstant)) + (', executionMaxDuration=' + Kotlin.toString(this.executionMaxDuration)) + ')';
  };
  Solve$Request.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.signature) | 0;
    result = result * 31 + Kotlin.hashCode(this.arguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    result = result * 31 + Kotlin.hashCode(this.requestIssuingInstant) | 0;
    result = result * 31 + Kotlin.hashCode(this.executionMaxDuration) | 0;
    return result;
  };
  Solve$Request.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.signature, other.signature) && Kotlin.equals(this.arguments, other.arguments) && Kotlin.equals(this.context, other.context) && Kotlin.equals(this.requestIssuingInstant, other.requestIssuingInstant) && Kotlin.equals(this.executionMaxDuration, other.executionMaxDuration)))));
  };
  function Solve$Response(solution, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    if (libraries === void 0)
      libraries = null;
    if (flags === void 0)
      flags = null;
    if (staticKb === void 0)
      staticKb = null;
    if (dynamicKb === void 0)
      dynamicKb = null;
    if (sideEffectManager === void 0)
      sideEffectManager = null;
    if (inputChannels === void 0)
      inputChannels = null;
    if (outputChannels === void 0)
      outputChannels = null;
    Solve.call(this);
    this.solution = solution;
    this.libraries = libraries;
    this.flags = flags;
    this.staticKb = staticKb;
    this.dynamicKb = dynamicKb;
    this.sideEffectManager = sideEffectManager;
    this.inputChannels = inputChannels;
    this.outputChannels = outputChannels;
  }
  Solve$Response.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Response',
    interfaces: [Solve]
  };
  Solve$Response.prototype.component1 = function () {
    return this.solution;
  };
  Solve$Response.prototype.component2 = function () {
    return this.libraries;
  };
  Solve$Response.prototype.component3 = function () {
    return this.flags;
  };
  Solve$Response.prototype.component4 = function () {
    return this.staticKb;
  };
  Solve$Response.prototype.component5 = function () {
    return this.dynamicKb;
  };
  Solve$Response.prototype.component6 = function () {
    return this.sideEffectManager;
  };
  Solve$Response.prototype.component7 = function () {
    return this.inputChannels;
  };
  Solve$Response.prototype.component8 = function () {
    return this.outputChannels;
  };
  Solve$Response.prototype.copy_pju7nj$ = function (solution, libraries, flags, staticKb, dynamicKb, sideEffectManager, inputChannels, outputChannels) {
    return new Solve$Response(solution === void 0 ? this.solution : solution, libraries === void 0 ? this.libraries : libraries, flags === void 0 ? this.flags : flags, staticKb === void 0 ? this.staticKb : staticKb, dynamicKb === void 0 ? this.dynamicKb : dynamicKb, sideEffectManager === void 0 ? this.sideEffectManager : sideEffectManager, inputChannels === void 0 ? this.inputChannels : inputChannels, outputChannels === void 0 ? this.outputChannels : outputChannels);
  };
  Solve$Response.prototype.toString = function () {
    return 'Response(solution=' + Kotlin.toString(this.solution) + (', libraries=' + Kotlin.toString(this.libraries)) + (', flags=' + Kotlin.toString(this.flags)) + (', staticKb=' + Kotlin.toString(this.staticKb)) + (', dynamicKb=' + Kotlin.toString(this.dynamicKb)) + (', sideEffectManager=' + Kotlin.toString(this.sideEffectManager)) + (', inputChannels=' + Kotlin.toString(this.inputChannels)) + (', outputChannels=' + Kotlin.toString(this.outputChannels)) + ')';
  };
  Solve$Response.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.solution) | 0;
    result = result * 31 + Kotlin.hashCode(this.libraries) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.staticKb) | 0;
    result = result * 31 + Kotlin.hashCode(this.dynamicKb) | 0;
    result = result * 31 + Kotlin.hashCode(this.sideEffectManager) | 0;
    result = result * 31 + Kotlin.hashCode(this.inputChannels) | 0;
    result = result * 31 + Kotlin.hashCode(this.outputChannels) | 0;
    return result;
  };
  Solve$Response.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.solution, other.solution) && Kotlin.equals(this.libraries, other.libraries) && Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.staticKb, other.staticKb) && Kotlin.equals(this.dynamicKb, other.dynamicKb) && Kotlin.equals(this.sideEffectManager, other.sideEffectManager) && Kotlin.equals(this.inputChannels, other.inputChannels) && Kotlin.equals(this.outputChannels, other.outputChannels)))));
  };
  Solve.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Solve',
    interfaces: []
  };
  function Solver() {
    Solver$Companion_getInstance();
  }
  Solver.prototype.solve = function (goal, maxDuration, callback$default) {
    if (maxDuration === void 0)
      maxDuration = Long$Companion$MAX_VALUE;
    return callback$default ? callback$default(goal, maxDuration) : this.solve$default(goal, maxDuration);
  };
  function Solver$Companion() {
    Solver$Companion_instance = this;
  }
  Solver$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Solver$Companion_instance = null;
  function Solver$Companion_getInstance() {
    if (Solver$Companion_instance === null) {
      new Solver$Companion();
    }return Solver$Companion_instance;
  }
  Solver.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Solver',
    interfaces: [ExecutionContextAware]
  };
  function SolverFactory() {
  }
  Object.defineProperty(SolverFactory.prototype, 'defaultLibraries', {
    get: function () {
      return Libraries_init([]);
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultFlags', {
    get: function () {
      return emptyMap();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultStaticKb', {
    get: function () {
      return ClauseDatabase.Companion.empty();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultDynamicKb', {
    get: function () {
      return ClauseDatabase.Companion.empty();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultInputChannel', {
    get: function () {
      return InputChannel$Companion_getInstance().stdIn();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultOutputChannel', {
    get: function () {
      return OutputChannel$Companion_getInstance().stdOut();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultErrorChannel', {
    get: function () {
      return OutputChannel$Companion_getInstance().stdErr();
    }
  });
  Object.defineProperty(SolverFactory.prototype, 'defaultWarningsChannel', {
    get: function () {
      return OutputChannel$Companion_getInstance().stdErr();
    }
  });
  SolverFactory.prototype.solverOf = function (libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings, callback$default) {
    if (libraries === void 0)
      libraries = this.defaultLibraries;
    if (flags === void 0)
      flags = this.defaultFlags;
    if (staticKb === void 0)
      staticKb = this.defaultStaticKb;
    if (dynamicKb === void 0)
      dynamicKb = this.defaultDynamicKb;
    if (stdIn === void 0)
      stdIn = this.defaultInputChannel;
    if (stdOut === void 0)
      stdOut = this.defaultOutputChannel;
    if (stdErr === void 0)
      stdErr = this.defaultErrorChannel;
    if (warnings === void 0)
      warnings = this.defaultWarningsChannel;
    return callback$default ? callback$default(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) : this.solverOf$default(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.prototype.solverWithDefaultBuiltins$default = function (otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    return this.solverOf(otherLibraries.plus(this.defaultBuiltins), flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.prototype.solverWithDefaultBuiltins = function (otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings, callback$default) {
    if (otherLibraries === void 0)
      otherLibraries = this.defaultLibraries;
    if (flags === void 0)
      flags = this.defaultFlags;
    if (staticKb === void 0)
      staticKb = this.defaultStaticKb;
    if (dynamicKb === void 0)
      dynamicKb = this.defaultDynamicKb;
    if (stdIn === void 0)
      stdIn = this.defaultInputChannel;
    if (stdOut === void 0)
      stdOut = this.defaultOutputChannel;
    if (stdErr === void 0)
      stdErr = this.defaultErrorChannel;
    if (warnings === void 0)
      warnings = this.defaultWarningsChannel;
    return callback$default ? callback$default(otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) : this.solverWithDefaultBuiltins$default(otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.prototype.mutableSolverOf = function (libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings, callback$default) {
    if (libraries === void 0)
      libraries = this.defaultLibraries;
    if (flags === void 0)
      flags = this.defaultFlags;
    if (staticKb === void 0)
      staticKb = this.defaultStaticKb;
    if (dynamicKb === void 0)
      dynamicKb = this.defaultDynamicKb;
    if (stdIn === void 0)
      stdIn = this.defaultInputChannel;
    if (stdOut === void 0)
      stdOut = this.defaultOutputChannel;
    if (stdErr === void 0)
      stdErr = this.defaultErrorChannel;
    if (warnings === void 0)
      warnings = this.defaultWarningsChannel;
    return callback$default ? callback$default(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) : this.mutableSolverOf$default(libraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.prototype.mutableSolverWithDefaultBuiltins$default = function (otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) {
    return this.mutableSolverOf(otherLibraries.plus(this.defaultBuiltins), flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.prototype.mutableSolverWithDefaultBuiltins = function (otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings, callback$default) {
    if (otherLibraries === void 0)
      otherLibraries = this.defaultLibraries;
    if (flags === void 0)
      flags = this.defaultFlags;
    if (staticKb === void 0)
      staticKb = this.defaultStaticKb;
    if (dynamicKb === void 0)
      dynamicKb = this.defaultDynamicKb;
    if (stdIn === void 0)
      stdIn = this.defaultInputChannel;
    if (stdOut === void 0)
      stdOut = this.defaultOutputChannel;
    if (stdErr === void 0)
      stdErr = this.defaultErrorChannel;
    if (warnings === void 0)
      warnings = this.defaultWarningsChannel;
    return callback$default ? callback$default(otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings) : this.mutableSolverWithDefaultBuiltins$default(otherLibraries, flags, staticKb, dynamicKb, stdIn, stdOut, stdErr, warnings);
  };
  SolverFactory.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SolverFactory',
    interfaces: []
  };
  var forEachWithLookahead = defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.forEachWithLookahead_vtu2u2$', function ($receiver, action) {
    while ($receiver.hasNext()) {
      action($receiver.next(), $receiver.hasNext());
    }
  });
  var forEachWithLookahead_0 = defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.forEachWithLookahead_grbbje$', function ($receiver, action) {
    var $receiver_0 = $receiver.iterator();
    while ($receiver_0.hasNext()) {
      action($receiver_0.next(), $receiver_0.hasNext());
    }
  });
  var forEachWithLookahead_1 = defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.forEachWithLookahead_5exn50$', function ($receiver, action) {
    var $receiver_0 = $receiver.iterator();
    while ($receiver_0.hasNext()) {
      action($receiver_0.next(), $receiver_0.hasNext());
    }
  });
  function Channel() {
  }
  Channel.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Channel',
    interfaces: []
  };
  function InputChannel() {
    InputChannel$Companion_getInstance();
  }
  function InputChannel$Companion() {
    InputChannel$Companion_instance = this;
  }
  InputChannel$Companion.prototype.stdIn = function () {
    return stdin();
  };
  InputChannel$Companion.prototype.ofWithAvailabilityChecker = function (generator, availabilityChecker) {
    return new InputChannelFromFunction(generator, availabilityChecker);
  };
  function InputChannel$Companion$of$lambda() {
    return true;
  }
  InputChannel$Companion.prototype.of = function (generator) {
    return new InputChannelFromFunction(generator, InputChannel$Companion$of$lambda);
  };
  InputChannel$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var InputChannel$Companion_instance = null;
  function InputChannel$Companion_getInstance() {
    if (InputChannel$Companion_instance === null) {
      new InputChannel$Companion();
    }return InputChannel$Companion_instance;
  }
  InputChannel.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'InputChannel',
    interfaces: [Channel]
  };
  function OutputChannel() {
    OutputChannel$Companion_getInstance();
  }
  function OutputChannel$Companion() {
    OutputChannel$Companion_instance = this;
  }
  OutputChannel$Companion.prototype.stdOut = function () {
    return stdout();
  };
  OutputChannel$Companion.prototype.stdErr = function () {
    return stderr();
  };
  OutputChannel$Companion.prototype.of = function (consumer) {
    return new OutputChannelFromFunction(consumer);
  };
  OutputChannel$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var OutputChannel$Companion_instance = null;
  function OutputChannel$Companion_getInstance() {
    if (OutputChannel$Companion_instance === null) {
      new OutputChannel$Companion();
    }return OutputChannel$Companion_instance;
  }
  OutputChannel.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'OutputChannel',
    interfaces: [Channel]
  };
  function AbstractChannel() {
    this._listeners_3aun97$_0 = ArrayList_init();
  }
  AbstractChannel.prototype.addListener = function (listener) {
    this._listeners_3aun97$_0.add_11rb$(listener);
  };
  AbstractChannel.prototype.removeListener = function (listener) {
    this._listeners_3aun97$_0.remove_11rb$(listener);
  };
  AbstractChannel.prototype.clearListeners = function () {
    this._listeners_3aun97$_0.clear();
  };
  AbstractChannel.prototype.notify_11rb$ = function (value) {
    var tmp$;
    tmp$ = this._listeners_3aun97$_0.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element(value);
    }
  };
  AbstractChannel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractChannel',
    interfaces: [Channel]
  };
  function AbstractInputChannel() {
    AbstractChannel.call(this);
  }
  Object.defineProperty(AbstractInputChannel.prototype, 'available', {
    get: function () {
      return true;
    }
  });
  AbstractInputChannel.prototype.read = function () {
    var read = this.readActually();
    this.notify_11rb$(read);
    return read;
  };
  AbstractInputChannel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractInputChannel',
    interfaces: [InputChannel, AbstractChannel]
  };
  function AbstractOutputChannel() {
    AbstractChannel.call(this);
  }
  AbstractOutputChannel.prototype.write = function (value) {
    this.writeActually_11rb$(value);
    this.notify_11rb$(value);
  };
  AbstractOutputChannel.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractOutputChannel',
    interfaces: [OutputChannel, AbstractChannel]
  };
  function InputChannelFromFunction(generator, availabilityChecker) {
    AbstractInputChannel.call(this);
    this.generator_0 = generator;
    this.availabilityChecker_0 = availabilityChecker;
  }
  Object.defineProperty(InputChannelFromFunction.prototype, 'available', {
    get: function () {
      return this.availabilityChecker_0();
    }
  });
  InputChannelFromFunction.prototype.readActually = function () {
    return this.generator_0();
  };
  InputChannelFromFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InputChannelFromFunction',
    interfaces: [AbstractInputChannel]
  };
  function OutputChannelFromFunction(consumer) {
    AbstractOutputChannel.call(this);
    this.consumer_0 = consumer;
  }
  OutputChannelFromFunction.prototype.writeActually_11rb$ = function (value) {
    this.consumer_0(value);
  };
  OutputChannelFromFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OutputChannelFromFunction',
    interfaces: [AbstractOutputChannel]
  };
  function HaltException(message, cause, context, exitStatus) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (exitStatus === void 0)
      exitStatus = 1;
    TuPrologRuntimeException.call(this, message, cause, context);
    this.exitStatus = exitStatus;
    this.name = 'HaltException';
  }
  HaltException.prototype.updateContext = function (newContext) {
    return new HaltException(this.message, this.cause, newContext, this.exitStatus);
  };
  HaltException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HaltException',
    interfaces: [TuPrologRuntimeException]
  };
  function HaltException_init(cause, context, exitStatus, $this) {
    if (exitStatus === void 0)
      exitStatus = 1;
    $this = $this || Object.create(HaltException.prototype);
    HaltException.call($this, cause != null ? cause.toString() : null, cause, context, exitStatus);
    return $this;
  }
  function PrologError(message, cause, context, type, extraData) {
    PrologError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    TuPrologRuntimeException.call(this, message, cause, context);
    this.type_e84yj1$_0 = type;
    this.extraData_7fnek3$_0 = extraData;
    this.name = 'PrologError';
    this.errorStruct_sj7tl6$_0 = lazy(PrologError$errorStruct$lambda(this));
  }
  Object.defineProperty(PrologError.prototype, 'type', {
    get: function () {
      return this.type_e84yj1$_0;
    }
  });
  Object.defineProperty(PrologError.prototype, 'extraData', {
    get: function () {
      return this.extraData_7fnek3$_0;
    }
  });
  Object.defineProperty(PrologError.prototype, 'errorStruct', {
    get: function () {
      return this.errorStruct_sj7tl6$_0.value;
    }
  });
  PrologError.prototype.generateErrorStruct_oq2a3j$_0 = function () {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.extraData) != null ? ErrorUtils_getInstance().errorStructOf_aks2a9$(this.type, tmp$) : null) != null ? tmp$_0 : ErrorUtils_getInstance().errorStructOf_aks2a9$(this.type);
  };
  PrologError.prototype.updateContext = function (newContext) {
    return PrologError$Companion_getInstance().of(this.message, this.cause, newContext, this.type, this.extraData);
  };
  PrologError.prototype.toString = function () {
    return this.errorStruct.toString();
  };
  function PrologError$Companion() {
    PrologError$Companion_instance = this;
  }
  function PrologError$Companion$of$lambda$ObjectLiteral(message, cause, context, type, extraData) {
    PrologError.call(this, message, cause, context, type, extraData);
    this.name = 'PrologError$Companion$of$lambda$ObjectLiteral';
  }
  PrologError$Companion$of$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [PrologError]
  };
  PrologError$Companion.prototype.of = function (message, cause, context, type, extraData) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    var block$result;
    if (equals(type.functor, InstantiationError$Companion_getInstance().typeFunctor)) {
      block$result = new InstantiationError(message, cause, context, extraData);
    } else if (equals(type.functor, SystemError$Companion_getInstance().typeFunctor)) {
      block$result = new SystemError(message, cause, context, extraData);
    } else if (equals(type.functor, TypeError$Companion_getInstance().typeFunctor) && type.arity === 2 && TypeError$Expected$Companion_getInstance().fromTerm_z0t4vt$(first(type.args)) != null) {
      block$result = new TypeError(message, cause, context, ensureNotNull(TypeError$Expected$Companion_getInstance().fromTerm_z0t4vt$(first(type.args))), type.args[1], extraData);
    } else if (equals(type.functor, EvaluationError$Companion_getInstance().typeFunctor) && type.arity === 1 && EvaluationError$Type$Companion_getInstance().fromTerm_z0t4vt$(single(type.args)) != null) {
      block$result = new EvaluationError(message, cause, context, ensureNotNull(EvaluationError$Type$Companion_getInstance().fromTerm_z0t4vt$(single(type.args))), extraData);
    } else if (equals(type.functor, MessageError$Companion_getInstance().typeFunctor)) {
      block$result = new MessageError(message, cause, context, extraData);
    } else {
      block$result = new PrologError$Companion$of$lambda$ObjectLiteral(message, cause, context, type, extraData);
    }
    return block$result;
  };
  PrologError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PrologError$Companion_instance = null;
  function PrologError$Companion_getInstance() {
    if (PrologError$Companion_instance === null) {
      new PrologError$Companion();
    }return PrologError$Companion_instance;
  }
  function PrologError$errorStruct$lambda(this$PrologError) {
    return function () {
      return this$PrologError.generateErrorStruct_oq2a3j$_0();
    };
  }
  PrologError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrologError',
    interfaces: [TuPrologRuntimeException]
  };
  function PrologError_init(cause, context, type, extraData, $this) {
    if (extraData === void 0)
      extraData = null;
    $this = $this || Object.create(PrologError.prototype);
    PrologError.call($this, cause != null ? cause.toString() : null, cause, context, type, extraData);
    return $this;
  }
  function PrologWarning(message, cause, context) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    TuPrologRuntimeException.call(this, message, cause, context);
    this.name = 'PrologWarning';
  }
  PrologWarning.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrologWarning',
    interfaces: [TuPrologRuntimeException]
  };
  function TimeOutException(message, cause, context, exceededDuration) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    TuPrologRuntimeException.call(this, message, cause, context);
    this.exceededDuration = exceededDuration;
    this.name = 'TimeOutException';
  }
  TimeOutException.prototype.updateContext = function (newContext) {
    return new TimeOutException(this.message, this.cause, newContext, this.exceededDuration);
  };
  TimeOutException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TimeOutException',
    interfaces: [TuPrologRuntimeException]
  };
  function TimeOutException_init(cause, context, exceededDuration, $this) {
    $this = $this || Object.create(TimeOutException.prototype);
    TimeOutException.call($this, cause != null ? cause.toString() : null, cause, context, exceededDuration);
    return $this;
  }
  function TuPrologRuntimeException(message, cause, context) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    TuPrologException.call(this, message, cause);
    this.context = context;
    this.name = 'TuPrologRuntimeException';
    this.prologStackTrace_4q9b3d$_0 = lazy(TuPrologRuntimeException$prologStackTrace$lambda(this));
  }
  Object.defineProperty(TuPrologRuntimeException.prototype, 'prologStackTrace', {
    get: function () {
      return this.prologStackTrace_4q9b3d$_0.value;
    }
  });
  TuPrologRuntimeException.prototype.updateContext = function (newContext) {
    return new TuPrologRuntimeException(this.message, this.cause, newContext);
  };
  function TuPrologRuntimeException$prologStackTrace$lambda(this$TuPrologRuntimeException) {
    return function () {
      return this$TuPrologRuntimeException.context.prologStackTrace;
    };
  }
  TuPrologRuntimeException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TuPrologRuntimeException',
    interfaces: [TuPrologException]
  };
  function TuPrologRuntimeException_init(cause, context, $this) {
    $this = $this || Object.create(TuPrologRuntimeException.prototype);
    TuPrologRuntimeException.call($this, cause != null ? cause.toString() : null, cause, context);
    return $this;
  }
  function ErrorUtils() {
    ErrorUtils_instance = this;
    this.errorWrapperFunctor = 'error';
  }
  ErrorUtils.prototype.errorStructOf_aks2a9$ = function (errorDescription, customErrorData) {
    if (customErrorData === void 0)
      customErrorData = Atom.Companion.of('');
    return Struct.Companion.of(this.errorWrapperFunctor, [errorDescription, customErrorData]);
  };
  ErrorUtils.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ErrorUtils',
    interfaces: []
  };
  var ErrorUtils_instance = null;
  function ErrorUtils_getInstance() {
    if (ErrorUtils_instance === null) {
      new ErrorUtils();
    }return ErrorUtils_instance;
  }
  function EvaluationError(message, cause, context, errorType, extraData) {
    EvaluationError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    PrologError.call(this, message, cause, context, Atom.Companion.of(EvaluationError$Companion_getInstance().typeFunctor), extraData);
    this.errorType = errorType;
    this.name = 'EvaluationError';
    this.type_v9lna0$_0 = lazy(EvaluationError$type$lambda(this));
  }
  Object.defineProperty(EvaluationError.prototype, 'type', {
    get: function () {
      return this.type_v9lna0$_0.value;
    }
  });
  function EvaluationError$Companion() {
    EvaluationError$Companion_instance = this;
    this.typeFunctor = 'evaluation_error';
  }
  EvaluationError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EvaluationError$Companion_instance = null;
  function EvaluationError$Companion_getInstance() {
    if (EvaluationError$Companion_instance === null) {
      new EvaluationError$Companion();
    }return EvaluationError$Companion_instance;
  }
  function EvaluationError$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function EvaluationError$Type_initFields() {
    EvaluationError$Type_initFields = function () {
    };
    EvaluationError$Type$INT_OVERFLOW_instance = new EvaluationError$Type('INT_OVERFLOW', 0);
    EvaluationError$Type$FLOAT_OVERFLOW_instance = new EvaluationError$Type('FLOAT_OVERFLOW', 1);
    EvaluationError$Type$UNDERFLOW_instance = new EvaluationError$Type('UNDERFLOW', 2);
    EvaluationError$Type$ZERO_DIVISOR_instance = new EvaluationError$Type('ZERO_DIVISOR', 3);
    EvaluationError$Type$UNDEFINED_instance = new EvaluationError$Type('UNDEFINED', 4);
    EvaluationError$Type$Companion_getInstance();
  }
  var EvaluationError$Type$INT_OVERFLOW_instance;
  function EvaluationError$Type$INT_OVERFLOW_getInstance() {
    EvaluationError$Type_initFields();
    return EvaluationError$Type$INT_OVERFLOW_instance;
  }
  var EvaluationError$Type$FLOAT_OVERFLOW_instance;
  function EvaluationError$Type$FLOAT_OVERFLOW_getInstance() {
    EvaluationError$Type_initFields();
    return EvaluationError$Type$FLOAT_OVERFLOW_instance;
  }
  var EvaluationError$Type$UNDERFLOW_instance;
  function EvaluationError$Type$UNDERFLOW_getInstance() {
    EvaluationError$Type_initFields();
    return EvaluationError$Type$UNDERFLOW_instance;
  }
  var EvaluationError$Type$ZERO_DIVISOR_instance;
  function EvaluationError$Type$ZERO_DIVISOR_getInstance() {
    EvaluationError$Type_initFields();
    return EvaluationError$Type$ZERO_DIVISOR_instance;
  }
  var EvaluationError$Type$UNDEFINED_instance;
  function EvaluationError$Type$UNDEFINED_getInstance() {
    EvaluationError$Type_initFields();
    return EvaluationError$Type$UNDEFINED_instance;
  }
  EvaluationError$Type.prototype.toTerm = function () {
    return Atom.Companion.of(this.toString());
  };
  EvaluationError$Type.prototype.toString = function () {
    return Enum.prototype.toString.call(this).toLowerCase();
  };
  function EvaluationError$Type$Companion() {
    EvaluationError$Type$Companion_instance = this;
  }
  EvaluationError$Type$Companion.prototype.fromTerm_z0t4vt$ = function (term) {
    if (Kotlin.isType(term, Atom))
      try {
        return EvaluationError$Type$valueOf(term.value.toUpperCase());
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          return null;
        } else if (Kotlin.isType(e, IllegalStateException)) {
          return null;
        } else
          throw e;
      }
     else
      return null;
  };
  EvaluationError$Type$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var EvaluationError$Type$Companion_instance = null;
  function EvaluationError$Type$Companion_getInstance() {
    EvaluationError$Type_initFields();
    if (EvaluationError$Type$Companion_instance === null) {
      new EvaluationError$Type$Companion();
    }return EvaluationError$Type$Companion_instance;
  }
  EvaluationError$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [ToTermConvertible, Enum]
  };
  function EvaluationError$Type$values() {
    return [EvaluationError$Type$INT_OVERFLOW_getInstance(), EvaluationError$Type$FLOAT_OVERFLOW_getInstance(), EvaluationError$Type$UNDERFLOW_getInstance(), EvaluationError$Type$ZERO_DIVISOR_getInstance(), EvaluationError$Type$UNDEFINED_getInstance()];
  }
  EvaluationError$Type.values = EvaluationError$Type$values;
  function EvaluationError$Type$valueOf(name) {
    switch (name) {
      case 'INT_OVERFLOW':
        return EvaluationError$Type$INT_OVERFLOW_getInstance();
      case 'FLOAT_OVERFLOW':
        return EvaluationError$Type$FLOAT_OVERFLOW_getInstance();
      case 'UNDERFLOW':
        return EvaluationError$Type$UNDERFLOW_getInstance();
      case 'ZERO_DIVISOR':
        return EvaluationError$Type$ZERO_DIVISOR_getInstance();
      case 'UNDEFINED':
        return EvaluationError$Type$UNDEFINED_getInstance();
      default:throwISE('No enum constant it.unibo.tuprolog.solve.exception.error.EvaluationError.Type.' + name);
    }
  }
  EvaluationError$Type.valueOf_61zpoe$ = EvaluationError$Type$valueOf;
  function EvaluationError$type$lambda(this$EvaluationError) {
    return function () {
      return Struct.Companion.of(Kotlin.callGetter(this$EvaluationError, PrologError.prototype, 'type').functor, [this$EvaluationError.errorType.toTerm()]);
    };
  }
  EvaluationError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EvaluationError',
    interfaces: [PrologError]
  };
  function InstantiationError(message, cause, context, extraData) {
    InstantiationError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    PrologError.call(this, message, cause, context, Atom.Companion.of(InstantiationError$Companion_getInstance().typeFunctor), extraData);
    this.name = 'InstantiationError';
  }
  function InstantiationError$Companion() {
    InstantiationError$Companion_instance = this;
    this.typeFunctor = 'instantiation_error';
  }
  InstantiationError$Companion.prototype.forArgument_b8n3hp$ = function (context, procedure, index, variable) {
    if (index === void 0)
      index = null;
    if (variable === void 0)
      variable = null;
    return new InstantiationError('Argument ' + (index != null ? index : '').toString() + ' `' + (variable != null ? variable : '').toString() + '` of ' + procedure + ' is unexpectedly not instantiated', void 0, context, variable);
  };
  InstantiationError$Companion.prototype.forGoal_oefzvh$ = function (context, procedure, variable) {
    var it = 'Uninstantiated subgoal ' + variable + ' in procedure ' + toString(procedure.toIndicator());
    return new InstantiationError(it, void 0, context, Atom.Companion.of(it));
  };
  InstantiationError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var InstantiationError$Companion_instance = null;
  function InstantiationError$Companion_getInstance() {
    if (InstantiationError$Companion_instance === null) {
      new InstantiationError$Companion();
    }return InstantiationError$Companion_instance;
  }
  InstantiationError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InstantiationError',
    interfaces: [PrologError]
  };
  function InstantiationError_init(context, procedure, index, variable, $this) {
    if (index === void 0)
      index = null;
    if (variable === void 0)
      variable = null;
    $this = $this || Object.create(InstantiationError.prototype);
    InstantiationError.call($this, 'Argument ' + (index != null ? index : '').toString() + ' `' + (variable != null ? variable : '').toString() + '` of ' + procedure + ' is unexpectedly not instantiated', void 0, context, variable);
    return $this;
  }
  function MessageError(message, cause, context, extraData) {
    MessageError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    PrologError.call(this, message, cause, context, Atom.Companion.of(MessageError$Companion_getInstance().typeFunctor), extraData);
    this.name = 'MessageError';
    this.content_il6t3s$_0 = lazy(MessageError$content$lambda(extraData, this));
  }
  Object.defineProperty(MessageError.prototype, 'content', {
    get: function () {
      return this.content_il6t3s$_0.value;
    }
  });
  MessageError.prototype.updateContext = function (newContext) {
    return new MessageError(this.message, this.cause, newContext, this.extraData);
  };
  function MessageError$Companion() {
    MessageError$Companion_instance = this;
    this.typeFunctor = '';
  }
  MessageError$Companion.prototype.of_obfanv$ = function (content, context, cause) {
    if (cause === void 0)
      cause = null;
    return new MessageError(content.toString(), cause, context, content);
  };
  MessageError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MessageError$Companion_instance = null;
  function MessageError$Companion_getInstance() {
    if (MessageError$Companion_instance === null) {
      new MessageError$Companion();
    }return MessageError$Companion_instance;
  }
  function MessageError$content$lambda(closure$extraData, this$MessageError) {
    return function () {
      return closure$extraData != null ? closure$extraData : this$MessageError.errorStruct;
    };
  }
  MessageError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MessageError',
    interfaces: [PrologError]
  };
  function SystemError(message, cause, context, extraData) {
    SystemError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    PrologError.call(this, message, cause, context, Atom.Companion.of(SystemError$Companion_getInstance().typeFunctor), extraData);
    this.name = 'SystemError';
  }
  SystemError.prototype.updateContext = function (newContext) {
    return new SystemError(this.message, this.cause, newContext, this.extraData);
  };
  function SystemError$Companion() {
    SystemError$Companion_instance = this;
    this.typeFunctor = 'system_error';
  }
  SystemError$Companion.prototype.forUncaughtException_hvzg97$ = function (context, exception) {
    var it = 'Uncaught exception `' + exception + '`';
    return new SystemError(it, void 0, context, Atom.Companion.of(it));
  };
  SystemError$Companion.prototype.forUncaughtException_2j2uar$ = function (context, exception) {
    if (Kotlin.isType(exception, MessageError))
      return this.forUncaughtException_hvzg97$(context, exception.content);
    else
      return this.forUncaughtException_hvzg97$(context, exception.errorStruct);
  };
  SystemError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SystemError$Companion_instance = null;
  function SystemError$Companion_getInstance() {
    if (SystemError$Companion_instance === null) {
      new SystemError$Companion();
    }return SystemError$Companion_instance;
  }
  SystemError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SystemError',
    interfaces: [PrologError]
  };
  function TypeError(message, cause, context, expectedType, actualValue, extraData) {
    TypeError$Companion_getInstance();
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    if (extraData === void 0)
      extraData = null;
    PrologError.call(this, message, cause, context, Atom.Companion.of(TypeError$Companion_getInstance().typeFunctor), extraData);
    this.expectedType = expectedType;
    this.actualValue = actualValue;
    this.name = 'TypeError';
    this.type_ejap92$_0 = lazy(TypeError$type$lambda(this));
  }
  Object.defineProperty(TypeError.prototype, 'type', {
    get: function () {
      return this.type_ejap92$_0.value;
    }
  });
  function TypeError$Companion() {
    TypeError$Companion_instance = this;
    this.typeFunctor = 'type_error';
  }
  TypeError$Companion.prototype.forArgument_vzdn8r$ = function (context, procedure, expectedType, actualValue, index) {
    if (index === void 0)
      index = null;
    return new TypeError('Argument ' + (index != null ? index : '').toString() + ' of `' + procedure + '` should be a `' + expectedType + '`, but `' + actualValue + '` has been provided instead', void 0, context, expectedType, actualValue, actualValue);
  };
  TypeError$Companion.prototype.forGoal_uyjcmc$ = function (context, procedure, expectedType, actualValue) {
    var it = 'Subgoal `' + actualValue + '` of ' + toString(procedure.toIndicator()) + ' is not a ' + expectedType + ' term';
    return new TypeError(it, void 0, context, expectedType, actualValue, Atom.Companion.of(it));
  };
  TypeError$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TypeError$Companion_instance = null;
  function TypeError$Companion_getInstance() {
    if (TypeError$Companion_instance === null) {
      new TypeError$Companion();
    }return TypeError$Companion_instance;
  }
  function TypeError$Expected(type) {
    TypeError$Expected$Companion_getInstance();
    this.type_0 = type;
  }
  TypeError$Expected.prototype.toTerm = function () {
    return Atom.Companion.of(this.type_0);
  };
  TypeError$Expected.prototype.toString = function () {
    return this.type_0;
  };
  function TypeError$Expected$Companion() {
    TypeError$Expected$Companion_instance = this;
    this.predefinedExpectedTypes_zaatjz$_0 = lazy(TypeError$Expected$Companion$predefinedExpectedTypes$lambda);
    this.predefinedNameToInstance_rfr5uf$_0 = lazy(TypeError$Expected$Companion$predefinedNameToInstance$lambda(this));
    this.CALLABLE_hsgkhs$_0 = lazy(TypeError$Expected$Companion$CALLABLE$lambda(this));
    this.ATOM_q3zyrr$_0 = lazy(TypeError$Expected$Companion$ATOM$lambda(this));
    this.INTEGER_ikrgpq$_0 = lazy(TypeError$Expected$Companion$INTEGER$lambda(this));
    this.NUMBER_303d0x$_0 = lazy(TypeError$Expected$Companion$NUMBER$lambda(this));
    this.PREDICATE_INDICATOR_dnek6j$_0 = lazy(TypeError$Expected$Companion$PREDICATE_INDICATOR$lambda(this));
    this.COMPOUND_nns76b$_0 = lazy(TypeError$Expected$Companion$COMPOUND$lambda(this));
    this.LIST_q9urkq$_0 = lazy(TypeError$Expected$Companion$LIST$lambda(this));
    this.CHARACTER_4pqdlf$_0 = lazy(TypeError$Expected$Companion$CHARACTER$lambda(this));
    this.EVALUABLE_1oxoqf$_0 = lazy(TypeError$Expected$Companion$EVALUABLE$lambda(this));
  }
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'predefinedExpectedTypes_0', {
    get: function () {
      return this.predefinedExpectedTypes_zaatjz$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'predefinedNameToInstance_0', {
    get: function () {
      return this.predefinedNameToInstance_rfr5uf$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'CALLABLE', {
    get: function () {
      return this.CALLABLE_hsgkhs$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'ATOM', {
    get: function () {
      return this.ATOM_q3zyrr$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'INTEGER', {
    get: function () {
      return this.INTEGER_ikrgpq$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'NUMBER', {
    get: function () {
      return this.NUMBER_303d0x$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'PREDICATE_INDICATOR', {
    get: function () {
      return this.PREDICATE_INDICATOR_dnek6j$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'COMPOUND', {
    get: function () {
      return this.COMPOUND_nns76b$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'LIST', {
    get: function () {
      return this.LIST_q9urkq$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'CHARACTER', {
    get: function () {
      return this.CHARACTER_4pqdlf$_0.value;
    }
  });
  Object.defineProperty(TypeError$Expected$Companion.prototype, 'EVALUABLE', {
    get: function () {
      return this.EVALUABLE_1oxoqf$_0.value;
    }
  });
  TypeError$Expected$Companion.prototype.of_61zpoe$ = function (type) {
    var tmp$;
    return (tmp$ = this.predefinedNameToInstance_0.get_11rb$(type.toLowerCase())) != null ? tmp$ : new TypeError$Expected(type);
  };
  TypeError$Expected$Companion.prototype.fromTerm_z0t4vt$ = function (term) {
    if (Kotlin.isType(term, Atom))
      return this.of_61zpoe$(term.value);
    else
      return null;
  };
  function TypeError$Expected$Companion$predefinedExpectedTypes$lambda() {
    return listOf(['callable', 'atom', 'integer', 'number', 'predicate_indicator', 'compound', 'list', 'character', 'evaluable']);
  }
  function TypeError$Expected$Companion$predefinedNameToInstance$lambda(this$Expected$) {
    return function () {
      var $receiver = this$Expected$.predefinedExpectedTypes_0;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(to(item, new TypeError$Expected(item)));
      }
      return toMap(destination);
    };
  }
  function TypeError$Expected$Companion$CALLABLE$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'callable');
    };
  }
  function TypeError$Expected$Companion$ATOM$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'atom');
    };
  }
  function TypeError$Expected$Companion$INTEGER$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'integer');
    };
  }
  function TypeError$Expected$Companion$NUMBER$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'number');
    };
  }
  function TypeError$Expected$Companion$PREDICATE_INDICATOR$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'predicate_indicator');
    };
  }
  function TypeError$Expected$Companion$COMPOUND$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'compound');
    };
  }
  function TypeError$Expected$Companion$LIST$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'list');
    };
  }
  function TypeError$Expected$Companion$CHARACTER$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'character');
    };
  }
  function TypeError$Expected$Companion$EVALUABLE$lambda(this$Expected$) {
    return function () {
      return getValue(this$Expected$.predefinedNameToInstance_0, 'evaluable');
    };
  }
  TypeError$Expected$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TypeError$Expected$Companion_instance = null;
  function TypeError$Expected$Companion_getInstance() {
    if (TypeError$Expected$Companion_instance === null) {
      new TypeError$Expected$Companion();
    }return TypeError$Expected$Companion_instance;
  }
  TypeError$Expected.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Expected',
    interfaces: [ToTermConvertible]
  };
  function TypeError$type$lambda(this$TypeError) {
    return function () {
      return Struct.Companion.of(Kotlin.callGetter(this$TypeError, PrologError.prototype, 'type').functor, [this$TypeError.expectedType.toTerm(), this$TypeError.actualValue]);
    };
  }
  TypeError.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TypeError',
    interfaces: [PrologError]
  };
  function TypeError_init(context, procedure, expectedType, actualValue, index, $this) {
    if (index === void 0)
      index = null;
    $this = $this || Object.create(TypeError.prototype);
    TypeError.call($this, 'Argument ' + (index != null ? index : '').toString() + ' of `' + procedure + '` should be a `' + expectedType + '`, but `' + actualValue + '` has been provided instead', void 0, context, expectedType, actualValue, actualValue);
    return $this;
  }
  function ArithmeticEvaluator(context) {
    ArithmeticEvaluator$Companion_getInstance();
    ExpressionEvaluator.call(this, context);
  }
  ArithmeticEvaluator.prototype.visitToIndicator = function (term) {
    return ExpressionEvaluator.prototype.visitStruct.call(this, term);
  };
  ArithmeticEvaluator.prototype.staticCheck_ppa872$ = function ($receiver, context) {
    if (Kotlin.isType($receiver, Var))
      throw new InstantiationError('Variable sub-expressions are not allowed: `' + $receiver + '`', void 0, context, $receiver);
    else if (Kotlin.isType($receiver, Atom))
      throw new TypeError('Atom sub-expression are not allowed: `' + $receiver + '`', void 0, context, TypeError$Expected$Companion_getInstance().EVALUABLE, $receiver);
    else if (Kotlin.isType($receiver, Struct) && !ArithmeticEvaluator$Companion_getInstance().allowedArithmeticSignatures.contains_11rb$(extractSignature($receiver)))
      throw new TypeError('The struct `' + $receiver + '` is not part of allowed arithmetic functions', void 0, context, TypeError$Expected$Companion_getInstance().EVALUABLE, $receiver);
  };
  ArithmeticEvaluator.prototype.dynamicCheck_bav5tk$ = function ($receiver, enclosingTerm, context) {
    if (!Kotlin.isType($receiver, Numeric))
      throw new TypeError('An argument of an arithmetic functor got evaluated to a non-numeric value', void 0, context, TypeError$Expected$Companion_getInstance().NUMBER, $receiver);
    else if (!Kotlin.isType($receiver, Integer) && ArithmeticEvaluator$Companion_getInstance().bitwiseStandardOperatorsSignatures_8be2vx$.contains_11rb$(extractSignature(enclosingTerm)))
      throw new TypeError('The argument of a bitwise operator was evaluated to a non-integer value', void 0, context, TypeError$Expected$Companion_getInstance().INTEGER, $receiver);
  };
  function ArithmeticEvaluator$Companion() {
    ArithmeticEvaluator$Companion_instance = this;
    this.allowedArithmeticSignatures_4timbh$_0 = lazy(ArithmeticEvaluator$Companion$allowedArithmeticSignatures$lambda);
    this.bitwiseStandardOperatorsSignatures_8be2vx$_h1ru72$_0 = lazy(ArithmeticEvaluator$Companion$bitwiseStandardOperatorsSignatures$lambda);
  }
  Object.defineProperty(ArithmeticEvaluator$Companion.prototype, 'allowedArithmeticSignatures', {
    get: function () {
      return this.allowedArithmeticSignatures_4timbh$_0.value;
    }
  });
  Object.defineProperty(ArithmeticEvaluator$Companion.prototype, 'bitwiseStandardOperatorsSignatures_8be2vx$', {
    get: function () {
      return this.bitwiseStandardOperatorsSignatures_8be2vx$_h1ru72$_0.value;
    }
  });
  function ArithmeticEvaluator$Companion$allowedArithmeticSignatures$lambda() {
    var $receiver = CommonBuiltins_getInstance().functions;
    var destination = ArrayList_init_0($receiver.size);
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var signature = item.key;
      tmp$_0.call(destination, signature);
    }
    return destination;
  }
  function ArithmeticEvaluator$Companion$bitwiseStandardOperatorsSignatures$lambda() {
    var $receiver = listOf([BitwiseAnd_getInstance(), BitwiseComplement_getInstance(), BitwiseLeftShift_getInstance(), BitwiseOr_getInstance(), BitwiseRightShift_getInstance()]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.signature);
    }
    return destination;
  }
  ArithmeticEvaluator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ArithmeticEvaluator$Companion_instance = null;
  function ArithmeticEvaluator$Companion_getInstance() {
    if (ArithmeticEvaluator$Companion_instance === null) {
      new ArithmeticEvaluator$Companion();
    }return ArithmeticEvaluator$Companion_instance;
  }
  ArithmeticEvaluator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ArithmeticEvaluator',
    interfaces: [ExpressionEvaluator]
  };
  function Compute() {
  }
  function Compute$Request(signature, arguments_0, context, requestIssuingInstant, executionMaxDuration) {
    if (requestIssuingInstant === void 0)
      requestIssuingInstant = currentTimeInstant();
    if (executionMaxDuration === void 0)
      executionMaxDuration = Long$Companion$MAX_VALUE;
    Compute.call(this);
    this.signature = signature;
    this.arguments = arguments_0;
    this.context = context;
    this.requestIssuingInstant = requestIssuingInstant;
    this.executionMaxDuration = executionMaxDuration;
    if (this.signature.vararg) {
      if (!(this.arguments.size >= this.signature.arity)) {
        var message = 'Trying to create Compute.Request of signature `' + this.signature + '` with not enough arguments ' + toList(this.arguments);
        throw IllegalArgumentException_init(message.toString());
      }} else {
      if (!(this.arguments.size === this.signature.arity)) {
        var message_0 = 'Trying to create Compute.Request of signature `' + this.signature + '` with wrong number of arguments ' + toList(this.arguments);
        throw IllegalArgumentException_init(message_0.toString());
      }}
    if (!(this.requestIssuingInstant.toNumber() >= 0)) {
      var message_1 = "The request issuing instant can't be negative: " + this.requestIssuingInstant.toString();
      throw IllegalArgumentException_init(message_1.toString());
    }if (!(this.executionMaxDuration.toNumber() >= 0)) {
      var message_2 = "The execution max duration can't be negative: " + this.executionMaxDuration.toString();
      throw IllegalArgumentException_init(message_2.toString());
    }this.query_8k2a7h$_0 = lazy(Compute$Request$query$lambda(this));
  }
  Object.defineProperty(Compute$Request.prototype, 'query', {
    get: function () {
      return this.query_8k2a7h$_0.value;
    }
  });
  Compute$Request.prototype.replyWith = function (result) {
    return new Compute$Response(result);
  };
  function Compute$Request$query$lambda(this$Request) {
    return function () {
      return this$Request.signature.withArgs(this$Request.arguments);
    };
  }
  Compute$Request.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Request',
    interfaces: [Compute]
  };
  Compute$Request.prototype.component1 = function () {
    return this.signature;
  };
  Compute$Request.prototype.component2 = function () {
    return this.arguments;
  };
  Compute$Request.prototype.component3 = function () {
    return this.context;
  };
  Compute$Request.prototype.component4 = function () {
    return this.requestIssuingInstant;
  };
  Compute$Request.prototype.component5 = function () {
    return this.executionMaxDuration;
  };
  Compute$Request.prototype.copy_9pk6s9$ = function (signature, arguments_0, context, requestIssuingInstant, executionMaxDuration) {
    return new Compute$Request(signature === void 0 ? this.signature : signature, arguments_0 === void 0 ? this.arguments : arguments_0, context === void 0 ? this.context : context, requestIssuingInstant === void 0 ? this.requestIssuingInstant : requestIssuingInstant, executionMaxDuration === void 0 ? this.executionMaxDuration : executionMaxDuration);
  };
  Compute$Request.prototype.toString = function () {
    return 'Request(signature=' + Kotlin.toString(this.signature) + (', arguments=' + Kotlin.toString(this.arguments)) + (', context=' + Kotlin.toString(this.context)) + (', requestIssuingInstant=' + Kotlin.toString(this.requestIssuingInstant)) + (', executionMaxDuration=' + Kotlin.toString(this.executionMaxDuration)) + ')';
  };
  Compute$Request.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.signature) | 0;
    result = result * 31 + Kotlin.hashCode(this.arguments) | 0;
    result = result * 31 + Kotlin.hashCode(this.context) | 0;
    result = result * 31 + Kotlin.hashCode(this.requestIssuingInstant) | 0;
    result = result * 31 + Kotlin.hashCode(this.executionMaxDuration) | 0;
    return result;
  };
  Compute$Request.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.signature, other.signature) && Kotlin.equals(this.arguments, other.arguments) && Kotlin.equals(this.context, other.context) && Kotlin.equals(this.requestIssuingInstant, other.requestIssuingInstant) && Kotlin.equals(this.executionMaxDuration, other.executionMaxDuration)))));
  };
  function Compute$Response(result) {
    Compute.call(this);
    this.result = result;
  }
  Compute$Response.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Response',
    interfaces: [Compute]
  };
  Compute$Response.prototype.component1 = function () {
    return this.result;
  };
  Compute$Response.prototype.copy_z0t4vt$ = function (result) {
    return new Compute$Response(result === void 0 ? this.result : result);
  };
  Compute$Response.prototype.toString = function () {
    return 'Response(result=' + Kotlin.toString(this.result) + ')';
  };
  Compute$Response.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.result) | 0;
    return result;
  };
  Compute$Response.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.result, other.result))));
  };
  Compute.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Compute',
    interfaces: []
  };
  function ExpressionEvaluator(context) {
    this.context_ffwzyf$_0 = context;
    this.loadedFunctions_rr6tmo$_0 = lazy(ExpressionEvaluator$loadedFunctions$lambda(this));
  }
  Object.defineProperty(ExpressionEvaluator.prototype, 'loadedFunctions', {
    get: function () {
      return this.loadedFunctions_rr6tmo$_0.value;
    }
  });
  ExpressionEvaluator.prototype.defaultValue = function (term) {
    return term;
  };
  ExpressionEvaluator.prototype.visitToTerm = function (term) {
    var tmp$ = TermVisitor.prototype.visitToTerm;
    this.staticCheck_ppa872$(term, this.context_ffwzyf$_0);
    return tmp$.call(this, term);
  };
  ExpressionEvaluator.prototype.visitAtom = function (term) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.loadedFunctions.get_11rb$(extractSignature(term))) != null ? tmp$(new Compute$Request(extractSignature(term), term.argsList, this.context_ffwzyf$_0)).result : null) != null ? tmp$_0 : term;
  };
  function ExpressionEvaluator$visitStruct$lambda$lambda(this$ExpressionEvaluator, closure$term) {
    return function (arg) {
      var $receiver = arg.accept(this$ExpressionEvaluator);
      var closure$term_0 = closure$term;
      var this$ExpressionEvaluator_0 = this$ExpressionEvaluator;
      this$ExpressionEvaluator_0.dynamicCheck_bav5tk$($receiver, closure$term_0, this$ExpressionEvaluator_0.context_ffwzyf$_0);
      return $receiver;
    };
  }
  ExpressionEvaluator.prototype.visitStruct = function (term) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.loadedFunctions.get_11rb$(extractSignature(term))) != null ? tmp$(new Compute$Request(extractSignature(term), toList_0(map(term.argsSequence, ExpressionEvaluator$visitStruct$lambda$lambda(this, term))), this.context_ffwzyf$_0)).result : null) != null ? tmp$_0 : term;
  };
  ExpressionEvaluator.prototype.staticCheck_ppa872$ = function ($receiver, context) {
  };
  ExpressionEvaluator.prototype.dynamicCheck_bav5tk$ = function ($receiver, enclosingTerm, context) {
  };
  function ExpressionEvaluator$loadedFunctions$lambda(this$ExpressionEvaluator) {
    return function () {
      return this$ExpressionEvaluator.context_ffwzyf$_0.libraries.functions;
    };
  }
  ExpressionEvaluator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpressionEvaluator',
    interfaces: [TermVisitor]
  };
  function FunctionWrapper() {
    this.wrappedImplementation_yl3qwr$_0 = lazy(FunctionWrapper$wrappedImplementation$lambda(this));
  }
  Object.defineProperty(FunctionWrapper.prototype, 'wrappedImplementation', {
    get: function () {
      return this.wrappedImplementation_yl3qwr$_0.value;
    }
  });
  function FunctionWrapper$wrappedImplementation$lambda(this$FunctionWrapper) {
    return function () {
      var tmp$;
      return functionOf(this$FunctionWrapper.signature, typeof (tmp$ = getCallableRef('uncheckedImplementation', function ($receiver, request) {
        return $receiver.uncheckedImplementation_v22sja$(request);
      }.bind(null, this$FunctionWrapper))) === 'function' ? tmp$ : throwCCE());
    };
  }
  FunctionWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctionWrapper',
    interfaces: [AbstractWrapper]
  };
  function FunctionWrapper_init(signature, $this) {
    $this = $this || Object.create(FunctionWrapper.prototype);
    AbstractWrapper.call($this, signature);
    FunctionWrapper.call($this);
    return $this;
  }
  function FunctionWrapper_init_0(name, arity, vararg, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(FunctionWrapper.prototype);
    AbstractWrapper_init(name, arity, vararg, $this);
    FunctionWrapper.call($this);
    return $this;
  }
  function functionOf$lambda(closure$uncheckedFunction, closure$supportedSignature) {
    return function (it) {
      if (equals(it.signature, closure$supportedSignature))
        return closure$uncheckedFunction(it);
      else
        throw IllegalArgumentException_init('This function supports only this signature `' + closure$supportedSignature + '`');
    };
  }
  function functionOf(supportedSignature, uncheckedFunction) {
    return functionOf$lambda(uncheckedFunction, supportedSignature);
  }
  function AliasedLibrary() {
    AliasedLibrary$Companion_getInstance();
  }
  function AliasedLibrary$Companion() {
    AliasedLibrary$Companion_instance = this;
    this.ALIAS_SEPARATOR = '.';
  }
  AliasedLibrary$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AliasedLibrary$Companion_instance = null;
  function AliasedLibrary$Companion_getInstance() {
    if (AliasedLibrary$Companion_instance === null) {
      new AliasedLibrary$Companion();
    }return AliasedLibrary$Companion_instance;
  }
  AliasedLibrary.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AliasedLibrary',
    interfaces: [Library]
  };
  function plus_0($receiver, library) {
    return Libraries_init([$receiver, library]);
  }
  function Libraries(libraries) {
    Libraries$Companion_getInstance();
    this.$delegate_p9w2qz$_0 = toMap_0(map(libraries, Libraries_init$lambda));
    this.operators_abwaf0$_0 = lazy(Libraries$operators$lambda(libraries));
    this.theory_buwduk$_0 = lazy(Libraries$theory$lambda(libraries));
    this.primitives_5li2h7$_0 = lazy(Libraries$primitives$lambda(libraries));
    this.functions_bfvn2g$_0 = lazy(Libraries$functions$lambda(libraries));
  }
  Object.defineProperty(Libraries.prototype, 'libraryAliases', {
    get: defineInlineFunction('@tuprolog/2p-solve.it.unibo.tuprolog.solve.library.Libraries.get_libraryAliases', function () {
      return this.keys;
    })
  });
  Object.defineProperty(Libraries.prototype, 'libraries', {
    get: function () {
      return toList(this.values);
    }
  });
  Object.defineProperty(Libraries.prototype, 'operators', {
    get: function () {
      return this.operators_abwaf0$_0.value;
    }
  });
  Object.defineProperty(Libraries.prototype, 'theory', {
    get: function () {
      return this.theory_buwduk$_0.value;
    }
  });
  Object.defineProperty(Libraries.prototype, 'primitives', {
    get: function () {
      return this.primitives_5li2h7$_0.value;
    }
  });
  Object.defineProperty(Libraries.prototype, 'functions', {
    get: function () {
      return this.functions_bfvn2g$_0.value;
    }
  });
  Libraries.prototype.plus = function (library) {
    var tmp$;
    var $receiver = this.keys;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (this.keys.contains_11rb$(library.alias)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    return (tmp$ = firstOrNull$result != null ? Libraries$Companion_getInstance().alreadyLoadedError_0(library) : null) != null ? tmp$ : new Libraries(plus(asSequence(this.libraries), sequenceOf([library])));
  };
  Libraries.prototype.plusGroup = function (libraryGroup) {
    var tmp$, tmp$_0;
    var $receiver = libraryGroup.libraries;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_1;
      tmp$_1 = $receiver.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        if (this.keys.contains_11rb$(element.alias)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    return (tmp$_0 = (tmp$ = firstOrNull$result) != null ? Libraries$Companion_getInstance().alreadyLoadedError_0(tmp$) : null) != null ? tmp$_0 : new Libraries(plus(asSequence(this.libraries), asSequence(libraryGroup.libraries)));
  };
  function Libraries$minus$lambda(closure$library) {
    return function (it) {
      return !equals(it.alias, closure$library.alias);
    };
  }
  Libraries.prototype.minus = function (library) {
    if (this.keys.contains_11rb$(library.alias)) {
      Libraries$Companion_getInstance().noSuchALibraryError_0(library);
    }return new Libraries(filter(asSequence(this.libraries), Libraries$minus$lambda(library)));
  };
  Libraries.prototype.update = function (library) {
    var tmp$;
    var $receiver = this.keys;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (this.keys.contains_11rb$(library.alias)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    tmp$ = firstOrNull$result != null ? new Libraries(plus(asSequence(this.libraries), sequenceOf([library]))) : null;
    if (tmp$ == null) {
      throw IllegalArgumentException_init('A library aliased as `' + library.alias + '` has never been loaded');
    }return tmp$;
  };
  Libraries.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, Libraries) ? tmp$_0 : throwCCE();
    if (!equals(this.libraries, other.libraries))
      return false;
    return true;
  };
  Libraries.prototype.hashCode = function () {
    return hashCode(this.libraries);
  };
  Libraries.prototype.toString = function () {
    return 'Libraries(' + this.libraries + ')';
  };
  function Libraries$Companion() {
    Libraries$Companion_instance = this;
  }
  Libraries$Companion.prototype.alreadyLoadedError_0 = function (library) {
    throw new AlreadyLoadedLibraryException('A library aliased as `' + library.alias + '` has already been loaded');
  };
  Libraries$Companion.prototype.noSuchALibraryError_0 = function (library) {
    throw new NoSuchALibraryException('No library with alias `' + library.alias + '` has been loaded');
  };
  Libraries$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Libraries$Companion_instance = null;
  function Libraries$Companion_getInstance() {
    if (Libraries$Companion_instance === null) {
      new Libraries$Companion();
    }return Libraries$Companion_instance;
  }
  Object.defineProperty(Libraries.prototype, 'entries', {
    get: function () {
      return this.$delegate_p9w2qz$_0.entries;
    }
  });
  Object.defineProperty(Libraries.prototype, 'keys', {
    get: function () {
      return this.$delegate_p9w2qz$_0.keys;
    }
  });
  Object.defineProperty(Libraries.prototype, 'size', {
    get: function () {
      return this.$delegate_p9w2qz$_0.size;
    }
  });
  Object.defineProperty(Libraries.prototype, 'values', {
    get: function () {
      return this.$delegate_p9w2qz$_0.values;
    }
  });
  Libraries.prototype.containsKey_11rb$ = function (key) {
    return this.$delegate_p9w2qz$_0.containsKey_11rb$(key);
  };
  Libraries.prototype.containsValue_11rc$ = function (value) {
    return this.$delegate_p9w2qz$_0.containsValue_11rc$(value);
  };
  Libraries.prototype.get_11rb$ = function (key) {
    return this.$delegate_p9w2qz$_0.get_11rb$(key);
  };
  Libraries.prototype.isEmpty = function () {
    return this.$delegate_p9w2qz$_0.isEmpty();
  };
  function Libraries_init$lambda(it) {
    return to(it.alias, it);
  }
  function Libraries$operators$lambda$lambda(it) {
    return asSequence(it.operators);
  }
  function Libraries$operators$lambda(closure$libraries) {
    return function () {
      return new OperatorSet(flatMap(closure$libraries, Libraries$operators$lambda$lambda));
    };
  }
  function Libraries$theory$lambda$lambda(it) {
    return asSequence(it.theory.clauses);
  }
  function Libraries$theory$lambda(closure$libraries) {
    return function () {
      return ClauseDatabase.Companion.ofSequence(flatMap(closure$libraries, Libraries$theory$lambda$lambda));
    };
  }
  function Libraries$primitives$lambda$lambda$lambda(closure$lib) {
    return function (it) {
      return sequenceOf([new Pair_init(it.key, it.value), to(it.key.copy_37lk95$(closure$lib.alias + AliasedLibrary$Companion_getInstance().ALIAS_SEPARATOR + it.key.name), it.value)]);
    };
  }
  function Libraries$primitives$lambda$lambda(lib) {
    return flatMap(asSequence(lib.primitives.entries), Libraries$primitives$lambda$lambda$lambda(lib));
  }
  function Libraries$primitives$lambda(closure$libraries) {
    return function () {
      return toMap_0(flatMap(closure$libraries, Libraries$primitives$lambda$lambda));
    };
  }
  function Libraries$functions$lambda$lambda$lambda(closure$lib) {
    return function (it) {
      return sequenceOf([new Pair_init(it.key, it.value), to(it.key.copy_37lk95$(closure$lib.alias + AliasedLibrary$Companion_getInstance().ALIAS_SEPARATOR + it.key.name), it.value)]);
    };
  }
  function Libraries$functions$lambda$lambda(lib) {
    return flatMap(asSequence(lib.functions.entries), Libraries$functions$lambda$lambda$lambda(lib));
  }
  function Libraries$functions$lambda(closure$libraries) {
    return function () {
      return toMap_0(flatMap(closure$libraries, Libraries$functions$lambda$lambda));
    };
  }
  Libraries.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Libraries',
    interfaces: [Map, LibraryGroup]
  };
  function Libraries_init(library, $this) {
    $this = $this || Object.create(Libraries.prototype);
    Libraries.call($this, asSequence_0(library));
    return $this;
  }
  function Libraries_init_0(libraries, $this) {
    $this = $this || Object.create(Libraries.prototype);
    Libraries.call($this, asSequence(libraries));
    return $this;
  }
  function Library() {
    Library$Companion_getInstance();
  }
  Library.prototype.containsSignature = function (signature) {
    var tmp$, tmp$_0;
    var tmp$_1 = this.primitives.containsKey_11rb$(signature);
    if (!tmp$_1) {
      tmp$_1 = (tmp$_0 = (tmp$ = signature.toIndicator()) != null ? this.theory.containsIndicator(tmp$) : null) != null ? tmp$_0 : false;
    }return tmp$_1;
  };
  Library.prototype.containsOperator = function (operator) {
    return this.operators.contains_11rb$(operator);
  };
  Library.prototype.hasPrimitive = function (signature) {
    return this.primitives.keys.contains_11rb$(signature);
  };
  Library.prototype.hasProtected = function (signature) {
    return this.containsSignature(signature);
  };
  function Library$Companion() {
    Library$Companion_instance = this;
  }
  Library$Companion.prototype.of_bdn3om$ = function (operatorSet, theory, primitives, functions) {
    if (operatorSet === void 0)
      operatorSet = OperatorSet_init([]);
    if (theory === void 0)
      theory = ClauseDatabase.Companion.empty();
    if (primitives === void 0)
      primitives = emptyMap();
    if (functions === void 0)
      functions = emptyMap();
    return new LibraryImpl(operatorSet, theory, primitives, functions);
  };
  Library$Companion.prototype.of_yq3ll4$ = function (operatorSet, theory, primitives, functions, alias) {
    if (operatorSet === void 0)
      operatorSet = OperatorSet_init([]);
    if (theory === void 0)
      theory = ClauseDatabase.Companion.empty();
    if (primitives === void 0)
      primitives = emptyMap();
    if (functions === void 0)
      functions = emptyMap();
    return new LibraryAliasedImpl(operatorSet, theory, primitives, functions, alias);
  };
  Library$Companion.prototype.of_og9kax$ = function (library, alias) {
    return new LibraryAliasedImpl(library.operators, library.theory, library.primitives, library.functions, alias);
  };
  Library$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Library$Companion_instance = null;
  function Library$Companion_getInstance() {
    if (Library$Companion_instance === null) {
      new Library$Companion();
    }return Library$Companion_instance;
  }
  Library.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Library',
    interfaces: []
  };
  function LibraryGroup() {
  }
  LibraryGroup.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'LibraryGroup',
    interfaces: [Library]
  };
  function AlreadyLoadedLibraryException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    LibraryException.call(this, message, cause);
    this.name = 'AlreadyLoadedLibraryException';
  }
  AlreadyLoadedLibraryException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AlreadyLoadedLibraryException',
    interfaces: [LibraryException]
  };
  function AlreadyLoadedLibraryException_init(cause, $this) {
    $this = $this || Object.create(AlreadyLoadedLibraryException.prototype);
    AlreadyLoadedLibraryException.call($this, cause != null ? cause.toString() : null, cause);
    return $this;
  }
  function LibraryException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    TuPrologException.call(this, message, cause);
    this.name = 'LibraryException';
  }
  LibraryException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LibraryException',
    interfaces: [TuPrologException]
  };
  function LibraryException_init(cause, $this) {
    $this = $this || Object.create(LibraryException.prototype);
    LibraryException.call($this, cause != null ? cause.toString() : null, cause);
    return $this;
  }
  function NoSuchALibraryException(message, cause) {
    if (message === void 0)
      message = null;
    if (cause === void 0)
      cause = null;
    LibraryException.call(this, message, cause);
    this.name = 'NoSuchALibraryException';
  }
  NoSuchALibraryException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NoSuchALibraryException',
    interfaces: [LibraryException]
  };
  function NoSuchALibraryException_init(cause, $this) {
    $this = $this || Object.create(NoSuchALibraryException.prototype);
    NoSuchALibraryException.call($this, cause != null ? cause.toString() : null, cause);
    return $this;
  }
  function LibraryAliasedImpl(operators, theory, primitives, functions, alias) {
    LibraryImpl.call(this, operators, theory, primitives, functions);
    this.operators_xyggat$_0 = operators;
    this.theory_nkjvsr$_0 = theory;
    this.primitives_rpql42$_0 = primitives;
    this.functions_z2fsy9$_0 = functions;
    this.alias_1rgyhm$_0 = alias;
  }
  Object.defineProperty(LibraryAliasedImpl.prototype, 'operators', {
    get: function () {
      return this.operators_xyggat$_0;
    }
  });
  Object.defineProperty(LibraryAliasedImpl.prototype, 'theory', {
    get: function () {
      return this.theory_nkjvsr$_0;
    }
  });
  Object.defineProperty(LibraryAliasedImpl.prototype, 'primitives', {
    get: function () {
      return this.primitives_rpql42$_0;
    }
  });
  Object.defineProperty(LibraryAliasedImpl.prototype, 'functions', {
    get: function () {
      return this.functions_z2fsy9$_0;
    }
  });
  Object.defineProperty(LibraryAliasedImpl.prototype, 'alias', {
    get: function () {
      return this.alias_1rgyhm$_0;
    }
  });
  LibraryAliasedImpl.prototype.toString = function () {
    return "Library(alias='" + this.alias + "', operators=" + this.operators + ', theory=' + this.theory + ', primitives=' + this.primitives + ', functions=' + this.functions + ')';
  };
  LibraryAliasedImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LibraryAliasedImpl',
    interfaces: [AliasedLibrary, LibraryImpl]
  };
  function LibraryImpl(operators, theory, primitives, functions) {
    this.operators_2htnxk$_0 = operators;
    this.theory_ogcpl4$_0 = theory;
    this.primitives_y6ttin$_0 = primitives;
    this.functions_1duba4$_0 = functions;
  }
  Object.defineProperty(LibraryImpl.prototype, 'operators', {
    get: function () {
      return this.operators_2htnxk$_0;
    }
  });
  Object.defineProperty(LibraryImpl.prototype, 'theory', {
    get: function () {
      return this.theory_ogcpl4$_0;
    }
  });
  Object.defineProperty(LibraryImpl.prototype, 'primitives', {
    get: function () {
      return this.primitives_y6ttin$_0;
    }
  });
  Object.defineProperty(LibraryImpl.prototype, 'functions', {
    get: function () {
      return this.functions_1duba4$_0;
    }
  });
  LibraryImpl.prototype.equals = function (other) {
    var tmp$, tmp$_0, tmp$_1;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, LibraryImpl) ? tmp$_0 : throwCCE();
    if (!((tmp$_1 = this.operators) != null ? tmp$_1.equals(other.operators) : null))
      return false;
    if (!equals(this.theory, other.theory))
      return false;
    if (!equals(this.primitives, other.primitives))
      return false;
    if (!equals(this.functions, other.functions))
      return false;
    return true;
  };
  LibraryImpl.prototype.hashCode = function () {
    var result = this.operators.hashCode();
    result = (31 * result | 0) + hashCode(this.theory) | 0;
    result = (31 * result | 0) + hashCode(this.primitives) | 0;
    result = (31 * result | 0) + hashCode(this.functions) | 0;
    return result;
  };
  LibraryImpl.prototype.toString = function () {
    return 'Library(operators=' + this.operators + ', theory=' + this.theory + ', primitives=' + this.primitives + ', functions=' + this.functions + ')';
  };
  LibraryImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LibraryImpl',
    interfaces: [Library]
  };
  function CommonBuiltins() {
    CommonBuiltins_instance = this;
    this.$delegate_5jvnvh$_0 = Library$Companion_getInstance().of_yq3ll4$(OperatorSet.Companion.DEFAULT, CommonRules_getInstance().clauseDb, toMap_0(map(sequenceOf([ArithmeticEqual_getInstance(), ArithmeticGreaterThan_getInstance(), ArithmeticGreaterThanOrEqualTo_getInstance(), ArithmeticLowerThan_getInstance(), ArithmeticLowerThanOrEqualTo_getInstance(), ArithmeticNotEqual_getInstance(), Assert_getInstance(), AssertA_getInstance(), AssertZ_getInstance(), Atom_getInstance(), Atomic_getInstance(), Callable_getInstance(), Compound_getInstance(), EnsureExecutable_getInstance(), Float_getInstance(), Ground_getInstance(), Halt_getInstance(), Integer_getInstance(), Is_getInstance(), TermNotIdentical_getInstance(), Natural_getInstance(), NewLine_getInstance(), NonVar_getInstance(), NotUnifiableWith_getInstance(), Number_getInstance(), TermIdentical_getInstance(), UnifiesWith_getInstance(), Var_getInstance(), Write_getInstance()]), CommonBuiltins_init$lambda)), toMap_0(map(sequenceOf([AbsoluteValue_getInstance(), Addition_getInstance(), ArcTangent_getInstance(), BitwiseAnd_getInstance(), BitwiseComplement_getInstance(), BitwiseLeftShift_getInstance(), BitwiseOr_getInstance(), BitwiseRightShift_getInstance(), Ceiling_getInstance(), Cosine_getInstance(), Exponential_getInstance(), Exponentiation_getInstance(), ToFloat_getInstance(), FloatFractionalPart_getInstance(), FloatIntegerPart_getInstance(), FloatingPointDivision_getInstance(), Floor_getInstance(), IntegerDivision_getInstance(), Modulo_getInstance(), Multiplication_getInstance(), NaturalLogarithm_getInstance(), Remainder_getInstance(), Round_getInstance(), Sign_getInstance(), SignReversal_getInstance(), Sine_getInstance(), SquareRoot_getInstance(), Subtraction_getInstance(), Truncate_getInstance()]), CommonBuiltins_init$lambda_0)), 'prolog.lang');
  }
  Object.defineProperty(CommonBuiltins.prototype, 'alias', {
    get: function () {
      return this.$delegate_5jvnvh$_0.alias;
    }
  });
  Object.defineProperty(CommonBuiltins.prototype, 'functions', {
    get: function () {
      return this.$delegate_5jvnvh$_0.functions;
    }
  });
  Object.defineProperty(CommonBuiltins.prototype, 'operators', {
    get: function () {
      return this.$delegate_5jvnvh$_0.operators;
    }
  });
  Object.defineProperty(CommonBuiltins.prototype, 'primitives', {
    get: function () {
      return this.$delegate_5jvnvh$_0.primitives;
    }
  });
  Object.defineProperty(CommonBuiltins.prototype, 'theory', {
    get: function () {
      return this.$delegate_5jvnvh$_0.theory;
    }
  });
  CommonBuiltins.prototype.containsOperator = function (operator) {
    return this.$delegate_5jvnvh$_0.containsOperator(operator);
  };
  CommonBuiltins.prototype.containsSignature = function (signature) {
    return this.$delegate_5jvnvh$_0.containsSignature(signature);
  };
  CommonBuiltins.prototype.hasPrimitive = function (signature) {
    return this.$delegate_5jvnvh$_0.hasPrimitive(signature);
  };
  CommonBuiltins.prototype.hasProtected = function (signature) {
    return this.$delegate_5jvnvh$_0.hasProtected(signature);
  };
  function CommonBuiltins_init$lambda(it) {
    return to(it.signature, it.wrappedImplementation);
  }
  function CommonBuiltins_init$lambda_0(it) {
    return to(it.signature, it.wrappedImplementation);
  }
  CommonBuiltins.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'CommonBuiltins',
    interfaces: [AliasedLibrary]
  };
  var CommonBuiltins_instance = null;
  function CommonBuiltins_getInstance() {
    if (CommonBuiltins_instance === null) {
      new CommonBuiltins();
    }return CommonBuiltins_instance;
  }
  function CommonRules() {
    CommonRules_instance = this;
    this.wrappers = sequenceOf([Not_getInstance(), Arrow_getInstance(), Semicolon$If$Then_getInstance(), Semicolon$If$Else_getInstance(), Semicolon$Or$Left_getInstance(), Semicolon$Or$Right_getInstance(), Member$Base_getInstance(), Member$Recursive_getInstance()]);
  }
  function CommonRules$get_CommonRules$clauseDb$lambda(it) {
    return it.wrappedImplementation;
  }
  Object.defineProperty(CommonRules.prototype, 'clauseDb', {
    get: function () {
      return ClauseDatabase.Companion.ofSequence(map(this.wrappers, CommonRules$get_CommonRules$clauseDb$lambda));
    }
  });
  CommonRules.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'CommonRules',
    interfaces: []
  };
  var CommonRules_instance = null;
  function CommonRules_getInstance() {
    if (CommonRules_instance === null) {
      new CommonRules();
    }return CommonRules_instance;
  }
  function AbsoluteValue() {
    AbsoluteValue_instance = this;
    UnaryMathFunction.call(this, 'abs');
  }
  AbsoluteValue.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return Numeric.Companion.ofBigInteger(integer.value.absoluteValue);
  };
  AbsoluteValue.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return Numeric.Companion.ofBigDecimal(real.value.absoluteValue);
  };
  AbsoluteValue.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'AbsoluteValue',
    interfaces: [UnaryMathFunction]
  };
  var AbsoluteValue_instance = null;
  function AbsoluteValue_getInstance() {
    if (AbsoluteValue_instance === null) {
      new AbsoluteValue();
    }return AbsoluteValue_instance;
  }
  function Addition() {
    Addition_instance = this;
    BinaryMathFunction.call(this, '+');
  }
  Addition.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.plus(integer2.value));
  };
  Addition.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    return this.commonBehaviour_0(real.value, integer.decimalValue);
  };
  Addition.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    return this.commonBehaviour_0(integer.decimalValue, real.value);
  };
  Addition.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    return this.commonBehaviour_0(real1.value, real2.value);
  };
  Addition.prototype.commonBehaviour_0 = function (decimal1, decimal2) {
    return Numeric.Companion.ofBigDecimal(decimal1.plus(decimal2));
  };
  Addition.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Addition',
    interfaces: [BinaryMathFunction]
  };
  var Addition_instance = null;
  function Addition_getInstance() {
    if (Addition_instance === null) {
      new Addition();
    }return Addition_instance;
  }
  function ArcTangent() {
    ArcTangent_instance = this;
    UnaryMathFunction.call(this, 'atan');
  }
  ArcTangent.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  ArcTangent.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  ArcTangent.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$ = Numeric.Companion;
    var x = decimal.toDouble();
    return tmp$.ofDouble(Math_0.atan(x));
  };
  ArcTangent.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArcTangent',
    interfaces: [UnaryMathFunction]
  };
  var ArcTangent_instance = null;
  function ArcTangent_getInstance() {
    if (ArcTangent_instance === null) {
      new ArcTangent();
    }return ArcTangent_instance;
  }
  function BinaryMathFunction(name) {
    MathFunction_init_0(name, 2, void 0, this);
  }
  BinaryMathFunction.prototype.uncheckedImplementation_v22sja$ = function (request) {
    var tmp$;
    var term1 = first_0(request.arguments);
    var term2 = last_0(request.arguments);
    if (Kotlin.isType(term1, Integer) && Kotlin.isType(term2, Integer))
      tmp$ = this.mathFunction_g923bc$(term1, term2, request.context);
    else if (Kotlin.isType(term1, Real) && Kotlin.isType(term2, Integer))
      tmp$ = this.mathFunction_rceaxu$(term1, term2, request.context);
    else if (Kotlin.isType(term1, Integer) && Kotlin.isType(term2, Real))
      tmp$ = this.mathFunction_z4a9x8$(term1, term2, request.context);
    else if (Kotlin.isType(term1, Real) && Kotlin.isType(term2, Real))
      tmp$ = this.mathFunction_7hfyty$(term1, term2, request.context);
    else
      throw IllegalStateException_init('One, or both, of the two terms (`' + term1 + '`, `' + term2 + '`) is neither an Integer nor a Real');
    return request.replyWith(tmp$);
  };
  BinaryMathFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BinaryMathFunction',
    interfaces: [MathFunction]
  };
  function BitwiseAnd() {
    BitwiseAnd_instance = this;
    IntegersBinaryMathFunction.call(this, '/\\');
  }
  BitwiseAnd.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.and(integer2.value));
  };
  BitwiseAnd.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BitwiseAnd',
    interfaces: [IntegersBinaryMathFunction]
  };
  var BitwiseAnd_instance = null;
  function BitwiseAnd_getInstance() {
    if (BitwiseAnd_instance === null) {
      new BitwiseAnd();
    }return BitwiseAnd_instance;
  }
  function BitwiseComplement() {
    BitwiseComplement_instance = this;
    UnaryMathFunction.call(this, '\\');
  }
  BitwiseComplement.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return Numeric.Companion.ofBigInteger(integer.value.not());
  };
  BitwiseComplement.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return MathFunction$Companion_getInstance().throwTypeErrorBecauseOnlyIntegersAccepted_0(this.signature.name, real, context);
  };
  BitwiseComplement.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BitwiseComplement',
    interfaces: [UnaryMathFunction]
  };
  var BitwiseComplement_instance = null;
  function BitwiseComplement_getInstance() {
    if (BitwiseComplement_instance === null) {
      new BitwiseComplement();
    }return BitwiseComplement_instance;
  }
  function BitwiseLeftShift() {
    BitwiseLeftShift_instance = this;
    IntegersBinaryMathFunction.call(this, '<<');
  }
  BitwiseLeftShift.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.shl(integer2.value.toInt()));
  };
  BitwiseLeftShift.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BitwiseLeftShift',
    interfaces: [IntegersBinaryMathFunction]
  };
  var BitwiseLeftShift_instance = null;
  function BitwiseLeftShift_getInstance() {
    if (BitwiseLeftShift_instance === null) {
      new BitwiseLeftShift();
    }return BitwiseLeftShift_instance;
  }
  function BitwiseOr() {
    BitwiseOr_instance = this;
    IntegersBinaryMathFunction.call(this, '\\/');
  }
  BitwiseOr.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.or(integer2.value));
  };
  BitwiseOr.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BitwiseOr',
    interfaces: [IntegersBinaryMathFunction]
  };
  var BitwiseOr_instance = null;
  function BitwiseOr_getInstance() {
    if (BitwiseOr_instance === null) {
      new BitwiseOr();
    }return BitwiseOr_instance;
  }
  function BitwiseRightShift() {
    BitwiseRightShift_instance = this;
    IntegersBinaryMathFunction.call(this, '>>');
  }
  BitwiseRightShift.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.shr(integer2.value.toInt()));
  };
  BitwiseRightShift.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BitwiseRightShift',
    interfaces: [IntegersBinaryMathFunction]
  };
  var BitwiseRightShift_instance = null;
  function BitwiseRightShift_getInstance() {
    if (BitwiseRightShift_instance === null) {
      new BitwiseRightShift();
    }return BitwiseRightShift_instance;
  }
  function Ceiling() {
    Ceiling_instance = this;
    UnaryMathFunction.call(this, 'ceiling');
  }
  Ceiling.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return integer;
  };
  Ceiling.prototype.mathFunction_hyv4ll$ = function (real, context) {
    var tmp$ = Numeric.Companion;
    var x = real.value.toDouble();
    return tmp$.ofLong(Kotlin.Long.fromNumber(Math_0.ceil(x)));
  };
  Ceiling.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Ceiling',
    interfaces: [UnaryMathFunction]
  };
  var Ceiling_instance = null;
  function Ceiling_getInstance() {
    if (Ceiling_instance === null) {
      new Ceiling();
    }return Ceiling_instance;
  }
  function Cosine() {
    Cosine_instance = this;
    UnaryMathFunction.call(this, 'cos');
  }
  Cosine.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Cosine.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Cosine.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$ = Numeric.Companion;
    var x = decimal.toDouble();
    return tmp$.ofDouble(Math_0.cos(x));
  };
  Cosine.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Cosine',
    interfaces: [UnaryMathFunction]
  };
  var Cosine_instance = null;
  function Cosine_getInstance() {
    if (Cosine_instance === null) {
      new Cosine();
    }return Cosine_instance;
  }
  function Exponential() {
    Exponential_instance = this;
    UnaryMathFunction.call(this, 'exp');
  }
  Exponential.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Exponential.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Exponential.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$ = Numeric.Companion;
    var x = decimal.toDouble();
    return tmp$.ofDouble(Math_0.exp(x));
  };
  Exponential.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Exponential',
    interfaces: [UnaryMathFunction]
  };
  var Exponential_instance = null;
  function Exponential_getInstance() {
    if (Exponential_instance === null) {
      new Exponential();
    }return Exponential_instance;
  }
  function Exponentiation() {
    Exponentiation_instance = this;
    BinaryMathFunction.call(this, '**');
  }
  Exponentiation.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    var tmp$;
    return (tmp$ = this.returnOneOfBothZero_0(integer1, integer2)) != null ? tmp$ : Real.Companion.ofBigDecimal(integer1.decimalValue.pow(integer2.value.toInt()));
  };
  Exponentiation.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    var tmp$;
    return (tmp$ = this.returnOneOfBothZero_0(real, integer)) != null ? tmp$ : Real.Companion.ofBigDecimal(real.value.pow(integer.value.toInt()));
  };
  Exponentiation.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.returnOneOfBothZero_0(integer, real)) != null)
      tmp$_0 = tmp$;
    else {
      var tmp$_1 = Real.Companion;
      var $receiver = integer.value.toDouble();
      var x = real.value.toDouble();
      tmp$_0 = tmp$_1.ofDouble(Math_0.pow($receiver, x));
    }
    return tmp$_0;
  };
  Exponentiation.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    var tmp$;
    var tmp$_0;
    if ((tmp$ = this.returnOneOfBothZero_0(real1, real2)) != null)
      tmp$_0 = tmp$;
    else {
      var tmp$_1 = Real.Companion;
      var $receiver = real1.value.toDouble();
      var x = real2.value.toDouble();
      tmp$_0 = tmp$_1.ofDouble(Math_0.pow($receiver, x));
    }
    return tmp$_0;
  };
  Exponentiation.prototype.returnOneOfBothZero_0 = function (numeric1, numeric2) {
    var tmp$, tmp$_0;
    if (((tmp$ = numeric1.decimalValue) != null ? tmp$.equals(BigDecimal.Companion.ZERO) : null) && ((tmp$_0 = numeric2.decimalValue) != null ? tmp$_0.equals(BigDecimal.Companion.ZERO) : null))
      return Numeric.Companion.ofDouble(1.0);
    else
      return null;
  };
  Exponentiation.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Exponentiation',
    interfaces: [BinaryMathFunction]
  };
  var Exponentiation_instance = null;
  function Exponentiation_getInstance() {
    if (Exponentiation_instance === null) {
      new Exponentiation();
    }return Exponentiation_instance;
  }
  function FloatFractionalPart() {
    FloatFractionalPart_instance = this;
    UnaryMathFunction.call(this, 'float_fractional_part');
  }
  FloatFractionalPart.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  FloatFractionalPart.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.decimalValue);
  };
  FloatFractionalPart.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$, tmp$_0;
    tmp$_0 = Numeric.Companion;
    if (decimal.compareTo_11rb$(BigDecimal.Companion.ZERO) >= 0)
      tmp$ = decimal.minus(decimal.setScaleRounding(0, RoundingMode.FLOOR));
    else
      tmp$ = this.commonBehaviour_0(decimal.unaryMinus()).decimalValue.unaryMinus();
    return tmp$_0.ofBigDecimal(tmp$);
  };
  FloatFractionalPart.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'FloatFractionalPart',
    interfaces: [UnaryMathFunction]
  };
  var FloatFractionalPart_instance = null;
  function FloatFractionalPart_getInstance() {
    if (FloatFractionalPart_instance === null) {
      new FloatFractionalPart();
    }return FloatFractionalPart_instance;
  }
  function FloatIntegerPart() {
    FloatIntegerPart_instance = this;
    UnaryMathFunction.call(this, 'float_integer_part');
  }
  FloatIntegerPart.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  FloatIntegerPart.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.decimalValue);
  };
  FloatIntegerPart.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$, tmp$_0;
    tmp$_0 = Numeric.Companion;
    if (decimal.compareTo_11rb$(BigDecimal.Companion.ZERO) >= 0)
      tmp$ = decimal.setScaleRounding(0, RoundingMode.FLOOR);
    else
      tmp$ = this.commonBehaviour_0(decimal.unaryMinus()).decimalValue.unaryMinus();
    return tmp$_0.ofBigDecimal(tmp$);
  };
  FloatIntegerPart.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'FloatIntegerPart',
    interfaces: [UnaryMathFunction]
  };
  var FloatIntegerPart_instance = null;
  function FloatIntegerPart_getInstance() {
    if (FloatIntegerPart_instance === null) {
      new FloatIntegerPart();
    }return FloatIntegerPart_instance;
  }
  function FloatingPointDivision() {
    FloatingPointDivision_instance = this;
    BinaryMathFunction.call(this, '/');
  }
  FloatingPointDivision.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return this.commonBehaviour_0(integer1.decimalValue, integer2.decimalValue, context);
  };
  FloatingPointDivision.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    return this.commonBehaviour_0(real.value, integer.decimalValue, context);
  };
  FloatingPointDivision.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    return this.commonBehaviour_0(integer.decimalValue, real.value, context);
  };
  FloatingPointDivision.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    return this.commonBehaviour_0(real1.value, real2.value, context);
  };
  FloatingPointDivision.prototype.commonBehaviour_0 = function (dividend, divisor, context) {
    if (equals(divisor, BigDecimal.Companion.ZERO))
      return MathFunction$Companion_getInstance().throwZeroDivisorError_0(context);
    else
      return Numeric.Companion.ofBigDecimal(ensureNotNull(dividend.divWithContext(divisor, new MathContext())));
  };
  FloatingPointDivision.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'FloatingPointDivision',
    interfaces: [BinaryMathFunction]
  };
  var FloatingPointDivision_instance = null;
  function FloatingPointDivision_getInstance() {
    if (FloatingPointDivision_instance === null) {
      new FloatingPointDivision();
    }return FloatingPointDivision_instance;
  }
  function Floor() {
    Floor_instance = this;
    UnaryMathFunction.call(this, 'floor');
  }
  Floor.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Floor.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Floor.prototype.commonBehaviour_0 = function (decimal) {
    return Numeric.Companion.ofBigInteger(decimal.setScaleRounding(0, RoundingMode.FLOOR).toBigInteger());
  };
  Floor.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Floor',
    interfaces: [UnaryMathFunction]
  };
  var Floor_instance = null;
  function Floor_getInstance() {
    if (Floor_instance === null) {
      new Floor();
    }return Floor_instance;
  }
  function IntegerDivision() {
    IntegerDivision_instance = this;
    IntegersBinaryMathFunction.call(this, '//');
  }
  IntegerDivision.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    if (equals(integer2.value, BigInteger.Companion.ZERO))
      return MathFunction$Companion_getInstance().throwZeroDivisorError_0(context);
    else
      return Numeric.Companion.ofBigInteger(integer1.value.div(integer2.value));
  };
  IntegerDivision.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'IntegerDivision',
    interfaces: [IntegersBinaryMathFunction]
  };
  var IntegerDivision_instance = null;
  function IntegerDivision_getInstance() {
    if (IntegerDivision_instance === null) {
      new IntegerDivision();
    }return IntegerDivision_instance;
  }
  function IntegersBinaryMathFunction(name) {
    BinaryMathFunction.call(this, name);
  }
  IntegersBinaryMathFunction.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    return MathFunction$Companion_getInstance().throwTypeErrorBecauseOnlyIntegersAccepted_0(this.signature.name, real, context);
  };
  IntegersBinaryMathFunction.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    return MathFunction$Companion_getInstance().throwTypeErrorBecauseOnlyIntegersAccepted_0(this.signature.name, real, context);
  };
  IntegersBinaryMathFunction.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    return MathFunction$Companion_getInstance().throwTypeErrorBecauseOnlyIntegersAccepted_0(this.signature.name, real1, context);
  };
  IntegersBinaryMathFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IntegersBinaryMathFunction',
    interfaces: [BinaryMathFunction]
  };
  function MathFunction() {
    MathFunction$Companion_getInstance();
  }
  function MathFunction$Companion() {
    MathFunction$Companion_instance = this;
  }
  MathFunction$Companion.prototype.throwIntOverflowError_0 = function (context) {
    throw new EvaluationError(void 0, void 0, context, EvaluationError$Type$INT_OVERFLOW_getInstance());
  };
  MathFunction$Companion.prototype.throwFloatOverflowError_0 = function (context) {
    throw new EvaluationError(void 0, void 0, context, EvaluationError$Type$FLOAT_OVERFLOW_getInstance());
  };
  MathFunction$Companion.prototype.throwUnderflowError_0 = function (context) {
    throw new EvaluationError(void 0, void 0, context, EvaluationError$Type$UNDERFLOW_getInstance());
  };
  MathFunction$Companion.prototype.throwZeroDivisorError_0 = function (context) {
    throw new EvaluationError(void 0, void 0, context, EvaluationError$Type$ZERO_DIVISOR_getInstance());
  };
  MathFunction$Companion.prototype.throwUndefinedError_0 = function (context) {
    throw new EvaluationError(void 0, void 0, context, EvaluationError$Type$UNDEFINED_getInstance());
  };
  MathFunction$Companion.prototype.throwTypeErrorBecauseOnlyIntegersAccepted_0 = function (opName, actualValue, context) {
    throw new TypeError('Operator `' + opName + '` accepts only integers!', void 0, context, TypeError$Expected$Companion_getInstance().INTEGER, actualValue);
  };
  MathFunction$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MathFunction$Companion_instance = null;
  function MathFunction$Companion_getInstance() {
    if (MathFunction$Companion_instance === null) {
      new MathFunction$Companion();
    }return MathFunction$Companion_instance;
  }
  MathFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MathFunction',
    interfaces: [FunctionWrapper]
  };
  function MathFunction_init(signature, $this) {
    $this = $this || Object.create(MathFunction.prototype);
    FunctionWrapper_init(signature, $this);
    MathFunction.call($this);
    return $this;
  }
  function MathFunction_init_0(name, arity, vararg, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(MathFunction.prototype);
    FunctionWrapper_init_0(name, arity, vararg, $this);
    MathFunction.call($this);
    return $this;
  }
  function Modulo() {
    Modulo_instance = this;
    IntegersBinaryMathFunction.call(this, 'mod');
  }
  Modulo.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    if (equals(integer2.value, BigInteger.Companion.ZERO))
      return MathFunction$Companion_getInstance().throwZeroDivisorError_0(context);
    else
      return Numeric.Companion.ofBigInteger(integer1.value.reminder(integer2.value));
  };
  Modulo.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Modulo',
    interfaces: [IntegersBinaryMathFunction]
  };
  var Modulo_instance = null;
  function Modulo_getInstance() {
    if (Modulo_instance === null) {
      new Modulo();
    }return Modulo_instance;
  }
  function Multiplication() {
    Multiplication_instance = this;
    BinaryMathFunction.call(this, '*');
  }
  Multiplication.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.times(integer2.value));
  };
  Multiplication.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    return this.commonBehaviour_0(real.value, integer.decimalValue);
  };
  Multiplication.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    return this.commonBehaviour_0(integer.decimalValue, real.value);
  };
  Multiplication.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    return this.commonBehaviour_0(real1.value, real2.value);
  };
  Multiplication.prototype.commonBehaviour_0 = function (decimal1, decimal2) {
    return Numeric.Companion.ofBigDecimal(decimal1.times(decimal2));
  };
  Multiplication.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Multiplication',
    interfaces: [BinaryMathFunction]
  };
  var Multiplication_instance = null;
  function Multiplication_getInstance() {
    if (Multiplication_instance === null) {
      new Multiplication();
    }return Multiplication_instance;
  }
  function NaturalLogarithm() {
    NaturalLogarithm_instance = this;
    UnaryMathFunction.call(this, 'log');
  }
  NaturalLogarithm.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  NaturalLogarithm.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  NaturalLogarithm.prototype.commonBehaviour_0 = function (decimal) {
    return Numeric.Companion.ofDouble(log(decimal.toDouble(), math.E));
  };
  NaturalLogarithm.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NaturalLogarithm',
    interfaces: [UnaryMathFunction]
  };
  var NaturalLogarithm_instance = null;
  function NaturalLogarithm_getInstance() {
    if (NaturalLogarithm_instance === null) {
      new NaturalLogarithm();
    }return NaturalLogarithm_instance;
  }
  function NullaryMathFunction(name) {
    MathFunction_init_0(name, 0, void 0, this);
  }
  NullaryMathFunction.prototype.uncheckedImplementation_v22sja$ = function (request) {
    return request.replyWith(this.mathFunction_3zlup4$(request.context));
  };
  NullaryMathFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NullaryMathFunction',
    interfaces: [MathFunction]
  };
  function Remainder() {
    Remainder_instance = this;
    IntegersBinaryMathFunction.call(this, 'rem');
  }
  Remainder.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    if (equals(integer2.value, BigInteger.Companion.ZERO))
      return MathFunction$Companion_getInstance().throwZeroDivisorError_0(context);
    else
      return Numeric.Companion.ofBigInteger(integer1.value.rem(integer2.value));
  };
  Remainder.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Remainder',
    interfaces: [IntegersBinaryMathFunction]
  };
  var Remainder_instance = null;
  function Remainder_getInstance() {
    if (Remainder_instance === null) {
      new Remainder();
    }return Remainder_instance;
  }
  function Round() {
    Round_instance = this;
    UnaryMathFunction.call(this, 'round');
  }
  Round.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Round.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Round.prototype.commonBehaviour_0 = function (decimal) {
    return Numeric.Companion.ofBigInteger(decimal.setScaleRounding(0, RoundingMode.HALF_UP).toBigInteger());
  };
  Round.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Round',
    interfaces: [UnaryMathFunction]
  };
  var Round_instance = null;
  function Round_getInstance() {
    if (Round_instance === null) {
      new Round();
    }return Round_instance;
  }
  function Sign() {
    Sign_instance = this;
    UnaryMathFunction.call(this, 'sign');
  }
  Sign.prototype.mathFunction_s4eysd$ = function (integer, context) {
    var tmp$, tmp$_0;
    tmp$_0 = Integer.Companion;
    var $receiver = integer.value.signum;
    return tmp$_0.ofInt((tmp$ = $receiver !== 0 ? $receiver : null) != null ? tmp$ : 1);
  };
  Sign.prototype.mathFunction_hyv4ll$ = function (real, context) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$_1 = Real.Companion;
    var $receiver = real.value.signum;
    return tmp$_1.ofDouble((tmp$_0 = (tmp$ = $receiver !== 0 ? $receiver : null) != null ? tmp$ : null) != null ? tmp$_0 : 1.0);
  };
  Sign.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Sign',
    interfaces: [UnaryMathFunction]
  };
  var Sign_instance = null;
  function Sign_getInstance() {
    if (Sign_instance === null) {
      new Sign();
    }return Sign_instance;
  }
  function SignReversal() {
    SignReversal_instance = this;
    UnaryMathFunction.call(this, '-');
  }
  SignReversal.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return Integer.Companion.ofBigInteger(integer.value.unaryMinus());
  };
  SignReversal.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return Real.Companion.ofBigDecimal(real.value.unaryMinus());
  };
  SignReversal.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SignReversal',
    interfaces: [UnaryMathFunction]
  };
  var SignReversal_instance = null;
  function SignReversal_getInstance() {
    if (SignReversal_instance === null) {
      new SignReversal();
    }return SignReversal_instance;
  }
  function Sine() {
    Sine_instance = this;
    UnaryMathFunction.call(this, 'sin');
  }
  Sine.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Sine.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Sine.prototype.commonBehaviour_0 = function (decimal) {
    var tmp$ = Numeric.Companion;
    var x = decimal.toDouble();
    return tmp$.ofDouble(Math_0.sin(x));
  };
  Sine.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Sine',
    interfaces: [UnaryMathFunction]
  };
  var Sine_instance = null;
  function Sine_getInstance() {
    if (Sine_instance === null) {
      new Sine();
    }return Sine_instance;
  }
  function SquareRoot() {
    SquareRoot_instance = this;
    UnaryMathFunction.call(this, 'sqrt');
  }
  SquareRoot.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  SquareRoot.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  SquareRoot.prototype.commonBehaviour_0 = function (decimal) {
    return Numeric.Companion.ofBigDecimal(decimal.sqrt());
  };
  SquareRoot.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SquareRoot',
    interfaces: [UnaryMathFunction]
  };
  var SquareRoot_instance = null;
  function SquareRoot_getInstance() {
    if (SquareRoot_instance === null) {
      new SquareRoot();
    }return SquareRoot_instance;
  }
  function Subtraction() {
    Subtraction_instance = this;
    BinaryMathFunction.call(this, '-');
  }
  Subtraction.prototype.mathFunction_g923bc$ = function (integer1, integer2, context) {
    return Numeric.Companion.ofBigInteger(integer1.value.minus(integer2.value));
  };
  Subtraction.prototype.mathFunction_rceaxu$ = function (real, integer, context) {
    return this.commonBehaviour_0(real.value, integer.decimalValue);
  };
  Subtraction.prototype.mathFunction_z4a9x8$ = function (integer, real, context) {
    return this.commonBehaviour_0(integer.decimalValue, real.value);
  };
  Subtraction.prototype.mathFunction_7hfyty$ = function (real1, real2, context) {
    return this.commonBehaviour_0(real1.value, real2.value);
  };
  Subtraction.prototype.commonBehaviour_0 = function (decimal1, decimal2) {
    return Numeric.Companion.ofBigDecimal(decimal1.minus(decimal2));
  };
  Subtraction.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Subtraction',
    interfaces: [BinaryMathFunction]
  };
  var Subtraction_instance = null;
  function Subtraction_getInstance() {
    if (Subtraction_instance === null) {
      new Subtraction();
    }return Subtraction_instance;
  }
  function ToFloat() {
    ToFloat_instance = this;
    UnaryMathFunction.call(this, 'float');
  }
  ToFloat.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer);
  };
  ToFloat.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real);
  };
  ToFloat.prototype.commonBehaviour_0 = function (numeric) {
    return Numeric.Companion.ofBigDecimal(numeric.decimalValue);
  };
  ToFloat.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ToFloat',
    interfaces: [UnaryMathFunction]
  };
  var ToFloat_instance = null;
  function ToFloat_getInstance() {
    if (ToFloat_instance === null) {
      new ToFloat();
    }return ToFloat_instance;
  }
  function Truncate() {
    Truncate_instance = this;
    UnaryMathFunction.call(this, 'truncate');
  }
  Truncate.prototype.mathFunction_s4eysd$ = function (integer, context) {
    return this.commonBehaviour_0(integer.decimalValue);
  };
  Truncate.prototype.mathFunction_hyv4ll$ = function (real, context) {
    return this.commonBehaviour_0(real.value);
  };
  Truncate.prototype.commonBehaviour_0 = function (decimal) {
    return Numeric.Companion.ofBigInteger(decimal.setScaleRounding(0, RoundingMode.DOWN).toBigInteger());
  };
  Truncate.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Truncate',
    interfaces: [UnaryMathFunction]
  };
  var Truncate_instance = null;
  function Truncate_getInstance() {
    if (Truncate_instance === null) {
      new Truncate();
    }return Truncate_instance;
  }
  function UnaryMathFunction(name) {
    MathFunction_init_0(name, 1, void 0, this);
  }
  UnaryMathFunction.prototype.uncheckedImplementation_v22sja$ = function (request) {
    var tmp$;
    var term = single_0(request.arguments);
    if (Kotlin.isType(term, Integer))
      tmp$ = this.mathFunction_s4eysd$(term, request.context);
    else if (Kotlin.isType(term, Real))
      tmp$ = this.mathFunction_hyv4ll$(term, request.context);
    else
      tmp$ = term;
    return request.replyWith(tmp$);
  };
  UnaryMathFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UnaryMathFunction',
    interfaces: [MathFunction]
  };
  function MagicCut() {
    MagicCut_instance = this;
    this.$delegate_g3cy72$_0 = Atom.Companion.of('!');
    this.FUNCTOR = '!MagicCut!';
  }
  Object.defineProperty(MagicCut.prototype, 'isConstant', {
    get: function () {
      return Kotlin.callGetter(this, Atom.prototype, 'isConstant');
    }
  });
  MagicCut.prototype.toString = function () {
    return this.FUNCTOR;
  };
  MagicCut.prototype.freshCopy = function () {
    return this;
  };
  MagicCut.prototype.freshCopyFromScope = function (scope) {
    return this;
  };
  MagicCut.prototype.applySubstitution = function (substitution) {
    return this;
  };
  MagicCut.prototype.getSubstituted = function (substitution, substitutions) {
    return this;
  };
  MagicCut.prototype.apply = function (substitution, substitutions) {
    return this;
  };
  MagicCut.prototype.accept = function (visitor) {
    return visitor.visitToAtom(this);
  };
  Object.defineProperty(MagicCut.prototype, 'args', {
    get: function () {
      return this.$delegate_g3cy72$_0.args;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'argsList', {
    get: function () {
      return this.$delegate_g3cy72$_0.argsList;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'argsSequence', {
    get: function () {
      return this.$delegate_g3cy72$_0.argsSequence;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'arity', {
    get: function () {
      return this.$delegate_g3cy72$_0.arity;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'functor', {
    get: function () {
      return this.$delegate_g3cy72$_0.functor;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'indicator', {
    get: function () {
      return this.$delegate_g3cy72$_0.indicator;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isAtom', {
    get: function () {
      return this.$delegate_g3cy72$_0.isAtom;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isBound', {
    get: function () {
      return this.$delegate_g3cy72$_0.isBound;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isClause', {
    get: function () {
      return this.$delegate_g3cy72$_0.isClause;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isCons', {
    get: function () {
      return this.$delegate_g3cy72$_0.isCons;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isDirective', {
    get: function () {
      return this.$delegate_g3cy72$_0.isDirective;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isEmptyList', {
    get: function () {
      return this.$delegate_g3cy72$_0.isEmptyList;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isEmptySet', {
    get: function () {
      return this.$delegate_g3cy72$_0.isEmptySet;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isFact', {
    get: function () {
      return this.$delegate_g3cy72$_0.isFact;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isFail', {
    get: function () {
      return this.$delegate_g3cy72$_0.isFail;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isFunctorWellFormed', {
    get: function () {
      return this.$delegate_g3cy72$_0.isFunctorWellFormed;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isGround', {
    get: function () {
      return this.$delegate_g3cy72$_0.isGround;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isIndicator', {
    get: function () {
      return this.$delegate_g3cy72$_0.isIndicator;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isInt', {
    get: function () {
      return this.$delegate_g3cy72$_0.isInt;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isList', {
    get: function () {
      return this.$delegate_g3cy72$_0.isList;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isNumber', {
    get: function () {
      return this.$delegate_g3cy72$_0.isNumber;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isReal', {
    get: function () {
      return this.$delegate_g3cy72$_0.isReal;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isRule', {
    get: function () {
      return this.$delegate_g3cy72$_0.isRule;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isSet', {
    get: function () {
      return this.$delegate_g3cy72$_0.isSet;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isStruct', {
    get: function () {
      return this.$delegate_g3cy72$_0.isStruct;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isTrue', {
    get: function () {
      return this.$delegate_g3cy72$_0.isTrue;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isTuple', {
    get: function () {
      return this.$delegate_g3cy72$_0.isTuple;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'isVariable', {
    get: function () {
      return this.$delegate_g3cy72$_0.isVariable;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'value', {
    get: function () {
      return this.$delegate_g3cy72$_0.value;
    }
  });
  Object.defineProperty(MagicCut.prototype, 'variables', {
    get: function () {
      return this.$delegate_g3cy72$_0.variables;
    }
  });
  MagicCut.prototype.as_6ddzm9$ = function () {
    return this.$delegate_g3cy72$_0.as_6ddzm9$();
  };
  MagicCut.prototype.castTo_6ddzm9$ = function () {
    return this.$delegate_g3cy72$_0.castTo_6ddzm9$();
  };
  MagicCut.prototype.equals = function (other) {
    return this.$delegate_g3cy72$_0.equals(other);
  };
  MagicCut.prototype.get = function (index) {
    return this.$delegate_g3cy72$_0.get(index);
  };
  MagicCut.prototype.getArgAt = function (index) {
    return this.$delegate_g3cy72$_0.getArgAt(index);
  };
  MagicCut.prototype.hashCode = function () {
    return this.$delegate_g3cy72$_0.hashCode();
  };
  MagicCut.prototype.structurallyEquals = function (other) {
    return this.$delegate_g3cy72$_0.structurallyEquals(other);
  };
  MagicCut.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'MagicCut',
    interfaces: [Atom]
  };
  var MagicCut_instance = null;
  function MagicCut_getInstance() {
    if (MagicCut_instance === null) {
      new MagicCut();
    }return MagicCut_instance;
  }
  function MagicTerm() {
  }
  MagicTerm.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'MagicTerm',
    interfaces: [Term]
  };
  function AbstractAssert(suffix, before) {
    SideEffect1.call(this, 'assert' + suffix);
    this.before_yyuukk$_0 = before;
  }
  AbstractAssert.prototype.accept_39blfx$ = function (request, term) {
    var $receiver = PrimitiveWrapper$Companion_getInstance().ensuringArgumentIsStruct_ki3tsl$(request, 0);
    var tmp$ = void 0;
    var tmp$_0 = void 0;
    var tmp$_1 = void 0;
    var tmp$_2 = void 0;
    var $receiver_0 = $receiver.context.dynamicKb;
    var block$result;
    var tmp$_3, tmp$_4;
    if (this.before_yyuukk$_0) {
      block$result = $receiver_0.assertAFact(Kotlin.isType(tmp$_3 = term, Struct) ? tmp$_3 : throwCCE());
    } else {
      block$result = $receiver_0.assertZFact(Kotlin.isType(tmp$_4 = term, Struct) ? tmp$_4 : throwCCE());
    }
    return $receiver.replySuccess(tmp$, tmp$_0, tmp$_1, tmp$_2, block$result);
  };
  AbstractAssert.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractAssert',
    interfaces: [SideEffect1]
  };
  function ArithmeticEqual() {
    ArithmeticEqual_instance = this;
    ArithmeticRelation.call(this, '=:=');
  }
  ArithmeticEqual.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) === 0;
  };
  ArithmeticEqual.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticEqual',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticEqual_instance = null;
  function ArithmeticEqual_getInstance() {
    if (ArithmeticEqual_instance === null) {
      new ArithmeticEqual();
    }return ArithmeticEqual_instance;
  }
  function ArithmeticGreaterThan() {
    ArithmeticGreaterThan_instance = this;
    ArithmeticRelation.call(this, '>');
  }
  ArithmeticGreaterThan.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) > 0;
  };
  ArithmeticGreaterThan.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticGreaterThan',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticGreaterThan_instance = null;
  function ArithmeticGreaterThan_getInstance() {
    if (ArithmeticGreaterThan_instance === null) {
      new ArithmeticGreaterThan();
    }return ArithmeticGreaterThan_instance;
  }
  function ArithmeticGreaterThanOrEqualTo() {
    ArithmeticGreaterThanOrEqualTo_instance = this;
    ArithmeticRelation.call(this, '>=');
  }
  ArithmeticGreaterThanOrEqualTo.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) >= 0;
  };
  ArithmeticGreaterThanOrEqualTo.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticGreaterThanOrEqualTo',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticGreaterThanOrEqualTo_instance = null;
  function ArithmeticGreaterThanOrEqualTo_getInstance() {
    if (ArithmeticGreaterThanOrEqualTo_instance === null) {
      new ArithmeticGreaterThanOrEqualTo();
    }return ArithmeticGreaterThanOrEqualTo_instance;
  }
  function ArithmeticLowerThan() {
    ArithmeticLowerThan_instance = this;
    ArithmeticRelation.call(this, '<');
  }
  ArithmeticLowerThan.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) < 0;
  };
  ArithmeticLowerThan.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticLowerThan',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticLowerThan_instance = null;
  function ArithmeticLowerThan_getInstance() {
    if (ArithmeticLowerThan_instance === null) {
      new ArithmeticLowerThan();
    }return ArithmeticLowerThan_instance;
  }
  function ArithmeticLowerThanOrEqualTo() {
    ArithmeticLowerThanOrEqualTo_instance = this;
    ArithmeticRelation.call(this, '=<');
  }
  ArithmeticLowerThanOrEqualTo.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) <= 0;
  };
  ArithmeticLowerThanOrEqualTo.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticLowerThanOrEqualTo',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticLowerThanOrEqualTo_instance = null;
  function ArithmeticLowerThanOrEqualTo_getInstance() {
    if (ArithmeticLowerThanOrEqualTo_instance === null) {
      new ArithmeticLowerThanOrEqualTo();
    }return ArithmeticLowerThanOrEqualTo_instance;
  }
  function ArithmeticNotEqual() {
    ArithmeticNotEqual_instance = this;
    ArithmeticRelation.call(this, '=\\=');
  }
  ArithmeticNotEqual.prototype.arithmeticRelation_s8so2c$ = function (x, y) {
    return x.compareTo_11rb$(y) !== 0;
  };
  ArithmeticNotEqual.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ArithmeticNotEqual',
    interfaces: [ArithmeticRelation]
  };
  var ArithmeticNotEqual_instance = null;
  function ArithmeticNotEqual_getInstance() {
    if (ArithmeticNotEqual_instance === null) {
      new ArithmeticNotEqual();
    }return ArithmeticNotEqual_instance;
  }
  function ArithmeticRelation(operator) {
    BinaryRelation.call(this, operator);
  }
  ArithmeticRelation.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequenceOf([this.computeSingleResponse_hysdmz$(PrimitiveWrapper$Companion_getInstance().ensuringAllArgumentsAreInstantiated_rcoxxl$(request))]);
  };
  ArithmeticRelation.prototype.computeSingleResponse_hysdmz$ = function ($receiver) {
    var it = new ArithmeticEvaluator($receiver.context);
    return $receiver.replyWithCondition(this.relationWithoutSideEffects_gf3qo6$($receiver.arguments.get_za3lpa$(0).accept(it), $receiver.arguments.get_za3lpa$(1).accept(it)));
  };
  ArithmeticRelation.prototype.relationWithoutSideEffects_gf3qo6$ = function (x, y) {
    var tmp$, tmp$_0;
    return this.arithmeticRelation_s8so2c$(Kotlin.isType(tmp$ = x, Numeric) ? tmp$ : throwCCE(), Kotlin.isType(tmp$_0 = y, Numeric) ? tmp$_0 : throwCCE());
  };
  ArithmeticRelation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ArithmeticRelation',
    interfaces: [BinaryRelation]
  };
  function Assert() {
    Assert_instance = this;
    AbstractAssert.call(this, '', false);
  }
  Assert.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Assert',
    interfaces: [AbstractAssert]
  };
  var Assert_instance = null;
  function Assert_getInstance() {
    if (Assert_instance === null) {
      new Assert();
    }return Assert_instance;
  }
  function AssertA() {
    AssertA_instance = this;
    AbstractAssert.call(this, 'a', true);
  }
  AssertA.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'AssertA',
    interfaces: [AbstractAssert]
  };
  var AssertA_instance = null;
  function AssertA_getInstance() {
    if (AssertA_instance === null) {
      new AssertA();
    }return AssertA_instance;
  }
  function AssertZ() {
    AssertZ_instance = this;
    AbstractAssert.call(this, 'z', false);
  }
  AssertZ.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'AssertZ',
    interfaces: [AbstractAssert]
  };
  var AssertZ_instance = null;
  function AssertZ_getInstance() {
    if (AssertZ_instance === null) {
      new AssertZ();
    }return AssertZ_instance;
  }
  function Atom_0() {
    Atom_instance = this;
    TypeTester.call(this, 'atom');
  }
  Atom_0.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Atom);
  };
  Atom_0.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Atom',
    interfaces: [TypeTester]
  };
  var Atom_instance = null;
  function Atom_getInstance() {
    if (Atom_instance === null) {
      new Atom_0();
    }return Atom_instance;
  }
  function Atomic() {
    Atomic_instance = this;
    TypeTester.call(this, 'atomic');
  }
  Atomic.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Constant);
  };
  Atomic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Atomic',
    interfaces: [TypeTester]
  };
  var Atomic_instance = null;
  function Atomic_getInstance() {
    if (Atomic_instance === null) {
      new Atomic();
    }return Atomic_instance;
  }
  function BinaryRelation(operator) {
    PrimitiveWrapper_init_0(operator, 2, void 0, this);
  }
  BinaryRelation.prototype.relationWithoutSideEffects_gf3qo6$ = function (x, y) {
    throw new NotImplementedError();
  };
  BinaryRelation.prototype.relationWithSideEffects_gf3qo6$ = function (x, y) {
    throw new NotImplementedError();
  };
  BinaryRelation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BinaryRelation',
    interfaces: [PrimitiveWrapper]
  };
  function Callable() {
    Callable_instance = this;
    TypeTester.call(this, 'callable');
  }
  Callable.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Struct);
  };
  Callable.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Callable',
    interfaces: [TypeTester]
  };
  var Callable_instance = null;
  function Callable_getInstance() {
    if (Callable_instance === null) {
      new Callable();
    }return Callable_instance;
  }
  function Compound() {
    Compound_instance = this;
    TypeTester.call(this, 'compound');
  }
  Compound.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Struct);
  };
  Compound.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Compound',
    interfaces: [TypeTester]
  };
  var Compound_instance = null;
  function Compound_getInstance() {
    if (Compound_instance === null) {
      new Compound();
    }return Compound_instance;
  }
  function EnsureExecutable() {
    EnsureExecutable_instance = this;
    TypeEnsurer.call(this, 'ensure_executable');
  }
  function EnsureExecutable$ensurerVisitor$ObjectLiteral(closure$context, closure$procedure) {
    this.closure$context = closure$context;
    this.closure$procedure = closure$procedure;
  }
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.defaultValue = function (term) {
    return Unit;
  };
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToStruct = function (term) {
    if (Clause.Companion.notableFunctors.contains_11rb$(term.functor) && term.arity === 2) {
      var tmp$;
      tmp$ = term.argsSequence.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        element.accept(this);
      }
    } else
      this.defaultValue(term);
  };
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToNumeric = function (term) {
    throw TypeError$Companion_getInstance().forGoal_uyjcmc$(this.closure$context, this.closure$procedure, TypeError$Expected$Companion_getInstance().CALLABLE, term);
  };
  EnsureExecutable$ensurerVisitor$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TermVisitor]
  };
  EnsureExecutable.prototype.ensurerVisitor_0 = function (context, procedure) {
    return new EnsureExecutable$ensurerVisitor$ObjectLiteral(context, procedure);
  };
  EnsureExecutable.prototype.ensureType_4y9rwb$ = function (context, term) {
    if (Kotlin.isType(term, Var))
      throw InstantiationError$Companion_getInstance().forGoal_oefzvh$(context, extractSignature(ensureNotNull(context.procedure)), ensureNotNull(context.substitution.getOriginal(term)));
    else {
      term.accept(this.ensurerVisitor_0(context, extractSignature(ensureNotNull(context.procedure))));
    }
  };
  EnsureExecutable.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EnsureExecutable',
    interfaces: [TypeEnsurer]
  };
  var EnsureExecutable_instance = null;
  function EnsureExecutable_getInstance() {
    if (EnsureExecutable_instance === null) {
      new EnsureExecutable();
    }return EnsureExecutable_instance;
  }
  function Float() {
    Float_instance = this;
    TypeTester.call(this, 'float');
  }
  Float.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Real);
  };
  Float.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Float',
    interfaces: [TypeTester]
  };
  var Float_instance = null;
  function Float_getInstance() {
    if (Float_instance === null) {
      new Float();
    }return Float_instance;
  }
  function Ground() {
    Ground_instance = this;
    TypeTester.call(this, 'ground');
  }
  Ground.prototype.testType_z0t4vt$ = function (term) {
    return term.isGround;
  };
  Ground.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Ground',
    interfaces: [TypeTester]
  };
  var Ground_instance = null;
  function Ground_getInstance() {
    if (Ground_instance === null) {
      new Ground();
    }return Ground_instance;
  }
  function Halt() {
    Halt_instance = this;
    PrimitiveWrapper_init_0('halt', 0, void 0, this);
  }
  Halt.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    throw new HaltException(void 0, void 0, request.context);
  };
  Halt.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Halt',
    interfaces: [PrimitiveWrapper]
  };
  var Halt_instance = null;
  function Halt_getInstance() {
    if (Halt_instance === null) {
      new Halt();
    }return Halt_instance;
  }
  function Integer_0() {
    Integer_instance = this;
    TypeTester.call(this, 'integer');
  }
  Integer_0.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Integer);
  };
  Integer_0.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Integer',
    interfaces: [TypeTester]
  };
  var Integer_instance = null;
  function Integer_getInstance() {
    if (Integer_instance === null) {
      new Integer_0();
    }return Integer_instance;
  }
  function Is() {
    Is_instance = this;
    TermRelation$WithSideEffects.call(this, 'is');
  }
  Is.prototype.computeSingleResponse_hysdmz$ = function ($receiver) {
    var it = new ArithmeticEvaluator($receiver.context);
    var block$result;
    var effects = this.relationWithSideEffects_gf3qo6$($receiver.arguments.get_za3lpa$(0), $receiver.arguments.get_za3lpa$(1).accept(it));
    if (Kotlin.isType(effects, Substitution$Unifier)) {
      block$result = $receiver.replySuccess(effects);
    } else {
      block$result = $receiver.replyFail();
    }
    return block$result;
  };
  Is.prototype.relationWithSideEffects_gf3qo6$ = function (x, y) {
    return Unificator.Companion.mguWith(x, y);
  };
  Is.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Is',
    interfaces: [TermRelation$WithSideEffects]
  };
  var Is_instance = null;
  function Is_getInstance() {
    if (Is_instance === null) {
      new Is();
    }return Is_instance;
  }
  function Natural() {
    Natural_instance = this;
    UnaryPredicate.call(this, 'natural');
  }
  function Natural$uncheckedImplementation$lambda(closure$request, closure$x) {
    return function (it) {
      return closure$request.replySuccess(Substitution.Companion.ofVar(closure$x, it));
    };
  }
  Natural.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    var x = request.arguments.get_za3lpa$(0);
    if (Kotlin.isType(x, Var))
      return map(this.generateValues_0(x), Natural$uncheckedImplementation$lambda(request, x));
    else if (Kotlin.isType(x, Integer))
      return sequenceOf([request.replyWithCondition(this.checkValue_0(x))]);
    else
      return sequenceOf([request.replyFail()]);
  };
  function Coroutine$Natural$generateValues$lambda($receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$i = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Natural$generateValues$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Natural$generateValues$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Natural$generateValues$lambda.prototype.constructor = Coroutine$Natural$generateValues$lambda;
  Coroutine$Natural$generateValues$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$i = BigInteger.Companion.ZERO;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.yield_11rb$(Integer.Companion.ofBigInteger(this.local$i), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$i = this.local$i.plus(BigInteger.Companion.ONE);
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Natural$generateValues$lambda($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$Natural$generateValues$lambda($receiver_0, this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  Natural.prototype.generateValues_0 = function (variable) {
    return sequence(Natural$generateValues$lambda);
  };
  Natural.prototype.checkValue_0 = function (value) {
    return value.intValue.signum >= 0;
  };
  Natural.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Natural',
    interfaces: [UnaryPredicate]
  };
  var Natural_instance = null;
  function Natural_getInstance() {
    if (Natural_instance === null) {
      new Natural();
    }return Natural_instance;
  }
  function NewLine() {
    NewLine_instance = this;
    SideEffect0.call(this, 'nl');
  }
  NewLine.prototype.accept_nuyzx6$ = function (request) {
    var it = request.context.standardOutput;
    var block$result;
    if (it == null) {
      block$result = request.replyFail();
    } else {
      it.write('\n');
      block$result = request.replySuccess();
    }
    return block$result;
  };
  NewLine.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NewLine',
    interfaces: [SideEffect0]
  };
  var NewLine_instance = null;
  function NewLine_getInstance() {
    if (NewLine_instance === null) {
      new NewLine();
    }return NewLine_instance;
  }
  function NonVar() {
    NonVar_instance = this;
    TypeTester.call(this, 'nonvar');
  }
  NonVar.prototype.testType_z0t4vt$ = function (term) {
    return !Kotlin.isType(term, Var);
  };
  NonVar.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NonVar',
    interfaces: [TypeTester]
  };
  var NonVar_instance = null;
  function NonVar_getInstance() {
    if (NonVar_instance === null) {
      new NonVar();
    }return NonVar_instance;
  }
  function NotUnifiableWith() {
    NotUnifiableWith_instance = this;
    TermRelation$WithoutSideEffects.call(this, '\\=');
  }
  NotUnifiableWith.prototype.relationWithoutSideEffects_gf3qo6$ = function (x, y) {
    return !Unificator.Companion.matches(x, y);
  };
  NotUnifiableWith.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NotUnifiableWith',
    interfaces: [TermRelation$WithoutSideEffects]
  };
  var NotUnifiableWith_instance = null;
  function NotUnifiableWith_getInstance() {
    if (NotUnifiableWith_instance === null) {
      new NotUnifiableWith();
    }return NotUnifiableWith_instance;
  }
  function Number_0() {
    Number_instance = this;
    TypeTester.call(this, 'number');
  }
  Number_0.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Numeric);
  };
  Number_0.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Number',
    interfaces: [TypeTester]
  };
  var Number_instance = null;
  function Number_getInstance() {
    if (Number_instance === null) {
      new Number_0();
    }return Number_instance;
  }
  function PredicateWithoutArguments(operator) {
    PrimitiveWrapper_init_0(operator, 0, void 0, this);
  }
  PredicateWithoutArguments.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PredicateWithoutArguments',
    interfaces: [PrimitiveWrapper]
  };
  function SideEffect0(typeName) {
    SideEffect0$Companion_getInstance();
    PredicateWithoutArguments.call(this, typeName);
  }
  function Coroutine$SideEffect0$uncheckedImplementation$lambda(closure$request_0, this$SideEffect0_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$request = closure$request_0;
    this.local$this$SideEffect0 = this$SideEffect0_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$SideEffect0$uncheckedImplementation$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SideEffect0$uncheckedImplementation$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SideEffect0$uncheckedImplementation$lambda.prototype.constructor = Coroutine$SideEffect0$uncheckedImplementation$lambda;
  Coroutine$SideEffect0$uncheckedImplementation$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$SideEffect0.accept_nuyzx6$(this.local$closure$request), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function SideEffect0$uncheckedImplementation$lambda(closure$request_0, this$SideEffect0_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$SideEffect0$uncheckedImplementation$lambda(closure$request_0, this$SideEffect0_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  SideEffect0.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequence(SideEffect0$uncheckedImplementation$lambda(request, this));
  };
  function SideEffect0$Companion() {
    SideEffect0$Companion_instance = this;
  }
  function SideEffect0$Companion$of$ObjectLiteral(closure$consumer, typeName) {
    this.closure$consumer = closure$consumer;
    SideEffect0.call(this, typeName);
  }
  SideEffect0$Companion$of$ObjectLiteral.prototype.accept_nuyzx6$ = function (request) {
    return this.closure$consumer(request);
  };
  SideEffect0$Companion$of$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [SideEffect0]
  };
  SideEffect0$Companion.prototype.of_egsndp$ = function (typeName, consumer) {
    return new SideEffect0$Companion$of$ObjectLiteral(consumer, typeName);
  };
  SideEffect0$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SideEffect0$Companion_instance = null;
  function SideEffect0$Companion_getInstance() {
    if (SideEffect0$Companion_instance === null) {
      new SideEffect0$Companion();
    }return SideEffect0$Companion_instance;
  }
  SideEffect0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SideEffect0',
    interfaces: [PredicateWithoutArguments]
  };
  function SideEffect1(typeName) {
    SideEffect1$Companion_getInstance();
    UnaryPredicate.call(this, typeName);
  }
  function Coroutine$SideEffect1$uncheckedImplementation$lambda(closure$request_0, this$SideEffect1_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$request = closure$request_0;
    this.local$this$SideEffect1 = this$SideEffect1_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$SideEffect1$uncheckedImplementation$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$SideEffect1$uncheckedImplementation$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$SideEffect1$uncheckedImplementation$lambda.prototype.constructor = Coroutine$SideEffect1$uncheckedImplementation$lambda;
  Coroutine$SideEffect1$uncheckedImplementation$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var receiver = this.local$closure$request;
            var closure$request = this.local$closure$request;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.yield_11rb$(this.local$this$SideEffect1.accept_39blfx$(closure$request, receiver.arguments.get_za3lpa$(0).getSubstituted(receiver.context.substitution, [])), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function SideEffect1$uncheckedImplementation$lambda(closure$request_0, this$SideEffect1_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$SideEffect1$uncheckedImplementation$lambda(closure$request_0, this$SideEffect1_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  SideEffect1.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequence(SideEffect1$uncheckedImplementation$lambda(request, this));
  };
  function SideEffect1$Companion() {
    SideEffect1$Companion_instance = this;
  }
  function SideEffect1$Companion$of$ObjectLiteral(closure$consumer, typeName) {
    this.closure$consumer = closure$consumer;
    SideEffect1.call(this, typeName);
  }
  SideEffect1$Companion$of$ObjectLiteral.prototype.accept_39blfx$ = function (request, term) {
    return this.closure$consumer(request, term);
  };
  SideEffect1$Companion$of$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [SideEffect1]
  };
  SideEffect1$Companion.prototype.of_1ydw0w$ = function (typeName, consumer) {
    return new SideEffect1$Companion$of$ObjectLiteral(consumer, typeName);
  };
  SideEffect1$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SideEffect1$Companion_instance = null;
  function SideEffect1$Companion_getInstance() {
    if (SideEffect1$Companion_instance === null) {
      new SideEffect1$Companion();
    }return SideEffect1$Companion_instance;
  }
  SideEffect1.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SideEffect1',
    interfaces: [UnaryPredicate]
  };
  function TermIdentical() {
    TermIdentical_instance = this;
    TermRelation$WithoutSideEffects.call(this, '==');
  }
  TermIdentical.prototype.relationWithoutSideEffects_gf3qo6$ = function (x, y) {
    return x != null ? x.equals(y) : null;
  };
  TermIdentical.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'TermIdentical',
    interfaces: [TermRelation$WithoutSideEffects]
  };
  var TermIdentical_instance = null;
  function TermIdentical_getInstance() {
    if (TermIdentical_instance === null) {
      new TermIdentical();
    }return TermIdentical_instance;
  }
  function TermNotIdentical() {
    TermNotIdentical_instance = this;
    TermRelation$WithoutSideEffects.call(this, '\\==');
  }
  TermNotIdentical.prototype.relationWithoutSideEffects_gf3qo6$ = function (x, y) {
    return !(x != null ? x.equals(y) : null);
  };
  TermNotIdentical.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'TermNotIdentical',
    interfaces: [TermRelation$WithoutSideEffects]
  };
  var TermNotIdentical_instance = null;
  function TermNotIdentical_getInstance() {
    if (TermNotIdentical_instance === null) {
      new TermNotIdentical();
    }return TermNotIdentical_instance;
  }
  function TermRelation(operator) {
    BinaryRelation.call(this, operator);
  }
  TermRelation.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequenceOf([this.computeSingleResponse_hysdmz$(request)]);
  };
  function TermRelation$WithoutSideEffects(operator) {
    TermRelation.call(this, operator);
  }
  TermRelation$WithoutSideEffects.prototype.computeSingleResponse_hysdmz$ = function ($receiver) {
    return $receiver.replyWithCondition(this.relationWithoutSideEffects_gf3qo6$($receiver.arguments.get_za3lpa$(0), $receiver.arguments.get_za3lpa$(1)));
  };
  TermRelation$WithoutSideEffects.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WithoutSideEffects',
    interfaces: [TermRelation]
  };
  function TermRelation$WithSideEffects(operator) {
    TermRelation.call(this, operator);
  }
  TermRelation$WithSideEffects.prototype.computeSingleResponse_hysdmz$ = function ($receiver) {
    var effects = this.relationWithSideEffects_gf3qo6$($receiver.arguments.get_za3lpa$(0), $receiver.arguments.get_za3lpa$(1));
    if (Kotlin.isType(effects, Substitution$Unifier))
      return $receiver.replySuccess(effects);
    else
      return $receiver.replyFail();
  };
  TermRelation$WithSideEffects.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WithSideEffects',
    interfaces: [TermRelation]
  };
  TermRelation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TermRelation',
    interfaces: [BinaryRelation]
  };
  function TypeEnsurer(typeName) {
    UnaryPredicate.call(this, typeName);
  }
  function Coroutine$TypeEnsurer$uncheckedImplementation$lambda(closure$request_0, this$TypeEnsurer_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$request = closure$request_0;
    this.local$this$TypeEnsurer = this$TypeEnsurer_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$TypeEnsurer$uncheckedImplementation$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$TypeEnsurer$uncheckedImplementation$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$TypeEnsurer$uncheckedImplementation$lambda.prototype.constructor = Coroutine$TypeEnsurer$uncheckedImplementation$lambda;
  Coroutine$TypeEnsurer$uncheckedImplementation$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var receiver = this.local$closure$request;
            var this$TypeEnsurer = this.local$this$TypeEnsurer;
            var block$result;
            block$break: do {
              try {
                this$TypeEnsurer.ensureType_4y9rwb$(receiver.context, receiver.arguments.get_za3lpa$(0).getSubstituted(receiver.context.substitution, []));
                block$result = receiver.replySuccess();
              } catch (e_0) {
                if (Kotlin.isType(e_0, TuPrologRuntimeException)) {
                  block$result = receiver.replyException(e_0);
                  break block$break;
                } else
                  throw e_0;
              }
            }
             while (false);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.yield_11rb$(block$result, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function TypeEnsurer$uncheckedImplementation$lambda(closure$request_0, this$TypeEnsurer_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$TypeEnsurer$uncheckedImplementation$lambda(closure$request_0, this$TypeEnsurer_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  TypeEnsurer.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequence(TypeEnsurer$uncheckedImplementation$lambda(request, this));
  };
  TypeEnsurer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TypeEnsurer',
    interfaces: [UnaryPredicate]
  };
  function TypeTester(typeName) {
    TypeTester$Companion_getInstance();
    UnaryPredicate.call(this, typeName);
  }
  function Coroutine$TypeTester$uncheckedImplementation$lambda(closure$request_0, this$TypeTester_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$request = closure$request_0;
    this.local$this$TypeTester = this$TypeTester_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$TypeTester$uncheckedImplementation$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$TypeTester$uncheckedImplementation$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$TypeTester$uncheckedImplementation$lambda.prototype.constructor = Coroutine$TypeTester$uncheckedImplementation$lambda;
  Coroutine$TypeTester$uncheckedImplementation$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var receiver = this.local$closure$request;
            var block$result;
            if (this.local$this$TypeTester.testType_z0t4vt$(receiver.arguments.get_za3lpa$(0).getSubstituted(receiver.context.substitution, []))) {
              block$result = receiver.replySuccess();
            } else {
              block$result = receiver.replyFail();
            }

            this.state_0 = 2;
            this.result_0 = this.local$$receiver.yield_11rb$(block$result, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function TypeTester$uncheckedImplementation$lambda(closure$request_0, this$TypeTester_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$TypeTester$uncheckedImplementation$lambda(closure$request_0, this$TypeTester_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  TypeTester.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return sequence(TypeTester$uncheckedImplementation$lambda(request, this));
  };
  function TypeTester$Companion() {
    TypeTester$Companion_instance = this;
  }
  function TypeTester$Companion$of$ObjectLiteral(closure$tester, typeName) {
    this.closure$tester = closure$tester;
    TypeTester.call(this, typeName);
  }
  TypeTester$Companion$of$ObjectLiteral.prototype.testType_z0t4vt$ = function (term) {
    return this.closure$tester(term);
  };
  TypeTester$Companion$of$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [TypeTester]
  };
  TypeTester$Companion.prototype.of_cf3ta2$ = function (typeName, tester) {
    return new TypeTester$Companion$of$ObjectLiteral(tester, typeName);
  };
  TypeTester$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var TypeTester$Companion_instance = null;
  function TypeTester$Companion_getInstance() {
    if (TypeTester$Companion_instance === null) {
      new TypeTester$Companion();
    }return TypeTester$Companion_instance;
  }
  TypeTester.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TypeTester',
    interfaces: [UnaryPredicate]
  };
  function UnaryPredicate(operator) {
    PrimitiveWrapper_init_0(operator, 1, void 0, this);
  }
  UnaryPredicate.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UnaryPredicate',
    interfaces: [PrimitiveWrapper]
  };
  function UnifiesWith() {
    UnifiesWith_instance = this;
    TermRelation$WithSideEffects.call(this, '=');
  }
  UnifiesWith.prototype.relationWithSideEffects_gf3qo6$ = function (x, y) {
    return Unificator.Companion.mguWith(x, y);
  };
  UnifiesWith.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'UnifiesWith',
    interfaces: [TermRelation$WithSideEffects]
  };
  var UnifiesWith_instance = null;
  function UnifiesWith_getInstance() {
    if (UnifiesWith_instance === null) {
      new UnifiesWith();
    }return UnifiesWith_instance;
  }
  function Var_0() {
    Var_instance = this;
    TypeTester.call(this, 'var');
  }
  Var_0.prototype.testType_z0t4vt$ = function (term) {
    return Kotlin.isType(term, Var);
  };
  Var_0.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Var',
    interfaces: [TypeTester]
  };
  var Var_instance = null;
  function Var_getInstance() {
    if (Var_instance === null) {
      new Var_0();
    }return Var_instance;
  }
  function Write() {
    Write_instance = this;
    SideEffect1.call(this, 'write');
  }
  Write.prototype.accept_39blfx$ = function (request, term) {
    var it = request.context.standardOutput;
    var block$result;
    var tmp$;
    if (it == null) {
      block$result = request.replyFail();
    } else {
      if (Kotlin.isType(term, Atom))
        tmp$ = term.value;
      else
        tmp$ = term.toString();
      var string = tmp$;
      it.write(string);
      block$result = request.replySuccess();
    }
    return block$result;
  };
  Write.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Write',
    interfaces: [SideEffect1]
  };
  var Write_instance = null;
  function Write_getInstance() {
    if (Write_instance === null) {
      new Write();
    }return Write_instance;
  }
  function Arrow() {
    Arrow_instance = this;
    RuleWrapper_init('->', 2, void 0, this);
  }
  Arrow.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf([$receiver.varOf('Cond'), $receiver.varOf('Then')]);
  };
  Arrow.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([$receiver.structOf('call', [$receiver.varOf('Cond')]), MagicCut_getInstance(), $receiver.varOf('Then')]);
  };
  Arrow.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Arrow',
    interfaces: [RuleWrapper]
  };
  var Arrow_instance = null;
  function Arrow_getInstance() {
    if (Arrow_instance === null) {
      new Arrow();
    }return Arrow_instance;
  }
  function Member() {
    Member$Companion_getInstance();
    RuleWrapper_init(Member$Companion_getInstance().FUNCTOR, 2, void 0, this);
  }
  function Member$Base() {
    Member$Base_instance = this;
    Member.call(this);
  }
  Member$Base.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf([$receiver.varOf('H'), $receiver.consOf($receiver.varOf('H'), $receiver.whatever())]);
  };
  Member$Base.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Base',
    interfaces: [Member]
  };
  var Member$Base_instance = null;
  function Member$Base_getInstance() {
    if (Member$Base_instance === null) {
      new Member$Base();
    }return Member$Base_instance;
  }
  function Member$Recursive() {
    Member$Recursive_instance = this;
    Member.call(this);
  }
  Member$Recursive.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf([$receiver.varOf('H'), $receiver.consOf($receiver.whatever(), $receiver.varOf('T'))]);
  };
  Member$Recursive.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.structOf('member', [$receiver.varOf('H'), $receiver.varOf('T')]);
  };
  Member$Recursive.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Recursive',
    interfaces: [Member]
  };
  var Member$Recursive_instance = null;
  function Member$Recursive_getInstance() {
    if (Member$Recursive_instance === null) {
      new Member$Recursive();
    }return Member$Recursive_instance;
  }
  function Member$Companion() {
    Member$Companion_instance = this;
    this.FUNCTOR = 'member';
    this.ARITY = 2;
  }
  Object.defineProperty(Member$Companion.prototype, 'SIGNATURE', {
    get: function () {
      return new Signature(this.FUNCTOR, 2);
    }
  });
  Member$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Member$Companion_instance = null;
  function Member$Companion_getInstance() {
    if (Member$Companion_instance === null) {
      new Member$Companion();
    }return Member$Companion_instance;
  }
  Member.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Member',
    interfaces: [RuleWrapper]
  };
  function Not() {
    Not_instance = this;
    RuleWrapper_init('not', 1, void 0, this);
  }
  Not.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf_0($receiver.varOf('G'));
  };
  Not.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.structOf('\\+', [$receiver.varOf('G')]);
  };
  Not.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Not',
    interfaces: [RuleWrapper]
  };
  var Not_instance = null;
  function Not_getInstance() {
    if (Not_instance === null) {
      new Not();
    }return Not_instance;
  }
  function Semicolon() {
    Semicolon$Companion_getInstance();
    RuleWrapper_init(Semicolon$Companion_getInstance().FUNCTOR, 2, void 0, this);
  }
  function Semicolon$If() {
    Semicolon.call(this);
  }
  Semicolon$If.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf([$receiver.structOf(Arrow_getInstance().signature.name, [$receiver.varOf('Cond'), $receiver.varOf('Then')]), $receiver.varOf('Else')]);
  };
  function Semicolon$If$Then() {
    Semicolon$If$Then_instance = this;
    Semicolon$If.call(this);
  }
  Semicolon$If$Then.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([$receiver.structOf('call', [$receiver.varOf('Cond')]), MagicCut_getInstance(), $receiver.varOf('Then')]);
  };
  Semicolon$If$Then.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Then',
    interfaces: [Semicolon$If]
  };
  var Semicolon$If$Then_instance = null;
  function Semicolon$If$Then_getInstance() {
    if (Semicolon$If$Then_instance === null) {
      new Semicolon$If$Then();
    }return Semicolon$If$Then_instance;
  }
  function Semicolon$If$Else() {
    Semicolon$If$Else_instance = this;
    Semicolon$If.call(this);
  }
  Semicolon$If$Else.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.tupleOf([MagicCut_getInstance(), $receiver.varOf('Else')]);
  };
  Semicolon$If$Else.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Else',
    interfaces: [Semicolon$If]
  };
  var Semicolon$If$Else_instance = null;
  function Semicolon$If$Else_getInstance() {
    if (Semicolon$If$Else_instance === null) {
      new Semicolon$If$Else();
    }return Semicolon$If$Else_instance;
  }
  Semicolon$If.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'If',
    interfaces: [Semicolon]
  };
  function Semicolon$Or() {
    Semicolon.call(this);
  }
  Semicolon$Or.prototype.get_head_cjtn4o$ = function ($receiver) {
    return listOf([$receiver.varOf('A'), $receiver.varOf('B')]);
  };
  function Semicolon$Or$Left() {
    Semicolon$Or$Left_instance = this;
    Semicolon$Or.call(this);
  }
  Semicolon$Or$Left.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.varOf('A');
  };
  Semicolon$Or$Left.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Left',
    interfaces: [Semicolon$Or]
  };
  var Semicolon$Or$Left_instance = null;
  function Semicolon$Or$Left_getInstance() {
    if (Semicolon$Or$Left_instance === null) {
      new Semicolon$Or$Left();
    }return Semicolon$Or$Left_instance;
  }
  function Semicolon$Or$Right() {
    Semicolon$Or$Right_instance = this;
    Semicolon$Or.call(this);
  }
  Semicolon$Or$Right.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.varOf('B');
  };
  Semicolon$Or$Right.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Right',
    interfaces: [Semicolon$Or]
  };
  var Semicolon$Or$Right_instance = null;
  function Semicolon$Or$Right_getInstance() {
    if (Semicolon$Or$Right_instance === null) {
      new Semicolon$Or$Right();
    }return Semicolon$Or$Right_instance;
  }
  Semicolon$Or.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Or',
    interfaces: [Semicolon]
  };
  function Semicolon$Companion() {
    Semicolon$Companion_instance = this;
    this.FUNCTOR = ';';
    this.ARITY = 2;
  }
  Object.defineProperty(Semicolon$Companion.prototype, 'SIGNATURE', {
    get: function () {
      return new Signature(this.FUNCTOR, 2);
    }
  });
  Semicolon$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Semicolon$Companion_instance = null;
  function Semicolon$Companion_getInstance() {
    if (Semicolon$Companion_instance === null) {
      new Semicolon$Companion();
    }return Semicolon$Companion_instance;
  }
  Semicolon.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Semicolon',
    interfaces: [RuleWrapper]
  };
  function primitiveOf$lambda(closure$uncheckedPrimitive, closure$supportedSignature) {
    return function (it) {
      if (equals(it.signature, closure$supportedSignature))
        return closure$uncheckedPrimitive(it);
      else
        throw IllegalArgumentException_init('This primitive supports only this signature `' + closure$supportedSignature + '`');
    };
  }
  function primitiveOf(supportedSignature, uncheckedPrimitive) {
    return primitiveOf$lambda(uncheckedPrimitive, supportedSignature);
  }
  function PrimitiveWrapper() {
    PrimitiveWrapper$Companion_getInstance();
    var tmp$;
    this.wrappedImplementation_bkjgtp$_0 = primitiveOf(this.signature, typeof (tmp$ = getCallableRef('uncheckedImplementation', function ($receiver, request) {
      return $receiver.uncheckedImplementation_nuyzx6$(request);
    }.bind(null, this))) === 'function' ? tmp$ : throwCCE());
  }
  Object.defineProperty(PrimitiveWrapper.prototype, 'wrappedImplementation', {
    get: function () {
      return this.wrappedImplementation_bkjgtp$_0;
    }
  });
  function PrimitiveWrapper$Companion() {
    PrimitiveWrapper$Companion_instance = this;
  }
  function PrimitiveWrapper$Companion$FromFunction(signature, uncheckedPrimitive) {
    PrimitiveWrapper_init(signature, this);
    this.uncheckedPrimitive_0 = uncheckedPrimitive;
  }
  PrimitiveWrapper$Companion$FromFunction.prototype.uncheckedImplementation_nuyzx6$ = function (request) {
    return this.uncheckedPrimitive_0(request);
  };
  PrimitiveWrapper$Companion$FromFunction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FromFunction',
    interfaces: [PrimitiveWrapper]
  };
  function PrimitiveWrapper$Companion$PrimitiveWrapper$Companion$FromFunction_init(name, arity, vararg, uncheckedPrimitive, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(PrimitiveWrapper$Companion$FromFunction.prototype);
    PrimitiveWrapper$Companion$FromFunction.call($this, new Signature(name, arity, vararg), uncheckedPrimitive);
    return $this;
  }
  PrimitiveWrapper$Companion.prototype.wrap_yv7ln3$ = function (signature, primitive) {
    return new PrimitiveWrapper$Companion$FromFunction(signature, primitive);
  };
  PrimitiveWrapper$Companion.prototype.wrap_pb3ykf$ = function (name, arity, vararg, primitive) {
    return PrimitiveWrapper$Companion$PrimitiveWrapper$Companion$FromFunction_init(name, arity, vararg, primitive);
  };
  PrimitiveWrapper$Companion.prototype.wrap_rzvdju$ = function (name, arity, primitive) {
    return this.wrap_pb3ykf$(name, arity, false, primitive);
  };
  PrimitiveWrapper$Companion.prototype.ensuringAllArgumentsAreInstantiated_rcoxxl$ = function ($receiver) {
    var $receiver_0 = withIndex($receiver.arguments);
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.isType(element.value, Var)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    var notInstantiated = firstOrNull$result;
    var tmp$_0;
    var tmp$_1;
    if (notInstantiated != null) {
      var tmp$_2;
      throw InstantiationError$Companion_getInstance().forArgument_b8n3hp$($receiver.context, $receiver.signature, notInstantiated.index, Kotlin.isType(tmp$_2 = notInstantiated.value, Var) ? tmp$_2 : throwCCE());
    } else
      tmp$_1 = null;
    return (tmp$_0 = tmp$_1) != null ? tmp$_0 : $receiver;
  };
  PrimitiveWrapper$Companion.prototype.ensuringArgumentIsNumeric_ki3tsl$ = function ($receiver, index) {
    var arg = $receiver.arguments.get_za3lpa$(index);
    if (!Kotlin.isType(arg, Numeric))
      throw new TypeError('Argument ' + index + ' of ' + $receiver.signature + '` should be a ' + TypeError$Expected$Companion_getInstance().NUMBER, void 0, $receiver.context, TypeError$Expected$Companion_getInstance().NUMBER, arg);
    else
      return $receiver;
  };
  PrimitiveWrapper$Companion.prototype.ensuringArgumentIsStruct_ki3tsl$ = function ($receiver, index) {
    var arg = $receiver.arguments.get_za3lpa$(index);
    if (!Kotlin.isType(arg, Struct))
      throw new TypeError('Argument ' + index + ' of ' + $receiver.signature + '` should be a ' + TypeError$Expected$Companion_getInstance().COMPOUND, void 0, $receiver.context, TypeError$Expected$Companion_getInstance().COMPOUND, arg);
    else
      return $receiver;
  };
  PrimitiveWrapper$Companion.prototype.ensuringArgumentIsInteger_ki3tsl$ = function ($receiver, index) {
    var arg = $receiver.arguments.get_za3lpa$(index);
    if (!Kotlin.isType(arg, Integer))
      throw new TypeError('Argument ' + index + ' of ' + $receiver.signature + '` should be a ' + TypeError$Expected$Companion_getInstance().INTEGER, void 0, $receiver.context, TypeError$Expected$Companion_getInstance().INTEGER, arg);
    else
      return $receiver;
  };
  PrimitiveWrapper$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var PrimitiveWrapper$Companion_instance = null;
  function PrimitiveWrapper$Companion_getInstance() {
    if (PrimitiveWrapper$Companion_instance === null) {
      new PrimitiveWrapper$Companion();
    }return PrimitiveWrapper$Companion_instance;
  }
  PrimitiveWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrimitiveWrapper',
    interfaces: [AbstractWrapper]
  };
  function PrimitiveWrapper_init(signature, $this) {
    $this = $this || Object.create(PrimitiveWrapper.prototype);
    AbstractWrapper.call($this, signature);
    PrimitiveWrapper.call($this);
    return $this;
  }
  function PrimitiveWrapper_init_0(name, arity, vararg, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(PrimitiveWrapper.prototype);
    AbstractWrapper_init(name, arity, vararg, $this);
    PrimitiveWrapper.call($this);
    return $this;
  }
  function RuleWrapper(signature) {
    AbstractWrapper.call(this, signature);
    this.wrappedImplementation_ijk397$_0 = lazy(RuleWrapper$wrappedImplementation$lambda(this, signature));
  }
  Object.defineProperty(RuleWrapper.prototype, 'wrappedImplementation', {
    get: function () {
      return this.wrappedImplementation_ijk397$_0.value;
    }
  });
  RuleWrapper.prototype.get_head_cjtn4o$ = function ($receiver) {
    return emptyList();
  };
  RuleWrapper.prototype.get_body_cjtn4o$ = function ($receiver) {
    return $receiver.truthOf(true);
  };
  RuleWrapper.prototype.toString = function () {
    return 'RuleWrapper(signature=' + toString(this.signature.toIndicator()) + ', rule=' + this.wrappedImplementation + ')';
  };
  function RuleWrapper$wrappedImplementation$lambda(this$RuleWrapper, closure$signature) {
    return function () {
      var scope = Scope.Companion.empty();
      var headArgs = this$RuleWrapper.get_head_cjtn4o$(scope);
      if (!(headArgs.size === closure$signature.arity)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init(message.toString());
      }var body = this$RuleWrapper.get_body_cjtn4o$(scope);
      return Rule.Companion.of(Struct.Companion.ofList(this$RuleWrapper.signature.name, headArgs), [body]);
    };
  }
  RuleWrapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleWrapper',
    interfaces: [AbstractWrapper]
  };
  function RuleWrapper_init(functor, arity, vararg, $this) {
    if (vararg === void 0)
      vararg = false;
    $this = $this || Object.create(RuleWrapper.prototype);
    RuleWrapper.call($this, new Signature(functor, arity, vararg));
    return $this;
  }
  function stdin$lambda() {
    throw IllegalStateException_init('No default implementation of stdin on JS');
  }
  function stdin() {
    return InputChannel$Companion_getInstance().of(stdin$lambda);
  }
  function stderr$lambda(it) {
    console.error(it);
    return Unit;
  }
  function stderr() {
    return OutputChannel$Companion_getInstance().of(stderr$lambda);
  }
  function stdout$lambda(it) {
    print(it);
    return Unit;
  }
  function stdout() {
    return OutputChannel$Companion_getInstance().of(stdout$lambda);
  }
  function currentTimeInstant() {
    return Kotlin.Long.fromNumber(Date.now());
  }
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$solve = package$tuprolog.solve || (package$tuprolog.solve = {});
  package$solve.AbstractWrapper_init_wipknz$ = AbstractWrapper_init;
  package$solve.AbstractWrapper = AbstractWrapper;
  package$solve.ExecutionContext = ExecutionContext;
  Object.defineProperty(ExecutionContextAware, 'Companion', {
    get: ExecutionContextAware$Companion_getInstance
  });
  $$importsForInline$$['@tuprolog/2p-solve'] = _;
  package$solve.ExecutionContextAware = ExecutionContextAware;
  package$solve.extractSignature = extractSignature;
  package$solve.solve = solve;
  Object.defineProperty(MutableSolver, 'Companion', {
    get: MutableSolver$Companion_getInstance
  });
  package$solve.MutableSolver = MutableSolver;
  package$solve.SideEffectManager = SideEffectManager;
  Object.defineProperty(Signature, 'Companion', {
    get: Signature$Companion_getInstance
  });
  package$solve.Signature = Signature;
  Solution.Yes_init_8v0eyr$ = Solution$Solution$Yes_init;
  Solution.Yes = Solution$Yes;
  Solution.No_init_g1m85v$ = Solution$Solution$No_init;
  Solution.No = Solution$No;
  Solution.Halt_init_hfcp4$ = Solution$Solution$Halt_init;
  Solution.Halt = Solution$Halt;
  Object.defineProperty(Solution, 'Companion', {
    get: Solution$Companion_getInstance
  });
  package$solve.Solution = Solution;
  Solve.Request = Solve$Request;
  Solve.Response = Solve$Response;
  package$solve.Solve = Solve;
  Object.defineProperty(Solver, 'Companion', {
    get: Solver$Companion_getInstance
  });
  package$solve.Solver = Solver;
  package$solve.SolverFactory = SolverFactory;
  package$solve.forEachWithLookahead_vtu2u2$ = forEachWithLookahead;
  package$solve.forEachWithLookahead_grbbje$ = forEachWithLookahead_0;
  package$solve.forEachWithLookahead_5exn50$ = forEachWithLookahead_1;
  var package$channel = package$solve.channel || (package$solve.channel = {});
  package$channel.Channel = Channel;
  Object.defineProperty(InputChannel, 'Companion', {
    get: InputChannel$Companion_getInstance
  });
  package$channel.InputChannel = InputChannel;
  Object.defineProperty(OutputChannel, 'Companion', {
    get: OutputChannel$Companion_getInstance
  });
  package$channel.OutputChannel = OutputChannel;
  var package$impl = package$channel.impl || (package$channel.impl = {});
  package$impl.AbstractChannel = AbstractChannel;
  package$impl.AbstractInputChannel = AbstractInputChannel;
  package$impl.AbstractOutputChannel = AbstractOutputChannel;
  package$impl.InputChannelFromFunction = InputChannelFromFunction;
  package$impl.OutputChannelFromFunction = OutputChannelFromFunction;
  var package$exception = package$solve.exception || (package$solve.exception = {});
  package$exception.HaltException_init_zz97q$ = HaltException_init;
  package$exception.HaltException = HaltException;
  Object.defineProperty(PrologError, 'Companion', {
    get: PrologError$Companion_getInstance
  });
  package$exception.PrologError_init_eciuno$ = PrologError_init;
  package$exception.PrologError = PrologError;
  package$exception.PrologWarning = PrologWarning;
  package$exception.TimeOutException_init_uzevad$ = TimeOutException_init;
  package$exception.TimeOutException = TimeOutException;
  package$exception.TuPrologRuntimeException_init_dpmbx4$ = TuPrologRuntimeException_init;
  package$exception.TuPrologRuntimeException = TuPrologRuntimeException;
  var package$error = package$exception.error || (package$exception.error = {});
  Object.defineProperty(package$error, 'ErrorUtils', {
    get: ErrorUtils_getInstance
  });
  Object.defineProperty(EvaluationError, 'Companion', {
    get: EvaluationError$Companion_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'INT_OVERFLOW', {
    get: EvaluationError$Type$INT_OVERFLOW_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'FLOAT_OVERFLOW', {
    get: EvaluationError$Type$FLOAT_OVERFLOW_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'UNDERFLOW', {
    get: EvaluationError$Type$UNDERFLOW_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'ZERO_DIVISOR', {
    get: EvaluationError$Type$ZERO_DIVISOR_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'UNDEFINED', {
    get: EvaluationError$Type$UNDEFINED_getInstance
  });
  Object.defineProperty(EvaluationError$Type, 'Companion', {
    get: EvaluationError$Type$Companion_getInstance
  });
  EvaluationError.Type = EvaluationError$Type;
  package$error.EvaluationError = EvaluationError;
  Object.defineProperty(InstantiationError, 'Companion', {
    get: InstantiationError$Companion_getInstance
  });
  package$error.InstantiationError_init_b8n3hp$ = InstantiationError_init;
  package$error.InstantiationError = InstantiationError;
  Object.defineProperty(MessageError, 'Companion', {
    get: MessageError$Companion_getInstance
  });
  package$error.MessageError = MessageError;
  Object.defineProperty(SystemError, 'Companion', {
    get: SystemError$Companion_getInstance
  });
  package$error.SystemError = SystemError;
  Object.defineProperty(TypeError, 'Companion', {
    get: TypeError$Companion_getInstance
  });
  Object.defineProperty(TypeError$Expected, 'Companion', {
    get: TypeError$Expected$Companion_getInstance
  });
  TypeError.Expected = TypeError$Expected;
  package$error.TypeError_init_vzdn8r$ = TypeError_init;
  package$error.TypeError = TypeError;
  Object.defineProperty(ArithmeticEvaluator, 'Companion', {
    get: ArithmeticEvaluator$Companion_getInstance
  });
  var package$function = package$solve.function || (package$solve.function = {});
  package$function.ArithmeticEvaluator = ArithmeticEvaluator;
  Compute.Request = Compute$Request;
  Compute.Response = Compute$Response;
  package$function.Compute = Compute;
  package$function.ExpressionEvaluator = ExpressionEvaluator;
  package$function.FunctionWrapper_init_wehqpj$ = FunctionWrapper_init;
  package$function.FunctionWrapper_init_kn9vy1$ = FunctionWrapper_init_0;
  package$function.FunctionWrapper = FunctionWrapper;
  package$function.functionOf = functionOf;
  Object.defineProperty(AliasedLibrary, 'Companion', {
    get: AliasedLibrary$Companion_getInstance
  });
  var package$library = package$solve.library || (package$solve.library = {});
  package$library.AliasedLibrary = AliasedLibrary;
  package$library.plus_rtsv0r$ = plus_0;
  Object.defineProperty(Libraries, 'Companion', {
    get: Libraries$Companion_getInstance
  });
  package$library.Libraries_init_93upih$ = Libraries_init;
  package$library.Libraries_init_86d5s7$ = Libraries_init_0;
  package$library.Libraries = Libraries;
  Object.defineProperty(Library, 'Companion', {
    get: Library$Companion_getInstance
  });
  package$library.Library = Library;
  package$library.LibraryGroup = LibraryGroup;
  var package$exception_0 = package$library.exception || (package$library.exception = {});
  package$exception_0.AlreadyLoadedLibraryException_init_dbl4no$ = AlreadyLoadedLibraryException_init;
  package$exception_0.AlreadyLoadedLibraryException = AlreadyLoadedLibraryException;
  package$exception_0.LibraryException_init_dbl4no$ = LibraryException_init;
  package$exception_0.LibraryException = LibraryException;
  package$exception_0.NoSuchALibraryException_init_dbl4no$ = NoSuchALibraryException_init;
  package$exception_0.NoSuchALibraryException = NoSuchALibraryException;
  var package$impl_0 = package$library.impl || (package$library.impl = {});
  package$impl_0.LibraryAliasedImpl = LibraryAliasedImpl;
  package$impl_0.LibraryImpl = LibraryImpl;
  var package$stdlib = package$library.stdlib || (package$library.stdlib = {});
  Object.defineProperty(package$stdlib, 'CommonBuiltins', {
    get: CommonBuiltins_getInstance
  });
  Object.defineProperty(package$stdlib, 'CommonRules', {
    get: CommonRules_getInstance
  });
  var package$function_0 = package$stdlib.function || (package$stdlib.function = {});
  Object.defineProperty(package$function_0, 'AbsoluteValue', {
    get: AbsoluteValue_getInstance
  });
  Object.defineProperty(package$function_0, 'Addition', {
    get: Addition_getInstance
  });
  Object.defineProperty(package$function_0, 'ArcTangent', {
    get: ArcTangent_getInstance
  });
  package$function_0.BinaryMathFunction = BinaryMathFunction;
  Object.defineProperty(package$function_0, 'BitwiseAnd', {
    get: BitwiseAnd_getInstance
  });
  Object.defineProperty(package$function_0, 'BitwiseComplement', {
    get: BitwiseComplement_getInstance
  });
  Object.defineProperty(package$function_0, 'BitwiseLeftShift', {
    get: BitwiseLeftShift_getInstance
  });
  Object.defineProperty(package$function_0, 'BitwiseOr', {
    get: BitwiseOr_getInstance
  });
  Object.defineProperty(package$function_0, 'BitwiseRightShift', {
    get: BitwiseRightShift_getInstance
  });
  Object.defineProperty(package$function_0, 'Ceiling', {
    get: Ceiling_getInstance
  });
  Object.defineProperty(package$function_0, 'Cosine', {
    get: Cosine_getInstance
  });
  Object.defineProperty(package$function_0, 'Exponential', {
    get: Exponential_getInstance
  });
  Object.defineProperty(package$function_0, 'Exponentiation', {
    get: Exponentiation_getInstance
  });
  Object.defineProperty(package$function_0, 'FloatFractionalPart', {
    get: FloatFractionalPart_getInstance
  });
  Object.defineProperty(package$function_0, 'FloatIntegerPart', {
    get: FloatIntegerPart_getInstance
  });
  Object.defineProperty(package$function_0, 'FloatingPointDivision', {
    get: FloatingPointDivision_getInstance
  });
  Object.defineProperty(package$function_0, 'Floor', {
    get: Floor_getInstance
  });
  Object.defineProperty(package$function_0, 'IntegerDivision', {
    get: IntegerDivision_getInstance
  });
  package$function_0.IntegersBinaryMathFunction = IntegersBinaryMathFunction;
  Object.defineProperty(MathFunction, 'Companion', {
    get: MathFunction$Companion_getInstance
  });
  package$function_0.MathFunction_init_f6g3hj$ = MathFunction_init;
  package$function_0.MathFunction_init_37lk95$ = MathFunction_init_0;
  package$function_0.MathFunction = MathFunction;
  Object.defineProperty(package$function_0, 'Modulo', {
    get: Modulo_getInstance
  });
  Object.defineProperty(package$function_0, 'Multiplication', {
    get: Multiplication_getInstance
  });
  Object.defineProperty(package$function_0, 'NaturalLogarithm', {
    get: NaturalLogarithm_getInstance
  });
  package$function_0.NullaryMathFunction = NullaryMathFunction;
  Object.defineProperty(package$function_0, 'Remainder', {
    get: Remainder_getInstance
  });
  Object.defineProperty(package$function_0, 'Round', {
    get: Round_getInstance
  });
  Object.defineProperty(package$function_0, 'Sign', {
    get: Sign_getInstance
  });
  Object.defineProperty(package$function_0, 'SignReversal', {
    get: SignReversal_getInstance
  });
  Object.defineProperty(package$function_0, 'Sine', {
    get: Sine_getInstance
  });
  Object.defineProperty(package$function_0, 'SquareRoot', {
    get: SquareRoot_getInstance
  });
  Object.defineProperty(package$function_0, 'Subtraction', {
    get: Subtraction_getInstance
  });
  Object.defineProperty(package$function_0, 'ToFloat', {
    get: ToFloat_getInstance
  });
  Object.defineProperty(package$function_0, 'Truncate', {
    get: Truncate_getInstance
  });
  package$function_0.UnaryMathFunction = UnaryMathFunction;
  var package$magic = package$stdlib.magic || (package$stdlib.magic = {});
  Object.defineProperty(package$magic, 'MagicCut', {
    get: MagicCut_getInstance
  });
  package$magic.MagicTerm = MagicTerm;
  var package$primitive = package$stdlib.primitive || (package$stdlib.primitive = {});
  package$primitive.AbstractAssert = AbstractAssert;
  Object.defineProperty(package$primitive, 'ArithmeticEqual', {
    get: ArithmeticEqual_getInstance
  });
  Object.defineProperty(package$primitive, 'ArithmeticGreaterThan', {
    get: ArithmeticGreaterThan_getInstance
  });
  Object.defineProperty(package$primitive, 'ArithmeticGreaterThanOrEqualTo', {
    get: ArithmeticGreaterThanOrEqualTo_getInstance
  });
  Object.defineProperty(package$primitive, 'ArithmeticLowerThan', {
    get: ArithmeticLowerThan_getInstance
  });
  Object.defineProperty(package$primitive, 'ArithmeticLowerThanOrEqualTo', {
    get: ArithmeticLowerThanOrEqualTo_getInstance
  });
  Object.defineProperty(package$primitive, 'ArithmeticNotEqual', {
    get: ArithmeticNotEqual_getInstance
  });
  package$primitive.ArithmeticRelation = ArithmeticRelation;
  Object.defineProperty(package$primitive, 'Assert', {
    get: Assert_getInstance
  });
  Object.defineProperty(package$primitive, 'AssertA', {
    get: AssertA_getInstance
  });
  Object.defineProperty(package$primitive, 'AssertZ', {
    get: AssertZ_getInstance
  });
  Object.defineProperty(package$primitive, 'Atom', {
    get: Atom_getInstance
  });
  Object.defineProperty(package$primitive, 'Atomic', {
    get: Atomic_getInstance
  });
  package$primitive.BinaryRelation = BinaryRelation;
  Object.defineProperty(package$primitive, 'Callable', {
    get: Callable_getInstance
  });
  Object.defineProperty(package$primitive, 'Compound', {
    get: Compound_getInstance
  });
  Object.defineProperty(package$primitive, 'EnsureExecutable', {
    get: EnsureExecutable_getInstance
  });
  Object.defineProperty(package$primitive, 'Float', {
    get: Float_getInstance
  });
  Object.defineProperty(package$primitive, 'Ground', {
    get: Ground_getInstance
  });
  Object.defineProperty(package$primitive, 'Halt', {
    get: Halt_getInstance
  });
  Object.defineProperty(package$primitive, 'Integer', {
    get: Integer_getInstance
  });
  Object.defineProperty(package$primitive, 'Is', {
    get: Is_getInstance
  });
  Object.defineProperty(package$primitive, 'Natural', {
    get: Natural_getInstance
  });
  Object.defineProperty(package$primitive, 'NewLine', {
    get: NewLine_getInstance
  });
  Object.defineProperty(package$primitive, 'NonVar', {
    get: NonVar_getInstance
  });
  Object.defineProperty(package$primitive, 'NotUnifiableWith', {
    get: NotUnifiableWith_getInstance
  });
  Object.defineProperty(package$primitive, 'Number', {
    get: Number_getInstance
  });
  package$primitive.PredicateWithoutArguments = PredicateWithoutArguments;
  Object.defineProperty(SideEffect0, 'Companion', {
    get: SideEffect0$Companion_getInstance
  });
  package$primitive.SideEffect0 = SideEffect0;
  Object.defineProperty(SideEffect1, 'Companion', {
    get: SideEffect1$Companion_getInstance
  });
  package$primitive.SideEffect1 = SideEffect1;
  Object.defineProperty(package$primitive, 'TermIdentical', {
    get: TermIdentical_getInstance
  });
  Object.defineProperty(package$primitive, 'TermNotIdentical', {
    get: TermNotIdentical_getInstance
  });
  TermRelation.WithoutSideEffects = TermRelation$WithoutSideEffects;
  TermRelation.WithSideEffects = TermRelation$WithSideEffects;
  package$primitive.TermRelation = TermRelation;
  package$primitive.TypeEnsurer = TypeEnsurer;
  Object.defineProperty(TypeTester, 'Companion', {
    get: TypeTester$Companion_getInstance
  });
  package$primitive.TypeTester = TypeTester;
  package$primitive.UnaryPredicate = UnaryPredicate;
  Object.defineProperty(package$primitive, 'UnifiesWith', {
    get: UnifiesWith_getInstance
  });
  Object.defineProperty(package$primitive, 'Var', {
    get: Var_getInstance
  });
  Object.defineProperty(package$primitive, 'Write', {
    get: Write_getInstance
  });
  var package$rule = package$stdlib.rule || (package$stdlib.rule = {});
  Object.defineProperty(package$rule, 'Arrow', {
    get: Arrow_getInstance
  });
  Object.defineProperty(Member, 'Base', {
    get: Member$Base_getInstance
  });
  Object.defineProperty(Member, 'Recursive', {
    get: Member$Recursive_getInstance
  });
  Object.defineProperty(Member, 'Companion', {
    get: Member$Companion_getInstance
  });
  package$rule.Member = Member;
  Object.defineProperty(package$rule, 'Not', {
    get: Not_getInstance
  });
  Object.defineProperty(Semicolon$If, 'Then', {
    get: Semicolon$If$Then_getInstance
  });
  Object.defineProperty(Semicolon$If, 'Else', {
    get: Semicolon$If$Else_getInstance
  });
  Semicolon.If = Semicolon$If;
  Object.defineProperty(Semicolon$Or, 'Left', {
    get: Semicolon$Or$Left_getInstance
  });
  Object.defineProperty(Semicolon$Or, 'Right', {
    get: Semicolon$Or$Right_getInstance
  });
  Semicolon.Or = Semicolon$Or;
  Object.defineProperty(Semicolon, 'Companion', {
    get: Semicolon$Companion_getInstance
  });
  package$rule.Semicolon = Semicolon;
  var package$primitive_0 = package$solve.primitive || (package$solve.primitive = {});
  package$primitive_0.primitiveOf = primitiveOf;
  Object.defineProperty(PrimitiveWrapper, 'Companion', {
    get: PrimitiveWrapper$Companion_getInstance
  });
  package$primitive_0.PrimitiveWrapper_init_wehqpj$ = PrimitiveWrapper_init;
  package$primitive_0.PrimitiveWrapper_init_kn9vy1$ = PrimitiveWrapper_init_0;
  package$primitive_0.PrimitiveWrapper = PrimitiveWrapper;
  var package$rule_0 = package$solve.rule || (package$solve.rule = {});
  package$rule_0.RuleWrapper_init_kn9vy1$ = RuleWrapper_init;
  package$rule_0.RuleWrapper = RuleWrapper;
  package$channel.stdin_8be2vx$ = stdin;
  package$channel.stderr_tnbmyv$ = stderr;
  package$channel.stdout_tnbmyv$ = stdout;
  package$solve.currentTimeInstant = currentTimeInstant;
  Object.defineProperty(ExecutionContext.prototype, 'standardInput', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardInput'));
  Object.defineProperty(ExecutionContext.prototype, 'standardOutput', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardOutput'));
  Object.defineProperty(ExecutionContext.prototype, 'standardError', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardError'));
  Object.defineProperty(ExecutionContext.prototype, 'warnings', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'warnings'));
  Object.defineProperty(Solver.prototype, 'standardInput', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardInput'));
  Object.defineProperty(Solver.prototype, 'standardOutput', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardOutput'));
  Object.defineProperty(Solver.prototype, 'standardError', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'standardError'));
  Object.defineProperty(Solver.prototype, 'warnings', Object.getOwnPropertyDescriptor(ExecutionContextAware.prototype, 'warnings'));
  Object.defineProperty(MutableSolver.prototype, 'standardInput', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardInput'));
  Object.defineProperty(MutableSolver.prototype, 'standardOutput', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardOutput'));
  Object.defineProperty(MutableSolver.prototype, 'standardError', Object.getOwnPropertyDescriptor(Solver.prototype, 'standardError'));
  Object.defineProperty(MutableSolver.prototype, 'warnings', Object.getOwnPropertyDescriptor(Solver.prototype, 'warnings'));
  MutableSolver.prototype.solve = Solver.prototype.solve;
  ExpressionEvaluator.prototype.visitToAtom = TermVisitor.prototype.visitToAtom;
  ExpressionEvaluator.prototype.visitToClause = TermVisitor.prototype.visitToClause;
  ExpressionEvaluator.prototype.visitToCons = TermVisitor.prototype.visitToCons;
  ExpressionEvaluator.prototype.visitToConstant = TermVisitor.prototype.visitToConstant;
  ExpressionEvaluator.prototype.visitToDirective = TermVisitor.prototype.visitToDirective;
  ExpressionEvaluator.prototype.visitToEmpty = TermVisitor.prototype.visitToEmpty;
  ExpressionEvaluator.prototype.visitToEmptyList = TermVisitor.prototype.visitToEmptyList;
  ExpressionEvaluator.prototype.visitToEmptySet = TermVisitor.prototype.visitToEmptySet;
  ExpressionEvaluator.prototype.visitToFact = TermVisitor.prototype.visitToFact;
  ExpressionEvaluator.prototype.visitToIndicator = TermVisitor.prototype.visitToIndicator;
  ExpressionEvaluator.prototype.visitToInteger = TermVisitor.prototype.visitToInteger;
  ExpressionEvaluator.prototype.visitToList = TermVisitor.prototype.visitToList;
  ExpressionEvaluator.prototype.visitToNumeric = TermVisitor.prototype.visitToNumeric;
  ExpressionEvaluator.prototype.visitToReal = TermVisitor.prototype.visitToReal;
  ExpressionEvaluator.prototype.visitToRule = TermVisitor.prototype.visitToRule;
  ExpressionEvaluator.prototype.visitToSet = TermVisitor.prototype.visitToSet;
  ExpressionEvaluator.prototype.visitToStruct = TermVisitor.prototype.visitToStruct;
  ExpressionEvaluator.prototype.visitToTruth = TermVisitor.prototype.visitToTruth;
  ExpressionEvaluator.prototype.visitToTuple = TermVisitor.prototype.visitToTuple;
  ExpressionEvaluator.prototype.visitToVar = TermVisitor.prototype.visitToVar;
  ExpressionEvaluator.prototype.visitClause = TermVisitor.prototype.visitClause;
  ExpressionEvaluator.prototype.visitCons = TermVisitor.prototype.visitCons;
  ExpressionEvaluator.prototype.visitConstant = TermVisitor.prototype.visitConstant;
  ExpressionEvaluator.prototype.visitDirective = TermVisitor.prototype.visitDirective;
  ExpressionEvaluator.prototype.visitEmpty = TermVisitor.prototype.visitEmpty;
  ExpressionEvaluator.prototype.visitEmptyList = TermVisitor.prototype.visitEmptyList;
  ExpressionEvaluator.prototype.visitEmptySet = TermVisitor.prototype.visitEmptySet;
  ExpressionEvaluator.prototype.visitFact = TermVisitor.prototype.visitFact;
  ExpressionEvaluator.prototype.visitIndicator = TermVisitor.prototype.visitIndicator;
  ExpressionEvaluator.prototype.visitInteger = TermVisitor.prototype.visitInteger;
  ExpressionEvaluator.prototype.visitList = TermVisitor.prototype.visitList;
  ExpressionEvaluator.prototype.visitNumeric = TermVisitor.prototype.visitNumeric;
  ExpressionEvaluator.prototype.visitReal = TermVisitor.prototype.visitReal;
  ExpressionEvaluator.prototype.visitRule = TermVisitor.prototype.visitRule;
  ExpressionEvaluator.prototype.visitSet = TermVisitor.prototype.visitSet;
  ExpressionEvaluator.prototype.visitTerm = TermVisitor.prototype.visitTerm;
  ExpressionEvaluator.prototype.visitTruth = TermVisitor.prototype.visitTruth;
  ExpressionEvaluator.prototype.visitTuple = TermVisitor.prototype.visitTuple;
  ExpressionEvaluator.prototype.visitVar = TermVisitor.prototype.visitVar;
  AliasedLibrary.prototype.containsSignature = Library.prototype.containsSignature;
  AliasedLibrary.prototype.containsOperator = Library.prototype.containsOperator;
  AliasedLibrary.prototype.hasPrimitive = Library.prototype.hasPrimitive;
  AliasedLibrary.prototype.hasProtected = Library.prototype.hasProtected;
  LibraryGroup.prototype.containsSignature = Library.prototype.containsSignature;
  LibraryGroup.prototype.containsOperator = Library.prototype.containsOperator;
  LibraryGroup.prototype.hasPrimitive = Library.prototype.hasPrimitive;
  LibraryGroup.prototype.hasProtected = Library.prototype.hasProtected;
  Libraries.prototype.containsSignature = LibraryGroup.prototype.containsSignature;
  Libraries.prototype.containsOperator = LibraryGroup.prototype.containsOperator;
  Libraries.prototype.hasPrimitive = LibraryGroup.prototype.hasPrimitive;
  Libraries.prototype.hasProtected = LibraryGroup.prototype.hasProtected;
  LibraryImpl.prototype.containsSignature = Library.prototype.containsSignature;
  LibraryImpl.prototype.containsOperator = Library.prototype.containsOperator;
  LibraryImpl.prototype.hasPrimitive = Library.prototype.hasPrimitive;
  LibraryImpl.prototype.hasProtected = Library.prototype.hasProtected;
  Object.defineProperty(MagicTerm.prototype, 'isAtom', Object.getOwnPropertyDescriptor(Term.prototype, 'isAtom'));
  Object.defineProperty(MagicTerm.prototype, 'isBound', Object.getOwnPropertyDescriptor(Term.prototype, 'isBound'));
  Object.defineProperty(MagicTerm.prototype, 'isClause', Object.getOwnPropertyDescriptor(Term.prototype, 'isClause'));
  Object.defineProperty(MagicTerm.prototype, 'isCons', Object.getOwnPropertyDescriptor(Term.prototype, 'isCons'));
  Object.defineProperty(MagicTerm.prototype, 'isConstant', Object.getOwnPropertyDescriptor(Term.prototype, 'isConstant'));
  Object.defineProperty(MagicTerm.prototype, 'isDirective', Object.getOwnPropertyDescriptor(Term.prototype, 'isDirective'));
  Object.defineProperty(MagicTerm.prototype, 'isEmptyList', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptyList'));
  Object.defineProperty(MagicTerm.prototype, 'isEmptySet', Object.getOwnPropertyDescriptor(Term.prototype, 'isEmptySet'));
  Object.defineProperty(MagicTerm.prototype, 'isFact', Object.getOwnPropertyDescriptor(Term.prototype, 'isFact'));
  Object.defineProperty(MagicTerm.prototype, 'isFail', Object.getOwnPropertyDescriptor(Term.prototype, 'isFail'));
  Object.defineProperty(MagicTerm.prototype, 'isGround', Object.getOwnPropertyDescriptor(Term.prototype, 'isGround'));
  Object.defineProperty(MagicTerm.prototype, 'isIndicator', Object.getOwnPropertyDescriptor(Term.prototype, 'isIndicator'));
  Object.defineProperty(MagicTerm.prototype, 'isInt', Object.getOwnPropertyDescriptor(Term.prototype, 'isInt'));
  Object.defineProperty(MagicTerm.prototype, 'isList', Object.getOwnPropertyDescriptor(Term.prototype, 'isList'));
  Object.defineProperty(MagicTerm.prototype, 'isNumber', Object.getOwnPropertyDescriptor(Term.prototype, 'isNumber'));
  Object.defineProperty(MagicTerm.prototype, 'isReal', Object.getOwnPropertyDescriptor(Term.prototype, 'isReal'));
  Object.defineProperty(MagicTerm.prototype, 'isRule', Object.getOwnPropertyDescriptor(Term.prototype, 'isRule'));
  Object.defineProperty(MagicTerm.prototype, 'isSet', Object.getOwnPropertyDescriptor(Term.prototype, 'isSet'));
  Object.defineProperty(MagicTerm.prototype, 'isStruct', Object.getOwnPropertyDescriptor(Term.prototype, 'isStruct'));
  Object.defineProperty(MagicTerm.prototype, 'isTrue', Object.getOwnPropertyDescriptor(Term.prototype, 'isTrue'));
  Object.defineProperty(MagicTerm.prototype, 'isTuple', Object.getOwnPropertyDescriptor(Term.prototype, 'isTuple'));
  Object.defineProperty(MagicTerm.prototype, 'isVariable', Object.getOwnPropertyDescriptor(Term.prototype, 'isVariable'));
  MagicTerm.prototype.accept = Term.prototype.accept;
  MagicTerm.prototype.applySubstitution = Term.prototype.applySubstitution;
  MagicTerm.prototype.apply = Term.prototype.apply;
  MagicTerm.prototype.as_6ddzm9$ = Term.prototype.as_6ddzm9$;
  MagicTerm.prototype.castTo_6ddzm9$ = Term.prototype.castTo_6ddzm9$;
  MagicTerm.prototype.freshCopy = Term.prototype.freshCopy;
  MagicTerm.prototype.freshCopyFromScope = Term.prototype.freshCopyFromScope;
  MagicTerm.prototype.getSubstituted = Term.prototype.getSubstituted;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToAtom = TermVisitor.prototype.visitToAtom;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToClause = TermVisitor.prototype.visitToClause;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToCons = TermVisitor.prototype.visitToCons;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToConstant = TermVisitor.prototype.visitToConstant;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToDirective = TermVisitor.prototype.visitToDirective;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToEmpty = TermVisitor.prototype.visitToEmpty;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToEmptyList = TermVisitor.prototype.visitToEmptyList;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToEmptySet = TermVisitor.prototype.visitToEmptySet;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToFact = TermVisitor.prototype.visitToFact;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToIndicator = TermVisitor.prototype.visitToIndicator;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToInteger = TermVisitor.prototype.visitToInteger;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToList = TermVisitor.prototype.visitToList;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToReal = TermVisitor.prototype.visitToReal;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToRule = TermVisitor.prototype.visitToRule;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToSet = TermVisitor.prototype.visitToSet;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToTerm = TermVisitor.prototype.visitToTerm;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToTruth = TermVisitor.prototype.visitToTruth;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToTuple = TermVisitor.prototype.visitToTuple;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitToVar = TermVisitor.prototype.visitToVar;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitAtom = TermVisitor.prototype.visitAtom;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitClause = TermVisitor.prototype.visitClause;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitCons = TermVisitor.prototype.visitCons;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitConstant = TermVisitor.prototype.visitConstant;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitDirective = TermVisitor.prototype.visitDirective;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitEmpty = TermVisitor.prototype.visitEmpty;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitEmptyList = TermVisitor.prototype.visitEmptyList;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitEmptySet = TermVisitor.prototype.visitEmptySet;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitFact = TermVisitor.prototype.visitFact;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitIndicator = TermVisitor.prototype.visitIndicator;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitInteger = TermVisitor.prototype.visitInteger;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitList = TermVisitor.prototype.visitList;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitNumeric = TermVisitor.prototype.visitNumeric;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitReal = TermVisitor.prototype.visitReal;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitRule = TermVisitor.prototype.visitRule;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitSet = TermVisitor.prototype.visitSet;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitStruct = TermVisitor.prototype.visitStruct;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitTerm = TermVisitor.prototype.visitTerm;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitTruth = TermVisitor.prototype.visitTruth;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitTuple = TermVisitor.prototype.visitTuple;
  EnsureExecutable$ensurerVisitor$ObjectLiteral.prototype.visitVar = TermVisitor.prototype.visitVar;
  Kotlin.defineModule('@tuprolog/2p-solve', _);
  return _;
}));



},{"@tuprolog/2p-core":4,"@tuprolog/2p-theory":17,"@tuprolog/2p-unify":18,"kotlin":66,"kt-math":67}],17:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-core', '@tuprolog/2p-unify'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-core'), require('@tuprolog/2p-unify'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-theory'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-theory'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-theory'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-theory'.");
    }if (typeof this['@tuprolog/2p-unify'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-theory'. Its dependency '@tuprolog/2p-unify' was not found. Please, check whether '@tuprolog/2p-unify' is loaded prior to '@tuprolog/2p-theory'.");
    }root['@tuprolog/2p-theory'] = factory(typeof this['@tuprolog/2p-theory'] === 'undefined' ? {} : this['@tuprolog/2p-theory'], kotlin, this['@tuprolog/2p-core'], this['@tuprolog/2p-unify']);
  }
}(this, function (_, Kotlin, $module$_2p_core, $module$_2p_unify) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var Rule = $module$_2p_core.it.unibo.tuprolog.core.Rule;
  var Directive = $module$_2p_core.it.unibo.tuprolog.core.Directive;
  var Fact = $module$_2p_core.it.unibo.tuprolog.core.Fact;
  var Var = $module$_2p_core.it.unibo.tuprolog.core.Var;
  var emptySequence = Kotlin.kotlin.sequences.emptySequence_287e2$;
  var asIterable = Kotlin.kotlin.collections.asIterable_us0mfu$;
  var Scope = $module$_2p_core.it.unibo.tuprolog.core.Scope;
  var asIterable_0 = Kotlin.kotlin.sequences.asIterable_veqyi0$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Iterable = Kotlin.kotlin.collections.Iterable;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var any = Kotlin.kotlin.sequences.any_veqyi0$;
  var throwCCE = Kotlin.throwCCE;
  var map = Kotlin.kotlin.sequences.map_z5avom$;
  var Struct = $module$_2p_core.it.unibo.tuprolog.core.Struct;
  var ensureNotNull = Kotlin.ensureNotNull;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var none = Kotlin.kotlin.sequences.none_veqyi0$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var equals = Kotlin.equals;
  var hashCode = Kotlin.hashCode;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var toList_0 = Kotlin.kotlin.sequences.toList_veqyi0$;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var Collection = Kotlin.kotlin.collections.Collection;
  var first = Kotlin.kotlin.collections.first_7wnvza$;
  var asSequence = Kotlin.kotlin.collections.asSequence_abgq59$;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var asSequence_0 = Kotlin.kotlin.collections.asSequence_7wnvza$;
  var wrapFunction = Kotlin.wrapFunction;
  var count = Kotlin.kotlin.collections.count_7wnvza$;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var take = Kotlin.kotlin.sequences.take_wuwhe2$;
  var removeAll = Kotlin.kotlin.collections.removeAll_tj7pfx$;
  var Math_0 = Math;
  var replace = Kotlin.kotlin.text.replace_680rmw$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var toMap = Kotlin.kotlin.collections.toMap_jbpz7q$;
  var singleOrNull = Kotlin.kotlin.sequences.singleOrNull_veqyi0$;
  var Unificator = $module$_2p_unify.it.unibo.tuprolog.unify.Unificator;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var addAll_0 = Kotlin.kotlin.collections.addAll_tj7pfx$;
  var filter = Kotlin.kotlin.sequences.filter_euau3h$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var single = Kotlin.kotlin.sequences.single_veqyi0$;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var Unit = Kotlin.kotlin.Unit;
  RetractResult$Success.prototype = Object.create(RetractResult.prototype);
  RetractResult$Success.prototype.constructor = RetractResult$Success;
  RetractResult$Failure.prototype = Object.create(RetractResult.prototype);
  RetractResult$Failure.prototype.constructor = RetractResult$Failure;
  AbstractIntermediateReteNode.prototype = Object.create(AbstractReteNode.prototype);
  AbstractIntermediateReteNode.prototype.constructor = AbstractIntermediateReteNode;
  AbstractLeafReteNode.prototype = Object.create(AbstractReteNode.prototype);
  AbstractLeafReteNode.prototype.constructor = AbstractLeafReteNode;
  ArgNode.prototype = Object.create(AbstractIntermediateReteNode.prototype);
  ArgNode.prototype.constructor = ArgNode;
  ArityNode.prototype = Object.create(AbstractIntermediateReteNode.prototype);
  ArityNode.prototype.constructor = ArityNode;
  DirectiveNode.prototype = Object.create(AbstractLeafReteNode.prototype);
  DirectiveNode.prototype.constructor = DirectiveNode;
  FunctorNode.prototype = Object.create(AbstractIntermediateReteNode.prototype);
  FunctorNode.prototype.constructor = FunctorNode;
  NoArgsNode.prototype = Object.create(AbstractIntermediateReteNode.prototype);
  NoArgsNode.prototype.constructor = NoArgsNode;
  RootNode.prototype = Object.create(AbstractIntermediateReteNode.prototype);
  RootNode.prototype.constructor = RootNode;
  RuleNode.prototype = Object.create(AbstractLeafReteNode.prototype);
  RuleNode.prototype.constructor = RuleNode;
  function ClauseDatabase() {
    ClauseDatabase$Companion_getInstance();
  }
  Object.defineProperty(ClauseDatabase.prototype, 'rules', {
    get: function () {
      var $receiver = this.clauses;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.isType(element, Rule))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  Object.defineProperty(ClauseDatabase.prototype, 'directives', {
    get: function () {
      var $receiver = this.clauses;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (Kotlin.isType(element, Directive))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  ClauseDatabase.prototype.plus = function (clause) {
    return this.assertZ(clause);
  };
  ClauseDatabase.prototype.assertAFact = function (struct) {
    return this.assertA(Fact.Companion.of(struct));
  };
  ClauseDatabase.prototype.assertZFact = function (struct) {
    return this.assertZ(Fact.Companion.of(struct));
  };
  ClauseDatabase.prototype.retractByHead = function (head) {
    return this.retract(Rule.Companion.of(head, [Var.Companion.anonymous()]));
  };
  ClauseDatabase.prototype.retractAllByHead = function (head) {
    return this.retractAll(Rule.Companion.of(head, [Var.Companion.anonymous()]));
  };
  function ClauseDatabase$Companion() {
    ClauseDatabase$Companion_instance = this;
  }
  ClauseDatabase$Companion.prototype.empty = function () {
    return this.ofSequence(emptySequence());
  };
  ClauseDatabase$Companion.prototype.of = function (clause) {
    return this.ofIterable(asIterable(clause));
  };
  ClauseDatabase$Companion.prototype.ofScopes = function (clause) {
    var destination = ArrayList_init_0(clause.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== clause.length; ++tmp$) {
      var item = clause[tmp$];
      destination.add_11rb$(Scope.Companion.emptyWithFunction(item));
    }
    return this.ofIterable(destination);
  };
  ClauseDatabase$Companion.prototype.ofSequence = function (clauses) {
    return this.ofIterable(asIterable_0(clauses));
  };
  ClauseDatabase$Companion.prototype.ofIterable = function (clauses) {
    return ClauseDatabaseImpl_init(clauses);
  };
  ClauseDatabase$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ClauseDatabase$Companion_instance = null;
  function ClauseDatabase$Companion_getInstance() {
    if (ClauseDatabase$Companion_instance === null) {
      new ClauseDatabase$Companion();
    }return ClauseDatabase$Companion_instance;
  }
  ClauseDatabase.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ClauseDatabase',
    interfaces: [Iterable]
  };
  function ClauseDatabaseImpl(reteTree) {
    this.reteTree_0 = reteTree;
    this.clauses_o2xtw3$_0 = lazy(ClauseDatabaseImpl$clauses$lambda(this));
    this.rules_26vpwg$_0 = lazy(ClauseDatabaseImpl$rules$lambda(this));
    this.directives_52z3fr$_0 = lazy(ClauseDatabaseImpl$directives$lambda(this));
  }
  Object.defineProperty(ClauseDatabaseImpl.prototype, 'clauses', {
    get: function () {
      return this.clauses_o2xtw3$_0.value;
    }
  });
  Object.defineProperty(ClauseDatabaseImpl.prototype, 'rules', {
    get: function () {
      return this.rules_26vpwg$_0.value;
    }
  });
  Object.defineProperty(ClauseDatabaseImpl.prototype, 'directives', {
    get: function () {
      return this.directives_52z3fr$_0.value;
    }
  });
  ClauseDatabaseImpl.prototype.plusClauseDatabase = function (clauseDatabase) {
    return ClauseDatabaseImpl_init(plus(this.clauses, this.checkClausesCorrect_0(clauseDatabase.clauses)));
  };
  ClauseDatabaseImpl.prototype.plus = function (clause) {
    return ClauseDatabase.prototype.plus.call(this, this.checkClauseCorrect_0(clause));
  };
  ClauseDatabaseImpl.prototype.contains = function (clause) {
    return any(this.get(clause));
  };
  ClauseDatabaseImpl.prototype.containsHead = function (head) {
    return this.contains(Rule.Companion.of(head, [Var.Companion.anonymous()]));
  };
  ClauseDatabaseImpl.prototype.containsIndicator = function (indicator) {
    return any(this.getByIndicator(indicator));
  };
  ClauseDatabaseImpl.prototype.get = function (clause) {
    return this.reteTree_0.get_11rc$(clause);
  };
  function ClauseDatabaseImpl$get$lambda(it) {
    var tmp$;
    return Kotlin.isType(tmp$ = it, Rule) ? tmp$ : throwCCE();
  }
  ClauseDatabaseImpl.prototype.getByHead = function (head) {
    return map(this.get(Rule.Companion.of(head, [Var.Companion.anonymous()])), ClauseDatabaseImpl$get$lambda);
  };
  function ClauseDatabaseImpl$get$lambda_0(it) {
    var tmp$;
    return Kotlin.isType(tmp$ = it, Rule) ? tmp$ : throwCCE();
  }
  ClauseDatabaseImpl.prototype.getByIndicator = function (indicator) {
    if (!indicator.isWellFormed) {
      var message = 'Provided indicator should be wellFormed! ' + indicator;
      throw IllegalArgumentException_init(message.toString());
    }var tmp$ = Rule.Companion;
    var tmp$_0 = Struct.Companion;
    var tmp$_1 = ensureNotNull(indicator.indicatedName);
    var $receiver = new IntRange(1, ensureNotNull(indicator.indicatedArity));
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_2;
    tmp$_2 = $receiver.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(Var.Companion.anonymous());
    }
    return map(this.get(tmp$.of(tmp$_0.ofList(tmp$_1, destination), [Var.Companion.anonymous()])), ClauseDatabaseImpl$get$lambda_0);
  };
  ClauseDatabaseImpl.prototype.assertA = function (clause) {
    var $receiver = this.reteTree_0.deepCopy();
    $receiver.put_rax04h$(this.checkClauseCorrect_0(clause), true);
    return new ClauseDatabaseImpl($receiver);
  };
  ClauseDatabaseImpl.prototype.assertZ = function (clause) {
    var $receiver = this.reteTree_0.deepCopy();
    $receiver.put_rax04h$(this.checkClauseCorrect_0(clause), false);
    return new ClauseDatabaseImpl($receiver);
  };
  ClauseDatabaseImpl.prototype.retract = function (clause) {
    var tmp$;
    var newTheory = this.reteTree_0.deepCopy();
    var retracted = newTheory.remove_11rc$(clause);
    if (none(retracted))
      tmp$ = new RetractResult$Failure(this);
    else
      tmp$ = new RetractResult$Success(new ClauseDatabaseImpl(newTheory), asIterable_0(retracted));
    return tmp$;
  };
  ClauseDatabaseImpl.prototype.retractAll = function (clause) {
    var tmp$;
    var newTheory = this.reteTree_0.deepCopy();
    var retracted = newTheory.removeAll_11rc$(clause);
    if (none(retracted))
      tmp$ = new RetractResult$Failure(this);
    else
      tmp$ = new RetractResult$Success(new ClauseDatabaseImpl(newTheory), asIterable_0(retracted));
    return tmp$;
  };
  ClauseDatabaseImpl.prototype.iterator = function () {
    return this.clauses.iterator();
  };
  ClauseDatabaseImpl.prototype.toString = function () {
    return 'ClauseDatabase(clauses=' + this.clauses + ')';
  };
  ClauseDatabaseImpl.prototype.toStringAsProlog = function (asPrologText) {
    if (asPrologText === true)
      return joinToString(this.clauses, '.\n', '', '.\n');
    else if (asPrologText === false)
      return this.toString();
    else
      return Kotlin.noWhenBranchMatched();
  };
  ClauseDatabaseImpl.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (this === other)
      return true;
    if (other == null || !((tmp$ = Kotlin.getKClassFromExpression(this)) != null ? tmp$.equals(Kotlin.getKClassFromExpression(other)) : null))
      return false;
    Kotlin.isType(tmp$_0 = other, ClauseDatabaseImpl) ? tmp$_0 : throwCCE();
    if (!equals(this.clauses, other.clauses))
      return false;
    return true;
  };
  ClauseDatabaseImpl.prototype.hashCode = function () {
    return hashCode(this.clauses);
  };
  ClauseDatabaseImpl.prototype.checkClauseCorrect_0 = function (clause) {
    if (!clause.isWellFormed) {
      var message = "ClauseDatabase can contain only well formed clauses: this isn't " + clause;
      throw IllegalArgumentException_init(message.toString());
    }return clause;
  };
  ClauseDatabaseImpl.prototype.checkClausesCorrect_0 = function (clauses) {
    var all$result;
    all$break: do {
      var tmp$;
      if (Kotlin.isType(clauses, Collection) && clauses.isEmpty()) {
        all$result = true;
        break all$break;
      }tmp$ = clauses.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!element.isWellFormed) {
          all$result = false;
          break all$break;
        }}
      all$result = true;
    }
     while (false);
    if (!all$result) {
      var destination = ArrayList_init();
      var tmp$_0;
      tmp$_0 = clauses.iterator();
      while (tmp$_0.hasNext()) {
        var element_0 = tmp$_0.next();
        if (!element_0.isWellFormed)
          destination.add_11rb$(element_0);
      }
      var message = "ClauseDatabase can contain only well formed clauses: these aren't " + toList(destination);
      throw IllegalArgumentException_init(message.toString());
    }return clauses;
  };
  function ClauseDatabaseImpl$clauses$lambda(this$ClauseDatabaseImpl) {
    return function () {
      return toList_0(this$ClauseDatabaseImpl.reteTree_0.indexedElements);
    };
  }
  function ClauseDatabaseImpl$rules$lambda(this$ClauseDatabaseImpl) {
    return function () {
      return toList(Kotlin.callGetter(this$ClauseDatabaseImpl, ClauseDatabase.prototype, 'rules'));
    };
  }
  function ClauseDatabaseImpl$directives$lambda(this$ClauseDatabaseImpl) {
    return function () {
      return toList(Kotlin.callGetter(this$ClauseDatabaseImpl, ClauseDatabase.prototype, 'directives'));
    };
  }
  ClauseDatabaseImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ClauseDatabaseImpl',
    interfaces: [ClauseDatabase]
  };
  function ClauseDatabaseImpl_init(clauses, $this) {
    $this = $this || Object.create(ClauseDatabaseImpl.prototype);
    ClauseDatabaseImpl.call($this, ReteTree_getInstance().of_84e88n$(clauses));
    $this.checkClausesCorrect_0(clauses);
    return $this;
  }
  function RetractResult() {
  }
  function RetractResult$Success(clauseDatabase, clauses) {
    RetractResult.call(this);
    this.clauseDatabase_hgrkqa$_0 = clauseDatabase;
    this.clauses = clauses;
  }
  Object.defineProperty(RetractResult$Success.prototype, 'clauseDatabase', {
    get: function () {
      return this.clauseDatabase_hgrkqa$_0;
    }
  });
  Object.defineProperty(RetractResult$Success.prototype, 'firstClause', {
    get: function () {
      return first(this.clauses);
    }
  });
  RetractResult$Success.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Success',
    interfaces: [RetractResult]
  };
  RetractResult$Success.prototype.component1 = function () {
    return this.clauseDatabase;
  };
  RetractResult$Success.prototype.component2 = function () {
    return this.clauses;
  };
  RetractResult$Success.prototype.copy_du3qm$ = function (clauseDatabase, clauses) {
    return new RetractResult$Success(clauseDatabase === void 0 ? this.clauseDatabase : clauseDatabase, clauses === void 0 ? this.clauses : clauses);
  };
  RetractResult$Success.prototype.toString = function () {
    return 'Success(clauseDatabase=' + Kotlin.toString(this.clauseDatabase) + (', clauses=' + Kotlin.toString(this.clauses)) + ')';
  };
  RetractResult$Success.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.clauseDatabase) | 0;
    result = result * 31 + Kotlin.hashCode(this.clauses) | 0;
    return result;
  };
  RetractResult$Success.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.clauseDatabase, other.clauseDatabase) && Kotlin.equals(this.clauses, other.clauses)))));
  };
  function RetractResult$Failure(clauseDatabase) {
    RetractResult.call(this);
    this.clauseDatabase_t3bdwr$_0 = clauseDatabase;
  }
  Object.defineProperty(RetractResult$Failure.prototype, 'clauseDatabase', {
    get: function () {
      return this.clauseDatabase_t3bdwr$_0;
    }
  });
  RetractResult$Failure.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Failure',
    interfaces: [RetractResult]
  };
  RetractResult$Failure.prototype.component1 = function () {
    return this.clauseDatabase;
  };
  RetractResult$Failure.prototype.copy_rzayi7$ = function (clauseDatabase) {
    return new RetractResult$Failure(clauseDatabase === void 0 ? this.clauseDatabase : clauseDatabase);
  };
  RetractResult$Failure.prototype.toString = function () {
    return 'Failure(clauseDatabase=' + Kotlin.toString(this.clauseDatabase) + ')';
  };
  RetractResult$Failure.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.clauseDatabase) | 0;
    return result;
  };
  RetractResult$Failure.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.clauseDatabase, other.clauseDatabase))));
  };
  RetractResult.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RetractResult',
    interfaces: []
  };
  function AbstractIntermediateReteNode(children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractReteNode.call(this, children);
    this.children_v08mq7$_0 = children;
  }
  Object.defineProperty(AbstractIntermediateReteNode.prototype, 'children', {
    get: function () {
      return this.children_v08mq7$_0;
    }
  });
  function AbstractIntermediateReteNode$get_AbstractIntermediateReteNode$indexedElements$lambda(it) {
    return it.value.indexedElements;
  }
  Object.defineProperty(AbstractIntermediateReteNode.prototype, 'indexedElements', {
    get: function () {
      return flatMap(asSequence(this.children), AbstractIntermediateReteNode$get_AbstractIntermediateReteNode$indexedElements$lambda);
    }
  });
  function AbstractIntermediateReteNode$get$lambda(closure$element) {
    return function (it) {
      var tmp$;
      return (tmp$ = it != null ? it.get_11rc$(closure$element) : null) != null ? tmp$ : emptySequence();
    };
  }
  AbstractIntermediateReteNode.prototype.get_11rc$ = function (element) {
    return flatMap(this.selectChildren_11rc$(element), AbstractIntermediateReteNode$get$lambda(element));
  };
  AbstractIntermediateReteNode.prototype.removeAll_11rc$ = function (element) {
    var $receiver = toList_0(this.selectChildren_11rc$(element));
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element_0 = tmp$.next();
      var tmp$_0, tmp$_1;
      var list = (tmp$_1 = (tmp$_0 = element_0 != null ? element_0.removeAll_11rc$(element) : null) != null ? toList_0(tmp$_0) : null) != null ? tmp$_1 : emptyList();
      addAll(destination, list);
    }
    return asSequence_0(destination);
  };
  AbstractIntermediateReteNode.prototype.retrieve_0 = wrapFunction(function () {
    var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
    return function (ChildNodeType_0, isChildNodeType, $receiver, keyFilter) {
      var tmp$;
      var result = LinkedHashMap_init();
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var entry = tmp$.next();
        if (isChildNodeType(entry.value)) {
          result.put_xwzc9p$(entry.key, entry.value);
        }}
      var tmp$_0;
      var result_0 = LinkedHashMap_init();
      tmp$_0 = result.entries.iterator();
      while (tmp$_0.hasNext()) {
        var entry_0 = tmp$_0.next();
        if (keyFilter(entry_0.key)) {
          result_0.put_xwzc9p$(entry_0.key, entry_0.value);
        }}
      return asSequence_0(result_0.values);
    };
  });
  AbstractIntermediateReteNode.prototype.foldWithLimit_0 = function ($receiver, initial, limit, operation) {
    var tmp$;
    if (limit < 0) {
      var tmp$_0;
      var accumulator = initial;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        accumulator = operation(accumulator, element);
      }
      tmp$ = accumulator;
    } else {
      var tmp$_1;
      var accumulator_0 = initial;
      tmp$_1 = $receiver.iterator();
      while (tmp$_1.hasNext()) {
        var element_0 = tmp$_1.next();
        var accumulator_1 = accumulator_0;
        var operation$result;
        if (count(accumulator_1) < limit) {
          operation$result = operation(accumulator_1, element_0);
        } else
          return accumulator_1;
        accumulator_0 = operation$result;
      }
      tmp$ = accumulator_0;
    }
    return tmp$;
  };
  AbstractIntermediateReteNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractIntermediateReteNode',
    interfaces: [AbstractReteNode]
  };
  function AbstractLeafReteNode(children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractReteNode.call(this, children);
    this.children_6pytwq$_0 = children;
  }
  Object.defineProperty(AbstractLeafReteNode.prototype, 'children', {
    get: function () {
      return this.children_6pytwq$_0;
    }
  });
  Object.defineProperty(AbstractLeafReteNode.prototype, 'indexedElements', {
    get: function () {
      return asSequence_0(this.leafElements);
    }
  });
  AbstractLeafReteNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    if (beforeOthers)
      this.leafElements.add_wxm5ur$(0, element);
    else
      this.leafElements.add_11rb$(element);
  };
  AbstractLeafReteNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    var tmp$ = this.get_11rc$(element);
    var tmp$_0;
    if (limit > 0) {
      var b = this.leafElements.size;
      tmp$_0 = Math_0.min(limit, b);
    } else {
      tmp$_0 = this.leafElements.size;
    }
    var $receiver = asSequence_0(toList_0(take(tmp$, tmp$_0)));
    removeAll(this.leafElements, $receiver);
    return $receiver;
  };
  AbstractLeafReteNode.prototype.removeAll_11rc$ = function (element) {
    var $receiver = asSequence_0(toList_0(this.get_11rc$(element)));
    removeAll(this.leafElements, $receiver);
    return $receiver;
  };
  AbstractLeafReteNode.prototype.toString_6taknv$ = function (treefy) {
    return treefy ? this.header + ' {' + joinToString(this.leafElements, '.\n\t', '\n\t', '.\n') + '}' : this.toString();
  };
  AbstractLeafReteNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractLeafReteNode',
    interfaces: [AbstractReteNode]
  };
  function AbstractReteNode(children) {
    AbstractReteNode$Companion_getInstance();
    if (children === void 0) {
      children = LinkedHashMap_init();
    }this.children_p6rvjc$_0 = children;
  }
  Object.defineProperty(AbstractReteNode.prototype, 'children', {
    get: function () {
      return this.children_p6rvjc$_0;
    }
  });
  AbstractReteNode.prototype.remove_bkld3u$ = function (element, limit) {
    if (limit === 0)
      return emptySequence();
    else
      return this.removeWithNonZeroLimit_bkld3u$(element, limit);
  };
  AbstractReteNode.prototype.removeAll_11rc$ = function (element) {
    return this.remove_bkld3u$(element, 2147483647);
  };
  function AbstractReteNode$toString$lambda(closure$treefy) {
    return function (it) {
      return replace(it.toString_6taknv$(closure$treefy), '\n', '\n\t');
    };
  }
  function AbstractReteNode$toString$lambda_0(it) {
    return it.toString();
  }
  AbstractReteNode.prototype.toString_6taknv$ = function (treefy) {
    return treefy ? this.header + ' {' + joinToString(this.children.values, ',\n\t', '\n\t', '\n', void 0, void 0, AbstractReteNode$toString$lambda(treefy)) + '}' : this.header + ' {' + joinToString(this.children.values, ',', void 0, void 0, void 0, void 0, AbstractReteNode$toString$lambda_0);
  };
  AbstractReteNode.prototype.toString = function () {
    return this.toString_6taknv$(false);
  };
  function AbstractReteNode$Companion() {
    AbstractReteNode$Companion_instance = this;
  }
  AbstractReteNode$Companion.prototype.deepCopy_0 = wrapFunction(function () {
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
    return function ($receiver, deepCopyKey, deepCopyValue) {
      var $receiver_0 = $receiver.entries;
      var destination = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(to(deepCopyKey(item.key), deepCopyValue(item.value)));
      }
      return toMap(destination, LinkedHashMap_init());
    };
  });
  AbstractReteNode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AbstractReteNode$Companion_instance = null;
  function AbstractReteNode$Companion_getInstance() {
    if (AbstractReteNode$Companion_instance === null) {
      new AbstractReteNode$Companion();
    }return AbstractReteNode$Companion_instance;
  }
  AbstractReteNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractReteNode',
    interfaces: [ReteNode]
  };
  function ReteNode() {
  }
  ReteNode.prototype.put_11rc$ = function (element) {
    this.put_rax04h$(element, false);
  };
  ReteNode.prototype.remove_11rc$ = function (element) {
    return this.remove_bkld3u$(element, 1);
  };
  ReteNode.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ReteNode',
    interfaces: []
  };
  function ArgNode(index, term, children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractIntermediateReteNode.call(this, children);
    this.index_0 = index;
    this.term_0 = term;
    this.children_hs6ut3$_0 = children;
    if (!(this.index_0 >= 0)) {
      var message = 'ArgNode index should be greater than or equal to 0';
      throw IllegalArgumentException_init(message.toString());
    }this.header_lz0udh$_0 = 'Argument(' + this.index_0 + ', ' + this.term_0 + ')';
  }
  Object.defineProperty(ArgNode.prototype, 'children', {
    get: function () {
      return this.children_hs6ut3$_0;
    }
  });
  Object.defineProperty(ArgNode.prototype, 'header', {
    get: function () {
      return this.header_lz0udh$_0;
    }
  });
  function ArgNode$put$lambda$lambda(closure$nextArg) {
    return function (head) {
      return head != null && head.structurallyEquals(closure$nextArg);
    };
  }
  ArgNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    var tmp$;
    if (this.index_0 < (element.head.arity - 1 | 0)) {
      var nextArg = element.head.get(this.index_0 + 1 | 0);
      var tmp$_0;
      var child = (tmp$_0 = this.children.get_11rb$(nextArg)) != null ? tmp$_0 : singleOrNull(this.retrieve_0(ArgNode, Kotlin.isInstanceOf(ArgNode), this.children, ArgNode$put$lambda$lambda(nextArg)));
      var tmp$_1;
      if (child != null)
        tmp$_1 = child;
      else {
        var $receiver = new ArgNode(this.index_0 + 1 | 0, nextArg);
        this.children.put_xwzc9p$(nextArg, $receiver);
        tmp$_1 = $receiver;
      }
      tmp$ = tmp$_1;
    } else {
      var $receiver_0 = this.children;
      var tmp$_2;
      var value = $receiver_0.get_11rb$(null);
      if (value == null) {
        var answer = new RuleNode();
        $receiver_0.put_xwzc9p$(null, answer);
        tmp$_2 = answer;
      } else {
        tmp$_2 = value;
      }
      tmp$ = tmp$_2;
    }
    tmp$.put_rax04h$(element, beforeOthers);
  };
  function ArgNode$selectChildren$lambda(closure$nextArg) {
    return function (head) {
      return head != null && Unificator.Companion.matches(head, closure$nextArg);
    };
  }
  ArgNode.prototype.selectChildren_11rc$ = function (element) {
    if (this.index_0 < (element.head.arity - 1 | 0)) {
      var nextArg = element.head.get(this.index_0 + 1 | 0);
      return this.retrieve_0(ArgNode, Kotlin.isInstanceOf(ArgNode), this.children, ArgNode$selectChildren$lambda(nextArg));
    } else
      return sequenceOf([this.children.get_11rb$(null)]);
  };
  function ArgNode$removeWithNonZeroLimit$lambda(closure$element, closure$limit) {
    return function (yetRemoved, currentChild) {
      var closure$element_0 = closure$element;
      var closure$limit_0 = closure$limit;
      var tmp$;
      addAll_0(yetRemoved, (tmp$ = currentChild != null ? currentChild.remove_bkld3u$(closure$element_0, closure$limit_0 - yetRemoved.size | 0) : null) != null ? tmp$ : emptySequence());
      return yetRemoved;
    };
  }
  ArgNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    return asSequence_0(this.foldWithLimit_0(this.selectChildren_11rc$(element), ArrayList_init(), limit, ArgNode$removeWithNonZeroLimit$lambda(element, limit)));
  };
  ArgNode.prototype.removeAll_11rc$ = function (element) {
    var tmp$ = this.selectChildren_11rc$(element);
    var tmp$_0;
    var accumulator = ArrayList_init();
    tmp$_0 = tmp$.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      var yetRemoved = accumulator;
      var tmp$_1;
      addAll_0(yetRemoved, (tmp$_1 = element_0 != null ? element_0.removeAll_11rc$(element) : null) != null ? tmp$_1 : emptySequence());
      accumulator = yetRemoved;
    }
    return asSequence_0(accumulator);
  };
  function ArgNode$deepCopy$lambda(it) {
    return it;
  }
  function ArgNode$deepCopy$lambda_0(it) {
    return it.deepCopy();
  }
  ArgNode.prototype.deepCopy = function () {
    return new ArgNode(this.index_0, this.term_0, AbstractReteNode$Companion_getInstance().deepCopy_0(this.children, ArgNode$deepCopy$lambda, ArgNode$deepCopy$lambda_0));
  };
  ArgNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ArgNode',
    interfaces: [AbstractIntermediateReteNode]
  };
  ArgNode.prototype.component1_0 = function () {
    return this.index_0;
  };
  ArgNode.prototype.component2_0 = function () {
    return this.term_0;
  };
  ArgNode.prototype.component3 = function () {
    return this.children;
  };
  ArgNode.prototype.copy_s1i6gt$ = function (index, term, children) {
    return new ArgNode(index === void 0 ? this.index_0 : index, term === void 0 ? this.term_0 : term, children === void 0 ? this.children : children);
  };
  ArgNode.prototype.toString = function () {
    return 'ArgNode(index=' + Kotlin.toString(this.index_0) + (', term=' + Kotlin.toString(this.term_0)) + (', children=' + Kotlin.toString(this.children)) + ')';
  };
  ArgNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.index_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.term_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  ArgNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.index_0, other.index_0) && Kotlin.equals(this.term_0, other.term_0) && Kotlin.equals(this.children, other.children)))));
  };
  function ArityNode(arity, children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractIntermediateReteNode.call(this, children);
    this.arity_0 = arity;
    this.children_japmts$_0 = children;
    if (!(this.arity_0 >= 0)) {
      var message = 'ArityNode arity should be greater than or equal to 0';
      throw IllegalArgumentException_init(message.toString());
    }this.header_os1o3m$_0 = 'Arity(' + this.arity_0 + ')';
  }
  Object.defineProperty(ArityNode.prototype, 'children', {
    get: function () {
      return this.children_japmts$_0;
    }
  });
  Object.defineProperty(ArityNode.prototype, 'header', {
    get: function () {
      return this.header_os1o3m$_0;
    }
  });
  function ArityNode$put$lambda$lambda(closure$headFirstArg) {
    return function (head) {
      return head != null && head.structurallyEquals(closure$headFirstArg);
    };
  }
  ArityNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    var tmp$;
    if (element.head.arity > 0) {
      var headFirstArg = element.head.get(0);
      var tmp$_0;
      var child = (tmp$_0 = this.children.get_11rb$(headFirstArg)) != null ? tmp$_0 : singleOrNull(this.retrieve_0(ArgNode, Kotlin.isInstanceOf(ArgNode), this.children, ArityNode$put$lambda$lambda(headFirstArg)));
      var tmp$_1;
      if (child != null)
        tmp$_1 = child;
      else {
        var $receiver = new ArgNode(0, headFirstArg);
        this.children.put_xwzc9p$(headFirstArg, $receiver);
        tmp$_1 = $receiver;
      }
      tmp$ = tmp$_1;
    } else {
      var $receiver_0 = this.children;
      var tmp$_2;
      var value = $receiver_0.get_11rb$(null);
      if (value == null) {
        var answer = new NoArgsNode();
        $receiver_0.put_xwzc9p$(null, answer);
        tmp$_2 = answer;
      } else {
        tmp$_2 = value;
      }
      tmp$ = tmp$_2;
    }
    tmp$.put_rax04h$(element, beforeOthers);
  };
  function ArityNode$selectChildren$lambda(closure$element) {
    return function (head) {
      return head != null && Unificator.Companion.matches(head, closure$element.head.get(0));
    };
  }
  ArityNode.prototype.selectChildren_11rc$ = function (element) {
    if (element.head.arity > 0)
      return this.retrieve_0(ArgNode, Kotlin.isInstanceOf(ArgNode), this.children, ArityNode$selectChildren$lambda(element));
    else
      return sequenceOf([this.children.get_11rb$(null)]);
  };
  function ArityNode$removeWithNonZeroLimit$lambda(closure$element, closure$limit) {
    return function (yetRemoved, currentChild) {
      var closure$element_0 = closure$element;
      var closure$limit_0 = closure$limit;
      var tmp$;
      addAll_0(yetRemoved, (tmp$ = currentChild != null ? currentChild.remove_bkld3u$(closure$element_0, closure$limit_0 - yetRemoved.size | 0) : null) != null ? tmp$ : emptySequence());
      return yetRemoved;
    };
  }
  ArityNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    return asSequence_0(this.foldWithLimit_0(this.selectChildren_11rc$(element), ArrayList_init(), limit, ArityNode$removeWithNonZeroLimit$lambda(element, limit)));
  };
  ArityNode.prototype.removeAll_11rc$ = function (element) {
    var tmp$ = this.selectChildren_11rc$(element);
    var tmp$_0;
    var accumulator = ArrayList_init();
    tmp$_0 = tmp$.iterator();
    while (tmp$_0.hasNext()) {
      var element_0 = tmp$_0.next();
      var yetRemoved = accumulator;
      var tmp$_1;
      addAll_0(yetRemoved, (tmp$_1 = element_0 != null ? element_0.removeAll_11rc$(element) : null) != null ? tmp$_1 : emptySequence());
      accumulator = yetRemoved;
    }
    return asSequence_0(accumulator);
  };
  function ArityNode$deepCopy$lambda(it) {
    return it;
  }
  function ArityNode$deepCopy$lambda_0(it) {
    return it.deepCopy();
  }
  ArityNode.prototype.deepCopy = function () {
    return new ArityNode(this.arity_0, AbstractReteNode$Companion_getInstance().deepCopy_0(this.children, ArityNode$deepCopy$lambda, ArityNode$deepCopy$lambda_0));
  };
  ArityNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ArityNode',
    interfaces: [AbstractIntermediateReteNode]
  };
  ArityNode.prototype.component1_0 = function () {
    return this.arity_0;
  };
  ArityNode.prototype.component2 = function () {
    return this.children;
  };
  ArityNode.prototype.copy_po0hqo$ = function (arity, children) {
    return new ArityNode(arity === void 0 ? this.arity_0 : arity, children === void 0 ? this.children : children);
  };
  ArityNode.prototype.toString = function () {
    return 'ArityNode(arity=' + Kotlin.toString(this.arity_0) + (', children=' + Kotlin.toString(this.children)) + ')';
  };
  ArityNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.arity_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  ArityNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.arity_0, other.arity_0) && Kotlin.equals(this.children, other.children)))));
  };
  function DirectiveNode(leafElements) {
    if (leafElements === void 0) {
      leafElements = ArrayList_init();
    }AbstractLeafReteNode.call(this);
    this.leafElements_ww7p84$_0 = leafElements;
    this.header_yifdcc$_0 = 'Directives';
  }
  Object.defineProperty(DirectiveNode.prototype, 'leafElements', {
    get: function () {
      return this.leafElements_ww7p84$_0;
    }
  });
  Object.defineProperty(DirectiveNode.prototype, 'header', {
    get: function () {
      return this.header_yifdcc$_0;
    }
  });
  function DirectiveNode$get$lambda(closure$element) {
    return function (it) {
      return Unificator.Companion.matches(it, closure$element);
    };
  }
  DirectiveNode.prototype.get_11rc$ = function (element) {
    return filter(this.indexedElements, DirectiveNode$get$lambda(element));
  };
  DirectiveNode.prototype.deepCopy = function () {
    return new DirectiveNode(toMutableList(this.leafElements));
  };
  DirectiveNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DirectiveNode',
    interfaces: [AbstractLeafReteNode]
  };
  DirectiveNode.prototype.component1_0 = function () {
    return this.leafElements;
  };
  DirectiveNode.prototype.copy_yuexeq$ = function (leafElements) {
    return new DirectiveNode(leafElements === void 0 ? this.leafElements : leafElements);
  };
  DirectiveNode.prototype.toString = function () {
    return 'DirectiveNode(leafElements=' + Kotlin.toString(this.leafElements) + ')';
  };
  DirectiveNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.leafElements) | 0;
    return result;
  };
  DirectiveNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.leafElements, other.leafElements))));
  };
  function FunctorNode(functor, children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractIntermediateReteNode.call(this, children);
    this.functor_0 = functor;
    this.children_dzt1mi$_0 = children;
    this.header_s7uzqw$_0 = 'Functor(' + this.functor_0 + ')';
  }
  Object.defineProperty(FunctorNode.prototype, 'children', {
    get: function () {
      return this.children_dzt1mi$_0;
    }
  });
  Object.defineProperty(FunctorNode.prototype, 'header', {
    get: function () {
      return this.header_s7uzqw$_0;
    }
  });
  FunctorNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    if (equals(this.functor_0, element.head.functor)) {
      var a = element.head.arity;
      var $receiver = this.children;
      var tmp$;
      var value = $receiver.get_11rb$(a);
      if (value == null) {
        var answer = new ArityNode(a);
        $receiver.put_xwzc9p$(a, answer);
        tmp$ = answer;
      } else {
        tmp$ = value;
      }
      tmp$.put_rax04h$(element, beforeOthers);
    }};
  FunctorNode.prototype.selectChildren_11rc$ = function (element) {
    return sequenceOf([this.children.get_11rb$(element.head.arity)]);
  };
  FunctorNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = single(this.selectChildren_11rc$(element))) != null ? tmp$.remove_bkld3u$(element, limit) : null) != null ? tmp$_0 : emptySequence();
  };
  function FunctorNode$deepCopy$lambda(it) {
    return it;
  }
  function FunctorNode$deepCopy$lambda_0(it) {
    return it.deepCopy();
  }
  FunctorNode.prototype.deepCopy = function () {
    return new FunctorNode(this.functor_0, AbstractReteNode$Companion_getInstance().deepCopy_0(this.children, FunctorNode$deepCopy$lambda, FunctorNode$deepCopy$lambda_0));
  };
  FunctorNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FunctorNode',
    interfaces: [AbstractIntermediateReteNode]
  };
  FunctorNode.prototype.component1_0 = function () {
    return this.functor_0;
  };
  FunctorNode.prototype.component2 = function () {
    return this.children;
  };
  FunctorNode.prototype.copy_5v3vxs$ = function (functor, children) {
    return new FunctorNode(functor === void 0 ? this.functor_0 : functor, children === void 0 ? this.children : children);
  };
  FunctorNode.prototype.toString = function () {
    return 'FunctorNode(functor=' + Kotlin.toString(this.functor_0) + (', children=' + Kotlin.toString(this.children)) + ')';
  };
  FunctorNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.functor_0) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  FunctorNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.functor_0, other.functor_0) && Kotlin.equals(this.children, other.children)))));
  };
  function NoArgsNode(children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractIntermediateReteNode.call(this, children);
    this.children_ee0rvt$_0 = children;
    this.header_69pkbp$_0 = 'NoArguments';
  }
  Object.defineProperty(NoArgsNode.prototype, 'children', {
    get: function () {
      return this.children_ee0rvt$_0;
    }
  });
  Object.defineProperty(NoArgsNode.prototype, 'header', {
    get: function () {
      return this.header_69pkbp$_0;
    }
  });
  NoArgsNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    var $receiver = this.children;
    var tmp$;
    var value = $receiver.get_11rb$(null);
    if (value == null) {
      var answer = new RuleNode();
      $receiver.put_xwzc9p$(null, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    tmp$.put_rax04h$(element, beforeOthers);
  };
  NoArgsNode.prototype.selectChildren_11rc$ = function (element) {
    return sequenceOf([this.children.get_11rb$(null)]);
  };
  NoArgsNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = single(this.selectChildren_11rc$(element))) != null ? tmp$.remove_bkld3u$(element, limit) : null) != null ? tmp$_0 : emptySequence();
  };
  function NoArgsNode$deepCopy$lambda(it) {
    return it;
  }
  function NoArgsNode$deepCopy$lambda_0(it) {
    return it.deepCopy();
  }
  NoArgsNode.prototype.deepCopy = function () {
    return new NoArgsNode(AbstractReteNode$Companion_getInstance().deepCopy_0(this.children, NoArgsNode$deepCopy$lambda, NoArgsNode$deepCopy$lambda_0));
  };
  NoArgsNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NoArgsNode',
    interfaces: [AbstractIntermediateReteNode]
  };
  NoArgsNode.prototype.component1 = function () {
    return this.children;
  };
  NoArgsNode.prototype.copy_vshrnl$ = function (children) {
    return new NoArgsNode(children === void 0 ? this.children : children);
  };
  NoArgsNode.prototype.toString = function () {
    return 'NoArgsNode(children=' + Kotlin.toString(this.children) + ')';
  };
  NoArgsNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  NoArgsNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.children, other.children))));
  };
  function ReteTree() {
    ReteTree_instance = this;
  }
  ReteTree.prototype.of_84e88n$ = function (clauses) {
    var $receiver = new RootNode();
    var tmp$;
    tmp$ = clauses.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      $receiver.put_11rc$(element);
    }
    return $receiver;
  };
  ReteTree.prototype.of_t6tron$ = function (clauses) {
    return this.of_84e88n$(listOf(clauses.slice()));
  };
  ReteTree.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ReteTree',
    interfaces: []
  };
  var ReteTree_instance = null;
  function ReteTree_getInstance() {
    if (ReteTree_instance === null) {
      new ReteTree();
    }return ReteTree_instance;
  }
  function RootNode(children) {
    if (children === void 0) {
      children = LinkedHashMap_init();
    }AbstractIntermediateReteNode.call(this, children);
    this.children_qzhlfx$_0 = children;
    this.header_fbqo3j$_0 = 'Root';
  }
  Object.defineProperty(RootNode.prototype, 'children', {
    get: function () {
      return this.children_qzhlfx$_0;
    }
  });
  Object.defineProperty(RootNode.prototype, 'header', {
    get: function () {
      return this.header_fbqo3j$_0;
    }
  });
  RootNode.prototype.put_rax04h$ = function (element, beforeOthers) {
    var tmp$;
    if (Kotlin.isType(element, Directive)) {
      var $receiver = this.children;
      var tmp$_0;
      var value = $receiver.get_11rb$(null);
      if (value == null) {
        var tmp$_1;
        var answer = Kotlin.isType(tmp$_1 = new DirectiveNode(), ReteNode) ? tmp$_1 : throwCCE();
        $receiver.put_xwzc9p$(null, answer);
        tmp$_0 = answer;
      } else {
        tmp$_0 = value;
      }
      tmp$ = tmp$_0;
    } else if (Kotlin.isType(element, Rule)) {
      var $receiver_0 = element.head.functor;
      var $receiver_1 = this.children;
      var tmp$_2;
      var value_0 = $receiver_1.get_11rb$($receiver_0);
      if (value_0 == null) {
        var tmp$_3;
        var answer_0 = Kotlin.isType(tmp$_3 = new FunctorNode($receiver_0), ReteNode) ? tmp$_3 : throwCCE();
        $receiver_1.put_xwzc9p$($receiver_0, answer_0);
        tmp$_2 = answer_0;
      } else {
        tmp$_2 = value_0;
      }
      tmp$ = tmp$_2;
    } else
      tmp$ = null;
    tmp$ != null ? (tmp$.put_rax04h$(element, beforeOthers), Unit) : null;
  };
  RootNode.prototype.selectChildren_11rc$ = function (element) {
    var tmp$;
    if (Kotlin.isType(element, Directive))
      tmp$ = this.children.get_11rb$(null);
    else if (Kotlin.isType(element, Rule))
      tmp$ = this.children.get_11rb$(element.head.functor);
    else
      tmp$ = null;
    return sequenceOf([tmp$]);
  };
  RootNode.prototype.removeWithNonZeroLimit_bkld3u$ = function (element, limit) {
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = single(this.selectChildren_11rc$(element))) != null ? tmp$.remove_bkld3u$(element, limit) : null) != null ? tmp$_0 : emptySequence();
  };
  function RootNode$deepCopy$lambda(it) {
    return it;
  }
  function RootNode$deepCopy$lambda_0(it) {
    return it.deepCopy();
  }
  RootNode.prototype.deepCopy = function () {
    return new RootNode(AbstractReteNode$Companion_getInstance().deepCopy_0(this.children, RootNode$deepCopy$lambda, RootNode$deepCopy$lambda_0));
  };
  RootNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RootNode',
    interfaces: [AbstractIntermediateReteNode]
  };
  RootNode.prototype.component1 = function () {
    return this.children;
  };
  RootNode.prototype.copy_dawn8y$ = function (children) {
    return new RootNode(children === void 0 ? this.children : children);
  };
  RootNode.prototype.toString = function () {
    return 'RootNode(children=' + Kotlin.toString(this.children) + ')';
  };
  RootNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    return result;
  };
  RootNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.children, other.children))));
  };
  function RuleNode(leafElements) {
    if (leafElements === void 0) {
      leafElements = ArrayList_init();
    }AbstractLeafReteNode.call(this);
    this.leafElements_ie8qbz$_0 = leafElements;
    this.header_lc3ujr$_0 = 'Rules';
  }
  Object.defineProperty(RuleNode.prototype, 'leafElements', {
    get: function () {
      return this.leafElements_ie8qbz$_0;
    }
  });
  Object.defineProperty(RuleNode.prototype, 'header', {
    get: function () {
      return this.header_lc3ujr$_0;
    }
  });
  function RuleNode$get$lambda(closure$element) {
    return function (it) {
      return Unificator.Companion.matches(it, closure$element);
    };
  }
  RuleNode.prototype.get_11rc$ = function (element) {
    return filter(this.indexedElements, RuleNode$get$lambda(element));
  };
  RuleNode.prototype.deepCopy = function () {
    return new RuleNode(toMutableList(this.leafElements));
  };
  RuleNode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RuleNode',
    interfaces: [AbstractLeafReteNode]
  };
  RuleNode.prototype.component1_0 = function () {
    return this.leafElements;
  };
  RuleNode.prototype.copy_h2qq0d$ = function (leafElements) {
    return new RuleNode(leafElements === void 0 ? this.leafElements : leafElements);
  };
  RuleNode.prototype.toString = function () {
    return 'RuleNode(leafElements=' + Kotlin.toString(this.leafElements) + ')';
  };
  RuleNode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.leafElements) | 0;
    return result;
  };
  RuleNode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.leafElements, other.leafElements))));
  };
  Object.defineProperty(ClauseDatabase, 'Companion', {
    get: ClauseDatabase$Companion_getInstance
  });
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$theory = package$tuprolog.theory || (package$tuprolog.theory = {});
  package$theory.ClauseDatabase = ClauseDatabase;
  package$theory.ClauseDatabaseImpl_init_84e88n$ = ClauseDatabaseImpl_init;
  package$theory.ClauseDatabaseImpl = ClauseDatabaseImpl;
  RetractResult.Success = RetractResult$Success;
  RetractResult.Failure = RetractResult$Failure;
  package$theory.RetractResult = RetractResult;
  $$importsForInline$$['@tuprolog/2p-theory'] = _;
  var package$rete = package$theory.rete || (package$theory.rete = {});
  package$rete.AbstractIntermediateReteNode = AbstractIntermediateReteNode;
  package$rete.AbstractLeafReteNode = AbstractLeafReteNode;
  Object.defineProperty(AbstractReteNode, 'Companion', {
    get: AbstractReteNode$Companion_getInstance
  });
  package$rete.AbstractReteNode = AbstractReteNode;
  package$rete.ReteNode = ReteNode;
  var package$clause = package$rete.clause || (package$rete.clause = {});
  package$clause.ArgNode = ArgNode;
  package$clause.ArityNode = ArityNode;
  package$clause.DirectiveNode = DirectiveNode;
  package$clause.FunctorNode = FunctorNode;
  package$clause.NoArgsNode = NoArgsNode;
  Object.defineProperty(package$clause, 'ReteTree', {
    get: ReteTree_getInstance
  });
  package$clause.RootNode = RootNode;
  package$clause.RuleNode = RuleNode;
  ClauseDatabaseImpl.prototype.assertAFact = ClauseDatabase.prototype.assertAFact;
  ClauseDatabaseImpl.prototype.assertZFact = ClauseDatabase.prototype.assertZFact;
  ClauseDatabaseImpl.prototype.retractByHead = ClauseDatabase.prototype.retractByHead;
  ClauseDatabaseImpl.prototype.retractAllByHead = ClauseDatabase.prototype.retractAllByHead;
  AbstractReteNode.prototype.remove_11rc$ = ReteNode.prototype.remove_11rc$;
  AbstractReteNode.prototype.put_11rc$ = ReteNode.prototype.put_11rc$;
  Kotlin.defineModule('@tuprolog/2p-theory', _);
  return _;
}));



},{"@tuprolog/2p-core":4,"@tuprolog/2p-unify":18,"kotlin":66}],18:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', '@tuprolog/2p-core'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('@tuprolog/2p-core'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-unify'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to '@tuprolog/2p-unify'.");
    }if (typeof this['@tuprolog/2p-core'] === 'undefined') {
      throw new Error("Error loading module '@tuprolog/2p-unify'. Its dependency '@tuprolog/2p-core' was not found. Please, check whether '@tuprolog/2p-core' is loaded prior to '@tuprolog/2p-unify'.");
    }root['@tuprolog/2p-unify'] = factory(typeof this['@tuprolog/2p-unify'] === 'undefined' ? {} : this['@tuprolog/2p-unify'], kotlin, this['@tuprolog/2p-core']);
  }
}(this, function (_, Kotlin, $module$_2p_core) {
  'use strict';
  var Var = $module$_2p_core.it.unibo.tuprolog.core.Var;
  var Struct = $module$_2p_core.it.unibo.tuprolog.core.Struct;
  var getCallableRef = Kotlin.getCallableRef;
  var Substitution = $module$_2p_core.it.unibo.tuprolog.core.Substitution;
  var plus = Kotlin.kotlin.collections.plus_i0e5px$;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var throwCCE = Kotlin.throwCCE;
  var Unit = Kotlin.kotlin.Unit;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var Pair = Kotlin.kotlin.Pair;
  var Constant = $module$_2p_core.it.unibo.tuprolog.core.Constant;
  var equals = Kotlin.equals;
  var zip = Kotlin.kotlin.sequences.zip_r7q3s9$;
  var flatMap = Kotlin.kotlin.sequences.flatMap_49vfel$;
  var sequenceOf = Kotlin.kotlin.sequences.sequenceOf_i5x0yv$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var ToTermConvertible = $module$_2p_core.it.unibo.tuprolog.core.ToTermConvertible;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var Integer = $module$_2p_core.it.unibo.tuprolog.core.Integer;
  var Numeric = $module$_2p_core.it.unibo.tuprolog.core.Numeric;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var TuPrologException_init = $module$_2p_core.it.unibo.tuprolog.core.exception.TuPrologException_init_dbl4no$;
  var TuPrologException = $module$_2p_core.it.unibo.tuprolog.core.exception.TuPrologException;
  var toString = Kotlin.toString;
  Equation$Identity.prototype = Object.create(Equation.prototype);
  Equation$Identity.prototype.constructor = Equation$Identity;
  Equation$Assignment.prototype = Object.create(Equation.prototype);
  Equation$Assignment.prototype.constructor = Equation$Assignment;
  Equation$Comparison.prototype = Object.create(Equation.prototype);
  Equation$Comparison.prototype.constructor = Equation$Comparison;
  Equation$Contradiction.prototype = Object.create(Equation.prototype);
  Equation$Contradiction.prototype.constructor = Equation$Contradiction;
  Unificator$Companion$naive$ObjectLiteral.prototype = Object.create(AbstractUnificator.prototype);
  Unificator$Companion$naive$ObjectLiteral.prototype.constructor = Unificator$Companion$naive$ObjectLiteral;
  Unificator$Companion$strict$ObjectLiteral.prototype = Object.create(AbstractUnificator.prototype);
  Unificator$Companion$strict$ObjectLiteral.prototype.constructor = Unificator$Companion$strict$ObjectLiteral;
  NoUnifyException.prototype = Object.create(TuPrologException.prototype);
  NoUnifyException.prototype.constructor = NoUnifyException;
  OccurCheckException.prototype = Object.create(NoUnifyException.prototype);
  OccurCheckException.prototype.constructor = OccurCheckException;
  function AbstractUnificator(context) {
    if (context === void 0)
      context = Substitution.Companion.empty();
    this.context_x8hv6s$_0 = context;
    this.contextEquations_do39cn$_43jmyo$_0 = lazy(AbstractUnificator$contextEquations$lambda(this));
  }
  Object.defineProperty(AbstractUnificator.prototype, 'context', {
    get: function () {
      return this.context_x8hv6s$_0;
    }
  });
  Object.defineProperty(AbstractUnificator.prototype, 'contextEquations_do39cn$_0', {
    get: function () {
      return this.contextEquations_do39cn$_43jmyo$_0.value;
    }
  });
  AbstractUnificator.prototype.occurrenceCheck_s2zafx$_0 = function (variable, term) {
    if (Kotlin.isType(term, Var))
      return this.checkTermsEquality_gf3qo6$(variable, term);
    else if (Kotlin.isType(term, Struct)) {
      var $receiver = term.args;
      var any$result;
      any$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (this.occurrenceCheck_s2zafx$_0(variable, element)) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      return any$result;
    } else
      return false;
  };
  AbstractUnificator.prototype.equationsFor_a2meqv$_0 = function (term1, term2) {
    return Equation$Companion_getInstance().allOf(term1, term2, getCallableRef('checkTermsEquality', function ($receiver, first, second) {
      return $receiver.checkTermsEquality_gf3qo6$(first, second);
    }.bind(null, this)));
  };
  AbstractUnificator.prototype.applySubstitutionToEquations_w8kjb$_0 = function (substitution, equations, exceptIndex) {
    var changed = false;
    for (var i = 0; i !== equations.size; ++i) {
      var tmp$, tmp$_0;
      if (i === exceptIndex || Kotlin.isType(equations.get_za3lpa$(i), Equation$Contradiction) || Kotlin.isType(equations.get_za3lpa$(i), Equation$Identity))
        continue;
      var currentEq = equations.get_za3lpa$(i);
      var tmp$_1 = currentEq.apply(substitution).toPair();
      var newLhs = tmp$_1.component1()
      , newRhs = tmp$_1.component2();
      if (!((tmp$ = currentEq.lhs) != null ? tmp$.equals(newLhs) : null) || !((tmp$_0 = currentEq.rhs) != null ? tmp$_0.equals(newRhs) : null)) {
        equations.set_wxm5ur$(i, Equation$Companion_getInstance().of(newLhs, newRhs, getCallableRef('checkTermsEquality', function ($receiver, first, second) {
          return $receiver.checkTermsEquality_gf3qo6$(first, second);
        }.bind(null, this))));
        changed = true;
      }}
    return changed;
  };
  AbstractUnificator.prototype.mguWithOccurCheck$default = function (term1, term2, occurCheckEnabled) {
    if (this.context.isFailed)
      return Substitution.Companion.failed();
    var equations = toMutableList(plus(this.contextEquations_do39cn$_0, this.equationsFor_a2meqv$_0(term1, term2)));
    var changed = {v: true};
    while (changed.v) {
      changed.v = false;
      var eqIterator = equations.listIterator();
      while (eqIterator.hasNext()) {
        var $receiver = eqIterator.next();
        var tmp$, tmp$_0;
        if (Kotlin.isType($receiver, Equation$Contradiction))
          return Substitution.Companion.failed();
        else if (Kotlin.isType($receiver, Equation$Identity)) {
          eqIterator.remove();
          changed.v = true;
        } else if (Kotlin.isType($receiver, Equation$Assignment)) {
          if (occurCheckEnabled ? this.occurrenceCheck_s2zafx$_0(Kotlin.isType(tmp$ = $receiver.lhs, Var) ? tmp$ : throwCCE(), $receiver.rhs) : false)
            return Substitution.Companion.failed();
          else {
            changed.v = this.applySubstitutionToEquations_w8kjb$_0(Substitution.Companion.ofVar(Kotlin.isType(tmp$_0 = $receiver.lhs, Var) ? tmp$_0 : throwCCE(), $receiver.rhs), equations, eqIterator.previousIndex());
          }
        } else if (Kotlin.isType($receiver, Equation$Comparison)) {
          eqIterator.remove();
          var $receiver_0 = this.equationsFor_a2meqv$_0($receiver.lhs, $receiver.rhs);
          var action = getCallableRef('add', function ($receiver, element) {
            return $receiver.add_11rb$(element), Unit;
          }.bind(null, eqIterator));
          var tmp$_1;
          tmp$_1 = $receiver_0.iterator();
          while (tmp$_1.hasNext()) {
            var element = tmp$_1.next();
            action(element);
          }
          changed.v = true;
        }}
    }
    var destination = ArrayList_init();
    var tmp$_2;
    tmp$_2 = equations.iterator();
    while (tmp$_2.hasNext()) {
      var element_0 = tmp$_2.next();
      if (Kotlin.isType(element_0, Equation$Assignment))
        destination.add_11rb$(element_0);
    }
    return toSubstitution_0(destination);
  };
  function AbstractUnificator$contextEquations$lambda(this$AbstractUnificator) {
    return function () {
      return toEquations(this$AbstractUnificator.context);
    };
  }
  AbstractUnificator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AbstractUnificator',
    interfaces: [Unificator]
  };
  function Equation(lhs, rhs) {
    Equation$Companion_getInstance();
    this.lhs_qxfqbs$_0 = lhs;
    this.rhs_qxbwem$_0 = rhs;
  }
  Object.defineProperty(Equation.prototype, 'lhs', {
    get: function () {
      return this.lhs_qxfqbs$_0;
    }
  });
  Object.defineProperty(Equation.prototype, 'rhs', {
    get: function () {
      return this.rhs_qxbwem$_0;
    }
  });
  function Equation$Identity(lhs, rhs) {
    Equation.call(this, lhs, rhs);
    this.lhs_vuvhfi$_0 = lhs;
    this.rhs_vuzbco$_0 = rhs;
  }
  Object.defineProperty(Equation$Identity.prototype, 'lhs', {
    get: function () {
      return this.lhs_vuvhfi$_0;
    }
  });
  Object.defineProperty(Equation$Identity.prototype, 'rhs', {
    get: function () {
      return this.rhs_vuzbco$_0;
    }
  });
  Equation$Identity.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Identity',
    interfaces: [Equation]
  };
  Equation$Identity.prototype.component1 = function () {
    return this.lhs;
  };
  Equation$Identity.prototype.component2 = function () {
    return this.rhs;
  };
  Equation$Identity.prototype.copy_xqnamm$ = function (lhs, rhs) {
    return new Equation$Identity(lhs === void 0 ? this.lhs : lhs, rhs === void 0 ? this.rhs : rhs);
  };
  Equation$Identity.prototype.toString = function () {
    return 'Identity(lhs=' + Kotlin.toString(this.lhs) + (', rhs=' + Kotlin.toString(this.rhs)) + ')';
  };
  Equation$Identity.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.lhs) | 0;
    result = result * 31 + Kotlin.hashCode(this.rhs) | 0;
    return result;
  };
  Equation$Identity.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.lhs, other.lhs) && Kotlin.equals(this.rhs, other.rhs)))));
  };
  function Equation$Assignment(lhs, rhs) {
    Equation.call(this, lhs, rhs);
    this.lhs_pq0pkh$_0 = lhs;
    this.rhs_ppwvnb$_0 = rhs;
  }
  Object.defineProperty(Equation$Assignment.prototype, 'lhs', {
    get: function () {
      return this.lhs_pq0pkh$_0;
    }
  });
  Object.defineProperty(Equation$Assignment.prototype, 'rhs', {
    get: function () {
      return this.rhs_ppwvnb$_0;
    }
  });
  Equation$Assignment.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Assignment',
    interfaces: [Equation]
  };
  Equation$Assignment.prototype.component1 = function () {
    return this.lhs;
  };
  Equation$Assignment.prototype.component2 = function () {
    return this.rhs;
  };
  Equation$Assignment.prototype.copy_d0sfgn$ = function (lhs, rhs) {
    return new Equation$Assignment(lhs === void 0 ? this.lhs : lhs, rhs === void 0 ? this.rhs : rhs);
  };
  Equation$Assignment.prototype.toString = function () {
    return 'Assignment(lhs=' + Kotlin.toString(this.lhs) + (', rhs=' + Kotlin.toString(this.rhs)) + ')';
  };
  Equation$Assignment.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.lhs) | 0;
    result = result * 31 + Kotlin.hashCode(this.rhs) | 0;
    return result;
  };
  Equation$Assignment.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.lhs, other.lhs) && Kotlin.equals(this.rhs, other.rhs)))));
  };
  function Equation$Comparison(lhs, rhs) {
    Equation.call(this, lhs, rhs);
    this.lhs_kjduxf$_0 = lhs;
    this.rhs_kjhoul$_0 = rhs;
  }
  Object.defineProperty(Equation$Comparison.prototype, 'lhs', {
    get: function () {
      return this.lhs_kjduxf$_0;
    }
  });
  Object.defineProperty(Equation$Comparison.prototype, 'rhs', {
    get: function () {
      return this.rhs_kjhoul$_0;
    }
  });
  Equation$Comparison.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Comparison',
    interfaces: [Equation]
  };
  Equation$Comparison.prototype.component1 = function () {
    return this.lhs;
  };
  Equation$Comparison.prototype.component2 = function () {
    return this.rhs;
  };
  Equation$Comparison.prototype.copy_3lrik2$ = function (lhs, rhs) {
    return new Equation$Comparison(lhs === void 0 ? this.lhs : lhs, rhs === void 0 ? this.rhs : rhs);
  };
  Equation$Comparison.prototype.toString = function () {
    return 'Comparison(lhs=' + Kotlin.toString(this.lhs) + (', rhs=' + Kotlin.toString(this.rhs)) + ')';
  };
  Equation$Comparison.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.lhs) | 0;
    result = result * 31 + Kotlin.hashCode(this.rhs) | 0;
    return result;
  };
  Equation$Comparison.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.lhs, other.lhs) && Kotlin.equals(this.rhs, other.rhs)))));
  };
  function Equation$Contradiction(lhs, rhs) {
    Equation.call(this, lhs, rhs);
    this.lhs_7qflw5$_0 = lhs;
    this.rhs_7qjftb$_0 = rhs;
  }
  Object.defineProperty(Equation$Contradiction.prototype, 'lhs', {
    get: function () {
      return this.lhs_7qflw5$_0;
    }
  });
  Object.defineProperty(Equation$Contradiction.prototype, 'rhs', {
    get: function () {
      return this.rhs_7qjftb$_0;
    }
  });
  Equation$Contradiction.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Contradiction',
    interfaces: [Equation]
  };
  Equation$Contradiction.prototype.component1 = function () {
    return this.lhs;
  };
  Equation$Contradiction.prototype.component2 = function () {
    return this.rhs;
  };
  Equation$Contradiction.prototype.copy_3lrik2$ = function (lhs, rhs) {
    return new Equation$Contradiction(lhs === void 0 ? this.lhs : lhs, rhs === void 0 ? this.rhs : rhs);
  };
  Equation$Contradiction.prototype.toString = function () {
    return 'Contradiction(lhs=' + Kotlin.toString(this.lhs) + (', rhs=' + Kotlin.toString(this.rhs)) + ')';
  };
  Equation$Contradiction.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.lhs) | 0;
    result = result * 31 + Kotlin.hashCode(this.rhs) | 0;
    return result;
  };
  Equation$Contradiction.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.lhs, other.lhs) && Kotlin.equals(this.rhs, other.rhs)))));
  };
  Equation.prototype.toTerm = function () {
    return Struct.Companion.of('=', [this.lhs, this.rhs]);
  };
  Equation.prototype.toPair = function () {
    return new Pair(this.lhs, this.rhs);
  };
  Equation.prototype.swap = function () {
    return Equation$Companion_getInstance().of(this.rhs, this.lhs);
  };
  Equation.prototype.apply = function (substitution, equalityChecker) {
    if (equalityChecker === void 0)
      equalityChecker = getCallableRef('equals', function ($receiver, other) {
        return $receiver.equals(other);
      });
    return Equation$Companion_getInstance().of(this.lhs.getSubstituted(substitution, []), this.rhs.getSubstituted(substitution, []), equalityChecker);
  };
  function Equation$Companion() {
    Equation$Companion_instance = this;
  }
  Equation$Companion.prototype.of = function (lhs, rhs, equalityChecker) {
    if (equalityChecker === void 0)
      equalityChecker = getCallableRef('equals', function ($receiver, other) {
        return $receiver.equals(other);
      });
    if (Kotlin.isType(lhs, Var) && Kotlin.isType(rhs, Var))
      return equalityChecker(lhs, rhs) ? new Equation$Identity(lhs, rhs) : new Equation$Assignment(lhs, rhs);
    else if (Kotlin.isType(lhs, Var))
      return new Equation$Assignment(lhs, rhs);
    else if (Kotlin.isType(rhs, Var))
      return new Equation$Assignment(rhs, lhs);
    else if (Kotlin.isType(lhs, Constant) && Kotlin.isType(rhs, Constant))
      return equalityChecker(lhs, rhs) ? new Equation$Identity(lhs, rhs) : new Equation$Contradiction(lhs, rhs);
    else if (Kotlin.isType(lhs, Constant) || Kotlin.isType(rhs, Constant))
      return new Equation$Contradiction(lhs, rhs);
    else if (Kotlin.isType(lhs, Struct) && Kotlin.isType(rhs, Struct) && (lhs.arity !== rhs.arity || !equals(lhs.functor, rhs.functor)))
      return new Equation$Contradiction(lhs, rhs);
    else
      return new Equation$Comparison(lhs, rhs);
  };
  Equation$Companion.prototype.ofPair = function (pair, equalityChecker) {
    if (equalityChecker === void 0)
      equalityChecker = getCallableRef('equals', function ($receiver, other) {
        return $receiver.equals(other);
      });
    return this.of(pair.first, pair.second, equalityChecker);
  };
  Equation$Companion.prototype.allOfPair = function (pair, equalityChecker) {
    if (equalityChecker === void 0)
      equalityChecker = getCallableRef('equals', function ($receiver, other) {
        return $receiver.equals(other);
      });
    return this.allOf(pair.first, pair.second, equalityChecker);
  };
  function Equation$Companion$allOf$lambda(closure$equalityChecker, this$Equation$) {
    return function (it) {
      return this$Equation$.allOfPair(it, closure$equalityChecker);
    };
  }
  Equation$Companion.prototype.allOf = function (lhs, rhs, equalityChecker) {
    if (equalityChecker === void 0)
      equalityChecker = getCallableRef('equals', function ($receiver, other) {
        return $receiver.equals(other);
      });
    if (!Kotlin.isType(lhs, Constant) && !Kotlin.isType(rhs, Constant) && !Kotlin.isType(lhs, Var) && !Kotlin.isType(rhs, Var) && Kotlin.isType(lhs, Struct) && Kotlin.isType(rhs, Struct) && lhs.arity === rhs.arity && equals(lhs.functor, rhs.functor))
      return flatMap(zip(lhs.argsSequence, rhs.argsSequence), Equation$Companion$allOf$lambda(equalityChecker, this));
    else
      return sequenceOf([this.of(lhs, rhs, equalityChecker)]);
  };
  Equation$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Equation$Companion_instance = null;
  function Equation$Companion_getInstance() {
    if (Equation$Companion_instance === null) {
      new Equation$Companion();
    }return Equation$Companion_instance;
  }
  Equation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Equation',
    interfaces: [ToTermConvertible]
  };
  function toSubstitution($receiver) {
    return Substitution.Companion.ofPair($receiver.toPair(), []);
  }
  function toSubstitution_0($receiver) {
    var tmp$ = Substitution.Companion;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(item.toPair());
    }
    return tmp$.ofIterable(destination);
  }
  function toEquations($receiver) {
    var $receiver_0 = $receiver.entries;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var variable = item.key;
      var term = item.value;
      tmp$_0.call(destination, new Equation$Assignment(variable, term));
    }
    return destination;
  }
  function eq($receiver, that) {
    return Equation$Companion_getInstance().of($receiver, that);
  }
  function Unificator() {
    Unificator$Companion_getInstance();
  }
  Unificator.prototype.mguWithOccurCheck = function (term1, term2, occurCheckEnabled, callback$default) {
    if (occurCheckEnabled === void 0)
      occurCheckEnabled = true;
    return callback$default ? callback$default(term1, term2, occurCheckEnabled) : this.mguWithOccurCheck$default(term1, term2, occurCheckEnabled);
  };
  Unificator.prototype.mgu = function (term1, term2) {
    return this.mguWithOccurCheck(term1, term2, true);
  };
  Unificator.prototype.matchWithOccurCheck = function (term1, term2, occurCheckEnabled) {
    return this.mguWithOccurCheck(term1, term2, occurCheckEnabled) !== Substitution.Companion.failed();
  };
  Unificator.prototype.match = function (term1, term2) {
    return this.matchWithOccurCheck(term1, term2, true);
  };
  Unificator.prototype.unifyWithOccurCheck = function (term1, term2, occurCheckEnabled) {
    var substitution = this.mguWithOccurCheck(term1, term2, occurCheckEnabled);
    return substitution.isFailed ? null : term1.getSubstituted(substitution, []);
  };
  Unificator.prototype.unify = function (term1, term2) {
    return this.unifyWithOccurCheck(term1, term2, true);
  };
  function Unificator$Companion() {
    Unificator$Companion_instance = this;
    this.default_l0z2qy$_0 = lazy(Unificator$Companion$default$lambda(this));
  }
  Object.defineProperty(Unificator$Companion.prototype, 'default', {
    get: function () {
      return this.default_l0z2qy$_0.value;
    }
  });
  Unificator$Companion.prototype.mguWith = function ($receiver, other) {
    return this.default.mgu($receiver, other);
  };
  Unificator$Companion.prototype.matches = function ($receiver, other) {
    return this.default.match($receiver, other);
  };
  Unificator$Companion.prototype.unifyWith = function ($receiver, other) {
    return this.default.unify($receiver, other);
  };
  function Unificator$Companion$naive$ObjectLiteral(context) {
    AbstractUnificator.call(this, context);
  }
  Unificator$Companion$naive$ObjectLiteral.prototype.checkTermsEquality_gf3qo6$ = function (first, second) {
    if (Kotlin.isType(first, Integer) && Kotlin.isType(second, Integer))
      return first.value.compareTo_11rb$(second.value) === 0;
    else if (Kotlin.isType(first, Numeric) && Kotlin.isType(second, Numeric))
      return first.decimalValue.compareTo_11rb$(second.decimalValue) === 0;
    else
      return first != null ? first.equals(second) : null;
  };
  Unificator$Companion$naive$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AbstractUnificator]
  };
  Unificator$Companion.prototype.naiveWithContext = function (context) {
    return new Unificator$Companion$naive$ObjectLiteral(context);
  };
  Unificator$Companion.prototype.naive = function () {
    return this.naiveWithContext(Substitution.Companion.empty());
  };
  function Unificator$Companion$strict$ObjectLiteral(context) {
    AbstractUnificator.call(this, context);
  }
  Unificator$Companion$strict$ObjectLiteral.prototype.checkTermsEquality_gf3qo6$ = function (first, second) {
    return first != null ? first.equals(second) : null;
  };
  Unificator$Companion$strict$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AbstractUnificator]
  };
  Unificator$Companion.prototype.strictWithContext = function (context) {
    return new Unificator$Companion$strict$ObjectLiteral(context);
  };
  Unificator$Companion.prototype.strict = function () {
    return this.strictWithContext(Substitution.Companion.empty());
  };
  function Unificator$Companion$default$lambda(this$Unificator$) {
    return function () {
      return this$Unificator$.strict();
    };
  }
  Unificator$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Unificator$Companion_instance = null;
  function Unificator$Companion_getInstance() {
    if (Unificator$Companion_instance === null) {
      new Unificator$Companion();
    }return Unificator$Companion_instance;
  }
  Unificator.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Unificator',
    interfaces: []
  };
  function NoUnifyException(term1, term2, other) {
    TuPrologException_init(other, this);
    this.term1_4uz0qy$_0 = term1;
    this.term2_4uz0rt$_0 = term2;
    this.name = 'NoUnifyException';
  }
  Object.defineProperty(NoUnifyException.prototype, 'message', {
    get: function () {
      return 'Cannot match term `' + this.term1_4uz0qy$_0 + '` with term `' + this.term2_4uz0rt$_0 + '`';
    }
  });
  NoUnifyException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NoUnifyException',
    interfaces: [TuPrologException]
  };
  function NoUnifyException_init(term1, term2, $this) {
    $this = $this || Object.create(NoUnifyException.prototype);
    NoUnifyException.call($this, term1, term2, null);
    return $this;
  }
  function OccurCheckException(term1, term2, innerVar, innerTerm, other) {
    NoUnifyException.call(this, term1, term2, other);
    this.innerVar_0 = innerVar;
    this.innerTerm_0 = innerTerm;
    this.name = 'OccurCheckException';
  }
  Object.defineProperty(OccurCheckException.prototype, 'message', {
    get: function () {
      return toString(Kotlin.callGetter(this, NoUnifyException.prototype, 'message')) + ' because variable `' + this.innerVar_0 + '` occurs in term `' + this.innerTerm_0 + '`';
    }
  });
  OccurCheckException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OccurCheckException',
    interfaces: [NoUnifyException]
  };
  function OccurCheckException_init(term1, term2, innerVar, innerTerm, $this) {
    $this = $this || Object.create(OccurCheckException.prototype);
    OccurCheckException.call($this, term1, term2, innerVar, innerTerm, null);
    return $this;
  }
  var package$it = _.it || (_.it = {});
  var package$unibo = package$it.unibo || (package$it.unibo = {});
  var package$tuprolog = package$unibo.tuprolog || (package$unibo.tuprolog = {});
  var package$unify = package$tuprolog.unify || (package$tuprolog.unify = {});
  package$unify.AbstractUnificator = AbstractUnificator;
  Equation.Identity = Equation$Identity;
  Equation.Assignment = Equation$Assignment;
  Equation.Comparison = Equation$Comparison;
  Equation.Contradiction = Equation$Contradiction;
  Object.defineProperty(Equation, 'Companion', {
    get: Equation$Companion_getInstance
  });
  package$unify.Equation = Equation;
  package$unify.toSubstitution_vxmf6r$ = toSubstitution;
  package$unify.toSubstitution_vf4680$ = toSubstitution_0;
  package$unify.toEquations_oswvz9$ = toEquations;
  package$unify.eq_3s42qr$ = eq;
  Object.defineProperty(Unificator, 'Companion', {
    get: Unificator$Companion_getInstance
  });
  package$unify.Unificator = Unificator;
  var package$exception = package$unify.exception || (package$unify.exception = {});
  package$exception.NoUnifyException_init_gf3qo6$ = NoUnifyException_init;
  package$exception.NoUnifyException = NoUnifyException;
  package$exception.OccurCheckException_init_kab1m5$ = OccurCheckException_init;
  package$exception.OccurCheckException = OccurCheckException;
  AbstractUnificator.prototype.mgu = Unificator.prototype.mgu;
  AbstractUnificator.prototype.matchWithOccurCheck = Unificator.prototype.matchWithOccurCheck;
  AbstractUnificator.prototype.match = Unificator.prototype.match;
  AbstractUnificator.prototype.unifyWithOccurCheck = Unificator.prototype.unifyWithOccurCheck;
  AbstractUnificator.prototype.unify = Unificator.prototype.unify;
  AbstractUnificator.prototype.mguWithOccurCheck = Unificator.prototype.mguWithOccurCheck;
  Kotlin.defineModule('@tuprolog/2p-unify', _);
  return _;
}));



},{"@tuprolog/2p-core":4,"kotlin":66}],19:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = require('./Token').Token;
var Lexer = require('./Lexer').Lexer;
var Interval = require('./IntervalSet').Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

},{"./IntervalSet":25,"./Lexer":27,"./Token":33}],20:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = require('./InputStream').InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;

},{"./InputStream":24,"fs":1}],21:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = require('./Token').CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

},{"./Token":33}],22:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = require('./Token').Token;
var BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;
},{"./BufferedTokenStream":19,"./Token":33}],23:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = require('./InputStream').InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

},{"./InputStream":24,"fs":1}],24:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
require('./polyfills/codepointat');
require('./polyfills/fromcodepoint');

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;

},{"./Token":33,"./polyfills/codepointat":61,"./polyfills/fromcodepoint":62}],25:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = require('./Token').Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

},{"./Token":33}],26:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = require('./Utils').Set;
var BitSet = require('./Utils').BitSet;
var Token = require('./Token').Token;
var ATNConfig = require('./atn/ATNConfig').ATNConfig;
var Interval = require('./IntervalSet').Interval;
var IntervalSet = require('./IntervalSet').IntervalSet;
var RuleStopState = require('./atn/ATNState').RuleStopState;
var RuleTransition = require('./atn/Transition').RuleTransition;
var NotSetTransition = require('./atn/Transition').NotSetTransition;
var WildcardTransition = require('./atn/Transition').WildcardTransition;
var AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;

var pc = require('./PredictionContext');
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;


},{"./IntervalSet":25,"./PredictionContext":30,"./Token":33,"./Utils":34,"./atn/ATNConfig":36,"./atn/ATNState":41,"./atn/Transition":49}],27:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = require('./Token').Token;
var Recognizer = require('./Recognizer').Recognizer;
var CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;
var RecognitionException  = require('./error/Errors').RecognitionException;
var LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

},{"./CommonTokenFactory":21,"./Recognizer":31,"./Token":33,"./error/Errors":58}],28:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./Token').Token;
var ParseTreeListener = require('./tree/Tree').ParseTreeListener;
var Recognizer = require('./Recognizer').Recognizer;
var DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;
var ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;
var ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;
var TerminalNode = require('./tree/Tree').TerminalNode;
var ErrorNode = require('./tree/Tree').ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = require('./Lexer').Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;
},{"./Lexer":27,"./Recognizer":31,"./Token":33,"./atn/ATNDeserializationOptions":38,"./atn/ATNDeserializer":39,"./error/ErrorStrategy":57,"./tree/Tree":63}],29:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = require('./RuleContext').RuleContext;
var Tree = require('./tree/Tree');
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = require("./IntervalSet").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;
},{"./IntervalSet":25,"./RuleContext":32,"./tree/Tree":63}],30:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = require('./RuleContext').RuleContext;
var Hash = require('./Utils').Hash;
var Map = require('./Utils').Map;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = new Map();
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache.get(ctx) || null;
	if (existing !== null) {
		return existing;
	}
	this.cache.put(ctx, ctx);
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache.get(ctx) || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	var hash = new Hash();
	if(parent !== null) {
		hash.update(parent, returnState);
	} else {
		hash.update(1);
	}
	hashCode = hash.finish();
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = new Map();

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

},{"./RuleContext":32,"./Utils":34}],31:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
var ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;
var ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.8";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;

},{"./Token":33,"./error/ErrorListener":56}],32:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = require('./tree/Tree').RuleNode;
var INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;
var INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = require('./tree/Trees').Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};


},{"./atn/ATN":35,"./tree/Tree":63,"./tree/Trees":64}],33:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

},{}],34:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict(defaultMapCtor) {
    this.defaultMapCtor = defaultMapCtor || Map;
    this.cacheMap = new this.defaultMapCtor();
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(this, value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    if(value.updateHashCode)
                        value.updateHashCode(this);
                    else
                        console.log("No updateHashCode for " + value.toString())
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
};

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
};

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this.cacheMap.get(a) || null;
    return d === null ? null : (d.get(b) || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this.cacheMap.get(a) || null;
    if (d === null) {
        d = new this.defaultMapCtor();
        this.cacheMap.put(a, d);
    }
    d.put(b, o);
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;

},{}],35:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = require('./../Token').Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;
},{"./../IntervalSet":25,"./../LL1Analyzer":26,"./../Token":33}],36:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = require('./ATNState').DecisionState;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;
},{"../Utils":34,"./ATNState":41,"./SemanticContext":48}],37:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = require('./ATN').ATN;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = require('./SemanticContext').SemanticContext;
var merge = require('./../PredictionContext').merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            this.cachedHashCode = this.hashCode();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.hashCode());
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"./../PredictionContext":30,"./../Utils":34,"./ATN":35,"./SemanticContext":48}],38:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{}],39:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./../Token').Token;
var ATN = require('./ATN').ATN;
var ATNType = require('./ATNType').ATNType;
var ATNStates = require('./ATNState');
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Interval = require('./../IntervalSet').Interval;
var ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;
var LexerActions = require('./LexerAction');
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : v + 65534;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;
},{"./../IntervalSet":25,"./../Token":33,"./ATN":35,"./ATNDeserializationOptions":38,"./ATNState":41,"./ATNType":42,"./LexerAction":44,"./Transition":49}],40:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;
var Map = require('./../Utils').Map;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = new Map();
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

},{"./../PredictionContext":30,"./../Utils":34,"./../dfa/DFAState":53,"./ATNConfigSet":37}],41:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

},{}],42:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;


},{}],43:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = require('./../Token').Token;
var Lexer = require('./../Lexer').Lexer;
var ATN = require('./ATN').ATN;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var RuleStopState = require('./ATNState').RuleStopState;
var LexerATNConfig = require('./ATNConfig').LexerATNConfig;
var Transition = require('./Transition').Transition;
var LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;
var LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

},{"./../Lexer":27,"./../PredictionContext":30,"./../Token":33,"./../dfa/DFAState":53,"./../error/Errors":58,"./ATN":35,"./ATNConfig":36,"./ATNConfigSet":37,"./ATNSimulator":40,"./ATNState":41,"./LexerActionExecutor":45,"./Transition":49}],44:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;
},{}],45:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = require("../Utils").hashStuff;
var LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

},{"../Utils":34,"./LexerAction":44}],46:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = require('./../Utils');
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = require('./ATN').ATN;
var ATNState = require('./ATNState').ATNState;
var ATNConfig = require('./ATNConfig').ATNConfig;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var Token = require('./../Token').Token;
var DFAState = require('./../dfa/DFAState').DFAState;
var PredPrediction = require('./../dfa/DFAState').PredPrediction;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var PredictionMode = require('./PredictionMode').PredictionMode;
var RuleContext = require('./../RuleContext').RuleContext;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var SemanticContext = require('./SemanticContext').SemanticContext;
var StarLoopEntryState = require('./ATNState').StarLoopEntryState;
var RuleStopState = require('./ATNState').RuleStopState;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var Interval = require('./../IntervalSet').Interval;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = require('./../error/Errors').NoViableAltException;

var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.
				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else {
                if (!t.isEpsilon && closureBusy.add(c)!==c){
                    // avoid infinite recursion for EOF* and EOF+
                    continue;
                }
                if (t instanceof RuleTransition) {
                    // latch when newDepth goes negative - once we step out of the entry context we can't return
                    if (newDepth >= 0) {
                        newDepth += 1;
                    }
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;
},{"./../IntervalSet":25,"./../ParserRuleContext":29,"./../PredictionContext":30,"./../RuleContext":32,"./../Token":33,"./../Utils":34,"./../dfa/DFAState":53,"./../error/Errors":58,"./ATN":35,"./ATNConfig":36,"./ATNConfigSet":37,"./ATNSimulator":40,"./ATNState":41,"./PredictionMode":47,"./SemanticContext":48,"./Transition":49}],47:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = require('./../Utils').Set;
var Map = require('./../Utils').Map;
var BitSet = require('./../Utils').BitSet;
var AltDict = require('./../Utils').AltDict;
var ATN = require('./ATN').ATN;
var RuleStopState = require('./ATNState').RuleStopState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var ATNConfig = require('./ATNConfig').ATNConfig;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;
var hashStuff = require('./../Utils').hashStuff;
var equalArrays = require('./../Utils').equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;

},{"../Utils":34,"./../Utils":34,"./ATN":35,"./ATNConfig":36,"./ATNConfigSet":37,"./ATNState":41,"./SemanticContext":48}],48:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = require('./../Utils').Set;
var Hash = require('./../Utils').Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

},{"./../Utils":34}],49:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Predicate = require('./SemanticContext').Predicate;
var PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;
},{"./../IntervalSet":25,"./../Token":33,"./SemanticContext":48}],50:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = require('./ATN').ATN;
exports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;
exports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;
exports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;
exports.PredictionMode = require('./PredictionMode').PredictionMode;

},{"./ATN":35,"./ATNDeserializer":39,"./LexerATNSimulator":43,"./ParserATNSimulator":46,"./PredictionMode":47}],51:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = require("../Utils").Set;
var DFAState = require('./DFAState').DFAState;
var StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;
var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var DFASerializer = require('./DFASerializer').DFASerializer;
var LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

},{"../Utils":34,"../atn/ATNState":41,"./../atn/ATNConfigSet":37,"./DFASerializer":52,"./DFAState":53}],52:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;


},{}],53:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;

},{"./../Utils":34,"./../atn/ATNConfigSet":37}],54:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = require('./DFA').DFA;
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":51,"./DFASerializer":52,"./DFAState":53}],55:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = require('./../Utils').BitSet;
var ErrorListener = require('./ErrorListener').ErrorListener;
var Interval = require('./../IntervalSet').Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;
},{"./../IntervalSet":25,"./../Utils":34,"./ErrorListener":56}],56:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;


},{}],57:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./../Token').Token;
var Errors = require('./Errors');
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = require('./../atn/ATNState').ATNState;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;

},{"./../IntervalSet":25,"./../Token":33,"./../atn/ATNState":41,"./Errors":58}],58:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = require('./../atn/Transition').PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;

},{"./../atn/Transition":49}],59:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = require('./Errors').RecognitionException;
exports.NoViableAltException = require('./Errors').NoViableAltException;
exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
exports.InputMismatchException = require('./Errors').InputMismatchException;
exports.FailedPredicateException = require('./Errors').FailedPredicateException;
exports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;
exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
exports.ErrorListener = require('./ErrorListener').ErrorListener;

},{"./DiagnosticErrorListener":55,"./ErrorListener":56,"./ErrorStrategy":57,"./Errors":58}],60:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = require('./atn/index');
exports.codepointat = require('./polyfills/codepointat');
exports.dfa = require('./dfa/index');
exports.fromcodepoint = require('./polyfills/fromcodepoint');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CharStreams = require('./CharStreams').CharStreams;
exports.CommonToken = require('./Token').CommonToken;
exports.InputStream = require('./InputStream').InputStream;
exports.FileStream = require('./FileStream').FileStream;
exports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;
exports.Lexer = require('./Lexer').Lexer;
exports.Parser = require('./Parser').Parser;
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;
exports.Interval = require('./IntervalSet').Interval;
exports.Utils = require('./Utils');

},{"./CharStreams":20,"./CommonTokenStream":22,"./FileStream":23,"./InputStream":24,"./IntervalSet":25,"./Lexer":27,"./Parser":28,"./ParserRuleContext":29,"./PredictionContext":30,"./Token":33,"./Utils":34,"./atn/index":50,"./dfa/index":54,"./error/index":59,"./polyfills/codepointat":61,"./polyfills/fromcodepoint":62,"./tree/index":65}],61:[function(require,module,exports){
/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

},{}],62:[function(require,module,exports){
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}

},{}],63:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = require('../Utils.js');


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
	if (ctx.children) {
		return this.visit(ctx.children);
	} else {
		return null;
	}
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;

},{"../Utils.js":34,"./../IntervalSet":25,"./../Token":33}],64:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = require('./../Utils');
var Token = require('./../Token').Token;
var RuleNode = require('./Tree').RuleNode;
var ErrorNode = require('./Tree').ErrorNode;
var TerminalNode = require('./Tree').TerminalNode;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var RuleContext = require('./../RuleContext').RuleContext;
var INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;
},{"./../ParserRuleContext":29,"./../RuleContext":32,"./../Token":33,"./../Utils":34,"./../atn/ATN":35,"./Tree":63}],65:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = require('./Tree');
exports.Trees = require('./Trees').Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;

},{"./Tree":63,"./Trees":64}],66:[function(require,module,exports){
(function (process){
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define('kotlin', ['exports'], factory);
  } else if (typeof exports === 'object') {
    factory(module.exports);
  } else {
    root.kotlin = {};
    factory(root.kotlin);
  }
}(this, function (Kotlin) {
  var _ = Kotlin;
  Kotlin.isBooleanArray = function (a) {
    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === 'BooleanArray';
  };
  Kotlin.isByteArray = function (a) {
    return a instanceof Int8Array && a.$type$ !== 'BooleanArray';
  };
  Kotlin.isShortArray = function (a) {
    return a instanceof Int16Array;
  };
  Kotlin.isCharArray = function (a) {
    return a instanceof Uint16Array && a.$type$ === 'CharArray';
  };
  Kotlin.isIntArray = function (a) {
    return a instanceof Int32Array;
  };
  Kotlin.isFloatArray = function (a) {
    return a instanceof Float32Array;
  };
  Kotlin.isDoubleArray = function (a) {
    return a instanceof Float64Array;
  };
  Kotlin.isLongArray = function (a) {
    return Array.isArray(a) && a.$type$ === 'LongArray';
  };
  Kotlin.isArray = function (a) {
    return Array.isArray(a) && !a.$type$;
  };
  Kotlin.isArrayish = function (a) {
    return Array.isArray(a) || ArrayBuffer.isView(a);
  };
  Kotlin.arrayToString = function (a) {
    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;
    return '[' + Array.prototype.map.call(a, function (e) {
      return toString(e);
    }).join(', ') + ']';
  };
  Kotlin.arrayDeepToString = function (arr) {
    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);
  };
  Kotlin.arrayEquals = function (a, b) {
    if (a === b) {
      return true;
    }if (!Kotlin.isArrayish(b) || a.length !== b.length) {
      return false;
    }for (var i = 0, n = a.length; i < n; i++) {
      if (!Kotlin.equals(a[i], b[i])) {
        return false;
      }}
    return true;
  };
  Kotlin.arrayDeepEquals = function (a, b) {
    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);
  };
  Kotlin.arrayHashCode = function (arr) {
    var result = 1;
    for (var i = 0, n = arr.length; i < n; i++) {
      result = (31 * result | 0) + Kotlin.hashCode(arr[i]) | 0;
    }
    return result;
  };
  Kotlin.arrayDeepHashCode = function (arr) {
    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);
  };
  Kotlin.primitiveArraySort = function (array) {
    array.sort(Kotlin.doubleCompareTo);
  };
  Kotlin.getCallableRef = function (name, f) {
    f.callableName = name;
    return f;
  };
  Kotlin.getPropertyCallableRef = function (name, paramCount, getter, setter) {
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    return getPropertyRefClass(getter, setter, propertyRefClassMetadataCache[paramCount]);
  };
  function getPropertyRefClass(obj, setter, cache) {
    obj.$metadata$ = getPropertyRefMetadata(typeof setter === 'function' ? cache.mutable : cache.immutable);
    obj.constructor = obj;
    return obj;
  }
  var propertyRefClassMetadataCache = [{mutable: {value: null, implementedInterface: function () {
    return Kotlin.kotlin.reflect.KMutableProperty0;
  }}, immutable: {value: null, implementedInterface: function () {
    return Kotlin.kotlin.reflect.KProperty0;
  }}}, {mutable: {value: null, implementedInterface: function () {
    return Kotlin.kotlin.reflect.KMutableProperty1;
  }}, immutable: {value: null, implementedInterface: function () {
    return Kotlin.kotlin.reflect.KProperty1;
  }}}];
  function getPropertyRefMetadata(cache) {
    if (cache.value === null) {
      cache.value = {interfaces: [cache.implementedInterface()], baseClass: null, functions: {}, properties: {}, types: {}, staticMembers: {}};
    }return cache.value;
  }
  Kotlin.toShort = function (a) {
    return (a & 65535) << 16 >> 16;
  };
  Kotlin.toByte = function (a) {
    return (a & 255) << 24 >> 24;
  };
  Kotlin.toChar = function (a) {
    return a & 65535;
  };
  Kotlin.numberToLong = function (a) {
    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);
  };
  Kotlin.numberToInt = function (a) {
    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);
  };
  Kotlin.numberToShort = function (a) {
    return Kotlin.toShort(Kotlin.numberToInt(a));
  };
  Kotlin.numberToByte = function (a) {
    return Kotlin.toByte(Kotlin.numberToInt(a));
  };
  Kotlin.numberToDouble = function (a) {
    return +a;
  };
  Kotlin.numberToChar = function (a) {
    return Kotlin.toChar(Kotlin.numberToInt(a));
  };
  Kotlin.doubleToInt = function (a) {
    if (a > 2147483647)
      return 2147483647;
    if (a < -2147483648)
      return -2147483648;
    return a | 0;
  };
  Kotlin.toBoxedChar = function (a) {
    if (a == null)
      return a;
    if (a instanceof Kotlin.BoxedChar)
      return a;
    return new Kotlin.BoxedChar(a);
  };
  Kotlin.unboxChar = function (a) {
    if (a == null)
      return a;
    return Kotlin.toChar(a);
  };
  Kotlin.equals = function (obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }if (obj2 == null) {
      return false;
    }if (obj1 !== obj1) {
      return obj2 !== obj2;
    }if (typeof obj1 === 'object' && typeof obj1.equals === 'function') {
      return obj1.equals(obj2);
    }if (typeof obj1 === 'number' && typeof obj2 === 'number') {
      return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2);
    }return obj1 === obj2;
  };
  Kotlin.hashCode = function (obj) {
    if (obj == null) {
      return 0;
    }var objType = typeof obj;
    if ('object' === objType) {
      return 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
    }if ('function' === objType) {
      return getObjectHashCode(obj);
    }if ('number' === objType) {
      return Kotlin.numberHashCode(obj);
    }if ('boolean' === objType) {
      return Number(obj);
    }var str = String(obj);
    return getStringHashCode(str);
  };
  Kotlin.toString = function (o) {
    if (o == null) {
      return 'null';
    } else if (Kotlin.isArrayish(o)) {
      return '[...]';
    } else {
      return o.toString();
    }
  };
  var POW_2_32 = 4.294967296E9;
  var OBJECT_HASH_CODE_PROPERTY_NAME = 'kotlinHashCodeValue$';
  function getObjectHashCode(obj) {
    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {
      var hash = Math.random() * POW_2_32 | 0;
      Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, {value: hash, enumerable: false});
    }return obj[OBJECT_HASH_CODE_PROPERTY_NAME];
  }
  function getStringHashCode(str) {
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
      var code = str.charCodeAt(i);
      hash = hash * 31 + code | 0;
    }
    return hash;
  }
  Kotlin.identityHashCode = getObjectHashCode;
  Kotlin.Long = function (low, high) {
    this.low_ = low | 0;
    this.high_ = high | 0;
  };
  Kotlin.Long.$metadata$ = {kind: 'class', simpleName: 'Long', interfaces: []};
  Kotlin.Long.IntCache_ = {};
  Kotlin.Long.fromInt = function (value) {
    if (-128 <= value && value < 128) {
      var cachedObj = Kotlin.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }}var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      Kotlin.Long.IntCache_[value] = obj;
    }return obj;
  };
  Kotlin.Long.fromNumber = function (value) {
    if (isNaN(value)) {
      return Kotlin.Long.ZERO;
    } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {
      return Kotlin.Long.MIN_VALUE;
    } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {
      return Kotlin.Long.MAX_VALUE;
    } else if (value < 0) {
      return Kotlin.Long.fromNumber(-value).negate();
    } else {
      return new Kotlin.Long(value % Kotlin.Long.TWO_PWR_32_DBL_ | 0, value / Kotlin.Long.TWO_PWR_32_DBL_ | 0);
    }
  };
  Kotlin.Long.fromBits = function (lowBits, highBits) {
    return new Kotlin.Long(lowBits, highBits);
  };
  Kotlin.Long.fromString = function (str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }if (str.charAt(0) == '-') {
      return Kotlin.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));
    var result = Kotlin.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = Kotlin.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(Kotlin.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(Kotlin.Long.fromNumber(value));
      }
    }
    return result;
  };
  Kotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;
  Kotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;
  Kotlin.Long.TWO_PWR_32_DBL_ = Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;
  Kotlin.Long.TWO_PWR_31_DBL_ = Kotlin.Long.TWO_PWR_32_DBL_ / 2;
  Kotlin.Long.TWO_PWR_48_DBL_ = Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;
  Kotlin.Long.TWO_PWR_64_DBL_ = Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;
  Kotlin.Long.TWO_PWR_63_DBL_ = Kotlin.Long.TWO_PWR_64_DBL_ / 2;
  Kotlin.Long.ZERO = Kotlin.Long.fromInt(0);
  Kotlin.Long.ONE = Kotlin.Long.fromInt(1);
  Kotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);
  Kotlin.Long.MAX_VALUE = Kotlin.Long.fromBits(4.294967295E9 | 0, 2147483647 | 0);
  Kotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 2.147483648E9 | 0);
  Kotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);
  Kotlin.Long.prototype.toInt = function () {
    return this.low_;
  };
  Kotlin.Long.prototype.toNumber = function () {
    return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
  };
  Kotlin.Long.prototype.hashCode = function () {
    return this.high_ ^ this.low_;
  };
  Kotlin.Long.prototype.toString = function (opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }if (this.isZero()) {
      return '0';
    }if (this.isNegative()) {
      if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {
        var radixLong = Kotlin.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  Kotlin.Long.prototype.getHighBits = function () {
    return this.high_;
  };
  Kotlin.Long.prototype.getLowBits = function () {
    return this.low_;
  };
  Kotlin.Long.prototype.getLowBitsUnsigned = function () {
    return this.low_ >= 0 ? this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  Kotlin.Long.prototype.getNumBitsAbs = function () {
    if (this.isNegative()) {
      if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & 1 << bit) != 0) {
          break;
        }}
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  Kotlin.Long.prototype.isZero = function () {
    return this.high_ == 0 && this.low_ == 0;
  };
  Kotlin.Long.prototype.isNegative = function () {
    return this.high_ < 0;
  };
  Kotlin.Long.prototype.isOdd = function () {
    return (this.low_ & 1) == 1;
  };
  Kotlin.Long.prototype.equalsLong = function (other) {
    return this.high_ == other.high_ && this.low_ == other.low_;
  };
  Kotlin.Long.prototype.notEqualsLong = function (other) {
    return this.high_ != other.high_ || this.low_ != other.low_;
  };
  Kotlin.Long.prototype.lessThan = function (other) {
    return this.compare(other) < 0;
  };
  Kotlin.Long.prototype.lessThanOrEqual = function (other) {
    return this.compare(other) <= 0;
  };
  Kotlin.Long.prototype.greaterThan = function (other) {
    return this.compare(other) > 0;
  };
  Kotlin.Long.prototype.greaterThanOrEqual = function (other) {
    return this.compare(other) >= 0;
  };
  Kotlin.Long.prototype.compare = function (other) {
    if (this.equalsLong(other)) {
      return 0;
    }var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }if (!thisNeg && otherNeg) {
      return 1;
    }if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  Kotlin.Long.prototype.negate = function () {
    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {
      return Kotlin.Long.MIN_VALUE;
    } else {
      return this.not().add(Kotlin.Long.ONE);
    }
  };
  Kotlin.Long.prototype.add = function (other) {
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 65535;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 65535;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 65535;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 + b48;
    c48 &= 65535;
    return Kotlin.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
  };
  Kotlin.Long.prototype.subtract = function (other) {
    return this.add(other.negate());
  };
  Kotlin.Long.prototype.multiply = function (other) {
    if (this.isZero()) {
      return Kotlin.Long.ZERO;
    } else if (other.isZero()) {
      return Kotlin.Long.ZERO;
    }if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {
      return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;
    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {
      return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;
    }if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }if (this.lessThan(Kotlin.Long.TWO_PWR_24_) && other.lessThan(Kotlin.Long.TWO_PWR_24_)) {
      return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());
    }var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 65535;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 65535;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 65535;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 65535;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 65535;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 65535;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 65535;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 65535;
    return Kotlin.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
  };
  Kotlin.Long.prototype.div = function (other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return Kotlin.Long.ZERO;
    }if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {
      if (other.equalsLong(Kotlin.Long.ONE) || other.equalsLong(Kotlin.Long.NEG_ONE)) {
        return Kotlin.Long.MIN_VALUE;
      } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {
        return Kotlin.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equalsLong(Kotlin.Long.ZERO)) {
          return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {
      return Kotlin.Long.ZERO;
    }if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }var res = Kotlin.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
      var approxRes = Kotlin.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = Kotlin.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      if (approxRes.isZero()) {
        approxRes = Kotlin.Long.ONE;
      }res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  Kotlin.Long.prototype.modulo = function (other) {
    return this.subtract(this.div(other).multiply(other));
  };
  Kotlin.Long.prototype.not = function () {
    return Kotlin.Long.fromBits(~this.low_, ~this.high_);
  };
  Kotlin.Long.prototype.and = function (other) {
    return Kotlin.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
  };
  Kotlin.Long.prototype.or = function (other) {
    return Kotlin.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
  };
  Kotlin.Long.prototype.xor = function (other) {
    return Kotlin.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
  };
  Kotlin.Long.prototype.shiftLeft = function (numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return Kotlin.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
      } else {
        return Kotlin.Long.fromBits(0, low << numBits - 32);
      }
    }
  };
  Kotlin.Long.prototype.shiftRight = function (numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Kotlin.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
      } else {
        return Kotlin.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
      }
    }
  };
  Kotlin.Long.prototype.shiftRightUnsigned = function (numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return Kotlin.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
      } else if (numBits == 32) {
        return Kotlin.Long.fromBits(high, 0);
      } else {
        return Kotlin.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  };
  Kotlin.Long.prototype.equals = function (other) {
    return other instanceof Kotlin.Long && this.equalsLong(other);
  };
  Kotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;
  Kotlin.Long.prototype.inc = function () {
    return this.add(Kotlin.Long.ONE);
  };
  Kotlin.Long.prototype.dec = function () {
    return this.add(Kotlin.Long.NEG_ONE);
  };
  Kotlin.Long.prototype.valueOf = function () {
    return this.toNumber();
  };
  Kotlin.Long.prototype.unaryPlus = function () {
    return this;
  };
  Kotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;
  Kotlin.Long.prototype.inv = Kotlin.Long.prototype.not;
  Kotlin.Long.prototype.rangeTo = function (other) {
    return new Kotlin.kotlin.ranges.LongRange(this, other);
  };
  Kotlin.defineModule = function (id, declaration) {
  };
  Kotlin.defineInlineFunction = function (tag, fun) {
    return fun;
  };
  Kotlin.wrapFunction = function (fun) {
    var f = function () {
      f = fun();
      return f.apply(this, arguments);
    };
    return function () {
      return f.apply(this, arguments);
    };
  };
  Kotlin.isTypeOf = function (type) {
    return function (object) {
      return typeof object === type;
    };
  };
  Kotlin.isInstanceOf = function (klass) {
    return function (object) {
      return Kotlin.isType(object, klass);
    };
  };
  Kotlin.orNull = function (fn) {
    return function (object) {
      return object == null || fn(object);
    };
  };
  Kotlin.andPredicate = function (a, b) {
    return function (object) {
      return a(object) && b(object);
    };
  };
  Kotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {
  };
  Kotlin.suspendCall = function (value) {
    return value;
  };
  Kotlin.coroutineResult = function (qualifier) {
    throwMarkerError();
  };
  Kotlin.coroutineController = function (qualifier) {
    throwMarkerError();
  };
  Kotlin.coroutineReceiver = function (qualifier) {
    throwMarkerError();
  };
  Kotlin.setCoroutineResult = function (value, qualifier) {
    throwMarkerError();
  };
  Kotlin.getReifiedTypeParameterKType = function (typeParameter) {
    throwMarkerError();
  };
  function throwMarkerError() {
    throw new Error('This marker function should never been called. ' + 'Looks like compiler did not eliminate it properly. ' + 'Please, report an issue if you caught this exception.');
  }
  Kotlin.getFunctionById = function (id, defaultValue) {
    return function () {
      return defaultValue;
    };
  };
  Kotlin.compareTo = function (a, b) {
    var typeA = typeof a;
    if (typeA === 'number') {
      if (typeof b === 'number') {
        return Kotlin.doubleCompareTo(a, b);
      }return Kotlin.primitiveCompareTo(a, b);
    }if (typeA === 'string' || typeA === 'boolean') {
      return Kotlin.primitiveCompareTo(a, b);
    }return a.compareTo_11rb$(b);
  };
  Kotlin.primitiveCompareTo = function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  };
  Kotlin.doubleCompareTo = function (a, b) {
    if (a < b)
      return -1;
    if (a > b)
      return 1;
    if (a === b) {
      if (a !== 0)
        return 0;
      var ia = 1 / a;
      return ia === 1 / b ? 0 : ia < 0 ? -1 : 1;
    }return a !== a ? b !== b ? 0 : 1 : -1;
  };
  Kotlin.charInc = function (value) {
    return Kotlin.toChar(value + 1);
  };
  Kotlin.charDec = function (value) {
    return Kotlin.toChar(value - 1);
  };
  Kotlin.imul = Math.imul || imul;
  Kotlin.imulEmulated = imul;
  function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  }
  (function () {
    var buf = new ArrayBuffer(8);
    var bufFloat64 = new Float64Array(buf);
    var bufFloat32 = new Float32Array(buf);
    var bufInt32 = new Int32Array(buf);
    var lowIndex = 0;
    var highIndex = 1;
    bufFloat64[0] = -1;
    if (bufInt32[lowIndex] !== 0) {
      lowIndex = 1;
      highIndex = 0;
    }Kotlin.doubleToBits = function (value) {
      return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);
    };
    Kotlin.doubleToRawBits = function (value) {
      bufFloat64[0] = value;
      return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);
    };
    Kotlin.doubleFromBits = function (value) {
      bufInt32[lowIndex] = value.low_;
      bufInt32[highIndex] = value.high_;
      return bufFloat64[0];
    };
    Kotlin.floatToBits = function (value) {
      return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);
    };
    Kotlin.floatToRawBits = function (value) {
      bufFloat32[0] = value;
      return bufInt32[0];
    };
    Kotlin.floatFromBits = function (value) {
      bufInt32[0] = value;
      return bufFloat32[0];
    };
    Kotlin.doubleSignBit = function (value) {
      bufFloat64[0] = value;
      return bufInt32[highIndex] & 2.147483648E9;
    };
    Kotlin.numberHashCode = function (obj) {
      if ((obj | 0) === obj) {
        return obj | 0;
      } else {
        bufFloat64[0] = obj;
        return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;
      }
    };
  }());
  Kotlin.ensureNotNull = function (x) {
    return x != null ? x : Kotlin.throwNPE();
  };
  if (typeof String.prototype.startsWith === 'undefined') {
    String.prototype.startsWith = function (searchString, position) {
      position = position || 0;
      return this.lastIndexOf(searchString, position) === position;
    };
  }if (typeof String.prototype.endsWith === 'undefined') {
    String.prototype.endsWith = function (searchString, position) {
      var subjectString = this.toString();
      if (position === undefined || position > subjectString.length) {
        position = subjectString.length;
      }position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
  }if (typeof Math.sign === 'undefined') {
    Math.sign = function (x) {
      x = +x;
      if (x === 0 || isNaN(x)) {
        return Number(x);
      }return x > 0 ? 1 : -1;
    };
  }if (typeof Math.trunc === 'undefined') {
    Math.trunc = function (x) {
      if (isNaN(x)) {
        return NaN;
      }if (x > 0) {
        return Math.floor(x);
      }return Math.ceil(x);
    };
  }(function () {
    var epsilon = 2.220446049250313E-16;
    var taylor_2_bound = Math.sqrt(epsilon);
    var taylor_n_bound = Math.sqrt(taylor_2_bound);
    var upper_taylor_2_bound = 1 / taylor_2_bound;
    var upper_taylor_n_bound = 1 / taylor_n_bound;
    if (typeof Math.sinh === 'undefined') {
      Math.sinh = function (x) {
        if (Math.abs(x) < taylor_n_bound) {
          var result = x;
          if (Math.abs(x) > taylor_2_bound) {
            result += x * x * x / 6;
          }return result;
        } else {
          var y = Math.exp(x);
          var y1 = 1 / y;
          if (!isFinite(y))
            return Math.exp(x - Math.LN2);
          if (!isFinite(y1))
            return -Math.exp(-x - Math.LN2);
          return (y - y1) / 2;
        }
      };
    }if (typeof Math.cosh === 'undefined') {
      Math.cosh = function (x) {
        var y = Math.exp(x);
        var y1 = 1 / y;
        if (!isFinite(y) || !isFinite(y1))
          return Math.exp(Math.abs(x) - Math.LN2);
        return (y + y1) / 2;
      };
    }if (typeof Math.tanh === 'undefined') {
      Math.tanh = function (x) {
        if (Math.abs(x) < taylor_n_bound) {
          var result = x;
          if (Math.abs(x) > taylor_2_bound) {
            result -= x * x * x / 3;
          }return result;
        } else {
          var a = Math.exp(+x), b = Math.exp(-x);
          return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);
        }
      };
    }if (typeof Math.asinh === 'undefined') {
      var asinh = function (x) {
        if (x >= +taylor_n_bound) {
          if (x > upper_taylor_n_bound) {
            if (x > upper_taylor_2_bound) {
              return Math.log(x) + Math.LN2;
            } else {
              return Math.log(x * 2 + 1 / (x * 2));
            }
          } else {
            return Math.log(x + Math.sqrt(x * x + 1));
          }
        } else if (x <= -taylor_n_bound) {
          return -asinh(-x);
        } else {
          var result = x;
          if (Math.abs(x) >= taylor_2_bound) {
            var x3 = x * x * x;
            result -= x3 / 6;
          }return result;
        }
      };
      Math.asinh = asinh;
    }if (typeof Math.acosh === 'undefined') {
      Math.acosh = function (x) {
        if (x < 1) {
          return NaN;
        } else if (x - 1 >= taylor_n_bound) {
          if (x > upper_taylor_2_bound) {
            return Math.log(x) + Math.LN2;
          } else {
            return Math.log(x + Math.sqrt(x * x - 1));
          }
        } else {
          var y = Math.sqrt(x - 1);
          var result = y;
          if (y >= taylor_2_bound) {
            var y3 = y * y * y;
            result -= y3 / 12;
          }return Math.sqrt(2) * result;
        }
      };
    }if (typeof Math.atanh === 'undefined') {
      Math.atanh = function (x) {
        if (Math.abs(x) < taylor_n_bound) {
          var result = x;
          if (Math.abs(x) > taylor_2_bound) {
            result += x * x * x / 3;
          }return result;
        }return Math.log((1 + x) / (1 - x)) / 2;
      };
    }if (typeof Math.log1p === 'undefined') {
      Math.log1p = function (x) {
        if (Math.abs(x) < taylor_n_bound) {
          var x2 = x * x;
          var x3 = x2 * x;
          var x4 = x3 * x;
          return -x4 / 4 + x3 / 3 - x2 / 2 + x;
        }return Math.log(x + 1);
      };
    }if (typeof Math.expm1 === 'undefined') {
      Math.expm1 = function (x) {
        if (Math.abs(x) < taylor_n_bound) {
          var x2 = x * x;
          var x3 = x2 * x;
          var x4 = x3 * x;
          return x4 / 24 + x3 / 6 + x2 / 2 + x;
        }return Math.exp(x) - 1;
      };
    }}());
  if (typeof Math.hypot === 'undefined') {
    Math.hypot = function () {
      var y = 0;
      var length = arguments.length;
      for (var i = 0; i < length; i++) {
        if (arguments[i] === Infinity || arguments[i] === -Infinity) {
          return Infinity;
        }y += arguments[i] * arguments[i];
      }
      return Math.sqrt(y);
    };
  }if (typeof Math.log10 === 'undefined') {
    Math.log10 = function (x) {
      return Math.log(x) * Math.LOG10E;
    };
  }if (typeof Math.log2 === 'undefined') {
    Math.log2 = function (x) {
      return Math.log(x) * Math.LOG2E;
    };
  }if (typeof Math.clz32 === 'undefined') {
    Math.clz32 = function (log, LN2) {
      return function (x) {
        var asUint = x >>> 0;
        if (asUint === 0) {
          return 32;
        }return 31 - (log(asUint) / LN2 | 0) | 0;
      };
    }(Math.log, Math.LN2);
  }if (typeof ArrayBuffer.isView === 'undefined') {
    ArrayBuffer.isView = function (a) {
      return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
    };
  }if (typeof Array.prototype.fill === 'undefined') {
    Array.prototype.fill = function () {
      if (this == null) {
        throw new TypeError('this is null or not defined');
      }var O = Object(this);
      var len = O.length >>> 0;
      var start = arguments[1];
      var relativeStart = start >> 0;
      var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);
      var end = arguments[2];
      var relativeEnd = end === undefined ? len : end >> 0;
      var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);
      while (k < final) {
        O[k] = value;
        k++;
      }
      return O;
    };
  }(function () {
    function normalizeOffset(offset, length) {
      if (offset < 0)
        return Math.max(0, offset + length);
      return Math.min(offset, length);
    }
    function typedArraySlice(begin, end) {
      if (typeof end === 'undefined') {
        end = this.length;
      }begin = normalizeOffset(begin || 0, this.length);
      end = Math.max(begin, normalizeOffset(end, this.length));
      return new this.constructor(this.subarray(begin, end));
    }
    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];
    for (var i = 0; i < arrays.length; ++i) {
      var TypedArray = arrays[i];
      if (typeof TypedArray.prototype.fill === 'undefined') {
        TypedArray.prototype.fill = Array.prototype.fill;
      }if (typeof TypedArray.prototype.slice === 'undefined') {
        Object.defineProperty(TypedArray.prototype, 'slice', {value: typedArraySlice});
      }}
    try {
      (function () {
      }.apply(null, new Int32Array(0)));
    } catch (e) {
      var apply = Function.prototype.apply;
      Object.defineProperty(Function.prototype, 'apply', {value: function (self, array) {
        return apply.call(this, self, [].slice.call(array));
      }});
    }
    for (var i = 0; i < arrays.length; ++i) {
      var TypedArray = arrays[i];
      if (typeof TypedArray.prototype.map === 'undefined') {
        Object.defineProperty(TypedArray.prototype, 'map', {value: function (callback, self) {
          return [].slice.call(this).map(callback, self);
        }});
      }}
    var totalOrderComparator = function (a, b) {
      if (a < b)
        return -1;
      if (a > b)
        return 1;
      if (a === b) {
        if (a !== 0)
          return 0;
        var ia = 1 / a;
        return ia === 1 / b ? 0 : ia < 0 ? -1 : 1;
      }return a !== a ? b !== b ? 0 : 1 : -1;
    };
    for (var i = 0; i < arrays.length; ++i) {
      var TypedArray = arrays[i];
      if (typeof TypedArray.prototype.sort === 'undefined') {
        Object.defineProperty(TypedArray.prototype, 'sort', {value: function (compareFunction) {
          return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);
        }});
      }}
  }());
  Kotlin.Kind = {CLASS: 'class', INTERFACE: 'interface', OBJECT: 'object'};
  Kotlin.callGetter = function (thisObject, klass, propertyName) {
    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);
    if (propertyDescriptor != null && propertyDescriptor.get != null) {
      return propertyDescriptor.get.call(thisObject);
    }propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);
    if (propertyDescriptor != null && 'value' in propertyDescriptor) {
      return thisObject[propertyName];
    }return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);
  };
  Kotlin.callSetter = function (thisObject, klass, propertyName, value) {
    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);
    if (propertyDescriptor != null && propertyDescriptor.set != null) {
      propertyDescriptor.set.call(thisObject, value);
      return;
    }propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);
    if (propertyDescriptor != null && 'value' in propertyDescriptor) {
      thisObject[propertyName] = value;
      return;
    }Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);
  };
  function isInheritanceFromInterface(ctor, iface) {
    if (ctor === iface)
      return true;
    var metadata = ctor.$metadata$;
    if (metadata != null) {
      var interfaces = metadata.interfaces;
      for (var i = 0; i < interfaces.length; i++) {
        if (isInheritanceFromInterface(interfaces[i], iface)) {
          return true;
        }}
    }var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;
    var superConstructor = superPrototype != null ? superPrototype.constructor : null;
    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);
  }
  Kotlin.isType = function (object, klass) {
    if (klass === Object) {
      switch (typeof object) {
        case 'string':
        case 'number':
        case 'boolean':
        case 'function':
          return true;
        default:return object instanceof Object;
      }
    }if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {
      return false;
    }if (typeof klass === 'function' && object instanceof klass) {
      return true;
    }var proto = Object.getPrototypeOf(klass);
    var constructor = proto != null ? proto.constructor : null;
    if (constructor != null && '$metadata$' in constructor) {
      var metadata = constructor.$metadata$;
      if (metadata.kind === Kotlin.Kind.OBJECT) {
        return object === klass;
      }}var klassMetadata = klass.$metadata$;
    if (klassMetadata == null) {
      return object instanceof klass;
    }if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {
      return isInheritanceFromInterface(object.constructor, klass);
    }return false;
  };
  Kotlin.isNumber = function (a) {
    return typeof a == 'number' || a instanceof Kotlin.Long;
  };
  Kotlin.isChar = function (value) {
    return value instanceof Kotlin.BoxedChar;
  };
  Kotlin.isComparable = function (value) {
    var type = typeof value;
    return type === 'string' || type === 'boolean' || Kotlin.isNumber(value) || Kotlin.isType(value, Kotlin.kotlin.Comparable);
  };
  Kotlin.isCharSequence = function (value) {
    return typeof value === 'string' || Kotlin.isType(value, Kotlin.kotlin.CharSequence);
  };
  (function() {
    'use strict';
    var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
    var Kind_OBJECT = Kotlin.Kind.OBJECT;
    var Kind_CLASS = Kotlin.Kind.CLASS;
    var defineInlineFunction = Kotlin.defineInlineFunction;
    var wrapFunction = Kotlin.wrapFunction;
    var equals = Kotlin.equals;
    var L0 = Kotlin.Long.ZERO;
    function Comparable() {
    }
    Comparable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Comparable', interfaces: []};
    function Enum() {
      Enum$Companion_getInstance();
      this.name$ = '';
      this.ordinal$ = 0;
    }
    Object.defineProperty(Enum.prototype, 'name', {get: function () {
      return this.name$;
    }});
    Object.defineProperty(Enum.prototype, 'ordinal', {get: function () {
      return this.ordinal$;
    }});
    Enum.prototype.compareTo_11rb$ = function (other) {
      return Kotlin.primitiveCompareTo(this.ordinal, other.ordinal);
    };
    Enum.prototype.equals = function (other) {
      return this === other;
    };
    Enum.prototype.hashCode = function () {
      return Kotlin.identityHashCode(this);
    };
    Enum.prototype.toString = function () {
      return this.name;
    };
    function Enum$Companion() {
      Enum$Companion_instance = this;
    }
    Enum$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var Enum$Companion_instance = null;
    function Enum$Companion_getInstance() {
      if (Enum$Companion_instance === null) {
        new Enum$Companion();
      }return Enum$Companion_instance;
    }
    Enum.$metadata$ = {kind: Kind_CLASS, simpleName: 'Enum', interfaces: [Comparable]};
    function newArray(size, initValue) {
      return fillArrayVal(Array(size), initValue);
    }
    var arrayWithFun = defineInlineFunction('kotlin.newArrayF', wrapFunction(function () {
      var Array_0 = Array;
      return function (size, init) {
        var array = Array_0(size);
        var tmp$;
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          array[i] = init(i);
        }
        return array;
      };
    }));
    var fillArrayFun = defineInlineFunction('kotlin.fillArray', function (array, init) {
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        array[i] = init(i);
      }
      return array;
    });
    function booleanArray(size, init) {
      var tmp$;
      var result = Array(size);
      result.$type$ = 'BooleanArray';
      if (init == null || equals(init, true))
        tmp$ = fillArrayVal(result, false);
      else if (equals(init, false))
        tmp$ = result;
      else {
        var tmp$_0;
        tmp$_0 = result.length - 1 | 0;
        for (var i = 0; i <= tmp$_0; i++) {
          result[i] = init(i);
        }
        tmp$ = result;
      }
      return tmp$;
    }
    var booleanArrayWithFun = defineInlineFunction('kotlin.booleanArrayF', wrapFunction(function () {
      var booleanArray = _.booleanArray;
      return function (size, init) {
        var array = booleanArray(size, false);
        var tmp$;
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          array[i] = init(i);
        }
        return array;
      };
    }));
    function charArray(size, init) {
      var tmp$;
      var result = new Uint16Array(size);
      result.$type$ = 'CharArray';
      if (init == null || equals(init, true) || equals(init, false))
        tmp$ = result;
      else {
        var tmp$_0;
        tmp$_0 = result.length - 1 | 0;
        for (var i = 0; i <= tmp$_0; i++) {
          result[i] = init(i);
        }
        tmp$ = result;
      }
      return tmp$;
    }
    var charArrayWithFun = defineInlineFunction('kotlin.charArrayF', wrapFunction(function () {
      var charArray = _.charArray;
      var unboxChar = Kotlin.unboxChar;
      return function (size, init) {
        var tmp$;
        var array = charArray(size, null);
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          var value = unboxChar(init(i));
          array[i] = value;
        }
        return array;
      };
    }));
    var untypedCharArrayWithFun = defineInlineFunction('kotlin.untypedCharArrayF', wrapFunction(function () {
      var Array_0 = Array;
      var unboxChar = Kotlin.unboxChar;
      return function (size, init) {
        var tmp$;
        var array = Array_0(size);
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          var value = unboxChar(init(i));
          array[i] = value;
        }
        return array;
      };
    }));
    function longArray(size, init) {
      var tmp$;
      var result = Array(size);
      result.$type$ = 'LongArray';
      if (init == null || equals(init, true))
        tmp$ = fillArrayVal(result, L0);
      else if (equals(init, false))
        tmp$ = result;
      else {
        var tmp$_0;
        tmp$_0 = result.length - 1 | 0;
        for (var i = 0; i <= tmp$_0; i++) {
          result[i] = init(i);
        }
        tmp$ = result;
      }
      return tmp$;
    }
    var longArrayWithFun = defineInlineFunction('kotlin.longArrayF', wrapFunction(function () {
      var longArray = _.longArray;
      return function (size, init) {
        var array = longArray(size, false);
        var tmp$;
        tmp$ = array.length - 1 | 0;
        for (var i = 0; i <= tmp$; i++) {
          array[i] = init(i);
        }
        return array;
      };
    }));
    function fillArrayVal(array, initValue) {
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        array[i] = initValue;
      }
      return array;
    }
    function DoubleCompanionObject() {
      DoubleCompanionObject_instance = this;
      this.MIN_VALUE = Number.MIN_VALUE;
      this.MAX_VALUE = Number.MAX_VALUE;
      this.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
      this.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
      this.NaN = Number.NaN;
    }
    DoubleCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'DoubleCompanionObject', interfaces: []};
    var DoubleCompanionObject_instance = null;
    function DoubleCompanionObject_getInstance() {
      if (DoubleCompanionObject_instance === null) {
        new DoubleCompanionObject();
      }return DoubleCompanionObject_instance;
    }
    function FloatCompanionObject() {
      FloatCompanionObject_instance = this;
      this.MIN_VALUE = Number.MIN_VALUE;
      this.MAX_VALUE = Number.MAX_VALUE;
      this.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
      this.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
      this.NaN = Number.NaN;
    }
    FloatCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'FloatCompanionObject', interfaces: []};
    var FloatCompanionObject_instance = null;
    function FloatCompanionObject_getInstance() {
      if (FloatCompanionObject_instance === null) {
        new FloatCompanionObject();
      }return FloatCompanionObject_instance;
    }
    function IntCompanionObject() {
      IntCompanionObject_instance = this;
      this.MIN_VALUE = -2147483648;
      this.MAX_VALUE = 2147483647;
      this.SIZE_BYTES = 4;
      this.SIZE_BITS = 32;
    }
    IntCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'IntCompanionObject', interfaces: []};
    var IntCompanionObject_instance = null;
    function IntCompanionObject_getInstance() {
      if (IntCompanionObject_instance === null) {
        new IntCompanionObject();
      }return IntCompanionObject_instance;
    }
    function LongCompanionObject() {
      LongCompanionObject_instance = this;
      this.MIN_VALUE = Kotlin.Long.MIN_VALUE;
      this.MAX_VALUE = Kotlin.Long.MAX_VALUE;
      this.SIZE_BYTES = 8;
      this.SIZE_BITS = 64;
    }
    LongCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'LongCompanionObject', interfaces: []};
    var LongCompanionObject_instance = null;
    function LongCompanionObject_getInstance() {
      if (LongCompanionObject_instance === null) {
        new LongCompanionObject();
      }return LongCompanionObject_instance;
    }
    function ShortCompanionObject() {
      ShortCompanionObject_instance = this;
      this.MIN_VALUE = -32768 | 0;
      this.MAX_VALUE = 32767;
      this.SIZE_BYTES = 2;
      this.SIZE_BITS = 16;
    }
    ShortCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'ShortCompanionObject', interfaces: []};
    var ShortCompanionObject_instance = null;
    function ShortCompanionObject_getInstance() {
      if (ShortCompanionObject_instance === null) {
        new ShortCompanionObject();
      }return ShortCompanionObject_instance;
    }
    function ByteCompanionObject() {
      ByteCompanionObject_instance = this;
      this.MIN_VALUE = -128 | 0;
      this.MAX_VALUE = 127;
      this.SIZE_BYTES = 1;
      this.SIZE_BITS = 8;
    }
    ByteCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'ByteCompanionObject', interfaces: []};
    var ByteCompanionObject_instance = null;
    function ByteCompanionObject_getInstance() {
      if (ByteCompanionObject_instance === null) {
        new ByteCompanionObject();
      }return ByteCompanionObject_instance;
    }
    function CharCompanionObject() {
      CharCompanionObject_instance = this;
      this.MIN_VALUE = 0;
      this.MAX_VALUE = 65535;
      this.MIN_HIGH_SURROGATE = 55296;
      this.MAX_HIGH_SURROGATE = 56319;
      this.MIN_LOW_SURROGATE = 56320;
      this.MAX_LOW_SURROGATE = 57343;
      this.MIN_SURROGATE = this.MIN_HIGH_SURROGATE;
      this.MAX_SURROGATE = this.MAX_LOW_SURROGATE;
      this.SIZE_BYTES = 2;
      this.SIZE_BITS = 16;
    }
    CharCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'CharCompanionObject', interfaces: []};
    var CharCompanionObject_instance = null;
    function CharCompanionObject_getInstance() {
      if (CharCompanionObject_instance === null) {
        new CharCompanionObject();
      }return CharCompanionObject_instance;
    }
    function StringCompanionObject() {
      StringCompanionObject_instance = this;
    }
    StringCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'StringCompanionObject', interfaces: []};
    var StringCompanionObject_instance = null;
    function StringCompanionObject_getInstance() {
      if (StringCompanionObject_instance === null) {
        new StringCompanionObject();
      }return StringCompanionObject_instance;
    }
    function BooleanCompanionObject() {
      BooleanCompanionObject_instance = this;
    }
    BooleanCompanionObject.$metadata$ = {kind: Kind_OBJECT, simpleName: 'BooleanCompanionObject', interfaces: []};
    var BooleanCompanionObject_instance = null;
    function BooleanCompanionObject_getInstance() {
      if (BooleanCompanionObject_instance === null) {
        new BooleanCompanionObject();
      }return BooleanCompanionObject_instance;
    }
    var package$kotlin = _.kotlin || (_.kotlin = {});
    package$kotlin.Comparable = Comparable;
    Object.defineProperty(Enum, 'Companion', {get: Enum$Companion_getInstance});
    package$kotlin.Enum = Enum;
    _.newArray = newArray;
    _.fillArray = fillArrayFun;
    _.newArrayF = arrayWithFun;
    _.booleanArray = booleanArray;
    _.booleanArrayF = booleanArrayWithFun;
    _.charArray = charArray;
    _.charArrayF = charArrayWithFun;
    _.untypedCharArrayF = untypedCharArrayWithFun;
    _.longArray = longArray;
    _.longArrayF = longArrayWithFun;
    var package$js = package$kotlin.js || (package$kotlin.js = {});
    var package$internal = package$js.internal || (package$js.internal = {});
    Object.defineProperty(package$internal, 'DoubleCompanionObject', {get: DoubleCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'FloatCompanionObject', {get: FloatCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'IntCompanionObject', {get: IntCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'LongCompanionObject', {get: LongCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'ShortCompanionObject', {get: ShortCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'ByteCompanionObject', {get: ByteCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'CharCompanionObject', {get: CharCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'StringCompanionObject', {get: StringCompanionObject_getInstance});
    Object.defineProperty(package$internal, 'BooleanCompanionObject', {get: BooleanCompanionObject_getInstance});
    Kotlin.defineModule('kotlin', _);
    
  }());
  (function() {
    'use strict';
    var defineInlineFunction = Kotlin.defineInlineFunction;
    var wrapFunction = Kotlin.wrapFunction;
    var equals = Kotlin.equals;
    var toBoxedChar = Kotlin.toBoxedChar;
    var unboxChar = Kotlin.unboxChar;
    var sort = Kotlin.primitiveArraySort;
    var kotlin_js_internal_DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
    var L0 = Kotlin.Long.ZERO;
    var Math_0 = Math;
    var Kind_CLASS = Kotlin.Kind.CLASS;
    var toChar = Kotlin.toChar;
    var L_1 = Kotlin.Long.NEG_ONE;
    var toByte = Kotlin.toByte;
    var L_128 = Kotlin.Long.fromInt(-128);
    var L127 = Kotlin.Long.fromInt(127);
    var kotlin_js_internal_ByteCompanionObject = Kotlin.kotlin.js.internal.ByteCompanionObject;
    var numberToInt = Kotlin.numberToInt;
    var L_2147483648 = Kotlin.Long.fromInt(-2147483648);
    var L2147483647 = Kotlin.Long.fromInt(2147483647);
    var Long$Companion$MIN_VALUE = Kotlin.Long.MIN_VALUE;
    var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
    var toShort = Kotlin.toShort;
    var L_32768 = Kotlin.Long.fromInt(-32768);
    var L32767 = Kotlin.Long.fromInt(32767);
    var kotlin_js_internal_ShortCompanionObject = Kotlin.kotlin.js.internal.ShortCompanionObject;
    var toString = Kotlin.toString;
    var contentEquals = Kotlin.arrayEquals;
    var contentHashCode = Kotlin.arrayHashCode;
    var L255 = Kotlin.Long.fromInt(255);
    var L4294967295 = new Kotlin.Long(-1, 0);
    var L65535 = Kotlin.Long.fromInt(65535);
    var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
    var Any = Object;
    var Kind_OBJECT = Kotlin.Kind.OBJECT;
    var L1 = Kotlin.Long.ONE;
    var Enum = Kotlin.kotlin.Enum;
    var Comparable = Kotlin.kotlin.Comparable;
    var ensureNotNull = Kotlin.ensureNotNull;
    var throwCCE = Kotlin.throwCCE;
    var arrayToString = Kotlin.arrayToString;
    var hashCode = Kotlin.hashCode;
    var Throwable = Error;
    var toRawBits = Kotlin.doubleToRawBits;
    var kotlin_js_internal_FloatCompanionObject = Kotlin.kotlin.js.internal.FloatCompanionObject;
    var kotlin_js_internal_CharCompanionObject = Kotlin.kotlin.js.internal.CharCompanionObject;
    var contentDeepEquals = Kotlin.arrayDeepEquals;
    var L_7390468764508069838 = new Kotlin.Long(-1478467534, -1720727600);
    var L8246714829545688274 = new Kotlin.Long(-888910638, 1920087921);
    var L3406603774387020532 = new Kotlin.Long(1993859828, 793161749);
    var DeprecationLevel = Kotlin.kotlin.DeprecationLevel;
    var L_9223372036854775807 = new Kotlin.Long(1, -2147483648);
    var L_256204778801521550 = new Kotlin.Long(1908874354, -59652324);
    var L2047 = Kotlin.Long.fromInt(2047);
    CharProgressionIterator.prototype = Object.create(CharIterator.prototype);
    CharProgressionIterator.prototype.constructor = CharProgressionIterator;
    IntProgressionIterator.prototype = Object.create(IntIterator.prototype);
    IntProgressionIterator.prototype.constructor = IntProgressionIterator;
    LongProgressionIterator.prototype = Object.create(LongIterator.prototype);
    LongProgressionIterator.prototype.constructor = LongProgressionIterator;
    CharRange.prototype = Object.create(CharProgression.prototype);
    CharRange.prototype.constructor = CharRange;
    IntRange.prototype = Object.create(IntProgression.prototype);
    IntRange.prototype.constructor = IntRange;
    LongRange.prototype = Object.create(LongProgression.prototype);
    LongRange.prototype.constructor = LongRange;
    AnnotationTarget.prototype = Object.create(Enum.prototype);
    AnnotationTarget.prototype.constructor = AnnotationTarget;
    AnnotationRetention.prototype = Object.create(Enum.prototype);
    AnnotationRetention.prototype.constructor = AnnotationRetention;
    KParameter$Kind.prototype = Object.create(Enum.prototype);
    KParameter$Kind.prototype.constructor = KParameter$Kind;
    KVariance.prototype = Object.create(Enum.prototype);
    KVariance.prototype.constructor = KVariance;
    KVisibility.prototype = Object.create(Enum.prototype);
    KVisibility.prototype.constructor = KVisibility;
    booleanArrayIterator$ObjectLiteral.prototype = Object.create(BooleanIterator.prototype);
    booleanArrayIterator$ObjectLiteral.prototype.constructor = booleanArrayIterator$ObjectLiteral;
    byteArrayIterator$ObjectLiteral.prototype = Object.create(ByteIterator.prototype);
    byteArrayIterator$ObjectLiteral.prototype.constructor = byteArrayIterator$ObjectLiteral;
    shortArrayIterator$ObjectLiteral.prototype = Object.create(ShortIterator.prototype);
    shortArrayIterator$ObjectLiteral.prototype.constructor = shortArrayIterator$ObjectLiteral;
    charArrayIterator$ObjectLiteral.prototype = Object.create(CharIterator.prototype);
    charArrayIterator$ObjectLiteral.prototype.constructor = charArrayIterator$ObjectLiteral;
    intArrayIterator$ObjectLiteral.prototype = Object.create(IntIterator.prototype);
    intArrayIterator$ObjectLiteral.prototype.constructor = intArrayIterator$ObjectLiteral;
    floatArrayIterator$ObjectLiteral.prototype = Object.create(FloatIterator.prototype);
    floatArrayIterator$ObjectLiteral.prototype.constructor = floatArrayIterator$ObjectLiteral;
    doubleArrayIterator$ObjectLiteral.prototype = Object.create(DoubleIterator.prototype);
    doubleArrayIterator$ObjectLiteral.prototype.constructor = doubleArrayIterator$ObjectLiteral;
    longArrayIterator$ObjectLiteral.prototype = Object.create(LongIterator.prototype);
    longArrayIterator$ObjectLiteral.prototype.constructor = longArrayIterator$ObjectLiteral;
    AbstractList.prototype = Object.create(AbstractCollection.prototype);
    AbstractList.prototype.constructor = AbstractList;
    asList$ObjectLiteral.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral.prototype.constructor = asList$ObjectLiteral;
    asList$ObjectLiteral_0.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral_0.prototype.constructor = asList$ObjectLiteral_0;
    asList$ObjectLiteral_1.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral_1.prototype.constructor = asList$ObjectLiteral_1;
    asList$ObjectLiteral_2.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral_2.prototype.constructor = asList$ObjectLiteral_2;
    asList$ObjectLiteral_3.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral_3.prototype.constructor = asList$ObjectLiteral_3;
    AbstractMutableCollection.prototype = Object.create(AbstractCollection.prototype);
    AbstractMutableCollection.prototype.constructor = AbstractMutableCollection;
    AbstractMutableList$ListIteratorImpl.prototype = Object.create(AbstractMutableList$IteratorImpl.prototype);
    AbstractMutableList$ListIteratorImpl.prototype.constructor = AbstractMutableList$ListIteratorImpl;
    AbstractMutableList.prototype = Object.create(AbstractMutableCollection.prototype);
    AbstractMutableList.prototype.constructor = AbstractMutableList;
    AbstractMutableList$SubList.prototype = Object.create(AbstractMutableList.prototype);
    AbstractMutableList$SubList.prototype.constructor = AbstractMutableList$SubList;
    AbstractMutableSet.prototype = Object.create(AbstractMutableCollection.prototype);
    AbstractMutableSet.prototype.constructor = AbstractMutableSet;
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype = Object.create(AbstractMutableSet.prototype);
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.constructor = AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral;
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype = Object.create(AbstractMutableCollection.prototype);
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.constructor = AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral;
    AbstractMutableMap.prototype = Object.create(AbstractMap.prototype);
    AbstractMutableMap.prototype.constructor = AbstractMutableMap;
    ArrayList.prototype = Object.create(AbstractMutableList.prototype);
    ArrayList.prototype.constructor = ArrayList;
    HashMap$EntrySet.prototype = Object.create(AbstractMutableSet.prototype);
    HashMap$EntrySet.prototype.constructor = HashMap$EntrySet;
    HashMap.prototype = Object.create(AbstractMutableMap.prototype);
    HashMap.prototype.constructor = HashMap;
    HashSet.prototype = Object.create(AbstractMutableSet.prototype);
    HashSet.prototype.constructor = HashSet;
    LinkedHashMap$ChainEntry.prototype = Object.create(AbstractMutableMap$SimpleEntry.prototype);
    LinkedHashMap$ChainEntry.prototype.constructor = LinkedHashMap$ChainEntry;
    LinkedHashMap$EntrySet.prototype = Object.create(AbstractMutableSet.prototype);
    LinkedHashMap$EntrySet.prototype.constructor = LinkedHashMap$EntrySet;
    LinkedHashMap.prototype = Object.create(HashMap.prototype);
    LinkedHashMap.prototype.constructor = LinkedHashMap;
    LinkedHashSet.prototype = Object.create(HashSet.prototype);
    LinkedHashSet.prototype.constructor = LinkedHashSet;
    NodeJsOutput.prototype = Object.create(BaseOutput.prototype);
    NodeJsOutput.prototype.constructor = NodeJsOutput;
    OutputToConsoleLog.prototype = Object.create(BaseOutput.prototype);
    OutputToConsoleLog.prototype.constructor = OutputToConsoleLog;
    BufferedOutput.prototype = Object.create(BaseOutput.prototype);
    BufferedOutput.prototype.constructor = BufferedOutput;
    BufferedOutputToConsoleLog.prototype = Object.create(BufferedOutput.prototype);
    BufferedOutputToConsoleLog.prototype.constructor = BufferedOutputToConsoleLog;
    asList$ObjectLiteral_4.prototype = Object.create(AbstractList.prototype);
    asList$ObjectLiteral_4.prototype.constructor = asList$ObjectLiteral_4;
    Error_0.prototype = Object.create(Throwable.prototype);
    Error_0.prototype.constructor = Error_0;
    Exception.prototype = Object.create(Throwable.prototype);
    Exception.prototype.constructor = Exception;
    RuntimeException.prototype = Object.create(Exception.prototype);
    RuntimeException.prototype.constructor = RuntimeException;
    IllegalArgumentException.prototype = Object.create(RuntimeException.prototype);
    IllegalArgumentException.prototype.constructor = IllegalArgumentException;
    IllegalStateException.prototype = Object.create(RuntimeException.prototype);
    IllegalStateException.prototype.constructor = IllegalStateException;
    IndexOutOfBoundsException.prototype = Object.create(RuntimeException.prototype);
    IndexOutOfBoundsException.prototype.constructor = IndexOutOfBoundsException;
    ConcurrentModificationException.prototype = Object.create(RuntimeException.prototype);
    ConcurrentModificationException.prototype.constructor = ConcurrentModificationException;
    UnsupportedOperationException.prototype = Object.create(RuntimeException.prototype);
    UnsupportedOperationException.prototype.constructor = UnsupportedOperationException;
    NumberFormatException.prototype = Object.create(IllegalArgumentException.prototype);
    NumberFormatException.prototype.constructor = NumberFormatException;
    NullPointerException.prototype = Object.create(RuntimeException.prototype);
    NullPointerException.prototype.constructor = NullPointerException;
    ClassCastException.prototype = Object.create(RuntimeException.prototype);
    ClassCastException.prototype.constructor = ClassCastException;
    AssertionError.prototype = Object.create(Error_0.prototype);
    AssertionError.prototype.constructor = AssertionError;
    NoSuchElementException.prototype = Object.create(RuntimeException.prototype);
    NoSuchElementException.prototype.constructor = NoSuchElementException;
    ArithmeticException.prototype = Object.create(RuntimeException.prototype);
    ArithmeticException.prototype.constructor = ArithmeticException;
    NoWhenBranchMatchedException.prototype = Object.create(RuntimeException.prototype);
    NoWhenBranchMatchedException.prototype.constructor = NoWhenBranchMatchedException;
    UninitializedPropertyAccessException.prototype = Object.create(RuntimeException.prototype);
    UninitializedPropertyAccessException.prototype.constructor = UninitializedPropertyAccessException;
    SimpleKClassImpl.prototype = Object.create(KClassImpl.prototype);
    SimpleKClassImpl.prototype.constructor = SimpleKClassImpl;
    PrimitiveKClassImpl.prototype = Object.create(KClassImpl.prototype);
    PrimitiveKClassImpl.prototype.constructor = PrimitiveKClassImpl;
    NothingKClassImpl.prototype = Object.create(KClassImpl.prototype);
    NothingKClassImpl.prototype.constructor = NothingKClassImpl;
    CharacterCodingException.prototype = Object.create(Exception.prototype);
    CharacterCodingException.prototype.constructor = CharacterCodingException;
    RegexOption.prototype = Object.create(Enum.prototype);
    RegexOption.prototype.constructor = RegexOption;
    findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral.prototype = Object.create(AbstractList.prototype);
    findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral.prototype.constructor = findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral;
    findNext$ObjectLiteral$groups$ObjectLiteral.prototype = Object.create(AbstractCollection.prototype);
    findNext$ObjectLiteral$groups$ObjectLiteral.prototype.constructor = findNext$ObjectLiteral$groups$ObjectLiteral;
    DurationUnit.prototype = Object.create(Enum.prototype);
    DurationUnit.prototype.constructor = DurationUnit;
    HrTimeSource$markNow$ObjectLiteral.prototype = Object.create(TimeMark.prototype);
    HrTimeSource$markNow$ObjectLiteral.prototype.constructor = HrTimeSource$markNow$ObjectLiteral;
    PerformanceTimeSource.prototype = Object.create(AbstractDoubleTimeSource.prototype);
    PerformanceTimeSource.prototype.constructor = PerformanceTimeSource;
    DateNowTimeSource.prototype = Object.create(AbstractDoubleTimeSource.prototype);
    DateNowTimeSource.prototype.constructor = DateNowTimeSource;
    Experimental$Level.prototype = Object.create(Enum.prototype);
    Experimental$Level.prototype.constructor = Experimental$Level;
    RequiresOptIn$Level.prototype = Object.create(Enum.prototype);
    RequiresOptIn$Level.prototype.constructor = RequiresOptIn$Level;
    State.prototype = Object.create(Enum.prototype);
    State.prototype.constructor = State;
    AbstractList$SubList.prototype = Object.create(AbstractList.prototype);
    AbstractList$SubList.prototype.constructor = AbstractList$SubList;
    AbstractList$ListIteratorImpl.prototype = Object.create(AbstractList$IteratorImpl.prototype);
    AbstractList$ListIteratorImpl.prototype.constructor = AbstractList$ListIteratorImpl;
    AbstractSet.prototype = Object.create(AbstractCollection.prototype);
    AbstractSet.prototype.constructor = AbstractSet;
    AbstractMap$get_AbstractMap$keys$ObjectLiteral.prototype = Object.create(AbstractSet.prototype);
    AbstractMap$get_AbstractMap$keys$ObjectLiteral.prototype.constructor = AbstractMap$get_AbstractMap$keys$ObjectLiteral;
    AbstractMap$get_AbstractMap$values$ObjectLiteral.prototype = Object.create(AbstractCollection.prototype);
    AbstractMap$get_AbstractMap$values$ObjectLiteral.prototype.constructor = AbstractMap$get_AbstractMap$values$ObjectLiteral;
    ArrayDeque.prototype = Object.create(AbstractMutableList.prototype);
    ArrayDeque.prototype.constructor = ArrayDeque;
    ReversedListReadOnly.prototype = Object.create(AbstractList.prototype);
    ReversedListReadOnly.prototype.constructor = ReversedListReadOnly;
    ReversedList.prototype = Object.create(AbstractMutableList.prototype);
    ReversedList.prototype.constructor = ReversedList;
    SequenceBuilderIterator.prototype = Object.create(SequenceScope.prototype);
    SequenceBuilderIterator.prototype.constructor = SequenceBuilderIterator;
    DistinctIterator.prototype = Object.create(AbstractIterator.prototype);
    DistinctIterator.prototype.constructor = DistinctIterator;
    MovingSubList.prototype = Object.create(AbstractList.prototype);
    MovingSubList.prototype.constructor = MovingSubList;
    RingBuffer$iterator$ObjectLiteral.prototype = Object.create(AbstractIterator.prototype);
    RingBuffer$iterator$ObjectLiteral.prototype.constructor = RingBuffer$iterator$ObjectLiteral;
    RingBuffer.prototype = Object.create(AbstractList.prototype);
    RingBuffer.prototype.constructor = RingBuffer;
    InvocationKind.prototype = Object.create(Enum.prototype);
    InvocationKind.prototype.constructor = InvocationKind;
    CoroutineSingletons.prototype = Object.create(Enum.prototype);
    CoroutineSingletons.prototype.constructor = CoroutineSingletons;
    RequireKotlinVersionKind.prototype = Object.create(Enum.prototype);
    RequireKotlinVersionKind.prototype.constructor = RequireKotlinVersionKind;
    Random$Default.prototype = Object.create(Random.prototype);
    Random$Default.prototype.constructor = Random$Default;
    Random$Companion.prototype = Object.create(Random.prototype);
    Random$Companion.prototype.constructor = Random$Companion;
    XorWowRandom.prototype = Object.create(Random.prototype);
    XorWowRandom.prototype.constructor = XorWowRandom;
    iterator$ObjectLiteral.prototype = Object.create(CharIterator.prototype);
    iterator$ObjectLiteral.prototype.constructor = iterator$ObjectLiteral;
    AdjustedTimeMark.prototype = Object.create(TimeMark.prototype);
    AdjustedTimeMark.prototype.constructor = AdjustedTimeMark;
    AbstractLongTimeSource$LongTimeMark.prototype = Object.create(TimeMark.prototype);
    AbstractLongTimeSource$LongTimeMark.prototype.constructor = AbstractLongTimeSource$LongTimeMark;
    AbstractDoubleTimeSource$DoubleTimeMark.prototype = Object.create(TimeMark.prototype);
    AbstractDoubleTimeSource$DoubleTimeMark.prototype.constructor = AbstractDoubleTimeSource$DoubleTimeMark;
    TestTimeSource.prototype = Object.create(AbstractLongTimeSource.prototype);
    TestTimeSource.prototype.constructor = TestTimeSource;
    LazyThreadSafetyMode.prototype = Object.create(Enum.prototype);
    LazyThreadSafetyMode.prototype.constructor = LazyThreadSafetyMode;
    NotImplementedError.prototype = Object.create(Error_0.prototype);
    NotImplementedError.prototype.constructor = NotImplementedError;
    UByteArray$Iterator.prototype = Object.create(UByteIterator.prototype);
    UByteArray$Iterator.prototype.constructor = UByteArray$Iterator;
    UIntArray$Iterator.prototype = Object.create(UIntIterator.prototype);
    UIntArray$Iterator.prototype.constructor = UIntArray$Iterator;
    UIntRange.prototype = Object.create(UIntProgression.prototype);
    UIntRange.prototype.constructor = UIntRange;
    UIntProgressionIterator.prototype = Object.create(UIntIterator.prototype);
    UIntProgressionIterator.prototype.constructor = UIntProgressionIterator;
    ULongArray$Iterator.prototype = Object.create(ULongIterator.prototype);
    ULongArray$Iterator.prototype.constructor = ULongArray$Iterator;
    ULongRange_0.prototype = Object.create(ULongProgression.prototype);
    ULongRange_0.prototype.constructor = ULongRange_0;
    ULongProgressionIterator.prototype = Object.create(ULongIterator.prototype);
    ULongProgressionIterator.prototype.constructor = ULongProgressionIterator;
    UShortArray$Iterator.prototype = Object.create(UShortIterator.prototype);
    UShortArray$Iterator.prototype.constructor = UShortArray$Iterator;
    function Iterable$ObjectLiteral(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Iterable$ObjectLiteral.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Iterable$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterable]};
    function Sequence$ObjectLiteral(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    var component1 = defineInlineFunction('kotlin.kotlin.collections.component1_us0mfu$', function ($receiver) {
      return $receiver[0];
    });
    var component1_0 = defineInlineFunction('kotlin.kotlin.collections.component1_964n91$', function ($receiver) {
      return $receiver[0];
    });
    var component1_1 = defineInlineFunction('kotlin.kotlin.collections.component1_i2lc79$', function ($receiver) {
      return $receiver[0];
    });
    var component1_2 = defineInlineFunction('kotlin.kotlin.collections.component1_tmsbgo$', function ($receiver) {
      return $receiver[0];
    });
    var component1_3 = defineInlineFunction('kotlin.kotlin.collections.component1_se6h4x$', function ($receiver) {
      return $receiver[0];
    });
    var component1_4 = defineInlineFunction('kotlin.kotlin.collections.component1_rjqryz$', function ($receiver) {
      return $receiver[0];
    });
    var component1_5 = defineInlineFunction('kotlin.kotlin.collections.component1_bvy38s$', function ($receiver) {
      return $receiver[0];
    });
    var component1_6 = defineInlineFunction('kotlin.kotlin.collections.component1_l1lu5t$', function ($receiver) {
      return $receiver[0];
    });
    var component1_7 = defineInlineFunction('kotlin.kotlin.collections.component1_355ntz$', function ($receiver) {
      return $receiver[0];
    });
    var component2 = defineInlineFunction('kotlin.kotlin.collections.component2_us0mfu$', function ($receiver) {
      return $receiver[1];
    });
    var component2_0 = defineInlineFunction('kotlin.kotlin.collections.component2_964n91$', function ($receiver) {
      return $receiver[1];
    });
    var component2_1 = defineInlineFunction('kotlin.kotlin.collections.component2_i2lc79$', function ($receiver) {
      return $receiver[1];
    });
    var component2_2 = defineInlineFunction('kotlin.kotlin.collections.component2_tmsbgo$', function ($receiver) {
      return $receiver[1];
    });
    var component2_3 = defineInlineFunction('kotlin.kotlin.collections.component2_se6h4x$', function ($receiver) {
      return $receiver[1];
    });
    var component2_4 = defineInlineFunction('kotlin.kotlin.collections.component2_rjqryz$', function ($receiver) {
      return $receiver[1];
    });
    var component2_5 = defineInlineFunction('kotlin.kotlin.collections.component2_bvy38s$', function ($receiver) {
      return $receiver[1];
    });
    var component2_6 = defineInlineFunction('kotlin.kotlin.collections.component2_l1lu5t$', function ($receiver) {
      return $receiver[1];
    });
    var component2_7 = defineInlineFunction('kotlin.kotlin.collections.component2_355ntz$', function ($receiver) {
      return $receiver[1];
    });
    var component3 = defineInlineFunction('kotlin.kotlin.collections.component3_us0mfu$', function ($receiver) {
      return $receiver[2];
    });
    var component3_0 = defineInlineFunction('kotlin.kotlin.collections.component3_964n91$', function ($receiver) {
      return $receiver[2];
    });
    var component3_1 = defineInlineFunction('kotlin.kotlin.collections.component3_i2lc79$', function ($receiver) {
      return $receiver[2];
    });
    var component3_2 = defineInlineFunction('kotlin.kotlin.collections.component3_tmsbgo$', function ($receiver) {
      return $receiver[2];
    });
    var component3_3 = defineInlineFunction('kotlin.kotlin.collections.component3_se6h4x$', function ($receiver) {
      return $receiver[2];
    });
    var component3_4 = defineInlineFunction('kotlin.kotlin.collections.component3_rjqryz$', function ($receiver) {
      return $receiver[2];
    });
    var component3_5 = defineInlineFunction('kotlin.kotlin.collections.component3_bvy38s$', function ($receiver) {
      return $receiver[2];
    });
    var component3_6 = defineInlineFunction('kotlin.kotlin.collections.component3_l1lu5t$', function ($receiver) {
      return $receiver[2];
    });
    var component3_7 = defineInlineFunction('kotlin.kotlin.collections.component3_355ntz$', function ($receiver) {
      return $receiver[2];
    });
    var component4 = defineInlineFunction('kotlin.kotlin.collections.component4_us0mfu$', function ($receiver) {
      return $receiver[3];
    });
    var component4_0 = defineInlineFunction('kotlin.kotlin.collections.component4_964n91$', function ($receiver) {
      return $receiver[3];
    });
    var component4_1 = defineInlineFunction('kotlin.kotlin.collections.component4_i2lc79$', function ($receiver) {
      return $receiver[3];
    });
    var component4_2 = defineInlineFunction('kotlin.kotlin.collections.component4_tmsbgo$', function ($receiver) {
      return $receiver[3];
    });
    var component4_3 = defineInlineFunction('kotlin.kotlin.collections.component4_se6h4x$', function ($receiver) {
      return $receiver[3];
    });
    var component4_4 = defineInlineFunction('kotlin.kotlin.collections.component4_rjqryz$', function ($receiver) {
      return $receiver[3];
    });
    var component4_5 = defineInlineFunction('kotlin.kotlin.collections.component4_bvy38s$', function ($receiver) {
      return $receiver[3];
    });
    var component4_6 = defineInlineFunction('kotlin.kotlin.collections.component4_l1lu5t$', function ($receiver) {
      return $receiver[3];
    });
    var component4_7 = defineInlineFunction('kotlin.kotlin.collections.component4_355ntz$', function ($receiver) {
      return $receiver[3];
    });
    var component5 = defineInlineFunction('kotlin.kotlin.collections.component5_us0mfu$', function ($receiver) {
      return $receiver[4];
    });
    var component5_0 = defineInlineFunction('kotlin.kotlin.collections.component5_964n91$', function ($receiver) {
      return $receiver[4];
    });
    var component5_1 = defineInlineFunction('kotlin.kotlin.collections.component5_i2lc79$', function ($receiver) {
      return $receiver[4];
    });
    var component5_2 = defineInlineFunction('kotlin.kotlin.collections.component5_tmsbgo$', function ($receiver) {
      return $receiver[4];
    });
    var component5_3 = defineInlineFunction('kotlin.kotlin.collections.component5_se6h4x$', function ($receiver) {
      return $receiver[4];
    });
    var component5_4 = defineInlineFunction('kotlin.kotlin.collections.component5_rjqryz$', function ($receiver) {
      return $receiver[4];
    });
    var component5_5 = defineInlineFunction('kotlin.kotlin.collections.component5_bvy38s$', function ($receiver) {
      return $receiver[4];
    });
    var component5_6 = defineInlineFunction('kotlin.kotlin.collections.component5_l1lu5t$', function ($receiver) {
      return $receiver[4];
    });
    var component5_7 = defineInlineFunction('kotlin.kotlin.collections.component5_355ntz$', function ($receiver) {
      return $receiver[4];
    });
    function contains($receiver, element) {
      return indexOf($receiver, element) >= 0;
    }
    function contains_0($receiver, element) {
      return indexOf_0($receiver, element) >= 0;
    }
    function contains_1($receiver, element) {
      return indexOf_1($receiver, element) >= 0;
    }
    function contains_2($receiver, element) {
      return indexOf_2($receiver, element) >= 0;
    }
    function contains_3($receiver, element) {
      return indexOf_3($receiver, element) >= 0;
    }
    function contains_4($receiver, element) {
      return indexOf_4($receiver, element) >= 0;
    }
    function contains_5($receiver, element) {
      return indexOf_5($receiver, element) >= 0;
    }
    function contains_6($receiver, element) {
      return indexOf_6($receiver, element) >= 0;
    }
    function contains_7($receiver, element) {
      return indexOf_7($receiver, element) >= 0;
    }
    var elementAtOrElse = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_qyicq6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_0 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_1pvgfa$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_1 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_shq4vo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_2 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_xumoj0$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_3 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_uafoqm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_4 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_ln6iwk$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_5 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_lnau98$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_6 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_v8pqlw$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var elementAtOrElse_7 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_sjvy5y$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : unboxChar(defaultValue(index));
      };
    }));
    var elementAtOrNull = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_8ujjk8$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_8ujjk8$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_0 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_mrm5p$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_mrm5p$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_1 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_m2jy6x$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_m2jy6x$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_2 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_c03ot6$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_c03ot6$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_3 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_3aefkx$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_3aefkx$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_4 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_rblqex$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_rblqex$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_5 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_xgrzbe$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_xgrzbe$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_6 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_1qu12l$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_1qu12l$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_7 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_gtcw5h$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_gtcw5h$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var find = defineInlineFunction('kotlin.kotlin.collections.find_sfx99b$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_0 = defineInlineFunction('kotlin.kotlin.collections.find_c3i447$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_1 = defineInlineFunction('kotlin.kotlin.collections.find_247xw3$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_2 = defineInlineFunction('kotlin.kotlin.collections.find_il4kyb$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_3 = defineInlineFunction('kotlin.kotlin.collections.find_i1oc7r$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_4 = defineInlineFunction('kotlin.kotlin.collections.find_u4nq1f$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_5 = defineInlineFunction('kotlin.kotlin.collections.find_3vq27r$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_6 = defineInlineFunction('kotlin.kotlin.collections.find_xffwn9$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_7 = defineInlineFunction('kotlin.kotlin.collections.find_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$;
          for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
            var element = unboxChar($receiver[tmp$]);
            if (predicate(toBoxedChar(element))) {
              firstOrNull$result = element;
              break firstOrNull$break;
            }}
          firstOrNull$result = null;
        }
         while (false);
        return firstOrNull$result;
      };
    }));
    var findLast = defineInlineFunction('kotlin.kotlin.collections.findLast_sfx99b$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_m7z4lg$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_0 = defineInlineFunction('kotlin.kotlin.collections.findLast_c3i447$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_1 = defineInlineFunction('kotlin.kotlin.collections.findLast_247xw3$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_2 = defineInlineFunction('kotlin.kotlin.collections.findLast_il4kyb$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_3 = defineInlineFunction('kotlin.kotlin.collections.findLast_i1oc7r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_4 = defineInlineFunction('kotlin.kotlin.collections.findLast_u4nq1f$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_rjqryz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_5 = defineInlineFunction('kotlin.kotlin.collections.findLast_3vq27r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_bvy38s$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_6 = defineInlineFunction('kotlin.kotlin.collections.findLast_xffwn9$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_l1lu5t$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_7 = defineInlineFunction('kotlin.kotlin.collections.findLast_3ji0pj$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_355ntz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver[index];
            if (predicate(toBoxedChar(element))) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    function first($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_0($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_1($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_2($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_3($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_4($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_5($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_6($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    function first_7($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[0];
    }
    var first_8 = defineInlineFunction('kotlin.kotlin.collections.first_sfx99b$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_9 = defineInlineFunction('kotlin.kotlin.collections.first_c3i447$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_10 = defineInlineFunction('kotlin.kotlin.collections.first_247xw3$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_11 = defineInlineFunction('kotlin.kotlin.collections.first_il4kyb$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_12 = defineInlineFunction('kotlin.kotlin.collections.first_i1oc7r$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_13 = defineInlineFunction('kotlin.kotlin.collections.first_u4nq1f$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_14 = defineInlineFunction('kotlin.kotlin.collections.first_3vq27r$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_15 = defineInlineFunction('kotlin.kotlin.collections.first_xffwn9$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_16 = defineInlineFunction('kotlin.kotlin.collections.first_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    function firstOrNull($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_0($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_1($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_2($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_3($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_4($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_5($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_6($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    function firstOrNull_7($receiver) {
      return $receiver.length === 0 ? null : $receiver[0];
    }
    var firstOrNull_8 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_9 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_c3i447$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_10 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_247xw3$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_11 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_14 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_15 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_16 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            return element;
        }
        return null;
      };
    }));
    var getOrElse = defineInlineFunction('kotlin.kotlin.collections.getOrElse_qyicq6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_0 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_1pvgfa$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_1 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_shq4vo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_2 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_xumoj0$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_3 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_uafoqm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_4 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_ln6iwk$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_5 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_lnau98$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_6 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_v8pqlw$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : defaultValue(index);
      };
    }));
    var getOrElse_7 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_sjvy5y$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : unboxChar(defaultValue(index));
      };
    }));
    function getOrNull($receiver, index) {
      return index >= 0 && index <= get_lastIndex($receiver) ? $receiver[index] : null;
    }
    function getOrNull_0($receiver, index) {
      return index >= 0 && index <= get_lastIndex_0($receiver) ? $receiver[index] : null;
    }
    function getOrNull_1($receiver, index) {
      return index >= 0 && index <= get_lastIndex_1($receiver) ? $receiver[index] : null;
    }
    function getOrNull_2($receiver, index) {
      return index >= 0 && index <= get_lastIndex_2($receiver) ? $receiver[index] : null;
    }
    function getOrNull_3($receiver, index) {
      return index >= 0 && index <= get_lastIndex_3($receiver) ? $receiver[index] : null;
    }
    function getOrNull_4($receiver, index) {
      return index >= 0 && index <= get_lastIndex_4($receiver) ? $receiver[index] : null;
    }
    function getOrNull_5($receiver, index) {
      return index >= 0 && index <= get_lastIndex_5($receiver) ? $receiver[index] : null;
    }
    function getOrNull_6($receiver, index) {
      return index >= 0 && index <= get_lastIndex_6($receiver) ? $receiver[index] : null;
    }
    function getOrNull_7($receiver, index) {
      return index >= 0 && index <= get_lastIndex_7($receiver) ? $receiver[index] : null;
    }
    function indexOf($receiver, element) {
      if (element == null) {
        for (var index = 0; index !== $receiver.length; ++index) {
          if ($receiver[index] == null) {
            return index;
          }}
      } else {
        for (var index_0 = 0; index_0 !== $receiver.length; ++index_0) {
          if (equals(element, $receiver[index_0])) {
            return index_0;
          }}
      }
      return -1;
    }
    function indexOf_0($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_1($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_2($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_3($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (equals(element, $receiver[index])) {
          return index;
        }}
      return -1;
    }
    function indexOf_4($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_5($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_6($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function indexOf_7($receiver, element) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    var indexOfFirst = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_sfx99b$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_0 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_c3i447$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_1 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_247xw3$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_2 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_il4kyb$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_3 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_i1oc7r$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_4 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_u4nq1f$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_5 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_3vq27r$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_6 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_xffwn9$', function ($receiver, predicate) {
      for (var index = 0; index !== $receiver.length; ++index) {
        if (predicate($receiver[index])) {
          return index;
        }}
      return -1;
    });
    var indexOfFirst_7 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        for (var index = 0; index !== $receiver.length; ++index) {
          if (predicate(toBoxedChar($receiver[index]))) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_sfx99b$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_m7z4lg$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_0 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_c3i447$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_1 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_247xw3$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_2 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_il4kyb$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_3 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_i1oc7r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_4 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_u4nq1f$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_rjqryz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_5 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_3vq27r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_bvy38s$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_6 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_xffwn9$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_l1lu5t$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate($receiver[index])) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_7 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_3ji0pj$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_355ntz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate(toBoxedChar($receiver[index]))) {
            return index;
          }}
        return -1;
      };
    }));
    function last($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex($receiver)];
    }
    function last_0($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_0($receiver)];
    }
    function last_1($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_1($receiver)];
    }
    function last_2($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_2($receiver)];
    }
    function last_3($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_3($receiver)];
    }
    function last_4($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_4($receiver)];
    }
    function last_5($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_5($receiver)];
    }
    function last_6($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_6($receiver)];
    }
    function last_7($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[get_lastIndex_7($receiver)];
    }
    var last_8 = defineInlineFunction('kotlin.kotlin.collections.last_sfx99b$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_m7z4lg$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_9 = defineInlineFunction('kotlin.kotlin.collections.last_c3i447$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_10 = defineInlineFunction('kotlin.kotlin.collections.last_247xw3$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_11 = defineInlineFunction('kotlin.kotlin.collections.last_il4kyb$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_12 = defineInlineFunction('kotlin.kotlin.collections.last_i1oc7r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_13 = defineInlineFunction('kotlin.kotlin.collections.last_u4nq1f$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_rjqryz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_14 = defineInlineFunction('kotlin.kotlin.collections.last_3vq27r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_bvy38s$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_15 = defineInlineFunction('kotlin.kotlin.collections.last_xffwn9$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_l1lu5t$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_16 = defineInlineFunction('kotlin.kotlin.collections.last_3ji0pj$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_355ntz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(toBoxedChar(element)))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    function lastIndexOf($receiver, element) {
      var tmp$, tmp$_0;
      if (element == null) {
        tmp$ = reversed_9(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if ($receiver[index] == null) {
            return index;
          }}
      } else {
        tmp$_0 = reversed_9(get_indices($receiver)).iterator();
        while (tmp$_0.hasNext()) {
          var index_0 = tmp$_0.next();
          if (equals(element, $receiver[index_0])) {
            return index_0;
          }}
      }
      return -1;
    }
    function lastIndexOf_0($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_0($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_1($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_1($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_2($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_2($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_3($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_3($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (equals(element, $receiver[index])) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_4($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_4($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_5($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_5($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_6($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_6($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastIndexOf_7($receiver, element) {
      var tmp$;
      tmp$ = reversed_9(get_indices_7($receiver)).iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        if (element === $receiver[index]) {
          return index;
        }}
      return -1;
    }
    function lastOrNull($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_0($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_1($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_2($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_3($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_4($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_5($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_6($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    function lastOrNull_7($receiver) {
      return $receiver.length === 0 ? null : $receiver[$receiver.length - 1 | 0];
    }
    var lastOrNull_8 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_sfx99b$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_m7z4lg$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_9 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_c3i447$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_10 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_247xw3$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_11 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_il4kyb$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_i1oc7r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_u4nq1f$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_rjqryz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_14 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_3vq27r$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_bvy38s$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_15 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_xffwn9$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_l1lu5t$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_16 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_3ji0pj$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_355ntz$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver[index];
          if (predicate(toBoxedChar(element)))
            return element;
        }
        return null;
      };
    }));
    var random = defineInlineFunction('kotlin.kotlin.collections.random_us0mfu$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_lj338n$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_0 = defineInlineFunction('kotlin.kotlin.collections.random_964n91$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_ciead0$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_1 = defineInlineFunction('kotlin.kotlin.collections.random_i2lc79$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_wayomy$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_2 = defineInlineFunction('kotlin.kotlin.collections.random_tmsbgo$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_os0q87$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_3 = defineInlineFunction('kotlin.kotlin.collections.random_se6h4x$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_2uk8lc$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_4 = defineInlineFunction('kotlin.kotlin.collections.random_rjqryz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_zcvl96$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_5 = defineInlineFunction('kotlin.kotlin.collections.random_bvy38s$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_k31a39$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_6 = defineInlineFunction('kotlin.kotlin.collections.random_l1lu5t$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_mwcbea$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_7 = defineInlineFunction('kotlin.kotlin.collections.random_355ntz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_8kgqmy$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_8($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_9($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_10($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_11($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_12($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_13($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_14($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_15($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function random_16($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Array is empty.');
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    var randomOrNull = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_us0mfu$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_lj338n$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_0 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_964n91$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_ciead0$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_1 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_i2lc79$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_wayomy$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_2 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_tmsbgo$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_os0q87$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_3 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_se6h4x$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_2uk8lc$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_4 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_rjqryz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_zcvl96$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_5 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_bvy38s$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_k31a39$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_6 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_l1lu5t$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_mwcbea$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_7 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_355ntz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_8kgqmy$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_8($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_9($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_10($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_11($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_12($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_13($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_14($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_15($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function randomOrNull_16($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver[random.nextInt_za3lpa$($receiver.length)];
    }
    function single($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_0($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_1($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_2($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_3($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_4($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_5($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_6($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    function single_7($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Array is empty.');
        case 1:
          tmp$ = $receiver[0];
          break;
        default:throw IllegalArgumentException_init_0('Array has more than one element.');
      }
      return tmp$;
    }
    var single_8 = defineInlineFunction('kotlin.kotlin.collections.single_sfx99b$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return (tmp$_0 = single) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      };
    }));
    var single_9 = defineInlineFunction('kotlin.kotlin.collections.single_c3i447$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'number' ? tmp$_0 : throwCCE();
      };
    }));
    var single_10 = defineInlineFunction('kotlin.kotlin.collections.single_247xw3$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'number' ? tmp$_0 : throwCCE();
      };
    }));
    var single_11 = defineInlineFunction('kotlin.kotlin.collections.single_il4kyb$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'number' ? tmp$_0 : throwCCE();
      };
    }));
    var single_12 = defineInlineFunction('kotlin.kotlin.collections.single_i1oc7r$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return Kotlin.isType(tmp$_0 = single, Kotlin.Long) ? tmp$_0 : throwCCE();
      };
    }));
    var single_13 = defineInlineFunction('kotlin.kotlin.collections.single_u4nq1f$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'number' ? tmp$_0 : throwCCE();
      };
    }));
    var single_14 = defineInlineFunction('kotlin.kotlin.collections.single_3vq27r$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'number' ? tmp$_0 : throwCCE();
      };
    }));
    var single_15 = defineInlineFunction('kotlin.kotlin.collections.single_xffwn9$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return typeof (tmp$_0 = single) === 'boolean' ? tmp$_0 : throwCCE();
      };
    }));
    var single_16 = defineInlineFunction('kotlin.kotlin.collections.single_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var unboxChar = Kotlin.unboxChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element))) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return unboxChar(Kotlin.isChar(tmp$_0 = toBoxedChar(single)) ? tmp$_0 : throwCCE());
      };
    }));
    function singleOrNull($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_0($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_1($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_2($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_3($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_4($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_5($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_6($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    function singleOrNull_7($receiver) {
      return $receiver.length === 1 ? $receiver[0] : null;
    }
    var singleOrNull_8 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_9 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_c3i447$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_10 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_247xw3$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_11 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_14 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_15 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_16 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var single = null;
        var found = false;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element))) {
            if (found)
              return null;
            single = element;
            found = true;
          }}
        if (!found)
          return null;
        return single;
      };
    }));
    function drop($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_0($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_0($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_1($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_1($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_2($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_2($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_3($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_3($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_4($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_4($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_5($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_5($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_6($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_6($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function drop_7($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_7($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_0($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_0($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_1($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_1($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_2($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_2($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_3($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_3($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_4($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_4($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_5($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_5($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_6($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_6($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_7($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_7($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    var dropLastWhile = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_sfx99b$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      var take = _.kotlin.collections.take_8ujjk8$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_0 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_c3i447$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      var take = _.kotlin.collections.take_mrm5p$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_1 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_247xw3$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      var take = _.kotlin.collections.take_m2jy6x$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_2 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_il4kyb$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      var take = _.kotlin.collections.take_c03ot6$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_3 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_i1oc7r$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      var take = _.kotlin.collections.take_3aefkx$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_4 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_u4nq1f$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      var take = _.kotlin.collections.take_rblqex$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_5 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_3vq27r$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      var take = _.kotlin.collections.take_xgrzbe$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_6 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_xffwn9$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      var take = _.kotlin.collections.take_1qu12l$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_7 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_3ji0pj$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var take = _.kotlin.collections.take_gtcw5h$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate(toBoxedChar($receiver[index]))) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropWhile = defineInlineFunction('kotlin.kotlin.collections.dropWhile_sfx99b$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_0 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_c3i447$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_1 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_247xw3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_2 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_il4kyb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_3 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_i1oc7r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_4 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_u4nq1f$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_5 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_3vq27r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_6 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_xffwn9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_7 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_3ji0pj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          if (yielding)
            list.add_11rb$(toBoxedChar(item));
          else if (!predicate(toBoxedChar(item))) {
            list.add_11rb$(toBoxedChar(item));
            yielding = true;
          }}
        return list;
      };
    }));
    var filter = defineInlineFunction('kotlin.kotlin.collections.filter_sfx99b$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_0 = defineInlineFunction('kotlin.kotlin.collections.filter_c3i447$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_1 = defineInlineFunction('kotlin.kotlin.collections.filter_247xw3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_2 = defineInlineFunction('kotlin.kotlin.collections.filter_il4kyb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_3 = defineInlineFunction('kotlin.kotlin.collections.filter_i1oc7r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_4 = defineInlineFunction('kotlin.kotlin.collections.filter_u4nq1f$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_5 = defineInlineFunction('kotlin.kotlin.collections.filter_3vq27r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_6 = defineInlineFunction('kotlin.kotlin.collections.filter_xffwn9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_7 = defineInlineFunction('kotlin.kotlin.collections.filter_3ji0pj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            destination.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var filterIndexed = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_1x1hc5$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_muebcr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_na3tu9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_j54otz$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_8y5rp7$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_ngxnyp$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_4abx9h$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_40mjvt$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_es6ekl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          var index_0 = (tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0);
          var element = toBoxedChar(item);
          if (predicate(index_0, element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIndexedTo = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_yy1162$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_0 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_9utof$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_1 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_9c7hyn$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_2 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_xxq4i$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_3 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_sp77il$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_4 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_1eenap$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_5 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_a0ikl4$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_6 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_m16605$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_7 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_evsozx$', wrapFunction(function () {
      var unboxChar = Kotlin.unboxChar;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, destination, predicate) {
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          var index_0 = (tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0);
          var element = toBoxedChar(item);
          if (predicate(index_0, element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIsInstance = defineInlineFunction('kotlin.kotlin.collections.filterIsInstance_d9eiz9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function (R_0, isR, $receiver) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (isR(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIsInstanceTo = defineInlineFunction('kotlin.kotlin.collections.filterIsInstanceTo_fz41hi$', function (R_0, isR, $receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (isR(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNot = defineInlineFunction('kotlin.kotlin.collections.filterNot_sfx99b$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_0 = defineInlineFunction('kotlin.kotlin.collections.filterNot_c3i447$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_1 = defineInlineFunction('kotlin.kotlin.collections.filterNot_247xw3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_2 = defineInlineFunction('kotlin.kotlin.collections.filterNot_il4kyb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_3 = defineInlineFunction('kotlin.kotlin.collections.filterNot_i1oc7r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_4 = defineInlineFunction('kotlin.kotlin.collections.filterNot_u4nq1f$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_5 = defineInlineFunction('kotlin.kotlin.collections.filterNot_3vq27r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_6 = defineInlineFunction('kotlin.kotlin.collections.filterNot_xffwn9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_7 = defineInlineFunction('kotlin.kotlin.collections.filterNot_3ji0pj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (!predicate(toBoxedChar(element)))
            destination.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    function filterNotNull($receiver) {
      return filterNotNullTo($receiver, ArrayList_init());
    }
    function filterNotNullTo($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (element != null)
          destination.add_11rb$(element);
      }
      return destination;
    }
    var filterNotTo = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_ywpv22$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_0 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_oqzfqb$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_1 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_pth3ij$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_2 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_fz4mzi$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_3 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_xddlih$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_4 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_b4wiqz$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_5 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_y6u45w$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_6 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_soq3qv$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_7 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_7as3in$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (!predicate(toBoxedChar(element)))
            destination.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var filterTo = defineInlineFunction('kotlin.kotlin.collections.filterTo_ywpv22$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_0 = defineInlineFunction('kotlin.kotlin.collections.filterTo_oqzfqb$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_1 = defineInlineFunction('kotlin.kotlin.collections.filterTo_pth3ij$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_2 = defineInlineFunction('kotlin.kotlin.collections.filterTo_fz4mzi$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_3 = defineInlineFunction('kotlin.kotlin.collections.filterTo_xddlih$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_4 = defineInlineFunction('kotlin.kotlin.collections.filterTo_b4wiqz$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_5 = defineInlineFunction('kotlin.kotlin.collections.filterTo_y6u45w$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_6 = defineInlineFunction('kotlin.kotlin.collections.filterTo_soq3qv$', function ($receiver, destination, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_7 = defineInlineFunction('kotlin.kotlin.collections.filterTo_7as3in$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            destination.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    function slice($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_3($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_0($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_4($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_1($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_5($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_2($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_6($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_3($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_7($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_4($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_8($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_5($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_9($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_6($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList(copyOfRange_10($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_7($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList_7(copyOfRange_11($receiver, indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_8($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_9($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_10($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_11($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_12($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_13($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_14($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_15($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver[index]);
      }
      return list;
    }
    function slice_16($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$(toBoxedChar($receiver[index]));
      }
      return list;
    }
    function sliceArray($receiver, indices) {
      var tmp$, tmp$_0;
      var result = arrayOfNulls($receiver, indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_0($receiver, indices) {
      var tmp$, tmp$_0;
      var result = new Int8Array(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_1($receiver, indices) {
      var tmp$, tmp$_0;
      var result = new Int16Array(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_2($receiver, indices) {
      var tmp$, tmp$_0;
      var result = new Int32Array(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_3($receiver, indices) {
      var tmp$, tmp$_0;
      var result = Kotlin.longArray(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_4($receiver, indices) {
      var tmp$, tmp$_0;
      var result = new Float32Array(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_5($receiver, indices) {
      var tmp$, tmp$_0;
      var result = new Float64Array(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_6($receiver, indices) {
      var tmp$, tmp$_0;
      var result = Kotlin.booleanArray(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_7($receiver, indices) {
      var tmp$, tmp$_0;
      var result = Kotlin.charArray(indices.size);
      var targetIndex = 0;
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var sourceIndex = tmp$.next();
        result[tmp$_0 = targetIndex, targetIndex = tmp$_0 + 1 | 0, tmp$_0] = $receiver[sourceIndex];
      }
      return result;
    }
    function sliceArray_8($receiver, indices) {
      if (indices.isEmpty())
        return copyOfRange_3($receiver, 0, 0);
      return copyOfRange_3($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_9($receiver, indices) {
      if (indices.isEmpty())
        return new Int8Array(0);
      return copyOfRange_4($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_10($receiver, indices) {
      if (indices.isEmpty())
        return new Int16Array(0);
      return copyOfRange_5($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_11($receiver, indices) {
      if (indices.isEmpty())
        return new Int32Array(0);
      return copyOfRange_6($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_12($receiver, indices) {
      if (indices.isEmpty())
        return Kotlin.longArray(0);
      return copyOfRange_7($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_13($receiver, indices) {
      if (indices.isEmpty())
        return new Float32Array(0);
      return copyOfRange_8($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_14($receiver, indices) {
      if (indices.isEmpty())
        return new Float64Array(0);
      return copyOfRange_9($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_15($receiver, indices) {
      if (indices.isEmpty())
        return Kotlin.booleanArray(0);
      return copyOfRange_10($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function sliceArray_16($receiver, indices) {
      if (indices.isEmpty())
        return Kotlin.charArray(0);
      return copyOfRange_11($receiver, indices.start, indices.endInclusive + 1 | 0);
    }
    function take($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_0($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_0($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_1($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_1($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_2($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_2($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_3($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_3($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_4($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_4($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_5($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_5($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_6($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_6($receiver);
      if (n === 1)
        return listOf($receiver[0]);
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_7($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.length)
        return toList_7($receiver);
      if (n === 1)
        return listOf(toBoxedChar($receiver[0]));
      var count = 0;
      var list = ArrayList_init_0(n);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = unboxChar($receiver[tmp$]);
        list.add_11rb$(toBoxedChar(item));
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function takeLast($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_0($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_0($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_1($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_1($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_2($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_2($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_3($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_3($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_4($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_4($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_5($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_5($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_6($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_6($receiver);
      if (n === 1)
        return listOf($receiver[size - 1 | 0]);
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver[index]);
      return list;
    }
    function takeLast_7($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.length;
      if (n >= size)
        return toList_7($receiver);
      if (n === 1)
        return listOf(toBoxedChar($receiver[size - 1 | 0]));
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$(toBoxedChar($receiver[index]));
      return list;
    }
    var takeLastWhile = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_sfx99b$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      var drop = _.kotlin.collections.drop_8ujjk8$;
      var toList = _.kotlin.collections.toList_us0mfu$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_0 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_c3i447$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      var drop = _.kotlin.collections.drop_mrm5p$;
      var toList = _.kotlin.collections.toList_964n91$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_1 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_247xw3$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      var drop = _.kotlin.collections.drop_m2jy6x$;
      var toList = _.kotlin.collections.toList_i2lc79$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_2 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_il4kyb$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      var drop = _.kotlin.collections.drop_c03ot6$;
      var toList = _.kotlin.collections.toList_tmsbgo$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_3 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_i1oc7r$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      var drop = _.kotlin.collections.drop_3aefkx$;
      var toList = _.kotlin.collections.toList_se6h4x$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_4 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_u4nq1f$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      var drop = _.kotlin.collections.drop_rblqex$;
      var toList = _.kotlin.collections.toList_rjqryz$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_5 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_3vq27r$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      var drop = _.kotlin.collections.drop_xgrzbe$;
      var toList = _.kotlin.collections.toList_bvy38s$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_6 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_xffwn9$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      var drop = _.kotlin.collections.drop_1qu12l$;
      var toList = _.kotlin.collections.toList_l1lu5t$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate($receiver[index])) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_7 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_3ji0pj$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var drop = _.kotlin.collections.drop_gtcw5h$;
      var toList = _.kotlin.collections.toList_355ntz$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate(toBoxedChar($receiver[index]))) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeWhile = defineInlineFunction('kotlin.kotlin.collections.takeWhile_sfx99b$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_0 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_c3i447$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_1 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_247xw3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_2 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_il4kyb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_3 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_i1oc7r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_4 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_u4nq1f$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_5 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_3vq27r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_6 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_xffwn9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_7 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_3ji0pj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          if (!predicate(toBoxedChar(item)))
            break;
          list.add_11rb$(toBoxedChar(item));
        }
        return list;
      };
    }));
    function reverse($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_0($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_0($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_1($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_1($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_2($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_2($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_3($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_3($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_4($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_4($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_5($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_5($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_6($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_6($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reverse_7($receiver) {
      var midPoint = ($receiver.length / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_7($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver[index];
        $receiver[index] = $receiver[reverseIndex];
        $receiver[reverseIndex] = tmp;
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function reversed($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_0($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_0($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_1($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_1($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_2($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_2($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_3($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_3($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_4($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_4($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_5($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_5($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_6($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_6($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_7($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      var list = toMutableList_7($receiver);
      reverse_12(list);
      return list;
    }
    function reversedArray($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = arrayOfNulls($receiver, $receiver.length);
      var lastIndex = get_lastIndex($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_0($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = new Int8Array($receiver.length);
      var lastIndex = get_lastIndex_0($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_1($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = new Int16Array($receiver.length);
      var lastIndex = get_lastIndex_1($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_2($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = new Int32Array($receiver.length);
      var lastIndex = get_lastIndex_2($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_3($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = Kotlin.longArray($receiver.length);
      var lastIndex = get_lastIndex_3($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_4($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = new Float32Array($receiver.length);
      var lastIndex = get_lastIndex_4($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_5($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = new Float64Array($receiver.length);
      var lastIndex = get_lastIndex_5($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_6($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = Kotlin.booleanArray($receiver.length);
      var lastIndex = get_lastIndex_6($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    function reversedArray_7($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var result = Kotlin.charArray($receiver.length);
      var lastIndex = get_lastIndex_7($receiver);
      for (var i = 0; i <= lastIndex; i++)
        result[lastIndex - i | 0] = $receiver[i];
      return result;
    }
    var sortBy = defineInlineFunction('kotlin.kotlin.collections.sortBy_99hh6x$', wrapFunction(function () {
      var sortWith = _.kotlin.collections.sortWith_iwcb0m$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        if ($receiver.length > 1) {
          sortWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
        }};
    }));
    var sortByDescending = defineInlineFunction('kotlin.kotlin.collections.sortByDescending_99hh6x$', wrapFunction(function () {
      var sortWith = _.kotlin.collections.sortWith_iwcb0m$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        if ($receiver.length > 1) {
          sortWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
        }};
    }));
    function sortDescending($receiver) {
      sortWith($receiver, reverseOrder());
    }
    function sortDescending_0($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_0($receiver);
      }}
    function sortDescending_1($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_1($receiver);
      }}
    function sortDescending_2($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_2($receiver);
      }}
    function sortDescending_3($receiver) {
      if ($receiver.length > 1) {
        sort_4($receiver);
        reverse_3($receiver);
      }}
    function sortDescending_4($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_4($receiver);
      }}
    function sortDescending_5($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_5($receiver);
      }}
    function sortDescending_6($receiver) {
      if ($receiver.length > 1) {
        sort($receiver);
        reverse_7($receiver);
      }}
    function sorted($receiver) {
      return asList(sortedArray($receiver));
    }
    function sorted_0($receiver) {
      var $receiver_0 = toTypedArray_3($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_1($receiver) {
      var $receiver_0 = toTypedArray_4($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_2($receiver) {
      var $receiver_0 = toTypedArray_5($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_3($receiver) {
      var $receiver_0 = toTypedArray_6($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_4($receiver) {
      var $receiver_0 = toTypedArray_7($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_5($receiver) {
      var $receiver_0 = toTypedArray_8($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sorted_6($receiver) {
      var $receiver_0 = toTypedArray_10($receiver);
      sort_5($receiver_0);
      return asList($receiver_0);
    }
    function sortedArray($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort_5($receiver_0);
      return $receiver_0;
    }
    function sortedArray_0($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArray_1($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArray_2($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArray_3($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = copyOf_11($receiver);
      sort_4($receiver_0);
      return $receiver_0;
    }
    function sortedArray_4($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArray_5($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArray_6($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = copyOf_15($receiver);
      sort($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortWith($receiver_0, reverseOrder());
      return $receiver_0;
    }
    function sortedArrayDescending_0($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortDescending_0($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_1($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortDescending_1($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_2($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortDescending_2($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_3($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = copyOf_11($receiver);
      sortDescending_3($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_4($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortDescending_4($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_5($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortDescending_5($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_6($receiver) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = copyOf_15($receiver);
      sortDescending_6($receiver_0);
      return $receiver_0;
    }
    function sortedArrayWith($receiver, comparator) {
      if ($receiver.length === 0)
        return $receiver;
      var $receiver_0 = $receiver.slice();
      sortWith($receiver_0, comparator);
      return $receiver_0;
    }
    var sortedBy = defineInlineFunction('kotlin.kotlin.collections.sortedBy_99hh6x$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_iwcb0m$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_0 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_jirwv8$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_movtv6$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_1 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_p0tdr4$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_u08rls$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_2 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_30vlmi$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_rsw9pc$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_3 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_hom4ws$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_wqwa2y$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_4 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_ksd00w$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_1sg7gg$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_5 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_fvpt30$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_jucva8$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_6 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_xt360o$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_7ffj0g$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedBy_7 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_epurks$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_7ncb86$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedByDescending = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_99hh6x$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_iwcb0m$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_0 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_jirwv8$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_movtv6$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_1 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_p0tdr4$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_u08rls$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_2 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_30vlmi$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_rsw9pc$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_3 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_hom4ws$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_wqwa2y$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_4 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_ksd00w$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_1sg7gg$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_5 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_fvpt30$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_jucva8$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_6 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_xt360o$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_7ffj0g$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    var sortedByDescending_7 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_epurks$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_7ncb86$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    function sortedDescending($receiver) {
      return sortedWith($receiver, reverseOrder());
    }
    function sortedDescending_0($receiver) {
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return reversed_0($receiver_0);
    }
    function sortedDescending_1($receiver) {
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return reversed_1($receiver_0);
    }
    function sortedDescending_2($receiver) {
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return reversed_2($receiver_0);
    }
    function sortedDescending_3($receiver) {
      var $receiver_0 = copyOf_11($receiver);
      sort_4($receiver_0);
      return reversed_3($receiver_0);
    }
    function sortedDescending_4($receiver) {
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return reversed_4($receiver_0);
    }
    function sortedDescending_5($receiver) {
      var $receiver_0 = $receiver.slice();
      sort($receiver_0);
      return reversed_5($receiver_0);
    }
    function sortedDescending_6($receiver) {
      var $receiver_0 = copyOf_15($receiver);
      sort($receiver_0);
      return reversed_7($receiver_0);
    }
    function sortedWith($receiver, comparator) {
      return asList(sortedArrayWith($receiver, comparator));
    }
    function sortedWith_0($receiver, comparator) {
      var $receiver_0 = toTypedArray_3($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_1($receiver, comparator) {
      var $receiver_0 = toTypedArray_4($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_2($receiver, comparator) {
      var $receiver_0 = toTypedArray_5($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_3($receiver, comparator) {
      var $receiver_0 = toTypedArray_6($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_4($receiver, comparator) {
      var $receiver_0 = toTypedArray_7($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_5($receiver, comparator) {
      var $receiver_0 = toTypedArray_8($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_6($receiver, comparator) {
      var $receiver_0 = toTypedArray_9($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function sortedWith_7($receiver, comparator) {
      var $receiver_0 = toTypedArray_10($receiver);
      sortWith($receiver_0, comparator);
      return asList($receiver_0);
    }
    function get_indices($receiver) {
      return new IntRange(0, get_lastIndex($receiver));
    }
    function get_indices_0($receiver) {
      return new IntRange(0, get_lastIndex_0($receiver));
    }
    function get_indices_1($receiver) {
      return new IntRange(0, get_lastIndex_1($receiver));
    }
    function get_indices_2($receiver) {
      return new IntRange(0, get_lastIndex_2($receiver));
    }
    function get_indices_3($receiver) {
      return new IntRange(0, get_lastIndex_3($receiver));
    }
    function get_indices_4($receiver) {
      return new IntRange(0, get_lastIndex_4($receiver));
    }
    function get_indices_5($receiver) {
      return new IntRange(0, get_lastIndex_5($receiver));
    }
    function get_indices_6($receiver) {
      return new IntRange(0, get_lastIndex_6($receiver));
    }
    function get_indices_7($receiver) {
      return new IntRange(0, get_lastIndex_7($receiver));
    }
    var isEmpty = defineInlineFunction('kotlin.kotlin.collections.isEmpty_us0mfu$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_0 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_964n91$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_1 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_i2lc79$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_2 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_tmsbgo$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_3 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_se6h4x$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_4 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_rjqryz$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_5 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_bvy38s$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_6 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_l1lu5t$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isEmpty_7 = defineInlineFunction('kotlin.kotlin.collections.isEmpty_355ntz$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isNotEmpty = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_us0mfu$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_0 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_964n91$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_1 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_i2lc79$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_2 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_tmsbgo$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_3 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_se6h4x$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_4 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_rjqryz$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_5 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_bvy38s$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_6 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_l1lu5t$', function ($receiver) {
      return !($receiver.length === 0);
    });
    var isNotEmpty_7 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_355ntz$', function ($receiver) {
      return !($receiver.length === 0);
    });
    function get_lastIndex($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_0($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_1($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_2($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_3($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_4($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_5($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_6($receiver) {
      return $receiver.length - 1 | 0;
    }
    function get_lastIndex_7($receiver) {
      return $receiver.length - 1 | 0;
    }
    function toBooleanArray$lambda(this$toBooleanArray) {
      return function (index) {
        return this$toBooleanArray[index];
      };
    }
    function toBooleanArray($receiver) {
      return Kotlin.booleanArrayF($receiver.length, toBooleanArray$lambda($receiver));
    }
    function toByteArray$lambda(this$toByteArray) {
      return function (index) {
        return this$toByteArray[index];
      };
    }
    function toByteArray($receiver) {
      return Kotlin.fillArray(new Int8Array($receiver.length), toByteArray$lambda($receiver));
    }
    function toCharArray$lambda(this$toCharArray) {
      return function (index) {
        return this$toCharArray[index];
      };
    }
    function toCharArray($receiver) {
      return Kotlin.charArrayF($receiver.length, toCharArray$lambda($receiver));
    }
    function toDoubleArray$lambda(this$toDoubleArray) {
      return function (index) {
        return this$toDoubleArray[index];
      };
    }
    function toDoubleArray($receiver) {
      return Kotlin.fillArray(new Float64Array($receiver.length), toDoubleArray$lambda($receiver));
    }
    function toFloatArray$lambda(this$toFloatArray) {
      return function (index) {
        return this$toFloatArray[index];
      };
    }
    function toFloatArray($receiver) {
      return Kotlin.fillArray(new Float32Array($receiver.length), toFloatArray$lambda($receiver));
    }
    function toIntArray$lambda(this$toIntArray) {
      return function (index) {
        return this$toIntArray[index];
      };
    }
    function toIntArray($receiver) {
      return Kotlin.fillArray(new Int32Array($receiver.length), toIntArray$lambda($receiver));
    }
    function toLongArray$lambda(this$toLongArray) {
      return function (index) {
        return this$toLongArray[index];
      };
    }
    function toLongArray($receiver) {
      return Kotlin.longArrayF($receiver.length, toLongArray$lambda($receiver));
    }
    function toShortArray$lambda(this$toShortArray) {
      return function (index) {
        return this$toShortArray[index];
      };
    }
    function toShortArray($receiver) {
      return Kotlin.fillArray(new Int16Array($receiver.length), toShortArray$lambda($receiver));
    }
    var associate = defineInlineFunction('kotlin.kotlin.collections.associate_51p84z$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_0 = defineInlineFunction('kotlin.kotlin.collections.associate_hllm27$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_1 = defineInlineFunction('kotlin.kotlin.collections.associate_21tl2r$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_2 = defineInlineFunction('kotlin.kotlin.collections.associate_ff74x3$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_3 = defineInlineFunction('kotlin.kotlin.collections.associate_d7c9rj$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_4 = defineInlineFunction('kotlin.kotlin.collections.associate_ddcx1p$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_5 = defineInlineFunction('kotlin.kotlin.collections.associate_neh4lr$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_6 = defineInlineFunction('kotlin.kotlin.collections.associate_su3lit$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associate_7 = defineInlineFunction('kotlin.kotlin.collections.associate_2m77bl$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var pair = transform(toBoxedChar(element));
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associateBy = defineInlineFunction('kotlin.kotlin.collections.associateBy_73x53s$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_0 = defineInlineFunction('kotlin.kotlin.collections.associateBy_i1orpu$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_1 = defineInlineFunction('kotlin.kotlin.collections.associateBy_2yxo7i$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_2 = defineInlineFunction('kotlin.kotlin.collections.associateBy_vhfi20$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_3 = defineInlineFunction('kotlin.kotlin.collections.associateBy_oifiz6$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_4 = defineInlineFunction('kotlin.kotlin.collections.associateBy_5k9h5a$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_5 = defineInlineFunction('kotlin.kotlin.collections.associateBy_hbdsc2$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_6 = defineInlineFunction('kotlin.kotlin.collections.associateBy_8oadti$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_7 = defineInlineFunction('kotlin.kotlin.collections.associateBy_pmkh76$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), toBoxedChar(element));
        }
        return destination;
      };
    }));
    var associateBy_8 = defineInlineFunction('kotlin.kotlin.collections.associateBy_67lihi$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_9 = defineInlineFunction('kotlin.kotlin.collections.associateBy_prlkfp$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_10 = defineInlineFunction('kotlin.kotlin.collections.associateBy_emzy0b$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_11 = defineInlineFunction('kotlin.kotlin.collections.associateBy_5wtufc$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_12 = defineInlineFunction('kotlin.kotlin.collections.associateBy_hq1329$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_13 = defineInlineFunction('kotlin.kotlin.collections.associateBy_jjomwl$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_14 = defineInlineFunction('kotlin.kotlin.collections.associateBy_bvjqb8$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_15 = defineInlineFunction('kotlin.kotlin.collections.associateBy_hxvtq7$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateBy_16 = defineInlineFunction('kotlin.kotlin.collections.associateBy_nlw5ll$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var associateByTo = defineInlineFunction('kotlin.kotlin.collections.associateByTo_jnbl5d$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_0 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_6rsi3p$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_1 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_mvhbwl$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_2 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_jk03w$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_3 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_fajp69$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_4 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_z2kljv$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_5 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_s8dkm4$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_6 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_ro4olb$', function ($receiver, destination, keySelector) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_7 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_deafr$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), toBoxedChar(element));
        }
        return destination;
      };
    }));
    var associateByTo_8 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_8rzqwv$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_9 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_cne8q6$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_10 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_gcgqha$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_11 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_snsha9$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_12 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_ryii4m$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_13 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_6a7lri$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_14 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_lxofut$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_15 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_u9h8ze$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateByTo_16 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_u7k4io$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var associateTo = defineInlineFunction('kotlin.kotlin.collections.associateTo_t6a58$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_0 = defineInlineFunction('kotlin.kotlin.collections.associateTo_30k0gw$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_1 = defineInlineFunction('kotlin.kotlin.collections.associateTo_pdwiok$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_2 = defineInlineFunction('kotlin.kotlin.collections.associateTo_yjydda$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_3 = defineInlineFunction('kotlin.kotlin.collections.associateTo_o9od0g$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_4 = defineInlineFunction('kotlin.kotlin.collections.associateTo_642zho$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_5 = defineInlineFunction('kotlin.kotlin.collections.associateTo_t00y2o$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_6 = defineInlineFunction('kotlin.kotlin.collections.associateTo_l2eg58$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateTo_7 = defineInlineFunction('kotlin.kotlin.collections.associateTo_7k1sps$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var pair = transform(toBoxedChar(element));
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    function toCollection($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_0($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_1($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_2($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_3($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_4($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_5($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_6($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toCollection_7($receiver, destination) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = unboxChar($receiver[tmp$]);
        destination.add_11rb$(toBoxedChar(item));
      }
      return destination;
    }
    function toHashSet($receiver) {
      return toCollection($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_0($receiver) {
      return toCollection_0($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_1($receiver) {
      return toCollection_1($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_2($receiver) {
      return toCollection_2($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_3($receiver) {
      return toCollection_3($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_4($receiver) {
      return toCollection_4($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_5($receiver) {
      return toCollection_5($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_6($receiver) {
      return toCollection_6($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toHashSet_7($receiver) {
      return toCollection_7($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toList($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList($receiver);
          break;
      }
      return tmp$;
    }
    function toList_0($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_0($receiver);
          break;
      }
      return tmp$;
    }
    function toList_1($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_1($receiver);
          break;
      }
      return tmp$;
    }
    function toList_2($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_2($receiver);
          break;
      }
      return tmp$;
    }
    function toList_3($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_3($receiver);
          break;
      }
      return tmp$;
    }
    function toList_4($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_4($receiver);
          break;
      }
      return tmp$;
    }
    function toList_5($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_5($receiver);
          break;
      }
      return tmp$;
    }
    function toList_6($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf($receiver[0]);
          break;
        default:tmp$ = toMutableList_6($receiver);
          break;
      }
      return tmp$;
    }
    function toList_7($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf(toBoxedChar($receiver[0]));
          break;
        default:tmp$ = toMutableList_7($receiver);
          break;
      }
      return tmp$;
    }
    function toMutableList($receiver) {
      return ArrayList_init_1(asCollection($receiver));
    }
    function toMutableList_0($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_1($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_2($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_3($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_4($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_5($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_6($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        list.add_11rb$(item);
      }
      return list;
    }
    function toMutableList_7($receiver) {
      var tmp$;
      var list = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = unboxChar($receiver[tmp$]);
        list.add_11rb$(toBoxedChar(item));
      }
      return list;
    }
    function toSet($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_0($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_0($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_1($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_1($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_2($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_2($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_3($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_3($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_4($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_4($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_5($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_5($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_6($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf($receiver[0]);
          break;
        default:tmp$ = toCollection_6($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    function toSet_7($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf(toBoxedChar($receiver[0]));
          break;
        default:tmp$ = toCollection_7($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    var flatMap = defineInlineFunction('kotlin.kotlin.collections.flatMap_m96iup$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_0 = defineInlineFunction('kotlin.kotlin.collections.flatMap_7g5j6z$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_1 = defineInlineFunction('kotlin.kotlin.collections.flatMap_2azm6x$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_2 = defineInlineFunction('kotlin.kotlin.collections.flatMap_k7x5xb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_3 = defineInlineFunction('kotlin.kotlin.collections.flatMap_jv6p05$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_4 = defineInlineFunction('kotlin.kotlin.collections.flatMap_a6ay1l$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_5 = defineInlineFunction('kotlin.kotlin.collections.flatMap_kx9v79$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_6 = defineInlineFunction('kotlin.kotlin.collections.flatMap_io4c5r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_7 = defineInlineFunction('kotlin.kotlin.collections.flatMap_m4binf$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var list = transform(toBoxedChar(element));
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_qpz03$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_0 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_hrglhs$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_1 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_9q2ddu$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_2 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_ae7k4k$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_3 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_6h8o5s$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_4 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_fngh32$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_5 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_53zyz4$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_6 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_9hj6lm$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_7 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_5s36kw$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var list = transform(toBoxedChar(element));
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var groupBy = defineInlineFunction('kotlin.kotlin.collections.groupBy_73x53s$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_0 = defineInlineFunction('kotlin.kotlin.collections.groupBy_i1orpu$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_1 = defineInlineFunction('kotlin.kotlin.collections.groupBy_2yxo7i$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_2 = defineInlineFunction('kotlin.kotlin.collections.groupBy_vhfi20$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_3 = defineInlineFunction('kotlin.kotlin.collections.groupBy_oifiz6$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_4 = defineInlineFunction('kotlin.kotlin.collections.groupBy_5k9h5a$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_5 = defineInlineFunction('kotlin.kotlin.collections.groupBy_hbdsc2$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_6 = defineInlineFunction('kotlin.kotlin.collections.groupBy_8oadti$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_7 = defineInlineFunction('kotlin.kotlin.collections.groupBy_pmkh76$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var groupBy_8 = defineInlineFunction('kotlin.kotlin.collections.groupBy_67lihi$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_9 = defineInlineFunction('kotlin.kotlin.collections.groupBy_prlkfp$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_10 = defineInlineFunction('kotlin.kotlin.collections.groupBy_emzy0b$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_11 = defineInlineFunction('kotlin.kotlin.collections.groupBy_5wtufc$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_12 = defineInlineFunction('kotlin.kotlin.collections.groupBy_hq1329$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_13 = defineInlineFunction('kotlin.kotlin.collections.groupBy_jjomwl$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_14 = defineInlineFunction('kotlin.kotlin.collections.groupBy_bvjqb8$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_15 = defineInlineFunction('kotlin.kotlin.collections.groupBy_hxvtq7$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_16 = defineInlineFunction('kotlin.kotlin.collections.groupBy_nlw5ll$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var groupByTo = defineInlineFunction('kotlin.kotlin.collections.groupByTo_1qxbxg$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_0 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_6kmz48$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_1 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_bo8r4m$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_2 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_q1iim5$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_3 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_mu2a4k$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_4 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_x0uw5m$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_5 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_xcz1ip$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_6 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_mrd1pq$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_7 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_axxeqe$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var groupByTo_8 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_ha2xv2$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_9 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_lnembp$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_10 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_n3jh2d$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_11 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_ted19q$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_12 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_bzm9l3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_13 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_4auzph$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_14 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_akngni$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_15 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_au1frb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_16 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_cmmt3n$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var groupingBy = defineInlineFunction('kotlin.kotlin.collections.groupingBy_73x53s$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Grouping = _.kotlin.collections.Grouping;
      function groupingBy$ObjectLiteral(this$groupingBy, closure$keySelector) {
        this.this$groupingBy = this$groupingBy;
        this.closure$keySelector = closure$keySelector;
      }
      groupingBy$ObjectLiteral.prototype.sourceIterator = function () {
        return Kotlin.arrayIterator(this.this$groupingBy);
      };
      groupingBy$ObjectLiteral.prototype.keyOf_11rb$ = function (element) {
        return this.closure$keySelector(element);
      };
      groupingBy$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Grouping]};
      return function ($receiver, keySelector) {
        return new groupingBy$ObjectLiteral($receiver, keySelector);
      };
    }));
    var map = defineInlineFunction('kotlin.kotlin.collections.map_73x53s$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_0 = defineInlineFunction('kotlin.kotlin.collections.map_i1orpu$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_1 = defineInlineFunction('kotlin.kotlin.collections.map_2yxo7i$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_2 = defineInlineFunction('kotlin.kotlin.collections.map_vhfi20$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_3 = defineInlineFunction('kotlin.kotlin.collections.map_oifiz6$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_4 = defineInlineFunction('kotlin.kotlin.collections.map_5k9h5a$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_5 = defineInlineFunction('kotlin.kotlin.collections.map_hbdsc2$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_6 = defineInlineFunction('kotlin.kotlin.collections.map_8oadti$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_7 = defineInlineFunction('kotlin.kotlin.collections.map_pmkh76$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          destination.add_11rb$(transform(toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapIndexed = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_d05wzo$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_b1mzcm$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_17cht6$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_n9l81o$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_6hpo96$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_xqj56$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_623t7u$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_tk88gi$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_8r1kga$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapIndexedNotNull = defineInlineFunction('kotlin.kotlin.collections.mapIndexedNotNull_aytly7$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          var tmp$_1;
          if ((tmp$_1 = transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item)) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedNotNullTo = defineInlineFunction('kotlin.kotlin.collections.mapIndexedNotNullTo_97f7ib$', wrapFunction(function () {
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = $receiver[tmp$];
          var tmp$_1;
          if ((tmp$_1 = transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item)) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedTo = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_d8bv34$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_0 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_797pmj$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_1 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_5akchx$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_2 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_ey1r33$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_3 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_yqgxdn$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_4 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_3uie0r$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_5 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_3zacuz$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_6 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_r9wz1$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_7 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_d11l8l$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapNotNull = defineInlineFunction('kotlin.kotlin.collections.mapNotNull_oxs7gb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapNotNullTo = defineInlineFunction('kotlin.kotlin.collections.mapNotNullTo_cni40x$', wrapFunction(function () {
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapTo = defineInlineFunction('kotlin.kotlin.collections.mapTo_4g4n0c$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_0 = defineInlineFunction('kotlin.kotlin.collections.mapTo_lvjep5$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_1 = defineInlineFunction('kotlin.kotlin.collections.mapTo_jtf97t$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_2 = defineInlineFunction('kotlin.kotlin.collections.mapTo_18cmir$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_3 = defineInlineFunction('kotlin.kotlin.collections.mapTo_6e2q1j$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_4 = defineInlineFunction('kotlin.kotlin.collections.mapTo_jpuhm1$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_5 = defineInlineFunction('kotlin.kotlin.collections.mapTo_u2n9ft$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_6 = defineInlineFunction('kotlin.kotlin.collections.mapTo_jrz1ox$', function ($receiver, destination, transform) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_7 = defineInlineFunction('kotlin.kotlin.collections.mapTo_bsh7dj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          destination.add_11rb$(transform(toBoxedChar(item)));
        }
        return destination;
      };
    }));
    function withIndex$lambda(this$withIndex) {
      return function () {
        return Kotlin.arrayIterator(this$withIndex);
      };
    }
    function withIndex($receiver) {
      return new IndexingIterable(withIndex$lambda($receiver));
    }
    function withIndex$lambda_0(this$withIndex) {
      return function () {
        return Kotlin.byteArrayIterator(this$withIndex);
      };
    }
    function withIndex_0($receiver) {
      return new IndexingIterable(withIndex$lambda_0($receiver));
    }
    function withIndex$lambda_1(this$withIndex) {
      return function () {
        return Kotlin.shortArrayIterator(this$withIndex);
      };
    }
    function withIndex_1($receiver) {
      return new IndexingIterable(withIndex$lambda_1($receiver));
    }
    function withIndex$lambda_2(this$withIndex) {
      return function () {
        return Kotlin.intArrayIterator(this$withIndex);
      };
    }
    function withIndex_2($receiver) {
      return new IndexingIterable(withIndex$lambda_2($receiver));
    }
    function withIndex$lambda_3(this$withIndex) {
      return function () {
        return Kotlin.longArrayIterator(this$withIndex);
      };
    }
    function withIndex_3($receiver) {
      return new IndexingIterable(withIndex$lambda_3($receiver));
    }
    function withIndex$lambda_4(this$withIndex) {
      return function () {
        return Kotlin.floatArrayIterator(this$withIndex);
      };
    }
    function withIndex_4($receiver) {
      return new IndexingIterable(withIndex$lambda_4($receiver));
    }
    function withIndex$lambda_5(this$withIndex) {
      return function () {
        return Kotlin.doubleArrayIterator(this$withIndex);
      };
    }
    function withIndex_5($receiver) {
      return new IndexingIterable(withIndex$lambda_5($receiver));
    }
    function withIndex$lambda_6(this$withIndex) {
      return function () {
        return Kotlin.booleanArrayIterator(this$withIndex);
      };
    }
    function withIndex_6($receiver) {
      return new IndexingIterable(withIndex$lambda_6($receiver));
    }
    function withIndex$lambda_7(this$withIndex) {
      return function () {
        return Kotlin.charArrayIterator(this$withIndex);
      };
    }
    function withIndex_7($receiver) {
      return new IndexingIterable(withIndex$lambda_7($receiver));
    }
    function distinct($receiver) {
      return toList_8(toMutableSet($receiver));
    }
    function distinct_0($receiver) {
      return toList_8(toMutableSet_0($receiver));
    }
    function distinct_1($receiver) {
      return toList_8(toMutableSet_1($receiver));
    }
    function distinct_2($receiver) {
      return toList_8(toMutableSet_2($receiver));
    }
    function distinct_3($receiver) {
      return toList_8(toMutableSet_3($receiver));
    }
    function distinct_4($receiver) {
      return toList_8(toMutableSet_4($receiver));
    }
    function distinct_5($receiver) {
      return toList_8(toMutableSet_5($receiver));
    }
    function distinct_6($receiver) {
      return toList_8(toMutableSet_6($receiver));
    }
    function distinct_7($receiver) {
      return toList_8(toMutableSet_7($receiver));
    }
    var distinctBy = defineInlineFunction('kotlin.kotlin.collections.distinctBy_73x53s$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_0 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_i1orpu$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_1 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_2yxo7i$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_2 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_vhfi20$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_3 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_oifiz6$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_4 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_5k9h5a$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_5 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_hbdsc2$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_6 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_8oadti$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = $receiver[tmp$];
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    var distinctBy_7 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_pmkh76$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var e = unboxChar($receiver[tmp$]);
          var key = selector(toBoxedChar(e));
          if (set.add_11rb$(key))
            list.add_11rb$(toBoxedChar(e));
        }
        return list;
      };
    }));
    function intersect($receiver, other) {
      var set = toMutableSet($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_0($receiver, other) {
      var set = toMutableSet_0($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_1($receiver, other) {
      var set = toMutableSet_1($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_2($receiver, other) {
      var set = toMutableSet_2($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_3($receiver, other) {
      var set = toMutableSet_3($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_4($receiver, other) {
      var set = toMutableSet_4($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_5($receiver, other) {
      var set = toMutableSet_5($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_6($receiver, other) {
      var set = toMutableSet_6($receiver);
      retainAll_0(set, other);
      return set;
    }
    function intersect_7($receiver, other) {
      var set = toMutableSet_7($receiver);
      retainAll_0(set, other);
      return set;
    }
    function subtract($receiver, other) {
      var set = toMutableSet($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_0($receiver, other) {
      var set = toMutableSet_0($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_1($receiver, other) {
      var set = toMutableSet_1($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_2($receiver, other) {
      var set = toMutableSet_2($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_3($receiver, other) {
      var set = toMutableSet_3($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_4($receiver, other) {
      var set = toMutableSet_4($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_5($receiver, other) {
      var set = toMutableSet_5($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_6($receiver, other) {
      var set = toMutableSet_6($receiver);
      removeAll_0(set, other);
      return set;
    }
    function subtract_7($receiver, other) {
      var set = toMutableSet_7($receiver);
      removeAll_0(set, other);
      return set;
    }
    function toMutableSet($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_0($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_1($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_2($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_3($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_4($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_5($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_6($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        set.add_11rb$(item);
      }
      return set;
    }
    function toMutableSet_7($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_3(mapCapacity($receiver.length));
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = unboxChar($receiver[tmp$]);
        set.add_11rb$(toBoxedChar(item));
      }
      return set;
    }
    function union($receiver, other) {
      var set = toMutableSet($receiver);
      addAll(set, other);
      return set;
    }
    function union_0($receiver, other) {
      var set = toMutableSet_0($receiver);
      addAll(set, other);
      return set;
    }
    function union_1($receiver, other) {
      var set = toMutableSet_1($receiver);
      addAll(set, other);
      return set;
    }
    function union_2($receiver, other) {
      var set = toMutableSet_2($receiver);
      addAll(set, other);
      return set;
    }
    function union_3($receiver, other) {
      var set = toMutableSet_3($receiver);
      addAll(set, other);
      return set;
    }
    function union_4($receiver, other) {
      var set = toMutableSet_4($receiver);
      addAll(set, other);
      return set;
    }
    function union_5($receiver, other) {
      var set = toMutableSet_5($receiver);
      addAll(set, other);
      return set;
    }
    function union_6($receiver, other) {
      var set = toMutableSet_6($receiver);
      addAll(set, other);
      return set;
    }
    function union_7($receiver, other) {
      var set = toMutableSet_7($receiver);
      addAll(set, other);
      return set;
    }
    var all = defineInlineFunction('kotlin.kotlin.collections.all_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_0 = defineInlineFunction('kotlin.kotlin.collections.all_c3i447$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_1 = defineInlineFunction('kotlin.kotlin.collections.all_247xw3$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_2 = defineInlineFunction('kotlin.kotlin.collections.all_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_3 = defineInlineFunction('kotlin.kotlin.collections.all_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_4 = defineInlineFunction('kotlin.kotlin.collections.all_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_5 = defineInlineFunction('kotlin.kotlin.collections.all_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_6 = defineInlineFunction('kotlin.kotlin.collections.all_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_7 = defineInlineFunction('kotlin.kotlin.collections.all_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (!predicate(toBoxedChar(element)))
            return false;
        }
        return true;
      };
    }));
    function any($receiver) {
      return !($receiver.length === 0);
    }
    function any_0($receiver) {
      return !($receiver.length === 0);
    }
    function any_1($receiver) {
      return !($receiver.length === 0);
    }
    function any_2($receiver) {
      return !($receiver.length === 0);
    }
    function any_3($receiver) {
      return !($receiver.length === 0);
    }
    function any_4($receiver) {
      return !($receiver.length === 0);
    }
    function any_5($receiver) {
      return !($receiver.length === 0);
    }
    function any_6($receiver) {
      return !($receiver.length === 0);
    }
    function any_7($receiver) {
      return !($receiver.length === 0);
    }
    var any_8 = defineInlineFunction('kotlin.kotlin.collections.any_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_9 = defineInlineFunction('kotlin.kotlin.collections.any_c3i447$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_10 = defineInlineFunction('kotlin.kotlin.collections.any_247xw3$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_11 = defineInlineFunction('kotlin.kotlin.collections.any_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_12 = defineInlineFunction('kotlin.kotlin.collections.any_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_13 = defineInlineFunction('kotlin.kotlin.collections.any_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_14 = defineInlineFunction('kotlin.kotlin.collections.any_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_15 = defineInlineFunction('kotlin.kotlin.collections.any_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_16 = defineInlineFunction('kotlin.kotlin.collections.any_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            return true;
        }
        return false;
      };
    }));
    var count = defineInlineFunction('kotlin.kotlin.collections.count_us0mfu$', function ($receiver) {
      return $receiver.length;
    });
    var count_0 = defineInlineFunction('kotlin.kotlin.collections.count_964n91$', function ($receiver) {
      return $receiver.length;
    });
    var count_1 = defineInlineFunction('kotlin.kotlin.collections.count_i2lc79$', function ($receiver) {
      return $receiver.length;
    });
    var count_2 = defineInlineFunction('kotlin.kotlin.collections.count_tmsbgo$', function ($receiver) {
      return $receiver.length;
    });
    var count_3 = defineInlineFunction('kotlin.kotlin.collections.count_se6h4x$', function ($receiver) {
      return $receiver.length;
    });
    var count_4 = defineInlineFunction('kotlin.kotlin.collections.count_rjqryz$', function ($receiver) {
      return $receiver.length;
    });
    var count_5 = defineInlineFunction('kotlin.kotlin.collections.count_bvy38s$', function ($receiver) {
      return $receiver.length;
    });
    var count_6 = defineInlineFunction('kotlin.kotlin.collections.count_l1lu5t$', function ($receiver) {
      return $receiver.length;
    });
    var count_7 = defineInlineFunction('kotlin.kotlin.collections.count_355ntz$', function ($receiver) {
      return $receiver.length;
    });
    var count_8 = defineInlineFunction('kotlin.kotlin.collections.count_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_9 = defineInlineFunction('kotlin.kotlin.collections.count_c3i447$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_10 = defineInlineFunction('kotlin.kotlin.collections.count_247xw3$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_11 = defineInlineFunction('kotlin.kotlin.collections.count_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_12 = defineInlineFunction('kotlin.kotlin.collections.count_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_13 = defineInlineFunction('kotlin.kotlin.collections.count_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_14 = defineInlineFunction('kotlin.kotlin.collections.count_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_15 = defineInlineFunction('kotlin.kotlin.collections.count_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_16 = defineInlineFunction('kotlin.kotlin.collections.count_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var count = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            count = count + 1 | 0;
        }
        return count;
      };
    }));
    var fold = defineInlineFunction('kotlin.kotlin.collections.fold_agj4oo$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_0 = defineInlineFunction('kotlin.kotlin.collections.fold_fl151e$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_1 = defineInlineFunction('kotlin.kotlin.collections.fold_9nnzbm$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_2 = defineInlineFunction('kotlin.kotlin.collections.fold_sgag36$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_3 = defineInlineFunction('kotlin.kotlin.collections.fold_sc6mze$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_4 = defineInlineFunction('kotlin.kotlin.collections.fold_fnzdea$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_5 = defineInlineFunction('kotlin.kotlin.collections.fold_mnppu8$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_6 = defineInlineFunction('kotlin.kotlin.collections.fold_43zc0i$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_7 = defineInlineFunction('kotlin.kotlin.collections.fold_8nwlk6$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          accumulator = operation(accumulator, toBoxedChar(element));
        }
        return accumulator;
      };
    }));
    var foldIndexed = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_oj0mn0$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_qzmh7i$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_aijnee$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_28ylm2$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_37s2ie$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_faee2y$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_ufoyfg$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_z82r06$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_sfak8u$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0;
        var index = 0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, toBoxedChar(element));
        }
        return accumulator;
      };
    }));
    var foldRight = defineInlineFunction('kotlin.kotlin.collections.foldRight_svmc2u$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_0 = defineInlineFunction('kotlin.kotlin.collections.foldRight_wssfls$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_1 = defineInlineFunction('kotlin.kotlin.collections.foldRight_9ug2j2$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_2 = defineInlineFunction('kotlin.kotlin.collections.foldRight_8vbxp4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_3 = defineInlineFunction('kotlin.kotlin.collections.foldRight_1fuzy8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_4 = defineInlineFunction('kotlin.kotlin.collections.foldRight_lsgf76$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_5 = defineInlineFunction('kotlin.kotlin.collections.foldRight_v5l2cg$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_6 = defineInlineFunction('kotlin.kotlin.collections.foldRight_ej6ng6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$], accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_7 = defineInlineFunction('kotlin.kotlin.collections.foldRight_i7w5ds$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(toBoxedChar($receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$]), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRightIndexed = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_et4u4i$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_le73fo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_8zkega$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_ltx404$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_qk9kf8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_95xca2$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_lxtlx8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_gkwrji$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_ivb0f8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, toBoxedChar($receiver[index]), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var forEach = defineInlineFunction('kotlin.kotlin.collections.forEach_je628z$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_0 = defineInlineFunction('kotlin.kotlin.collections.forEach_l09evt$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_1 = defineInlineFunction('kotlin.kotlin.collections.forEach_q32uhv$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_2 = defineInlineFunction('kotlin.kotlin.collections.forEach_4l7qrh$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_3 = defineInlineFunction('kotlin.kotlin.collections.forEach_j4vz15$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_4 = defineInlineFunction('kotlin.kotlin.collections.forEach_w9sc9v$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_5 = defineInlineFunction('kotlin.kotlin.collections.forEach_txsb7r$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_6 = defineInlineFunction('kotlin.kotlin.collections.forEach_g04iob$', function ($receiver, action) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        action(element);
      }
    });
    var forEach_7 = defineInlineFunction('kotlin.kotlin.collections.forEach_kxoc7t$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, action) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          action(toBoxedChar(element));
        }
      };
    }));
    var forEachIndexed = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_arhcu7$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_1b870r$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_2042pt$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_71hk2v$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_xp2l85$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_fd0uwv$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_fchhez$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_jzv3dz$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var item = $receiver[tmp$];
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_u1r9l7$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, action) {
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var item = unboxChar($receiver[tmp$]);
          action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item));
        }
      };
    }));
    function max($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      if (isNaN_0(max))
        return max;
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_0(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_0($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      if (isNaN_1(max))
        return max;
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_1(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_1($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (Kotlin.compareTo(max, e) < 0)
          max = e;
      }
      return max;
    }
    function max_2($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_0($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_3($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_1($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_4($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_2($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_5($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_3($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (max.compareTo_11rb$(e) < 0)
          max = e;
      }
      return max;
    }
    function max_6($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      if (isNaN_1(max))
        return max;
      tmp$ = get_lastIndex_4($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_1(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_7($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      if (isNaN_0(max))
        return max;
      tmp$ = get_lastIndex_5($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_0(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_8($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_7($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (max < e)
          max = e;
      }
      return max;
    }
    var maxBy = defineInlineFunction('kotlin.kotlin.collections.maxBy_99hh6x$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_0 = defineInlineFunction('kotlin.kotlin.collections.maxBy_jirwv8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_1 = defineInlineFunction('kotlin.kotlin.collections.maxBy_p0tdr4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_2 = defineInlineFunction('kotlin.kotlin.collections.maxBy_30vlmi$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_3 = defineInlineFunction('kotlin.kotlin.collections.maxBy_hom4ws$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_4 = defineInlineFunction('kotlin.kotlin.collections.maxBy_ksd00w$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_5 = defineInlineFunction('kotlin.kotlin.collections.maxBy_fvpt30$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_6 = defineInlineFunction('kotlin.kotlin.collections.maxBy_xt360o$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_7 = defineInlineFunction('kotlin.kotlin.collections.maxBy_epurks$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(toBoxedChar(maxElem));
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(toBoxedChar(e));
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    function maxWith($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_0($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_0($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_1($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_1($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_2($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_2($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_3($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_3($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_4($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_4($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_5($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_5($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_6($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_6($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_7($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver[0];
      tmp$ = get_lastIndex_7($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(toBoxedChar(max), toBoxedChar(e)) < 0)
          max = e;
      }
      return max;
    }
    function min($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      if (isNaN_0(min))
        return min;
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_0(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_0($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      if (isNaN_1(min))
        return min;
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_1(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_1($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (Kotlin.compareTo(min, e) > 0)
          min = e;
      }
      return min;
    }
    function min_2($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_0($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_3($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_1($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_4($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_2($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_5($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_3($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (min.compareTo_11rb$(e) > 0)
          min = e;
      }
      return min;
    }
    function min_6($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      if (isNaN_1(min))
        return min;
      tmp$ = get_lastIndex_4($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_1(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_7($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      if (isNaN_0(min))
        return min;
      tmp$ = get_lastIndex_5($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (isNaN_0(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_8($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_7($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (min > e)
          min = e;
      }
      return min;
    }
    var minBy = defineInlineFunction('kotlin.kotlin.collections.minBy_99hh6x$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_0 = defineInlineFunction('kotlin.kotlin.collections.minBy_jirwv8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_1 = defineInlineFunction('kotlin.kotlin.collections.minBy_p0tdr4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_2 = defineInlineFunction('kotlin.kotlin.collections.minBy_30vlmi$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_3 = defineInlineFunction('kotlin.kotlin.collections.minBy_hom4ws$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_4 = defineInlineFunction('kotlin.kotlin.collections.minBy_ksd00w$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_5 = defineInlineFunction('kotlin.kotlin.collections.minBy_fvpt30$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_6 = defineInlineFunction('kotlin.kotlin.collections.minBy_xt360o$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_7 = defineInlineFunction('kotlin.kotlin.collections.minBy_epurks$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver[0];
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(toBoxedChar(minElem));
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver[i];
          var v = selector(toBoxedChar(e));
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    function minWith($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_0($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_0($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_1($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_1($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_2($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_2($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_3($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_3($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_4($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_4($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_5($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_5($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_6($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_6($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_7($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver[0];
      tmp$ = get_lastIndex_7($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver[i];
        if (comparator.compare(toBoxedChar(min), toBoxedChar(e)) > 0)
          min = e;
      }
      return min;
    }
    function none($receiver) {
      return $receiver.length === 0;
    }
    function none_0($receiver) {
      return $receiver.length === 0;
    }
    function none_1($receiver) {
      return $receiver.length === 0;
    }
    function none_2($receiver) {
      return $receiver.length === 0;
    }
    function none_3($receiver) {
      return $receiver.length === 0;
    }
    function none_4($receiver) {
      return $receiver.length === 0;
    }
    function none_5($receiver) {
      return $receiver.length === 0;
    }
    function none_6($receiver) {
      return $receiver.length === 0;
    }
    function none_7($receiver) {
      return $receiver.length === 0;
    }
    var none_8 = defineInlineFunction('kotlin.kotlin.collections.none_sfx99b$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_9 = defineInlineFunction('kotlin.kotlin.collections.none_c3i447$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_10 = defineInlineFunction('kotlin.kotlin.collections.none_247xw3$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_11 = defineInlineFunction('kotlin.kotlin.collections.none_il4kyb$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_12 = defineInlineFunction('kotlin.kotlin.collections.none_i1oc7r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_13 = defineInlineFunction('kotlin.kotlin.collections.none_u4nq1f$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_14 = defineInlineFunction('kotlin.kotlin.collections.none_3vq27r$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_15 = defineInlineFunction('kotlin.kotlin.collections.none_xffwn9$', function ($receiver, predicate) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_16 = defineInlineFunction('kotlin.kotlin.collections.none_3ji0pj$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element)))
            return false;
        }
        return true;
      };
    }));
    var reduce = defineInlineFunction('kotlin.kotlin.collections.reduce_5bz9yp$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_0 = defineInlineFunction('kotlin.kotlin.collections.reduce_ua0gmo$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_1 = defineInlineFunction('kotlin.kotlin.collections.reduce_5x6csy$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_2 = defineInlineFunction('kotlin.kotlin.collections.reduce_vuuzha$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_3 = defineInlineFunction('kotlin.kotlin.collections.reduce_8z4g8g$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_4 = defineInlineFunction('kotlin.kotlin.collections.reduce_m57mj6$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_5 = defineInlineFunction('kotlin.kotlin.collections.reduce_5rthjk$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_6 = defineInlineFunction('kotlin.kotlin.collections.reduce_if3lfm$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduce_7 = defineInlineFunction('kotlin.kotlin.collections.reduce_724a40$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(toBoxedChar(accumulator), toBoxedChar($receiver[index])));
        }
        return accumulator;
      };
    }));
    var reduceIndexed = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_f61gul$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_y1rlg4$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_ctdw5m$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_y7bnwe$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_54m7jg$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_mzocqy$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_i4uovg$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_fqu0be$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_n25zu4$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(index, toBoxedChar(accumulator), toBoxedChar($receiver[index])));
        }
        return accumulator;
      };
    }));
    var reduceOrNull = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_5bz9yp$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_0 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_ua0gmo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_1 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_5x6csy$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_2 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_vuuzha$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_3 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_8z4g8g$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_4 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_m57mj6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_5 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_5rthjk$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_6 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_if3lfm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver[index]);
        }
        return accumulator;
      };
    }));
    var reduceOrNull_7 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_724a40$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver[0];
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(toBoxedChar(accumulator), toBoxedChar($receiver[index])));
        }
        return accumulator;
      };
    }));
    var reduceRight = defineInlineFunction('kotlin.kotlin.collections.reduceRight_m9c08d$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_0 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_ua0gmo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_1 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_5x6csy$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_2 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_vuuzha$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_3 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_8z4g8g$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_4 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_m57mj6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_5 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_5rthjk$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_6 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_if3lfm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_7 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_724a40$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = unboxChar(operation(toBoxedChar($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0]), toBoxedChar(accumulator)));
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_cf9tch$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_y1rlg4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_ctdw5m$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_y7bnwe$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_54m7jg$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_mzocqy$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_i4uovg$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_fqu0be$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation(index, $receiver[index], accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_n25zu4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = unboxChar(operation(index, toBoxedChar($receiver[index]), toBoxedChar(accumulator)));
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_m9c08d$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_m7z4lg$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_0 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_ua0gmo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_1 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_5x6csy$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_2 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_vuuzha$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_3 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_8z4g8g$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_4 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_m57mj6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_rjqryz$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_5 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_5rthjk$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_bvy38s$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_6 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_if3lfm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_l1lu5t$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = operation($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0], accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_7 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_724a40$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_355ntz$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver[tmp$ = index, index = tmp$ - 1 | 0, tmp$];
        while (index >= 0) {
          accumulator = unboxChar(operation(toBoxedChar($receiver[tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0]), toBoxedChar(accumulator)));
        }
        return accumulator;
      };
    }));
    var scan = defineInlineFunction('kotlin.kotlin.collections.scan_agj4oo$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_0 = defineInlineFunction('kotlin.kotlin.collections.scan_fl151e$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_1 = defineInlineFunction('kotlin.kotlin.collections.scan_9nnzbm$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_2 = defineInlineFunction('kotlin.kotlin.collections.scan_sgag36$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_3 = defineInlineFunction('kotlin.kotlin.collections.scan_sc6mze$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_4 = defineInlineFunction('kotlin.kotlin.collections.scan_fnzdea$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_5 = defineInlineFunction('kotlin.kotlin.collections.scan_mnppu8$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_6 = defineInlineFunction('kotlin.kotlin.collections.scan_43zc0i$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_7 = defineInlineFunction('kotlin.kotlin.collections.scan_8nwlk6$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          accumulator = operation(accumulator, toBoxedChar(element));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_oj0mn0$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_qzmh7i$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_aijnee$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_28ylm2$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_37s2ie$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_faee2y$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_ufoyfg$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_z82r06$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, $receiver[index]);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_sfak8u$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        for (var index = 0; index !== $receiver.length; ++index) {
          accumulator = operation(index, accumulator, toBoxedChar($receiver[index]));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanReduce = defineInlineFunction('kotlin.kotlin.collections.scanReduce_5bz9yp$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_0 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_ua0gmo$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_1 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_5x6csy$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_2 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_vuuzha$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_3 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_8z4g8g$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_4 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_m57mj6$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_5 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_5rthjk$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_6 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_if3lfm$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_7 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_724a40$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(toBoxedChar(accumulator.v));
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = unboxChar(operation(toBoxedChar(accumulator.v), toBoxedChar($receiver[index])));
          result.add_11rb$(toBoxedChar(accumulator.v));
        }
        return result;
      };
    }));
    var scanReduceIndexed = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_f61gul$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_0 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_y1rlg4$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_1 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_ctdw5m$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_2 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_y7bnwe$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_3 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_54m7jg$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_4 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_mzocqy$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_5 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_i4uovg$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_6 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_fqu0be$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver[index]);
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_7 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_n25zu4$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver[0]};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(toBoxedChar(accumulator.v));
        var result = $receiver_0;
        for (var index = 1; index < $receiver.length; index++) {
          accumulator.v = unboxChar(operation(index, toBoxedChar(accumulator.v), toBoxedChar($receiver[index])));
          result.add_11rb$(toBoxedChar(accumulator.v));
        }
        return result;
      };
    }));
    var sumBy = defineInlineFunction('kotlin.kotlin.collections.sumBy_9qh8u2$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_0 = defineInlineFunction('kotlin.kotlin.collections.sumBy_s616nk$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_1 = defineInlineFunction('kotlin.kotlin.collections.sumBy_sccsus$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_2 = defineInlineFunction('kotlin.kotlin.collections.sumBy_n2f0qi$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_3 = defineInlineFunction('kotlin.kotlin.collections.sumBy_8jxuvk$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_4 = defineInlineFunction('kotlin.kotlin.collections.sumBy_lv6o8c$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_5 = defineInlineFunction('kotlin.kotlin.collections.sumBy_a4xh9s$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_6 = defineInlineFunction('kotlin.kotlin.collections.sumBy_d84lg4$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumBy_7 = defineInlineFunction('kotlin.kotlin.collections.sumBy_izzzcg$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, selector) {
        var tmp$;
        var sum = 0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          sum = sum + selector(toBoxedChar(element)) | 0;
        }
        return sum;
      };
    }));
    var sumByDouble = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_vyz3zq$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_0 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_kkr9hw$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_1 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_u2ap1s$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_2 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_suc1jq$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_3 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_rqe08c$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_4 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_8jdnkg$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_5 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_vuwwjw$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_6 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_1f8lq0$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_7 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_ik7e6s$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, selector) {
        var tmp$;
        var sum = 0.0;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          sum += selector(toBoxedChar(element));
        }
        return sum;
      };
    }));
    function requireNoNulls($receiver) {
      var tmp$, tmp$_0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (element == null) {
          throw IllegalArgumentException_init_0('null element found in ' + $receiver + '.');
        }}
      return Kotlin.isArray(tmp$_0 = $receiver) ? tmp$_0 : throwCCE_0();
    }
    var partition = defineInlineFunction('kotlin.kotlin.collections.partition_sfx99b$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_0 = defineInlineFunction('kotlin.kotlin.collections.partition_c3i447$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_1 = defineInlineFunction('kotlin.kotlin.collections.partition_247xw3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_2 = defineInlineFunction('kotlin.kotlin.collections.partition_il4kyb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_3 = defineInlineFunction('kotlin.kotlin.collections.partition_i1oc7r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_4 = defineInlineFunction('kotlin.kotlin.collections.partition_u4nq1f$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_5 = defineInlineFunction('kotlin.kotlin.collections.partition_3vq27r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_6 = defineInlineFunction('kotlin.kotlin.collections.partition_xffwn9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_7 = defineInlineFunction('kotlin.kotlin.collections.partition_3ji0pj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = unboxChar($receiver[tmp$]);
          if (predicate(toBoxedChar(element))) {
            first.add_11rb$(toBoxedChar(element));
          } else {
            second.add_11rb$(toBoxedChar(element));
          }
        }
        return new Pair_init(first, second);
      };
    }));
    function zip($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_0($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_1($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_2($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_3($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_4($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_5($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_6($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_7($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to(toBoxedChar($receiver[i]), other[i]));
      }
      return list;
    }
    var zip_8 = defineInlineFunction('kotlin.kotlin.collections.zip_t5fk8e$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_9 = defineInlineFunction('kotlin.kotlin.collections.zip_c731w7$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_10 = defineInlineFunction('kotlin.kotlin.collections.zip_ochmv5$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_11 = defineInlineFunction('kotlin.kotlin.collections.zip_fvmov$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_12 = defineInlineFunction('kotlin.kotlin.collections.zip_g0832p$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_13 = defineInlineFunction('kotlin.kotlin.collections.zip_cpiwht$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_14 = defineInlineFunction('kotlin.kotlin.collections.zip_p5twxn$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_15 = defineInlineFunction('kotlin.kotlin.collections.zip_6fiayp$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_16 = defineInlineFunction('kotlin.kotlin.collections.zip_xwrum3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform(toBoxedChar($receiver[i]), other[i]));
        }
        return list;
      };
    }));
    function zip_17($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_18($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_19($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_20($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_21($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_22($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_23($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_24($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
      }
      return list;
    }
    function zip_25($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to(toBoxedChar($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0]), element));
      }
      return list;
    }
    var zip_26 = defineInlineFunction('kotlin.kotlin.collections.zip_aoaibi$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_27 = defineInlineFunction('kotlin.kotlin.collections.zip_2fxjb5$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_28 = defineInlineFunction('kotlin.kotlin.collections.zip_ey57vj$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_29 = defineInlineFunction('kotlin.kotlin.collections.zip_582drv$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_30 = defineInlineFunction('kotlin.kotlin.collections.zip_5584fz$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_31 = defineInlineFunction('kotlin.kotlin.collections.zip_dszx9d$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_32 = defineInlineFunction('kotlin.kotlin.collections.zip_p8lavz$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_33 = defineInlineFunction('kotlin.kotlin.collections.zip_e6btvt$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0], element));
        }
        return list;
      };
    }));
    var zip_34 = defineInlineFunction('kotlin.kotlin.collections.zip_imz1rz$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform(toBoxedChar($receiver[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0]), element));
        }
        return list;
      };
    }));
    function zip_35($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_36($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_37($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_38($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_39($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_40($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_41($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver[i], other[i]));
      }
      return list;
    }
    function zip_42($receiver, other) {
      var size = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to(toBoxedChar($receiver[i]), toBoxedChar(other[i])));
      }
      return list;
    }
    var zip_43 = defineInlineFunction('kotlin.kotlin.collections.zip_fvjg0r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_44 = defineInlineFunction('kotlin.kotlin.collections.zip_u8n9wb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_45 = defineInlineFunction('kotlin.kotlin.collections.zip_2l2rw1$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_46 = defineInlineFunction('kotlin.kotlin.collections.zip_3bxm8r$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_47 = defineInlineFunction('kotlin.kotlin.collections.zip_h04u5h$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_48 = defineInlineFunction('kotlin.kotlin.collections.zip_t5hjvf$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_49 = defineInlineFunction('kotlin.kotlin.collections.zip_l9qpsl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver[i], other[i]));
        }
        return list;
      };
    }));
    var zip_50 = defineInlineFunction('kotlin.kotlin.collections.zip_rvvoh1$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform(toBoxedChar($receiver[i]), toBoxedChar(other[i])));
        }
        return list;
      };
    }));
    function joinTo($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          appendElement_0(buffer, element, transform);
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_0($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_1($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_2($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_3($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_4($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_5($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_6($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(element));
          else
            buffer.append_gw00v9$(element.toString());
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinTo_7($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = unboxChar($receiver[tmp$]);
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          if (transform != null)
            buffer.append_gw00v9$(transform(toBoxedChar(element)));
          else
            buffer.append_s8itvh$(element);
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinToString($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_0($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_0($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_1($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_1($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_2($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_2($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_3($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_3($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_4($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_4($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_5($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_5($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_6($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_6($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function joinToString_7($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_7($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function asIterable$lambda(this$asIterable) {
      return function () {
        return Kotlin.arrayIterator(this$asIterable);
      };
    }
    function asIterable($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda($receiver));
    }
    function asIterable$lambda_0(this$asIterable) {
      return function () {
        return Kotlin.byteArrayIterator(this$asIterable);
      };
    }
    function asIterable_0($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_0($receiver));
    }
    function asIterable$lambda_1(this$asIterable) {
      return function () {
        return Kotlin.shortArrayIterator(this$asIterable);
      };
    }
    function asIterable_1($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_1($receiver));
    }
    function asIterable$lambda_2(this$asIterable) {
      return function () {
        return Kotlin.intArrayIterator(this$asIterable);
      };
    }
    function asIterable_2($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_2($receiver));
    }
    function asIterable$lambda_3(this$asIterable) {
      return function () {
        return Kotlin.longArrayIterator(this$asIterable);
      };
    }
    function asIterable_3($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_3($receiver));
    }
    function asIterable$lambda_4(this$asIterable) {
      return function () {
        return Kotlin.floatArrayIterator(this$asIterable);
      };
    }
    function asIterable_4($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_4($receiver));
    }
    function asIterable$lambda_5(this$asIterable) {
      return function () {
        return Kotlin.doubleArrayIterator(this$asIterable);
      };
    }
    function asIterable_5($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_5($receiver));
    }
    function asIterable$lambda_6(this$asIterable) {
      return function () {
        return Kotlin.booleanArrayIterator(this$asIterable);
      };
    }
    function asIterable_6($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_6($receiver));
    }
    function asIterable$lambda_7(this$asIterable) {
      return function () {
        return Kotlin.charArrayIterator(this$asIterable);
      };
    }
    function asIterable_7($receiver) {
      if ($receiver.length === 0)
        return emptyList();
      return new Iterable$ObjectLiteral(asIterable$lambda_7($receiver));
    }
    function asSequence$lambda(this$asSequence) {
      return function () {
        return Kotlin.arrayIterator(this$asSequence);
      };
    }
    function asSequence($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda($receiver));
    }
    function asSequence$lambda_0(this$asSequence) {
      return function () {
        return Kotlin.byteArrayIterator(this$asSequence);
      };
    }
    function asSequence_0($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_0($receiver));
    }
    function asSequence$lambda_1(this$asSequence) {
      return function () {
        return Kotlin.shortArrayIterator(this$asSequence);
      };
    }
    function asSequence_1($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_1($receiver));
    }
    function asSequence$lambda_2(this$asSequence) {
      return function () {
        return Kotlin.intArrayIterator(this$asSequence);
      };
    }
    function asSequence_2($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_2($receiver));
    }
    function asSequence$lambda_3(this$asSequence) {
      return function () {
        return Kotlin.longArrayIterator(this$asSequence);
      };
    }
    function asSequence_3($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_3($receiver));
    }
    function asSequence$lambda_4(this$asSequence) {
      return function () {
        return Kotlin.floatArrayIterator(this$asSequence);
      };
    }
    function asSequence_4($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_4($receiver));
    }
    function asSequence$lambda_5(this$asSequence) {
      return function () {
        return Kotlin.doubleArrayIterator(this$asSequence);
      };
    }
    function asSequence_5($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_5($receiver));
    }
    function asSequence$lambda_6(this$asSequence) {
      return function () {
        return Kotlin.booleanArrayIterator(this$asSequence);
      };
    }
    function asSequence_6($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_6($receiver));
    }
    function asSequence$lambda_7(this$asSequence) {
      return function () {
        return Kotlin.charArrayIterator(this$asSequence);
      };
    }
    function asSequence_7($receiver) {
      if ($receiver.length === 0)
        return emptySequence();
      return new Sequence$ObjectLiteral(asSequence$lambda_7($receiver));
    }
    function average($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_0($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_1($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_2($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_3($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_4($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_5($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_6($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_7($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_8($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_9($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_10($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
        count = count + 1 | 0;
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function sum($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element;
      }
      return sum;
    }
    function sum_0($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element;
      }
      return sum;
    }
    function sum_1($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element | 0;
      }
      return sum;
    }
    function sum_2($receiver) {
      var tmp$;
      var sum = L0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum.add(element);
      }
      return sum;
    }
    function sum_3($receiver) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
      }
      return sum;
    }
    function sum_4($receiver) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
      }
      return sum;
    }
    function sum_5($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element;
      }
      return sum;
    }
    function sum_6($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element;
      }
      return sum;
    }
    function sum_7($receiver) {
      var tmp$;
      var sum = 0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum + element | 0;
      }
      return sum;
    }
    function sum_8($receiver) {
      var tmp$;
      var sum = L0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = sum.add(element);
      }
      return sum;
    }
    function sum_9($receiver) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
      }
      return sum;
    }
    function sum_10($receiver) {
      var tmp$;
      var sum = 0.0;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum += element;
      }
      return sum;
    }
    function Sequence$ObjectLiteral_0(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral_0.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    var component1_8 = defineInlineFunction('kotlin.kotlin.collections.component1_2p1efm$', function ($receiver) {
      return $receiver.get_za3lpa$(0);
    });
    var component2_8 = defineInlineFunction('kotlin.kotlin.collections.component2_2p1efm$', function ($receiver) {
      return $receiver.get_za3lpa$(1);
    });
    var component3_8 = defineInlineFunction('kotlin.kotlin.collections.component3_2p1efm$', function ($receiver) {
      return $receiver.get_za3lpa$(2);
    });
    var component4_8 = defineInlineFunction('kotlin.kotlin.collections.component4_2p1efm$', function ($receiver) {
      return $receiver.get_za3lpa$(3);
    });
    var component5_8 = defineInlineFunction('kotlin.kotlin.collections.component5_2p1efm$', function ($receiver) {
      return $receiver.get_za3lpa$(4);
    });
    function contains_8($receiver, element) {
      if (Kotlin.isType($receiver, Collection))
        return $receiver.contains_11rb$(element);
      return indexOf_8($receiver, element) >= 0;
    }
    function elementAt$lambda(closure$index) {
      return function (it) {
        throw new IndexOutOfBoundsException("Collection doesn't contain element at index " + closure$index + '.');
      };
    }
    function elementAt($receiver, index) {
      if (Kotlin.isType($receiver, List))
        return $receiver.get_za3lpa$(index);
      return elementAtOrElse_8($receiver, index, elementAt$lambda(index));
    }
    var elementAt_0 = defineInlineFunction('kotlin.kotlin.collections.elementAt_yzln2o$', function ($receiver, index) {
      return $receiver.get_za3lpa$(index);
    });
    function elementAtOrElse_8($receiver, index, defaultValue) {
      var tmp$;
      if (Kotlin.isType($receiver, List)) {
        return index >= 0 && index <= get_lastIndex_12($receiver) ? $receiver.get_za3lpa$(index) : defaultValue(index);
      }if (index < 0)
        return defaultValue(index);
      var iterator = $receiver.iterator();
      var count = 0;
      while (iterator.hasNext()) {
        var element = iterator.next();
        if (index === (tmp$ = count, count = tmp$ + 1 | 0, tmp$))
          return element;
      }
      return defaultValue(index);
    }
    var elementAtOrElse_9 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_q7vxk6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_55thoc$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    function elementAtOrNull_8($receiver, index) {
      var tmp$;
      if (Kotlin.isType($receiver, List))
        return getOrNull_8($receiver, index);
      if (index < 0)
        return null;
      var iterator = $receiver.iterator();
      var count = 0;
      while (iterator.hasNext()) {
        var element = iterator.next();
        if (index === (tmp$ = count, count = tmp$ + 1 | 0, tmp$))
          return element;
      }
      return null;
    }
    var elementAtOrNull_9 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_yzln2o$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_yzln2o$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var find_8 = defineInlineFunction('kotlin.kotlin.collections.find_6jwkkr$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var findLast_8 = defineInlineFunction('kotlin.kotlin.collections.findLast_6jwkkr$', function ($receiver, predicate) {
      var tmp$;
      var last = null;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          last = element;
        }}
      return last;
    });
    var findLast_9 = defineInlineFunction('kotlin.kotlin.collections.findLast_dmm9ex$', function ($receiver, predicate) {
      var lastOrNull$result;
      lastOrNull$break: do {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          var element = iterator.previous();
          if (predicate(element)) {
            lastOrNull$result = element;
            break lastOrNull$break;
          }}
        lastOrNull$result = null;
      }
       while (false);
      return lastOrNull$result;
    });
    function first_17($receiver) {
      if (Kotlin.isType($receiver, List))
        return first_18($receiver);
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw new NoSuchElementException('Collection is empty.');
        return iterator.next();
      }
    }
    function first_18($receiver) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('List is empty.');
      return $receiver.get_za3lpa$(0);
    }
    var first_19 = defineInlineFunction('kotlin.kotlin.collections.first_6jwkkr$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Collection contains no element matching the predicate.');
      };
    }));
    function firstOrNull_17($receiver) {
      if (Kotlin.isType($receiver, List))
        if ($receiver.isEmpty())
          return null;
        else
          return $receiver.get_za3lpa$(0);
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return null;
        return iterator.next();
      }
    }
    function firstOrNull_18($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$(0);
    }
    var firstOrNull_19 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_6jwkkr$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var getOrElse_8 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_q7vxk6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_55thoc$;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    function getOrNull_8($receiver, index) {
      return index >= 0 && index <= get_lastIndex_12($receiver) ? $receiver.get_za3lpa$(index) : null;
    }
    function indexOf_8($receiver, element) {
      var tmp$;
      if (Kotlin.isType($receiver, List))
        return $receiver.indexOf_11rb$(element);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        checkIndexOverflow(index);
        if (equals(element, item))
          return index;
        index = index + 1 | 0;
      }
      return -1;
    }
    function indexOf_9($receiver, element) {
      return $receiver.indexOf_11rb$(element);
    }
    var indexOfFirst_8 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_6jwkkr$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          checkIndexOverflow(index);
          if (predicate(item))
            return index;
          index = index + 1 | 0;
        }
        return -1;
      };
    }));
    var indexOfFirst_9 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_dmm9ex$', function ($receiver, predicate) {
      var tmp$;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if (predicate(item))
          return index;
        index = index + 1 | 0;
      }
      return -1;
    });
    var indexOfLast_8 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_6jwkkr$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        var lastIndex = -1;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          checkIndexOverflow(index);
          if (predicate(item))
            lastIndex = index;
          index = index + 1 | 0;
        }
        return lastIndex;
      };
    }));
    var indexOfLast_9 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_dmm9ex$', function ($receiver, predicate) {
      var iterator = $receiver.listIterator_za3lpa$($receiver.size);
      while (iterator.hasPrevious()) {
        if (predicate(iterator.previous())) {
          return iterator.nextIndex();
        }}
      return -1;
    });
    function last_17($receiver) {
      if (Kotlin.isType($receiver, List))
        return last_18($receiver);
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw new NoSuchElementException('Collection is empty.');
        var last = iterator.next();
        while (iterator.hasNext())
          last = iterator.next();
        return last;
      }
    }
    function last_18($receiver) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('List is empty.');
      return $receiver.get_za3lpa$(get_lastIndex_12($receiver));
    }
    var last_19 = defineInlineFunction('kotlin.kotlin.collections.last_6jwkkr$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var last = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            last = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Collection contains no element matching the predicate.');
        return (tmp$_0 = last) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      };
    }));
    var last_20 = defineInlineFunction('kotlin.kotlin.collections.last_dmm9ex$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          var element = iterator.previous();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('List contains no element matching the predicate.');
      };
    }));
    function lastIndexOf_8($receiver, element) {
      var tmp$;
      if (Kotlin.isType($receiver, List))
        return $receiver.lastIndexOf_11rb$(element);
      var lastIndex = -1;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        checkIndexOverflow(index);
        if (equals(element, item))
          lastIndex = index;
        index = index + 1 | 0;
      }
      return lastIndex;
    }
    function lastIndexOf_9($receiver, element) {
      return $receiver.lastIndexOf_11rb$(element);
    }
    function lastOrNull_17($receiver) {
      if (Kotlin.isType($receiver, List))
        return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return null;
        var last = iterator.next();
        while (iterator.hasNext())
          last = iterator.next();
        return last;
      }
    }
    function lastOrNull_18($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
    }
    var lastOrNull_19 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_6jwkkr$', function ($receiver, predicate) {
      var tmp$;
      var last = null;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          last = element;
        }}
      return last;
    });
    var lastOrNull_20 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_dmm9ex$', function ($receiver, predicate) {
      var iterator = $receiver.listIterator_za3lpa$($receiver.size);
      while (iterator.hasPrevious()) {
        var element = iterator.previous();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var random_17 = defineInlineFunction('kotlin.kotlin.collections.random_4c7yge$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_iscd7z$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_18($receiver, random) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('Collection is empty.');
      return elementAt($receiver, random.nextInt_za3lpa$($receiver.size));
    }
    var randomOrNull_17 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_4c7yge$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_iscd7z$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_18($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return elementAt($receiver, random.nextInt_za3lpa$($receiver.size));
    }
    function single_17($receiver) {
      if (Kotlin.isType($receiver, List))
        return single_18($receiver);
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw new NoSuchElementException('Collection is empty.');
        var single = iterator.next();
        if (iterator.hasNext())
          throw IllegalArgumentException_init_0('Collection has more than one element.');
        return single;
      }
    }
    function single_18($receiver) {
      var tmp$;
      switch ($receiver.size) {
        case 0:
          throw new NoSuchElementException('List is empty.');
        case 1:
          tmp$ = $receiver.get_za3lpa$(0);
          break;
        default:throw IllegalArgumentException_init_0('List has more than one element.');
      }
      return tmp$;
    }
    var single_19 = defineInlineFunction('kotlin.kotlin.collections.single_6jwkkr$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Collection contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Collection contains no element matching the predicate.');
        return (tmp$_0 = single) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      };
    }));
    function singleOrNull_17($receiver) {
      if (Kotlin.isType($receiver, List))
        return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
      else {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return null;
        var single = iterator.next();
        if (iterator.hasNext())
          return null;
        return single;
      }
    }
    function singleOrNull_18($receiver) {
      return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
    }
    var singleOrNull_19 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_6jwkkr$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    function drop_8($receiver, n) {
      var tmp$, tmp$_0, tmp$_1;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return toList_8($receiver);
      var list;
      if (Kotlin.isType($receiver, Collection)) {
        var resultSize = $receiver.size - n | 0;
        if (resultSize <= 0)
          return emptyList();
        if (resultSize === 1)
          return listOf(last_17($receiver));
        list = ArrayList_init_0(resultSize);
        if (Kotlin.isType($receiver, List)) {
          if (Kotlin.isType($receiver, RandomAccess)) {
            tmp$ = $receiver.size;
            for (var index = n; index < tmp$; index++)
              list.add_11rb$($receiver.get_za3lpa$(index));
          } else {
            tmp$_0 = $receiver.listIterator_za3lpa$(n);
            while (tmp$_0.hasNext()) {
              var item = tmp$_0.next();
              list.add_11rb$(item);
            }
          }
          return list;
        }} else {
        list = ArrayList_init();
      }
      var count = 0;
      tmp$_1 = $receiver.iterator();
      while (tmp$_1.hasNext()) {
        var item_0 = tmp$_1.next();
        if (count >= n)
          list.add_11rb$(item_0);
        else
          count = count + 1 | 0;
      }
      return optimizeReadOnlyList(list);
    }
    function dropLast_8($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_8($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    var dropLastWhile_8 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_dmm9ex$', wrapFunction(function () {
      var take = _.kotlin.collections.take_ba2ldo$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver, predicate) {
        if (!$receiver.isEmpty()) {
          var iterator = $receiver.listIterator_za3lpa$($receiver.size);
          while (iterator.hasPrevious()) {
            if (!predicate(iterator.previous())) {
              return take($receiver, iterator.nextIndex() + 1 | 0);
            }}
        }return emptyList();
      };
    }));
    var dropWhile_8 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_6jwkkr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var filter_8 = defineInlineFunction('kotlin.kotlin.collections.filter_6jwkkr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_p81qtj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexedTo_8 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_i2yxnm$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, predicate) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIsInstance_0 = defineInlineFunction('kotlin.kotlin.collections.filterIsInstance_6nw4pr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function (R_0, isR, $receiver) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (isR(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIsInstanceTo_0 = defineInlineFunction('kotlin.kotlin.collections.filterIsInstanceTo_v8wdbu$', function (R_0, isR, $receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (isR(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNot_8 = defineInlineFunction('kotlin.kotlin.collections.filterNot_6jwkkr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    function filterNotNull_0($receiver) {
      return filterNotNullTo_0($receiver, ArrayList_init());
    }
    function filterNotNullTo_0($receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element != null)
          destination.add_11rb$(element);
      }
      return destination;
    }
    var filterNotTo_8 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_cslyey$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_8 = defineInlineFunction('kotlin.kotlin.collections.filterTo_cslyey$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    function slice_17($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return toList_8($receiver.subList_vux9f0$(indices.start, indices.endInclusive + 1 | 0));
    }
    function slice_18($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver.get_za3lpa$(index));
      }
      return list;
    }
    function take_8($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (Kotlin.isType($receiver, Collection)) {
        if (n >= $receiver.size)
          return toList_8($receiver);
        if (n === 1)
          return listOf(first_17($receiver));
      }var count = 0;
      var list = ArrayList_init_0(n);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return optimizeReadOnlyList(list);
    }
    function takeLast_8($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.size;
      if (n >= size)
        return toList_8($receiver);
      if (n === 1)
        return listOf(last_18($receiver));
      var list = ArrayList_init_0(n);
      if (Kotlin.isType($receiver, RandomAccess)) {
        for (var index = size - n | 0; index < size; index++)
          list.add_11rb$($receiver.get_za3lpa$(index));
      } else {
        tmp$ = $receiver.listIterator_za3lpa$(size - n | 0);
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          list.add_11rb$(item);
        }
      }
      return list;
    }
    var takeLastWhile_8 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_dmm9ex$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toList = _.kotlin.collections.toList_7wnvza$;
      return function ($receiver, predicate) {
        if ($receiver.isEmpty())
          return emptyList();
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          if (!predicate(iterator.previous())) {
            iterator.next();
            var expectedSize = $receiver.size - iterator.nextIndex() | 0;
            if (expectedSize === 0)
              return emptyList();
            var $receiver_0 = ArrayList_init(expectedSize);
            while (iterator.hasNext())
              $receiver_0.add_11rb$(iterator.next());
            return $receiver_0;
          }}
        return toList($receiver);
      };
    }));
    var takeWhile_8 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_6jwkkr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    function reversed_8($receiver) {
      if (Kotlin.isType($receiver, Collection) && $receiver.size <= 1)
        return toList_8($receiver);
      var list = toMutableList_8($receiver);
      reverse_12(list);
      return list;
    }
    var sortBy_0 = defineInlineFunction('kotlin.kotlin.collections.sortBy_yag3x6$', wrapFunction(function () {
      var sortWith = _.kotlin.collections.sortWith_nqfjgj$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        if ($receiver.size > 1) {
          sortWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
        }};
    }));
    var sortByDescending_0 = defineInlineFunction('kotlin.kotlin.collections.sortByDescending_yag3x6$', wrapFunction(function () {
      var sortWith = _.kotlin.collections.sortWith_nqfjgj$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        if ($receiver.size > 1) {
          sortWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
        }};
    }));
    function sortDescending_7($receiver) {
      sortWith_0($receiver, reverseOrder());
    }
    function sorted_7($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection)) {
        if ($receiver.size <= 1)
          return toList_8($receiver);
        var $receiver_0 = Kotlin.isArray(tmp$ = copyToArray($receiver)) ? tmp$ : throwCCE_0();
        sort_5($receiver_0);
        return asList($receiver_0);
      }var $receiver_1 = toMutableList_8($receiver);
      sort_14($receiver_1);
      return $receiver_1;
    }
    var sortedBy_8 = defineInlineFunction('kotlin.kotlin.collections.sortedBy_nd8ern$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_eknfly$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedByDescending_8 = defineInlineFunction('kotlin.kotlin.collections.sortedByDescending_nd8ern$', wrapFunction(function () {
      var sortedWith = _.kotlin.collections.sortedWith_eknfly$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    function sortedDescending_7($receiver) {
      return sortedWith_8($receiver, reverseOrder());
    }
    function sortedWith_8($receiver, comparator) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection)) {
        if ($receiver.size <= 1)
          return toList_8($receiver);
        var $receiver_0 = Kotlin.isArray(tmp$ = copyToArray($receiver)) ? tmp$ : throwCCE_0();
        sortWith($receiver_0, comparator);
        return asList($receiver_0);
      }var $receiver_1 = toMutableList_8($receiver);
      sortWith_0($receiver_1, comparator);
      return $receiver_1;
    }
    function toBooleanArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = Kotlin.booleanArray($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toByteArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = new Int8Array($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toCharArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = Kotlin.charArray($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = unboxChar(tmp$.next());
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toDoubleArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = new Float64Array($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toFloatArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = new Float32Array($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toIntArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = new Int32Array($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toLongArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = Kotlin.longArray($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function toShortArray_0($receiver) {
      var tmp$, tmp$_0;
      var result = new Int16Array($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    var associate_8 = defineInlineFunction('kotlin.kotlin.collections.associate_wbhhmp$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associateBy_17 = defineInlineFunction('kotlin.kotlin.collections.associateBy_dvm6j0$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_18 = defineInlineFunction('kotlin.kotlin.collections.associateBy_6kgnfi$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateByTo_17 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_q9k9lv$', function ($receiver, destination, keySelector) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_18 = defineInlineFunction('kotlin.kotlin.collections.associateByTo_5s21dh$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateTo_8 = defineInlineFunction('kotlin.kotlin.collections.associateTo_tp6zhs$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateWith = defineInlineFunction('kotlin.kotlin.collections.associateWith_dvm6j0$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, valueSelector) {
        var result = LinkedHashMap_init(coerceAtLeast(mapCapacity(collectionSizeOrDefault($receiver, 10)), 16));
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          result.put_xwzc9p$(element, valueSelector(element));
        }
        return result;
      };
    }));
    var associateWithTo = defineInlineFunction('kotlin.kotlin.collections.associateWithTo_u35i63$', function ($receiver, destination, valueSelector) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(element, valueSelector(element));
      }
      return destination;
    });
    function toCollection_8($receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toHashSet_8($receiver) {
      return toCollection_8($receiver, HashSet_init_2(mapCapacity(collectionSizeOrDefault($receiver, 12))));
    }
    function toList_8($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection)) {
        switch ($receiver.size) {
          case 0:
            tmp$ = emptyList();
            break;
          case 1:
            tmp$ = listOf(Kotlin.isType($receiver, List) ? $receiver.get_za3lpa$(0) : $receiver.iterator().next());
            break;
          default:tmp$ = toMutableList_9($receiver);
            break;
        }
        return tmp$;
      }return optimizeReadOnlyList(toMutableList_8($receiver));
    }
    function toMutableList_8($receiver) {
      if (Kotlin.isType($receiver, Collection))
        return toMutableList_9($receiver);
      return toCollection_8($receiver, ArrayList_init());
    }
    function toMutableList_9($receiver) {
      return ArrayList_init_1($receiver);
    }
    function toSet_8($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection)) {
        switch ($receiver.size) {
          case 0:
            tmp$ = emptySet();
            break;
          case 1:
            tmp$ = setOf(Kotlin.isType($receiver, List) ? $receiver.get_za3lpa$(0) : $receiver.iterator().next());
            break;
          default:tmp$ = toCollection_8($receiver, LinkedHashSet_init_3(mapCapacity($receiver.size)));
            break;
        }
        return tmp$;
      }return optimizeReadOnlySet(toCollection_8($receiver, LinkedHashSet_init_0()));
    }
    var flatMap_8 = defineInlineFunction('kotlin.kotlin.collections.flatMap_en2w03$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_8 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_farraf$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var groupBy_17 = defineInlineFunction('kotlin.kotlin.collections.groupBy_dvm6j0$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_18 = defineInlineFunction('kotlin.kotlin.collections.groupBy_6kgnfi$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_17 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_2nn80$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_18 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_spnc2q$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupingBy_0 = defineInlineFunction('kotlin.kotlin.collections.groupingBy_dvm6j0$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Grouping = _.kotlin.collections.Grouping;
      function groupingBy$ObjectLiteral(this$groupingBy, closure$keySelector) {
        this.this$groupingBy = this$groupingBy;
        this.closure$keySelector = closure$keySelector;
      }
      groupingBy$ObjectLiteral.prototype.sourceIterator = function () {
        return this.this$groupingBy.iterator();
      };
      groupingBy$ObjectLiteral.prototype.keyOf_11rb$ = function (element) {
        return this.closure$keySelector(element);
      };
      groupingBy$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Grouping]};
      return function ($receiver, keySelector) {
        return new groupingBy$ObjectLiteral($receiver, keySelector);
      };
    }));
    var map_8 = defineInlineFunction('kotlin.kotlin.collections.map_dvm6j0$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var mapIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_yigmvk$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, transform) {
        var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item));
        }
        return destination;
      };
    }));
    var mapIndexedNotNull_0 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedNotNull_aw5p9p$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          var tmp$_1;
          if ((tmp$_1 = transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item)) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedNotNullTo_0 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedNotNullTo_s7kjlj$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          var tmp$_1;
          if ((tmp$_1 = transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item)) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedTo_8 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_qixlg$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item));
        }
        return destination;
      };
    }));
    var mapNotNull_0 = defineInlineFunction('kotlin.kotlin.collections.mapNotNull_3fhhkf$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapNotNullTo_0 = defineInlineFunction('kotlin.kotlin.collections.mapNotNullTo_p5b1il$', wrapFunction(function () {
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapTo_8 = defineInlineFunction('kotlin.kotlin.collections.mapTo_h3il0w$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    function withIndex$lambda_8(this$withIndex) {
      return function () {
        return this$withIndex.iterator();
      };
    }
    function withIndex_8($receiver) {
      return new IndexingIterable(withIndex$lambda_8($receiver));
    }
    function distinct_8($receiver) {
      return toList_8(toMutableSet_8($receiver));
    }
    var distinctBy_8 = defineInlineFunction('kotlin.kotlin.collections.distinctBy_dvm6j0$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, selector) {
        var tmp$;
        var set = HashSet_init();
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = selector(e);
          if (set.add_11rb$(key))
            list.add_11rb$(e);
        }
        return list;
      };
    }));
    function intersect_8($receiver, other) {
      var set = toMutableSet_8($receiver);
      retainAll_0(set, other);
      return set;
    }
    function subtract_8($receiver, other) {
      var set = toMutableSet_8($receiver);
      removeAll_0(set, other);
      return set;
    }
    function toMutableSet_8($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection))
        tmp$ = LinkedHashSet_init_1($receiver);
      else
        tmp$ = toCollection_8($receiver, LinkedHashSet_init_0());
      return tmp$;
    }
    function union_8($receiver, other) {
      var set = toMutableSet_8($receiver);
      addAll(set, other);
      return set;
    }
    var all_8 = defineInlineFunction('kotlin.kotlin.collections.all_6jwkkr$', wrapFunction(function () {
      var Collection = _.kotlin.collections.Collection;
      return function ($receiver, predicate) {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty())
          return true;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            return false;
        }
        return true;
      };
    }));
    function any_17($receiver) {
      if (Kotlin.isType($receiver, Collection))
        return !$receiver.isEmpty();
      return $receiver.iterator().hasNext();
    }
    var any_18 = defineInlineFunction('kotlin.kotlin.collections.any_6jwkkr$', wrapFunction(function () {
      var Collection = _.kotlin.collections.Collection;
      return function ($receiver, predicate) {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty())
          return false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return true;
        }
        return false;
      };
    }));
    function count_17($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection))
        return $receiver.size;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count;
    }
    var count_18 = defineInlineFunction('kotlin.kotlin.collections.count_4c7yge$', function ($receiver) {
      return $receiver.size;
    });
    var count_19 = defineInlineFunction('kotlin.kotlin.collections.count_6jwkkr$', wrapFunction(function () {
      var Collection = _.kotlin.collections.Collection;
      var checkCountOverflow = _.kotlin.collections.checkCountOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty())
          return 0;
        var count = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            checkCountOverflow((count = count + 1 | 0, count));
        }
        return count;
      };
    }));
    var fold_8 = defineInlineFunction('kotlin.kotlin.collections.fold_l1hrho$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_a080b4$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0;
        var index = 0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), accumulator, element);
        }
        return accumulator;
      };
    }));
    var foldRight_8 = defineInlineFunction('kotlin.kotlin.collections.foldRight_flo3fi$', function ($receiver, initial, operation) {
      var accumulator = initial;
      if (!$receiver.isEmpty()) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          accumulator = operation(iterator.previous(), accumulator);
        }
      }return accumulator;
    });
    var foldRightIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_nj6056$', function ($receiver, initial, operation) {
      var accumulator = initial;
      if (!$receiver.isEmpty()) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        while (iterator.hasPrevious()) {
          var index = iterator.previousIndex();
          accumulator = operation(index, iterator.previous(), accumulator);
        }
      }return accumulator;
    });
    var forEach_8 = defineInlineFunction('kotlin.kotlin.collections.forEach_i7id1t$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEachIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_g8ms6t$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, action) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          action(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item);
        }
      };
    }));
    function max_9($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      if (isNaN_0(max))
        return max;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_0(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_10($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      if (isNaN_1(max))
        return max;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_1(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_11($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (Kotlin.compareTo(max, e) < 0)
          max = e;
      }
      return max;
    }
    var maxBy_8 = defineInlineFunction('kotlin.kotlin.collections.maxBy_nd8ern$', function ($receiver, selector) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var maxElem = iterator.next();
      if (!iterator.hasNext())
        return maxElem;
      var maxValue = selector(maxElem);
      do {
        var e = iterator.next();
        var v = selector(e);
        if (Kotlin.compareTo(maxValue, v) < 0) {
          maxElem = e;
          maxValue = v;
        }}
       while (iterator.hasNext());
      return maxElem;
    });
    function maxWith_8($receiver, comparator) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function min_9($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      if (isNaN_0(min))
        return min;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_0(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_10($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      if (isNaN_1(min))
        return min;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_1(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_11($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (Kotlin.compareTo(min, e) > 0)
          min = e;
      }
      return min;
    }
    var minBy_8 = defineInlineFunction('kotlin.kotlin.collections.minBy_nd8ern$', function ($receiver, selector) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var minElem = iterator.next();
      if (!iterator.hasNext())
        return minElem;
      var minValue = selector(minElem);
      do {
        var e = iterator.next();
        var v = selector(e);
        if (Kotlin.compareTo(minValue, v) > 0) {
          minElem = e;
          minValue = v;
        }}
       while (iterator.hasNext());
      return minElem;
    });
    function minWith_8($receiver, comparator) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function none_17($receiver) {
      if (Kotlin.isType($receiver, Collection))
        return $receiver.isEmpty();
      return !$receiver.iterator().hasNext();
    }
    var none_18 = defineInlineFunction('kotlin.kotlin.collections.none_6jwkkr$', wrapFunction(function () {
      var Collection = _.kotlin.collections.Collection;
      return function ($receiver, predicate) {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty())
          return true;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return false;
        }
        return true;
      };
    }));
    var onEach = defineInlineFunction('kotlin.kotlin.collections.onEach_w8vc4v$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
      return $receiver;
    });
    var reduce_8 = defineInlineFunction('kotlin.kotlin.collections.reduce_lrrcxv$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty collection can't be reduced.");
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = operation(accumulator, iterator.next());
        }
        return accumulator;
      };
    }));
    var reduceIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_8txfjb$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, operation) {
        var tmp$;
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty collection can't be reduced.");
        var index = 1;
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = operation(checkIndexOverflow((tmp$ = index, index = tmp$ + 1 | 0, tmp$)), accumulator, iterator.next());
        }
        return accumulator;
      };
    }));
    var reduceOrNull_8 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_lrrcxv$', function ($receiver, operation) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var accumulator = iterator.next();
      while (iterator.hasNext()) {
        accumulator = operation(accumulator, iterator.next());
      }
      return accumulator;
    });
    var reduceRight_8 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_y5l5zf$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        if (!iterator.hasPrevious())
          throw UnsupportedOperationException_init("Empty list can't be reduced.");
        var accumulator = iterator.previous();
        while (iterator.hasPrevious()) {
          accumulator = operation(iterator.previous(), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_1a67zb$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var iterator = $receiver.listIterator_za3lpa$($receiver.size);
        if (!iterator.hasPrevious())
          throw UnsupportedOperationException_init("Empty list can't be reduced.");
        var accumulator = iterator.previous();
        while (iterator.hasPrevious()) {
          var index = iterator.previousIndex();
          accumulator = operation(index, iterator.previous(), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_8 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_y5l5zf$', function ($receiver, operation) {
      var iterator = $receiver.listIterator_za3lpa$($receiver.size);
      if (!iterator.hasPrevious())
        return null;
      var accumulator = iterator.previous();
      while (iterator.hasPrevious()) {
        accumulator = operation(iterator.previous(), accumulator);
      }
      return accumulator;
    });
    var scan_8 = defineInlineFunction('kotlin.kotlin.collections.scan_l1hrho$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var estimatedSize = collectionSizeOrDefault($receiver, 9);
        if (estimatedSize === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init(estimatedSize + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_a080b4$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0;
        var estimatedSize = collectionSizeOrDefault($receiver, 9);
        if (estimatedSize === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init(estimatedSize + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var index = 0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanReduce_8 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_lrrcxv$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return emptyList();
        var accumulator = {v: iterator.next()};
        var $receiver_0 = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        while (iterator.hasNext()) {
          accumulator.v = operation(accumulator.v, iterator.next());
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_8 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_8txfjb$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return emptyList();
        var accumulator = {v: iterator.next()};
        var $receiver_0 = ArrayList_init(collectionSizeOrDefault($receiver, 10));
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        var index = 1;
        while (iterator.hasNext()) {
          accumulator.v = operation((tmp$ = index, index = tmp$ + 1 | 0, tmp$), accumulator.v, iterator.next());
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var sumBy_8 = defineInlineFunction('kotlin.kotlin.collections.sumBy_1nckxa$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumByDouble_8 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_k0tf9a$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    function requireNoNulls_0($receiver) {
      var tmp$, tmp$_0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element == null) {
          throw IllegalArgumentException_init_0('null element found in ' + $receiver + '.');
        }}
      return Kotlin.isType(tmp$_0 = $receiver, Iterable) ? tmp$_0 : throwCCE_0();
    }
    function requireNoNulls_1($receiver) {
      var tmp$, tmp$_0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element == null) {
          throw IllegalArgumentException_init_0('null element found in ' + $receiver + '.');
        }}
      return Kotlin.isType(tmp$_0 = $receiver, List) ? tmp$_0 : throwCCE_0();
    }
    function chunked($receiver, size) {
      return windowed($receiver, size, size, true);
    }
    function chunked_0($receiver, size, transform) {
      return windowed_0($receiver, size, size, true, transform);
    }
    function minus($receiver, element) {
      var result = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var removed = {v: false};
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element_0 = tmp$.next();
        var predicate$result;
        if (!removed.v && equals(element_0, element)) {
          removed.v = true;
          predicate$result = false;
        } else {
          predicate$result = true;
        }
        if (predicate$result)
          result.add_11rb$(element_0);
      }
      return result;
    }
    function minus_0($receiver, elements) {
      if (elements.length === 0)
        return toList_8($receiver);
      var other = toHashSet(elements);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!other.contains_11rb$(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
    function minus_1($receiver, elements) {
      var other = convertToSetForSetOperationWith(elements, $receiver);
      if (other.isEmpty())
        return toList_8($receiver);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!other.contains_11rb$(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
    function minus_2($receiver, elements) {
      var other = toHashSet_9(elements);
      if (other.isEmpty())
        return toList_8($receiver);
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!other.contains_11rb$(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
    var minusElement = defineInlineFunction('kotlin.kotlin.collections.minusElement_2ws7j4$', wrapFunction(function () {
      var minus = _.kotlin.collections.minus_2ws7j4$;
      return function ($receiver, element) {
        return minus($receiver, element);
      };
    }));
    var partition_8 = defineInlineFunction('kotlin.kotlin.collections.partition_6jwkkr$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    function plus($receiver, element) {
      if (Kotlin.isType($receiver, Collection))
        return plus_0($receiver, element);
      var result = ArrayList_init();
      addAll(result, $receiver);
      result.add_11rb$(element);
      return result;
    }
    function plus_0($receiver, element) {
      var result = ArrayList_init_0($receiver.size + 1 | 0);
      result.addAll_brywnq$($receiver);
      result.add_11rb$(element);
      return result;
    }
    function plus_1($receiver, elements) {
      if (Kotlin.isType($receiver, Collection))
        return plus_2($receiver, elements);
      var result = ArrayList_init();
      addAll(result, $receiver);
      addAll_1(result, elements);
      return result;
    }
    function plus_2($receiver, elements) {
      var result = ArrayList_init_0($receiver.size + elements.length | 0);
      result.addAll_brywnq$($receiver);
      addAll_1(result, elements);
      return result;
    }
    function plus_3($receiver, elements) {
      if (Kotlin.isType($receiver, Collection))
        return plus_4($receiver, elements);
      var result = ArrayList_init();
      addAll(result, $receiver);
      addAll(result, elements);
      return result;
    }
    function plus_4($receiver, elements) {
      if (Kotlin.isType(elements, Collection)) {
        var result = ArrayList_init_0($receiver.size + elements.size | 0);
        result.addAll_brywnq$($receiver);
        result.addAll_brywnq$(elements);
        return result;
      } else {
        var result_0 = ArrayList_init_1($receiver);
        addAll(result_0, elements);
        return result_0;
      }
    }
    function plus_5($receiver, elements) {
      var result = ArrayList_init();
      addAll(result, $receiver);
      addAll_0(result, elements);
      return result;
    }
    function plus_6($receiver, elements) {
      var result = ArrayList_init_0($receiver.size + 10 | 0);
      result.addAll_brywnq$($receiver);
      addAll_0(result, elements);
      return result;
    }
    var plusElement = defineInlineFunction('kotlin.kotlin.collections.plusElement_2ws7j4$', wrapFunction(function () {
      var plus = _.kotlin.collections.plus_2ws7j4$;
      return function ($receiver, element) {
        return plus($receiver, element);
      };
    }));
    var plusElement_0 = defineInlineFunction('kotlin.kotlin.collections.plusElement_qloxvw$', wrapFunction(function () {
      var plus = _.kotlin.collections.plus_qloxvw$;
      return function ($receiver, element) {
        return plus($receiver, element);
      };
    }));
    function windowed($receiver, size, step, partialWindows) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      var tmp$;
      checkWindowSizeStep(size, step);
      if (Kotlin.isType($receiver, RandomAccess) && Kotlin.isType($receiver, List)) {
        var thisSize = $receiver.size;
        var resultCapacity = (thisSize / step | 0) + (thisSize % step === 0 ? 0 : 1) | 0;
        var result = ArrayList_init_0(resultCapacity);
        var index = {v: 0};
        while (true) {
          tmp$ = index.v;
          if (!(0 <= tmp$ && tmp$ < thisSize))
            break;
          var windowSize = coerceAtMost_2(size, thisSize - index.v | 0);
          if (windowSize < size && !partialWindows)
            break;
          var list = ArrayList_init_0(windowSize);
          for (var index_0 = 0; index_0 < windowSize; index_0++) {
            list.add_11rb$($receiver.get_za3lpa$(index_0 + index.v | 0));
          }
          result.add_11rb$(list);
          index.v = index.v + step | 0;
        }
        return result;
      }var result_0 = ArrayList_init();
      var $receiver_0 = windowedIterator($receiver.iterator(), size, step, partialWindows, false);
      while ($receiver_0.hasNext()) {
        var element = $receiver_0.next();
        result_0.add_11rb$(element);
      }
      return result_0;
    }
    function windowed_0($receiver, size, step, partialWindows, transform) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      checkWindowSizeStep(size, step);
      if (Kotlin.isType($receiver, RandomAccess) && Kotlin.isType($receiver, List)) {
        var thisSize = $receiver.size;
        var resultCapacity = (thisSize / step | 0) + (thisSize % step === 0 ? 0 : 1) | 0;
        var result = ArrayList_init_0(resultCapacity);
        var window_0 = new MovingSubList($receiver);
        var index = 0;
        while (0 <= index && index < thisSize) {
          var windowSize = coerceAtMost_2(size, thisSize - index | 0);
          if (!partialWindows && windowSize < size)
            break;
          window_0.move_vux9f0$(index, index + windowSize | 0);
          result.add_11rb$(transform(window_0));
          index = index + step | 0;
        }
        return result;
      }var result_0 = ArrayList_init();
      var $receiver_0 = windowedIterator($receiver.iterator(), size, step, partialWindows, true);
      while ($receiver_0.hasNext()) {
        var element = $receiver_0.next();
        result_0.add_11rb$(transform(element));
      }
      return result_0;
    }
    function zip_51($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = other.length;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault($receiver, 10), arraySize));
      var i = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to(element, other[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0]));
      }
      return list;
    }
    var zip_52 = defineInlineFunction('kotlin.kotlin.collections.zip_curaua$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = other.length;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault($receiver, 10), arraySize));
        var i = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform(element, other[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0]));
        }
        return list;
      };
    }));
    function zip_53($receiver, other) {
      var first = $receiver.iterator();
      var second = other.iterator();
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault($receiver, 10), collectionSizeOrDefault(other, 10)));
      while (first.hasNext() && second.hasNext()) {
        list.add_11rb$(to(first.next(), second.next()));
      }
      return list;
    }
    var zip_54 = defineInlineFunction('kotlin.kotlin.collections.zip_3h9v02$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var first = $receiver.iterator();
        var second = other.iterator();
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault($receiver, 10), collectionSizeOrDefault(other, 10)));
        while (first.hasNext() && second.hasNext()) {
          list.add_11rb$(transform(first.next(), second.next()));
        }
        return list;
      };
    }));
    function zipWithNext($receiver) {
      var zipWithNext$result;
      zipWithNext$break: do {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext()) {
          zipWithNext$result = emptyList();
          break zipWithNext$break;
        }var result = ArrayList_init();
        var current = iterator.next();
        while (iterator.hasNext()) {
          var next = iterator.next();
          result.add_11rb$(to(current, next));
          current = next;
        }
        zipWithNext$result = result;
      }
       while (false);
      return zipWithNext$result;
    }
    var zipWithNext_0 = defineInlineFunction('kotlin.kotlin.collections.zipWithNext_kvcuaw$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, transform) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          return emptyList();
        var result = ArrayList_init();
        var current = iterator.next();
        while (iterator.hasNext()) {
          var next = iterator.next();
          result.add_11rb$(transform(current, next));
          current = next;
        }
        return result;
      };
    }));
    function joinTo_8($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          appendElement_0(buffer, element, transform);
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinToString_8($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_8($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    var asIterable_8 = defineInlineFunction('kotlin.kotlin.collections.asIterable_7wnvza$', function ($receiver) {
      return $receiver;
    });
    function asSequence$lambda_8(this$asSequence) {
      return function () {
        return this$asSequence.iterator();
      };
    }
    function asSequence_8($receiver) {
      return new Sequence$ObjectLiteral_0(asSequence$lambda_8($receiver));
    }
    function average_11($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_12($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_13($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_14($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_15($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_16($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function sum_11($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element;
      }
      return sum;
    }
    function sum_12($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element;
      }
      return sum;
    }
    function sum_13($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element | 0;
      }
      return sum;
    }
    function sum_14($receiver) {
      var tmp$;
      var sum = L0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum.add(element);
      }
      return sum;
    }
    function sum_15($receiver) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
      }
      return sum;
    }
    function sum_16($receiver) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
      }
      return sum;
    }
    function maxOf(a, b, c, comparator) {
      return maxOf_0(a, maxOf_0(b, c, comparator), comparator);
    }
    function maxOf_0(a, b, comparator) {
      return comparator.compare(a, b) >= 0 ? a : b;
    }
    function minOf(a, b, c, comparator) {
      return minOf_0(a, minOf_0(b, c, comparator), comparator);
    }
    function minOf_0(a, b, comparator) {
      return comparator.compare(a, b) <= 0 ? a : b;
    }
    function toList_9($receiver) {
      if ($receiver.size === 0)
        return emptyList();
      var iterator = $receiver.entries.iterator();
      if (!iterator.hasNext())
        return emptyList();
      var first = iterator.next();
      if (!iterator.hasNext()) {
        return listOf(new Pair(first.key, first.value));
      }var result = ArrayList_init_0($receiver.size);
      result.add_11rb$(new Pair(first.key, first.value));
      do {
        var $receiver_0 = iterator.next();
        result.add_11rb$(new Pair($receiver_0.key, $receiver_0.value));
      }
       while (iterator.hasNext());
      return result;
    }
    var flatMap_9 = defineInlineFunction('kotlin.kotlin.collections.flatMap_2r9935$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_9 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_qdz8ho$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var map_9 = defineInlineFunction('kotlin.kotlin.collections.map_8169ik$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var mapNotNull_1 = defineInlineFunction('kotlin.kotlin.collections.mapNotNull_9b72hb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapNotNullTo_1 = defineInlineFunction('kotlin.kotlin.collections.mapNotNullTo_ir6y9a$', wrapFunction(function () {
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapTo_9 = defineInlineFunction('kotlin.kotlin.collections.mapTo_qxe4nl$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var all_9 = defineInlineFunction('kotlin.kotlin.collections.all_9peqz9$', function ($receiver, predicate) {
      var tmp$;
      if ($receiver.isEmpty())
        return true;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    function any_19($receiver) {
      return !$receiver.isEmpty();
    }
    var any_20 = defineInlineFunction('kotlin.kotlin.collections.any_9peqz9$', function ($receiver, predicate) {
      var tmp$;
      if ($receiver.isEmpty())
        return false;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    var count_20 = defineInlineFunction('kotlin.kotlin.collections.count_abgq59$', function ($receiver) {
      return $receiver.size;
    });
    var count_21 = defineInlineFunction('kotlin.kotlin.collections.count_9peqz9$', function ($receiver, predicate) {
      var tmp$;
      if ($receiver.isEmpty())
        return 0;
      var count = 0;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var forEach_9 = defineInlineFunction('kotlin.kotlin.collections.forEach_62casv$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var maxBy_9 = defineInlineFunction('kotlin.kotlin.collections.maxBy_44nibo$', function ($receiver, selector) {
      var $receiver_0 = $receiver.entries;
      var maxBy$result;
      maxBy$break: do {
        var iterator = $receiver_0.iterator();
        if (!iterator.hasNext()) {
          maxBy$result = null;
          break maxBy$break;
        }var maxElem = iterator.next();
        if (!iterator.hasNext()) {
          maxBy$result = maxElem;
          break maxBy$break;
        }var maxValue = selector(maxElem);
        do {
          var e = iterator.next();
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
         while (iterator.hasNext());
        maxBy$result = maxElem;
      }
       while (false);
      return maxBy$result;
    });
    var maxWith_9 = defineInlineFunction('kotlin.kotlin.collections.maxWith_e3q53g$', wrapFunction(function () {
      var maxWith = _.kotlin.collections.maxWith_eknfly$;
      return function ($receiver, comparator) {
        return maxWith($receiver.entries, comparator);
      };
    }));
    var minBy_9 = defineInlineFunction('kotlin.kotlin.collections.minBy_44nibo$', function ($receiver, selector) {
      var $receiver_0 = $receiver.entries;
      var minBy$result;
      minBy$break: do {
        var iterator = $receiver_0.iterator();
        if (!iterator.hasNext()) {
          minBy$result = null;
          break minBy$break;
        }var minElem = iterator.next();
        if (!iterator.hasNext()) {
          minBy$result = minElem;
          break minBy$break;
        }var minValue = selector(minElem);
        do {
          var e = iterator.next();
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
         while (iterator.hasNext());
        minBy$result = minElem;
      }
       while (false);
      return minBy$result;
    });
    function minWith_9($receiver, comparator) {
      return minWith_8($receiver.entries, comparator);
    }
    function none_19($receiver) {
      return $receiver.isEmpty();
    }
    var none_20 = defineInlineFunction('kotlin.kotlin.collections.none_9peqz9$', function ($receiver, predicate) {
      var tmp$;
      if ($receiver.isEmpty())
        return true;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    var onEach_0 = defineInlineFunction('kotlin.kotlin.collections.onEach_bdwhnn$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
      return $receiver;
    });
    var asIterable_9 = defineInlineFunction('kotlin.kotlin.collections.asIterable_abgq59$', function ($receiver) {
      return $receiver.entries;
    });
    function asSequence_9($receiver) {
      return asSequence_8($receiver.entries);
    }
    var random_19 = defineInlineFunction('kotlin.kotlin.ranges.random_9tsm8a$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.ranges.random_xmiyix$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_20 = defineInlineFunction('kotlin.kotlin.ranges.random_37ivyf$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.ranges.random_6753zu$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_21 = defineInlineFunction('kotlin.kotlin.ranges.random_m1hxcj$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.ranges.random_bx1m1g$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_22($receiver, random) {
      try {
        return nextInt(random, $receiver);
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          throw new NoSuchElementException(e.message);
        } else
          throw e;
      }
    }
    function random_23($receiver, random) {
      try {
        return nextLong(random, $receiver);
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          throw new NoSuchElementException(e.message);
        } else
          throw e;
      }
    }
    function random_24($receiver, random) {
      try {
        return toChar(random.nextInt_vux9f0$($receiver.first | 0, ($receiver.last | 0) + 1 | 0));
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          throw new NoSuchElementException(e.message);
        } else
          throw e;
      }
    }
    var randomOrNull_19 = defineInlineFunction('kotlin.kotlin.ranges.randomOrNull_9tsm8a$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.ranges.randomOrNull_xmiyix$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_20 = defineInlineFunction('kotlin.kotlin.ranges.randomOrNull_37ivyf$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.ranges.randomOrNull_6753zu$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_21 = defineInlineFunction('kotlin.kotlin.ranges.randomOrNull_m1hxcj$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.ranges.randomOrNull_bx1m1g$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_22($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return nextInt(random, $receiver);
    }
    function randomOrNull_23($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return nextLong(random, $receiver);
    }
    function randomOrNull_24($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return toChar(random.nextInt_vux9f0$($receiver.first | 0, ($receiver.last | 0) + 1 | 0));
    }
    var contains_9 = defineInlineFunction('kotlin.kotlin.ranges.contains_j7m49l$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    var contains_10 = defineInlineFunction('kotlin.kotlin.ranges.contains_zgs5kf$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    var contains_11 = defineInlineFunction('kotlin.kotlin.ranges.contains_zdvzsf$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    function contains_12($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_13($receiver, value) {
      return $receiver.contains_mef7kx$(Kotlin.Long.fromInt(value));
    }
    function contains_14($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_15($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_16($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_17($receiver, value) {
      var it = toIntExactOrNull_0(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_18($receiver, value) {
      var it = toLongExactOrNull(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_19($receiver, value) {
      var it = toByteExactOrNull_2(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_20($receiver, value) {
      var it = toShortExactOrNull_1(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_21($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_22($receiver, value) {
      var it = toIntExactOrNull_1(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_23($receiver, value) {
      var it = toLongExactOrNull_0(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_24($receiver, value) {
      var it = toByteExactOrNull_3(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_25($receiver, value) {
      var it = toShortExactOrNull_2(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_26($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_27($receiver, value) {
      return $receiver.contains_mef7kx$(Kotlin.Long.fromInt(value));
    }
    function contains_28($receiver, value) {
      var it = toByteExactOrNull(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_29($receiver, value) {
      var it = toShortExactOrNull(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_30($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_31($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_32($receiver, value) {
      var it = toIntExactOrNull(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_33($receiver, value) {
      var it = toByteExactOrNull_0(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_34($receiver, value) {
      var it = toShortExactOrNull_0(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_35($receiver, value) {
      return $receiver.contains_mef7kx$(value.toNumber());
    }
    function contains_36($receiver, value) {
      return $receiver.contains_mef7kx$(value.toNumber());
    }
    function contains_37($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_38($receiver, value) {
      return $receiver.contains_mef7kx$(Kotlin.Long.fromInt(value));
    }
    function contains_39($receiver, value) {
      var it = toByteExactOrNull_1(value);
      return it != null ? $receiver.contains_mef7kx$(it) : false;
    }
    function contains_40($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function contains_41($receiver, value) {
      return $receiver.contains_mef7kx$(value);
    }
    function downTo($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_0($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver, Kotlin.Long.fromInt(to), L_1);
    }
    function downTo_1($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_2($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_3($receiver, to) {
      return CharProgression$Companion_getInstance().fromClosedRange_ayra44$($receiver, to, -1);
    }
    function downTo_4($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_5($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver, Kotlin.Long.fromInt(to), L_1);
    }
    function downTo_6($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_7($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_8($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$(Kotlin.Long.fromInt($receiver), to, L_1);
    }
    function downTo_9($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver, to, L_1);
    }
    function downTo_10($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$(Kotlin.Long.fromInt($receiver), to, L_1);
    }
    function downTo_11($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$(Kotlin.Long.fromInt($receiver), to, L_1);
    }
    function downTo_12($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_13($receiver, to) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver, Kotlin.Long.fromInt(to), L_1);
    }
    function downTo_14($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function downTo_15($receiver, to) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver, to, -1);
    }
    function reversed_9($receiver) {
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver.last, $receiver.first, -$receiver.step | 0);
    }
    function reversed_10($receiver) {
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver.last, $receiver.first, $receiver.step.unaryMinus());
    }
    function reversed_11($receiver) {
      return CharProgression$Companion_getInstance().fromClosedRange_ayra44$($receiver.last, $receiver.first, -$receiver.step | 0);
    }
    function step($receiver, step) {
      checkStepIsPositive(step > 0, step);
      return IntProgression$Companion_getInstance().fromClosedRange_qt1dr2$($receiver.first, $receiver.last, $receiver.step > 0 ? step : -step | 0);
    }
    function step_0($receiver, step) {
      checkStepIsPositive(step.toNumber() > 0, step);
      return LongProgression$Companion_getInstance().fromClosedRange_b9bd0d$($receiver.first, $receiver.last, $receiver.step.toNumber() > 0 ? step : step.unaryMinus());
    }
    function step_1($receiver, step) {
      checkStepIsPositive(step > 0, step);
      return CharProgression$Companion_getInstance().fromClosedRange_ayra44$($receiver.first, $receiver.last, $receiver.step > 0 ? step : -step | 0);
    }
    function toByteExactOrNull($receiver) {
      return -128 <= $receiver && $receiver <= 127 ? toByte($receiver) : null;
    }
    function toByteExactOrNull_0($receiver) {
      return L_128.lessThanOrEqual($receiver) && $receiver.lessThanOrEqual(L127) ? toByte($receiver.toInt()) : null;
    }
    function toByteExactOrNull_1($receiver) {
      return contains_37(new IntRange(kotlin_js_internal_ByteCompanionObject.MIN_VALUE, kotlin_js_internal_ByteCompanionObject.MAX_VALUE), $receiver) ? toByte($receiver) : null;
    }
    function toByteExactOrNull_2($receiver) {
      return rangeTo_0(kotlin_js_internal_ByteCompanionObject.MIN_VALUE, kotlin_js_internal_ByteCompanionObject.MAX_VALUE).contains_mef7kx$($receiver) ? toByte(numberToInt($receiver)) : null;
    }
    function toByteExactOrNull_3($receiver) {
      return rangeTo_1(kotlin_js_internal_ByteCompanionObject.MIN_VALUE, kotlin_js_internal_ByteCompanionObject.MAX_VALUE).contains_mef7kx$($receiver) ? toByte(numberToInt($receiver)) : null;
    }
    function toIntExactOrNull($receiver) {
      return L_2147483648.lessThanOrEqual($receiver) && $receiver.lessThanOrEqual(L2147483647) ? $receiver.toInt() : null;
    }
    function toIntExactOrNull_0($receiver) {
      return rangeTo_0(-2147483648, 2147483647).contains_mef7kx$($receiver) ? numberToInt($receiver) : null;
    }
    function toIntExactOrNull_1($receiver) {
      return rangeTo_1(-2147483648, 2147483647).contains_mef7kx$($receiver) ? numberToInt($receiver) : null;
    }
    function toLongExactOrNull($receiver) {
      return rangeTo_0(Long$Companion$MIN_VALUE.toNumber(), Long$Companion$MAX_VALUE.toNumber()).contains_mef7kx$($receiver) ? Kotlin.Long.fromNumber($receiver) : null;
    }
    function toLongExactOrNull_0($receiver) {
      return rangeTo_1(Long$Companion$MIN_VALUE.toNumber(), Long$Companion$MAX_VALUE.toNumber()).contains_mef7kx$($receiver) ? Kotlin.Long.fromNumber($receiver) : null;
    }
    function toShortExactOrNull($receiver) {
      return -32768 <= $receiver && $receiver <= 32767 ? toShort($receiver) : null;
    }
    function toShortExactOrNull_0($receiver) {
      return L_32768.lessThanOrEqual($receiver) && $receiver.lessThanOrEqual(L32767) ? toShort($receiver.toInt()) : null;
    }
    function toShortExactOrNull_1($receiver) {
      return rangeTo_0(kotlin_js_internal_ShortCompanionObject.MIN_VALUE, kotlin_js_internal_ShortCompanionObject.MAX_VALUE).contains_mef7kx$($receiver) ? toShort(numberToInt($receiver)) : null;
    }
    function toShortExactOrNull_2($receiver) {
      return rangeTo_1(kotlin_js_internal_ShortCompanionObject.MIN_VALUE, kotlin_js_internal_ShortCompanionObject.MAX_VALUE).contains_mef7kx$($receiver) ? toShort(numberToInt($receiver)) : null;
    }
    function until($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_0($receiver, to) {
      return $receiver.rangeTo(Kotlin.Long.fromInt(to).subtract(Kotlin.Long.fromInt(1)));
    }
    function until_1($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_2($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_3($receiver, to) {
      if (to <= 0)
        return CharRange$Companion_getInstance().EMPTY;
      return new CharRange($receiver, toChar(to - 1));
    }
    function until_4($receiver, to) {
      if (to <= -2147483648)
        return IntRange$Companion_getInstance().EMPTY;
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_5($receiver, to) {
      return $receiver.rangeTo(Kotlin.Long.fromInt(to).subtract(Kotlin.Long.fromInt(1)));
    }
    function until_6($receiver, to) {
      if (to <= -2147483648)
        return IntRange$Companion_getInstance().EMPTY;
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_7($receiver, to) {
      if (to <= -2147483648)
        return IntRange$Companion_getInstance().EMPTY;
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_8($receiver, to) {
      if (to.compareTo_11rb$(Long$Companion$MIN_VALUE) <= 0)
        return LongRange$Companion_getInstance().EMPTY;
      return Kotlin.Long.fromInt($receiver).rangeTo(to.subtract(Kotlin.Long.fromInt(1)));
    }
    function until_9($receiver, to) {
      if (to.compareTo_11rb$(Long$Companion$MIN_VALUE) <= 0)
        return LongRange$Companion_getInstance().EMPTY;
      return $receiver.rangeTo(to.subtract(Kotlin.Long.fromInt(1)));
    }
    function until_10($receiver, to) {
      if (to.compareTo_11rb$(Long$Companion$MIN_VALUE) <= 0)
        return LongRange$Companion_getInstance().EMPTY;
      return Kotlin.Long.fromInt($receiver).rangeTo(to.subtract(Kotlin.Long.fromInt(1)));
    }
    function until_11($receiver, to) {
      if (to.compareTo_11rb$(Long$Companion$MIN_VALUE) <= 0)
        return LongRange$Companion_getInstance().EMPTY;
      return Kotlin.Long.fromInt($receiver).rangeTo(to.subtract(Kotlin.Long.fromInt(1)));
    }
    function until_12($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_13($receiver, to) {
      return $receiver.rangeTo(Kotlin.Long.fromInt(to).subtract(Kotlin.Long.fromInt(1)));
    }
    function until_14($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function until_15($receiver, to) {
      return new IntRange($receiver, to - 1 | 0);
    }
    function coerceAtLeast($receiver, minimumValue) {
      return Kotlin.compareTo($receiver, minimumValue) < 0 ? minimumValue : $receiver;
    }
    function coerceAtLeast_0($receiver, minimumValue) {
      return $receiver < minimumValue ? minimumValue : $receiver;
    }
    function coerceAtLeast_1($receiver, minimumValue) {
      return $receiver < minimumValue ? minimumValue : $receiver;
    }
    function coerceAtLeast_2($receiver, minimumValue) {
      return $receiver < minimumValue ? minimumValue : $receiver;
    }
    function coerceAtLeast_3($receiver, minimumValue) {
      return $receiver.compareTo_11rb$(minimumValue) < 0 ? minimumValue : $receiver;
    }
    function coerceAtLeast_4($receiver, minimumValue) {
      return $receiver < minimumValue ? minimumValue : $receiver;
    }
    function coerceAtLeast_5($receiver, minimumValue) {
      return $receiver < minimumValue ? minimumValue : $receiver;
    }
    function coerceAtMost($receiver, maximumValue) {
      return Kotlin.compareTo($receiver, maximumValue) > 0 ? maximumValue : $receiver;
    }
    function coerceAtMost_0($receiver, maximumValue) {
      return $receiver > maximumValue ? maximumValue : $receiver;
    }
    function coerceAtMost_1($receiver, maximumValue) {
      return $receiver > maximumValue ? maximumValue : $receiver;
    }
    function coerceAtMost_2($receiver, maximumValue) {
      return $receiver > maximumValue ? maximumValue : $receiver;
    }
    function coerceAtMost_3($receiver, maximumValue) {
      return $receiver.compareTo_11rb$(maximumValue) > 0 ? maximumValue : $receiver;
    }
    function coerceAtMost_4($receiver, maximumValue) {
      return $receiver > maximumValue ? maximumValue : $receiver;
    }
    function coerceAtMost_5($receiver, maximumValue) {
      return $receiver > maximumValue ? maximumValue : $receiver;
    }
    function coerceIn($receiver, minimumValue, maximumValue) {
      if (minimumValue !== null && maximumValue !== null) {
        if (Kotlin.compareTo(minimumValue, maximumValue) > 0)
          throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + toString(maximumValue) + ' is less than minimum ' + toString(minimumValue) + '.');
        if (Kotlin.compareTo($receiver, minimumValue) < 0)
          return minimumValue;
        if (Kotlin.compareTo($receiver, maximumValue) > 0)
          return maximumValue;
      } else {
        if (minimumValue !== null && Kotlin.compareTo($receiver, minimumValue) < 0)
          return minimumValue;
        if (maximumValue !== null && Kotlin.compareTo($receiver, maximumValue) > 0)
          return maximumValue;
      }
      return $receiver;
    }
    function coerceIn_0($receiver, minimumValue, maximumValue) {
      if (minimumValue > maximumValue)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if ($receiver < minimumValue)
        return minimumValue;
      if ($receiver > maximumValue)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_1($receiver, minimumValue, maximumValue) {
      if (minimumValue > maximumValue)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if ($receiver < minimumValue)
        return minimumValue;
      if ($receiver > maximumValue)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_2($receiver, minimumValue, maximumValue) {
      if (minimumValue > maximumValue)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if ($receiver < minimumValue)
        return minimumValue;
      if ($receiver > maximumValue)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_3($receiver, minimumValue, maximumValue) {
      if (minimumValue.compareTo_11rb$(maximumValue) > 0)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue.toString() + ' is less than minimum ' + minimumValue.toString() + '.');
      if ($receiver.compareTo_11rb$(minimumValue) < 0)
        return minimumValue;
      if ($receiver.compareTo_11rb$(maximumValue) > 0)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_4($receiver, minimumValue, maximumValue) {
      if (minimumValue > maximumValue)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if ($receiver < minimumValue)
        return minimumValue;
      if ($receiver > maximumValue)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_5($receiver, minimumValue, maximumValue) {
      if (minimumValue > maximumValue)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if ($receiver < minimumValue)
        return minimumValue;
      if ($receiver > maximumValue)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_6($receiver, range) {
      var tmp$;
      if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if (range.lessThanOrEquals_n65qkk$($receiver, range.start) && !range.lessThanOrEquals_n65qkk$(range.start, $receiver))
        tmp$ = range.start;
      else if (range.lessThanOrEquals_n65qkk$(range.endInclusive, $receiver) && !range.lessThanOrEquals_n65qkk$($receiver, range.endInclusive))
        tmp$ = range.endInclusive;
      else
        tmp$ = $receiver;
      return tmp$;
    }
    function coerceIn_7($receiver, range) {
      var tmp$;
      if (Kotlin.isType(range, ClosedFloatingPointRange)) {
        return coerceIn_6($receiver, range);
      }if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if (Kotlin.compareTo($receiver, range.start) < 0)
        tmp$ = range.start;
      else if (Kotlin.compareTo($receiver, range.endInclusive) > 0)
        tmp$ = range.endInclusive;
      else
        tmp$ = $receiver;
      return tmp$;
    }
    function coerceIn_8($receiver, range) {
      var tmp$;
      if (Kotlin.isType(range, ClosedFloatingPointRange)) {
        return coerceIn_6($receiver, range);
      }if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if ($receiver < range.start)
        tmp$ = range.start;
      else if ($receiver > range.endInclusive)
        tmp$ = range.endInclusive;
      else
        tmp$ = $receiver;
      return tmp$;
    }
    function coerceIn_9($receiver, range) {
      var tmp$;
      if (Kotlin.isType(range, ClosedFloatingPointRange)) {
        return coerceIn_6($receiver, range);
      }if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if ($receiver.compareTo_11rb$(range.start) < 0)
        tmp$ = range.start;
      else if ($receiver.compareTo_11rb$(range.endInclusive) > 0)
        tmp$ = range.endInclusive;
      else
        tmp$ = $receiver;
      return tmp$;
    }
    function Iterable$ObjectLiteral_0(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Iterable$ObjectLiteral_0.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Iterable$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterable]};
    function contains_42($receiver, element) {
      return indexOf_10($receiver, element) >= 0;
    }
    function elementAt$lambda_0(closure$index) {
      return function (it) {
        throw new IndexOutOfBoundsException("Sequence doesn't contain element at index " + closure$index + '.');
      };
    }
    function elementAt_1($receiver, index) {
      return elementAtOrElse_10($receiver, index, elementAt$lambda_0(index));
    }
    function elementAtOrElse_10($receiver, index, defaultValue) {
      var tmp$;
      if (index < 0)
        return defaultValue(index);
      var iterator = $receiver.iterator();
      var count = 0;
      while (iterator.hasNext()) {
        var element = iterator.next();
        if (index === (tmp$ = count, count = tmp$ + 1 | 0, tmp$))
          return element;
      }
      return defaultValue(index);
    }
    function elementAtOrNull_10($receiver, index) {
      var tmp$;
      if (index < 0)
        return null;
      var iterator = $receiver.iterator();
      var count = 0;
      while (iterator.hasNext()) {
        var element = iterator.next();
        if (index === (tmp$ = count, count = tmp$ + 1 | 0, tmp$))
          return element;
      }
      return null;
    }
    var find_9 = defineInlineFunction('kotlin.kotlin.sequences.find_euau3h$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var findLast_10 = defineInlineFunction('kotlin.kotlin.sequences.findLast_euau3h$', function ($receiver, predicate) {
      var tmp$;
      var last = null;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          last = element;
        }}
      return last;
    });
    function first_20($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        throw new NoSuchElementException('Sequence is empty.');
      return iterator.next();
    }
    var first_21 = defineInlineFunction('kotlin.kotlin.sequences.first_euau3h$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Sequence contains no element matching the predicate.');
      };
    }));
    function firstOrNull_20($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      return iterator.next();
    }
    var firstOrNull_21 = defineInlineFunction('kotlin.kotlin.sequences.firstOrNull_euau3h$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    function indexOf_10($receiver, element) {
      var tmp$;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        checkIndexOverflow(index);
        if (equals(element, item))
          return index;
        index = index + 1 | 0;
      }
      return -1;
    }
    var indexOfFirst_10 = defineInlineFunction('kotlin.kotlin.sequences.indexOfFirst_euau3h$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          checkIndexOverflow(index);
          if (predicate(item))
            return index;
          index = index + 1 | 0;
        }
        return -1;
      };
    }));
    var indexOfLast_10 = defineInlineFunction('kotlin.kotlin.sequences.indexOfLast_euau3h$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        var lastIndex = -1;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          checkIndexOverflow(index);
          if (predicate(item))
            lastIndex = index;
          index = index + 1 | 0;
        }
        return lastIndex;
      };
    }));
    function last_21($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        throw new NoSuchElementException('Sequence is empty.');
      var last = iterator.next();
      while (iterator.hasNext())
        last = iterator.next();
      return last;
    }
    var last_22 = defineInlineFunction('kotlin.kotlin.sequences.last_euau3h$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var last = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            last = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Sequence contains no element matching the predicate.');
        return (tmp$_0 = last) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      };
    }));
    function lastIndexOf_10($receiver, element) {
      var tmp$;
      var lastIndex = -1;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        checkIndexOverflow(index);
        if (equals(element, item))
          lastIndex = index;
        index = index + 1 | 0;
      }
      return lastIndex;
    }
    function lastOrNull_21($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var last = iterator.next();
      while (iterator.hasNext())
        last = iterator.next();
      return last;
    }
    var lastOrNull_22 = defineInlineFunction('kotlin.kotlin.sequences.lastOrNull_euau3h$', function ($receiver, predicate) {
      var tmp$;
      var last = null;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          last = element;
        }}
      return last;
    });
    function single_20($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        throw new NoSuchElementException('Sequence is empty.');
      var single = iterator.next();
      if (iterator.hasNext())
        throw IllegalArgumentException_init_0('Sequence has more than one element.');
      return single;
    }
    var single_21 = defineInlineFunction('kotlin.kotlin.sequences.single_euau3h$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Sequence contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Sequence contains no element matching the predicate.');
        return (tmp$_0 = single) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      };
    }));
    function singleOrNull_20($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var single = iterator.next();
      if (iterator.hasNext())
        return null;
      return single;
    }
    var singleOrNull_21 = defineInlineFunction('kotlin.kotlin.sequences.singleOrNull_euau3h$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    function drop_9($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        tmp$ = $receiver;
      else if (Kotlin.isType($receiver, DropTakeSequence))
        tmp$ = $receiver.drop_za3lpa$(n);
      else
        tmp$ = new DropSequence($receiver, n);
      return tmp$;
    }
    function dropWhile_9($receiver, predicate) {
      return new DropWhileSequence($receiver, predicate);
    }
    function filter_9($receiver, predicate) {
      return new FilteringSequence($receiver, true, predicate);
    }
    function filterIndexed$lambda(closure$predicate) {
      return function (it) {
        return closure$predicate(it.index, it.value);
      };
    }
    function filterIndexed$lambda_0(it) {
      return it.value;
    }
    function filterIndexed_9($receiver, predicate) {
      return new TransformingSequence(new FilteringSequence(new IndexingSequence($receiver), true, filterIndexed$lambda(predicate)), filterIndexed$lambda_0);
    }
    var filterIndexedTo_9 = defineInlineFunction('kotlin.kotlin.sequences.filterIndexedTo_t68vbo$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, predicate) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIsInstance_1 = defineInlineFunction('kotlin.kotlin.sequences.filterIsInstance_1ivc31$', wrapFunction(function () {
      var filter = _.kotlin.sequences.filter_euau3h$;
      var Sequence = _.kotlin.sequences.Sequence;
      var throwCCE = Kotlin.throwCCE;
      function filterIsInstance$lambda(typeClosure$R, isR) {
        return function (it) {
          return isR(it);
        };
      }
      return function (R_0, isR, $receiver) {
        var tmp$;
        return Kotlin.isType(tmp$ = filter($receiver, filterIsInstance$lambda(R_0, isR)), Sequence) ? tmp$ : throwCCE();
      };
    }));
    var filterIsInstanceTo_1 = defineInlineFunction('kotlin.kotlin.sequences.filterIsInstanceTo_e33yd4$', function (R_0, isR, $receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (isR(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    function filterNot_9($receiver, predicate) {
      return new FilteringSequence($receiver, false, predicate);
    }
    function filterNotNull$lambda(it) {
      return it == null;
    }
    function filterNotNull_1($receiver) {
      var tmp$;
      return Kotlin.isType(tmp$ = filterNot_9($receiver, filterNotNull$lambda), Sequence) ? tmp$ : throwCCE_0();
    }
    function filterNotNullTo_1($receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (element != null)
          destination.add_11rb$(element);
      }
      return destination;
    }
    var filterNotTo_9 = defineInlineFunction('kotlin.kotlin.sequences.filterNotTo_zemxx4$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_9 = defineInlineFunction('kotlin.kotlin.sequences.filterTo_zemxx4$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    function take_9($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        tmp$ = emptySequence();
      else if (Kotlin.isType($receiver, DropTakeSequence))
        tmp$ = $receiver.take_za3lpa$(n);
      else
        tmp$ = new TakeSequence($receiver, n);
      return tmp$;
    }
    function takeWhile_9($receiver, predicate) {
      return new TakeWhileSequence($receiver, predicate);
    }
    function sorted$ObjectLiteral(this$sorted) {
      this.this$sorted = this$sorted;
    }
    sorted$ObjectLiteral.prototype.iterator = function () {
      var sortedList = toMutableList_10(this.this$sorted);
      sort_14(sortedList);
      return sortedList.iterator();
    };
    sorted$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function sorted_8($receiver) {
      return new sorted$ObjectLiteral($receiver);
    }
    var sortedBy_9 = defineInlineFunction('kotlin.kotlin.sequences.sortedBy_aht3pn$', wrapFunction(function () {
      var sortedWith = _.kotlin.sequences.sortedWith_vjgqpk$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareBy$lambda(selector)));
      };
    }));
    var sortedByDescending_9 = defineInlineFunction('kotlin.kotlin.sequences.sortedByDescending_aht3pn$', wrapFunction(function () {
      var sortedWith = _.kotlin.sequences.sortedWith_vjgqpk$;
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function ($receiver, selector) {
        return sortedWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(selector)));
      };
    }));
    function sortedDescending_8($receiver) {
      return sortedWith_9($receiver, reverseOrder());
    }
    function sortedWith$ObjectLiteral(this$sortedWith, closure$comparator) {
      this.this$sortedWith = this$sortedWith;
      this.closure$comparator = closure$comparator;
    }
    sortedWith$ObjectLiteral.prototype.iterator = function () {
      var sortedList = toMutableList_10(this.this$sortedWith);
      sortWith_0(sortedList, this.closure$comparator);
      return sortedList.iterator();
    };
    sortedWith$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function sortedWith_9($receiver, comparator) {
      return new sortedWith$ObjectLiteral($receiver, comparator);
    }
    var associate_9 = defineInlineFunction('kotlin.kotlin.sequences.associate_ohgugh$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, transform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var pair = transform(element);
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associateBy_19 = defineInlineFunction('kotlin.kotlin.sequences.associateBy_z5avom$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(keySelector(element), element);
        }
        return destination;
      };
    }));
    var associateBy_20 = defineInlineFunction('kotlin.kotlin.sequences.associateBy_rpj48c$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(keySelector(element), valueTransform(element));
        }
        return destination;
      };
    }));
    var associateByTo_19 = defineInlineFunction('kotlin.kotlin.sequences.associateByTo_pdrkj5$', function ($receiver, destination, keySelector) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(keySelector(element), element);
      }
      return destination;
    });
    var associateByTo_20 = defineInlineFunction('kotlin.kotlin.sequences.associateByTo_vqogar$', function ($receiver, destination, keySelector, valueTransform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(keySelector(element), valueTransform(element));
      }
      return destination;
    });
    var associateTo_9 = defineInlineFunction('kotlin.kotlin.sequences.associateTo_xiiici$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var pair = transform(element);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      return destination;
    });
    var associateWith_0 = defineInlineFunction('kotlin.kotlin.sequences.associateWith_z5avom$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, valueSelector) {
        var result = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          result.put_xwzc9p$(element, valueSelector(element));
        }
        return result;
      };
    }));
    var associateWithTo_0 = defineInlineFunction('kotlin.kotlin.sequences.associateWithTo_uyy78t$', function ($receiver, destination, valueSelector) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(element, valueSelector(element));
      }
      return destination;
    });
    function toCollection_9($receiver, destination) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item);
      }
      return destination;
    }
    function toHashSet_9($receiver) {
      return toCollection_9($receiver, HashSet_init());
    }
    function toList_10($receiver) {
      return optimizeReadOnlyList(toMutableList_10($receiver));
    }
    function toMutableList_10($receiver) {
      return toCollection_9($receiver, ArrayList_init());
    }
    function toSet_9($receiver) {
      return optimizeReadOnlySet(toCollection_9($receiver, LinkedHashSet_init_0()));
    }
    function flatMap$lambda(it) {
      return it.iterator();
    }
    function flatMap_10($receiver, transform) {
      return new FlatteningSequence($receiver, transform, flatMap$lambda);
    }
    var flatMapTo_10 = defineInlineFunction('kotlin.kotlin.sequences.flatMapTo_skhdnd$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_tj7pfx$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var groupBy_19 = defineInlineFunction('kotlin.kotlin.sequences.groupBy_z5avom$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_20 = defineInlineFunction('kotlin.kotlin.sequences.groupBy_rpj48c$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_19 = defineInlineFunction('kotlin.kotlin.sequences.groupByTo_m5ds0u$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_20 = defineInlineFunction('kotlin.kotlin.sequences.groupByTo_r8laog$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupingBy_1 = defineInlineFunction('kotlin.kotlin.sequences.groupingBy_z5avom$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Grouping = _.kotlin.collections.Grouping;
      function groupingBy$ObjectLiteral(this$groupingBy, closure$keySelector) {
        this.this$groupingBy = this$groupingBy;
        this.closure$keySelector = closure$keySelector;
      }
      groupingBy$ObjectLiteral.prototype.sourceIterator = function () {
        return this.this$groupingBy.iterator();
      };
      groupingBy$ObjectLiteral.prototype.keyOf_11rb$ = function (element) {
        return this.closure$keySelector(element);
      };
      groupingBy$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Grouping]};
      return function ($receiver, keySelector) {
        return new groupingBy$ObjectLiteral($receiver, keySelector);
      };
    }));
    function map_10($receiver, transform) {
      return new TransformingSequence($receiver, transform);
    }
    function mapIndexed_9($receiver, transform) {
      return new TransformingIndexedSequence($receiver, transform);
    }
    function mapIndexedNotNull_1($receiver, transform) {
      return filterNotNull_1(new TransformingIndexedSequence($receiver, transform));
    }
    var mapIndexedNotNullTo_1 = defineInlineFunction('kotlin.kotlin.sequences.mapIndexedNotNullTo_eyjglh$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          var tmp$_1;
          if ((tmp$_1 = transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item)) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedTo_9 = defineInlineFunction('kotlin.kotlin.sequences.mapIndexedTo_49r4ke$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item));
        }
        return destination;
      };
    }));
    function mapNotNull_2($receiver, transform) {
      return filterNotNull_1(new TransformingSequence($receiver, transform));
    }
    var mapNotNullTo_2 = defineInlineFunction('kotlin.kotlin.sequences.mapNotNullTo_u5l3of$', wrapFunction(function () {
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var tmp$_0;
          if ((tmp$_0 = transform(element)) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapTo_10 = defineInlineFunction('kotlin.kotlin.sequences.mapTo_kntv26$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    function withIndex_9($receiver) {
      return new IndexingSequence($receiver);
    }
    function distinct$lambda(it) {
      return it;
    }
    function distinct_9($receiver) {
      return distinctBy_9($receiver, distinct$lambda);
    }
    function distinctBy_9($receiver, selector) {
      return new DistinctSequence($receiver, selector);
    }
    function toMutableSet_9($receiver) {
      var tmp$;
      var set = LinkedHashSet_init_0();
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        set.add_11rb$(item);
      }
      return set;
    }
    var all_10 = defineInlineFunction('kotlin.kotlin.sequences.all_euau3h$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    function any_21($receiver) {
      return $receiver.iterator().hasNext();
    }
    var any_22 = defineInlineFunction('kotlin.kotlin.sequences.any_euau3h$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    function count_22($receiver) {
      var tmp$;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count;
    }
    var count_23 = defineInlineFunction('kotlin.kotlin.sequences.count_euau3h$', wrapFunction(function () {
      var checkCountOverflow = _.kotlin.collections.checkCountOverflow_za3lpa$;
      return function ($receiver, predicate) {
        var tmp$;
        var count = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            checkCountOverflow((count = count + 1 | 0, count));
        }
        return count;
      };
    }));
    var fold_9 = defineInlineFunction('kotlin.kotlin.sequences.fold_azbry2$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_9 = defineInlineFunction('kotlin.kotlin.sequences.foldIndexed_wxmp26$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0;
        var index = 0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), accumulator, element);
        }
        return accumulator;
      };
    }));
    var forEach_10 = defineInlineFunction('kotlin.kotlin.sequences.forEach_o41pun$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEachIndexed_9 = defineInlineFunction('kotlin.kotlin.sequences.forEachIndexed_iyis71$', wrapFunction(function () {
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, action) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          action(checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0)), item);
        }
      };
    }));
    function max_12($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      if (isNaN_0(max))
        return max;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_0(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_13($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      if (isNaN_1(max))
        return max;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_1(e))
          return e;
        if (max < e)
          max = e;
      }
      return max;
    }
    function max_14($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (Kotlin.compareTo(max, e) < 0)
          max = e;
      }
      return max;
    }
    var maxBy_10 = defineInlineFunction('kotlin.kotlin.sequences.maxBy_aht3pn$', function ($receiver, selector) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var maxElem = iterator.next();
      if (!iterator.hasNext())
        return maxElem;
      var maxValue = selector(maxElem);
      do {
        var e = iterator.next();
        var v = selector(e);
        if (Kotlin.compareTo(maxValue, v) < 0) {
          maxElem = e;
          maxValue = v;
        }}
       while (iterator.hasNext());
      return maxElem;
    });
    function maxWith_10($receiver, comparator) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var max = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function min_12($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      if (isNaN_0(min))
        return min;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_0(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_13($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      if (isNaN_1(min))
        return min;
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (isNaN_1(e))
          return e;
        if (min > e)
          min = e;
      }
      return min;
    }
    function min_14($receiver) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (Kotlin.compareTo(min, e) > 0)
          min = e;
      }
      return min;
    }
    var minBy_10 = defineInlineFunction('kotlin.kotlin.sequences.minBy_aht3pn$', function ($receiver, selector) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var minElem = iterator.next();
      if (!iterator.hasNext())
        return minElem;
      var minValue = selector(minElem);
      do {
        var e = iterator.next();
        var v = selector(e);
        if (Kotlin.compareTo(minValue, v) > 0) {
          minElem = e;
          minValue = v;
        }}
       while (iterator.hasNext());
      return minElem;
    });
    function minWith_10($receiver, comparator) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var min = iterator.next();
      while (iterator.hasNext()) {
        var e = iterator.next();
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function none_21($receiver) {
      return !$receiver.iterator().hasNext();
    }
    var none_22 = defineInlineFunction('kotlin.kotlin.sequences.none_euau3h$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    function onEach$lambda(closure$action) {
      return function (it) {
        closure$action(it);
        return it;
      };
    }
    function onEach_1($receiver, action) {
      return map_10($receiver, onEach$lambda(action));
    }
    var reduce_9 = defineInlineFunction('kotlin.kotlin.sequences.reduce_linb1r$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function ($receiver, operation) {
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty sequence can't be reduced.");
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = operation(accumulator, iterator.next());
        }
        return accumulator;
      };
    }));
    var reduceIndexed_9 = defineInlineFunction('kotlin.kotlin.sequences.reduceIndexed_8denzp$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, operation) {
        var tmp$;
        var iterator = $receiver.iterator();
        if (!iterator.hasNext())
          throw UnsupportedOperationException_init("Empty sequence can't be reduced.");
        var index = 1;
        var accumulator = iterator.next();
        while (iterator.hasNext()) {
          accumulator = operation(checkIndexOverflow((tmp$ = index, index = tmp$ + 1 | 0, tmp$)), accumulator, iterator.next());
        }
        return accumulator;
      };
    }));
    var reduceOrNull_9 = defineInlineFunction('kotlin.kotlin.sequences.reduceOrNull_linb1r$', function ($receiver, operation) {
      var iterator = $receiver.iterator();
      if (!iterator.hasNext())
        return null;
      var accumulator = iterator.next();
      while (iterator.hasNext()) {
        accumulator = operation(accumulator, iterator.next());
      }
      return accumulator;
    });
    function Coroutine$scan$lambda(closure$initial_0, this$scan_0, closure$operation_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$closure$initial = closure$initial_0;
      this.local$this$scan = this$scan_0;
      this.local$closure$operation = closure$operation_0;
      this.local$tmp$ = void 0;
      this.local$accumulator = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$scan$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$scan$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$scan$lambda.prototype.constructor = Coroutine$scan$lambda;
    Coroutine$scan$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              this.state_0 = 2;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$closure$initial, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 1:
              throw this.exception_0;
            case 2:
              this.local$accumulator = this.local$closure$initial;
              this.local$tmp$ = this.local$this$scan.iterator();
              this.state_0 = 3;
              continue;
            case 3:
              if (!this.local$tmp$.hasNext()) {
                this.state_0 = 5;
                continue;
              }
              var element = this.local$tmp$.next();
              this.local$accumulator = this.local$closure$operation(this.local$accumulator, element);
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.state_0 = 3;
              continue;
            case 5:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function scan$lambda(closure$initial_0, this$scan_0, closure$operation_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$scan$lambda(closure$initial_0, this$scan_0, closure$operation_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function scan_9($receiver, initial, operation) {
      return sequence(scan$lambda(initial, $receiver, operation));
    }
    function Coroutine$scanIndexed$lambda(closure$initial_0, this$scanIndexed_0, closure$operation_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$closure$initial = closure$initial_0;
      this.local$this$scanIndexed = this$scanIndexed_0;
      this.local$closure$operation = closure$operation_0;
      this.local$tmp$ = void 0;
      this.local$index = void 0;
      this.local$accumulator = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$scanIndexed$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$scanIndexed$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$scanIndexed$lambda.prototype.constructor = Coroutine$scanIndexed$lambda;
    Coroutine$scanIndexed$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              var tmp$;
              this.state_0 = 2;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$closure$initial, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 1:
              throw this.exception_0;
            case 2:
              this.local$index = 0;
              this.local$accumulator = this.local$closure$initial;
              this.local$tmp$ = this.local$this$scanIndexed.iterator();
              this.state_0 = 3;
              continue;
            case 3:
              if (!this.local$tmp$.hasNext()) {
                this.state_0 = 5;
                continue;
              }
              var element = this.local$tmp$.next();
              this.local$accumulator = this.local$closure$operation(checkIndexOverflow((tmp$ = this.local$index, this.local$index = tmp$ + 1 | 0, tmp$)), this.local$accumulator, element);
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.state_0 = 3;
              continue;
            case 5:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function scanIndexed$lambda(closure$initial_0, this$scanIndexed_0, closure$operation_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$scanIndexed$lambda(closure$initial_0, this$scanIndexed_0, closure$operation_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function scanIndexed_9($receiver, initial, operation) {
      return sequence(scanIndexed$lambda(initial, $receiver, operation));
    }
    function Coroutine$scanReduce$lambda(this$scanReduce_0, closure$operation_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$this$scanReduce = this$scanReduce_0;
      this.local$closure$operation = closure$operation_0;
      this.local$iterator = void 0;
      this.local$accumulator = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$scanReduce$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$scanReduce$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$scanReduce$lambda.prototype.constructor = Coroutine$scanReduce$lambda;
    Coroutine$scanReduce$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              this.local$iterator = this.local$this$scanReduce.iterator();
              if (this.local$iterator.hasNext()) {
                this.local$accumulator = this.local$iterator.next();
                this.state_0 = 2;
                this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              } else {
                this.state_0 = 6;
                continue;
              }

            case 1:
              throw this.exception_0;
            case 2:
              this.state_0 = 3;
              continue;
            case 3:
              if (!this.local$iterator.hasNext()) {
                this.state_0 = 5;
                continue;
              }
              this.local$accumulator = this.local$closure$operation(this.local$accumulator, this.local$iterator.next());
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.state_0 = 3;
              continue;
            case 5:
              this.state_0 = 6;
              continue;
            case 6:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function scanReduce$lambda(this$scanReduce_0, closure$operation_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$scanReduce$lambda(this$scanReduce_0, closure$operation_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function scanReduce_9($receiver, operation) {
      return sequence(scanReduce$lambda($receiver, operation));
    }
    function Coroutine$scanReduceIndexed$lambda(this$scanReduceIndexed_0, closure$operation_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$this$scanReduceIndexed = this$scanReduceIndexed_0;
      this.local$closure$operation = closure$operation_0;
      this.local$iterator = void 0;
      this.local$accumulator = void 0;
      this.local$index = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$scanReduceIndexed$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$scanReduceIndexed$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$scanReduceIndexed$lambda.prototype.constructor = Coroutine$scanReduceIndexed$lambda;
    Coroutine$scanReduceIndexed$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              var tmp$;
              this.local$iterator = this.local$this$scanReduceIndexed.iterator();
              if (this.local$iterator.hasNext()) {
                this.local$accumulator = this.local$iterator.next();
                this.state_0 = 2;
                this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              } else {
                this.state_0 = 6;
                continue;
              }

            case 1:
              throw this.exception_0;
            case 2:
              this.local$index = 1;
              this.state_0 = 3;
              continue;
            case 3:
              if (!this.local$iterator.hasNext()) {
                this.state_0 = 5;
                continue;
              }
              this.local$accumulator = this.local$closure$operation(checkIndexOverflow((tmp$ = this.local$index, this.local$index = tmp$ + 1 | 0, tmp$)), this.local$accumulator, this.local$iterator.next());
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$accumulator, this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.state_0 = 3;
              continue;
            case 5:
              this.state_0 = 6;
              continue;
            case 6:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function scanReduceIndexed$lambda(this$scanReduceIndexed_0, closure$operation_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$scanReduceIndexed$lambda(this$scanReduceIndexed_0, closure$operation_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function scanReduceIndexed_9($receiver, operation) {
      return sequence(scanReduceIndexed$lambda($receiver, operation));
    }
    var sumBy_9 = defineInlineFunction('kotlin.kotlin.sequences.sumBy_gvemys$', function ($receiver, selector) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + selector(element) | 0;
      }
      return sum;
    });
    var sumByDouble_9 = defineInlineFunction('kotlin.kotlin.sequences.sumByDouble_b4hqx8$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    function requireNoNulls$lambda(this$requireNoNulls) {
      return function (it) {
        if (it == null) {
          throw IllegalArgumentException_init_0('null element found in ' + this$requireNoNulls + '.');
        }return it;
      };
    }
    function requireNoNulls_2($receiver) {
      return map_10($receiver, requireNoNulls$lambda($receiver));
    }
    function chunked_1($receiver, size) {
      return windowed_1($receiver, size, size, true);
    }
    function chunked_2($receiver, size, transform) {
      return windowed_2($receiver, size, size, true, transform);
    }
    function minus$ObjectLiteral(this$minus, closure$element) {
      this.this$minus = this$minus;
      this.closure$element = closure$element;
    }
    function minus$ObjectLiteral$iterator$lambda(closure$removed, closure$element) {
      return function (it) {
        if (!closure$removed.v && equals(it, closure$element)) {
          closure$removed.v = true;
          return false;
        } else
          return true;
      };
    }
    minus$ObjectLiteral.prototype.iterator = function () {
      var removed = {v: false};
      return filter_9(this.this$minus, minus$ObjectLiteral$iterator$lambda(removed, this.closure$element)).iterator();
    };
    minus$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function minus_3($receiver, element) {
      return new minus$ObjectLiteral($receiver, element);
    }
    function minus$ObjectLiteral_0(closure$elements, this$minus) {
      this.closure$elements = closure$elements;
      this.this$minus = this$minus;
    }
    function minus$ObjectLiteral$iterator$lambda_0(closure$other) {
      return function (it) {
        return closure$other.contains_11rb$(it);
      };
    }
    minus$ObjectLiteral_0.prototype.iterator = function () {
      var other = toHashSet(this.closure$elements);
      return filterNot_9(this.this$minus, minus$ObjectLiteral$iterator$lambda_0(other)).iterator();
    };
    minus$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function minus_4($receiver, elements) {
      if (elements.length === 0)
        return $receiver;
      return new minus$ObjectLiteral_0(elements, $receiver);
    }
    function minus$ObjectLiteral_1(closure$elements, this$minus) {
      this.closure$elements = closure$elements;
      this.this$minus = this$minus;
    }
    function minus$ObjectLiteral$iterator$lambda_1(closure$other) {
      return function (it) {
        return closure$other.contains_11rb$(it);
      };
    }
    minus$ObjectLiteral_1.prototype.iterator = function () {
      var other = convertToSetForSetOperation(this.closure$elements);
      if (other.isEmpty())
        return this.this$minus.iterator();
      else
        return filterNot_9(this.this$minus, minus$ObjectLiteral$iterator$lambda_1(other)).iterator();
    };
    minus$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function minus_5($receiver, elements) {
      return new minus$ObjectLiteral_1(elements, $receiver);
    }
    function minus$ObjectLiteral_2(closure$elements, this$minus) {
      this.closure$elements = closure$elements;
      this.this$minus = this$minus;
    }
    function minus$ObjectLiteral$iterator$lambda_2(closure$other) {
      return function (it) {
        return closure$other.contains_11rb$(it);
      };
    }
    minus$ObjectLiteral_2.prototype.iterator = function () {
      var other = toHashSet_9(this.closure$elements);
      if (other.isEmpty())
        return this.this$minus.iterator();
      else
        return filterNot_9(this.this$minus, minus$ObjectLiteral$iterator$lambda_2(other)).iterator();
    };
    minus$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function minus_6($receiver, elements) {
      return new minus$ObjectLiteral_2(elements, $receiver);
    }
    var minusElement_0 = defineInlineFunction('kotlin.kotlin.sequences.minusElement_9h40j2$', wrapFunction(function () {
      var minus = _.kotlin.sequences.minus_9h40j2$;
      return function ($receiver, element) {
        return minus($receiver, element);
      };
    }));
    var partition_9 = defineInlineFunction('kotlin.kotlin.sequences.partition_euau3h$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = ArrayList_init();
        var second = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            first.add_11rb$(element);
          } else {
            second.add_11rb$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    function plus_7($receiver, element) {
      return flatten_1(sequenceOf([$receiver, sequenceOf([element])]));
    }
    function plus_8($receiver, elements) {
      return plus_9($receiver, asList(elements));
    }
    function plus_9($receiver, elements) {
      return flatten_1(sequenceOf([$receiver, asSequence_8(elements)]));
    }
    function plus_10($receiver, elements) {
      return flatten_1(sequenceOf([$receiver, elements]));
    }
    var plusElement_1 = defineInlineFunction('kotlin.kotlin.sequences.plusElement_9h40j2$', wrapFunction(function () {
      var plus = _.kotlin.sequences.plus_9h40j2$;
      return function ($receiver, element) {
        return plus($receiver, element);
      };
    }));
    function windowed_1($receiver, size, step, partialWindows) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      return windowedSequence_1($receiver, size, step, partialWindows, false);
    }
    function windowed_2($receiver, size, step, partialWindows, transform) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      return map_10(windowedSequence_1($receiver, size, step, partialWindows, true), transform);
    }
    function zip$lambda(t1, t2) {
      return to(t1, t2);
    }
    function zip_55($receiver, other) {
      return new MergingSequence($receiver, other, zip$lambda);
    }
    function zip_56($receiver, other, transform) {
      return new MergingSequence($receiver, other, transform);
    }
    function zipWithNext$lambda(a, b) {
      return to(a, b);
    }
    function zipWithNext_1($receiver) {
      return zipWithNext_2($receiver, zipWithNext$lambda);
    }
    function Coroutine$zipWithNext$lambda(this$zipWithNext_0, closure$transform_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$this$zipWithNext = this$zipWithNext_0;
      this.local$closure$transform = closure$transform_0;
      this.local$iterator = void 0;
      this.local$current = void 0;
      this.local$next = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$zipWithNext$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$zipWithNext$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$zipWithNext$lambda.prototype.constructor = Coroutine$zipWithNext$lambda;
    Coroutine$zipWithNext$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              this.local$iterator = this.local$this$zipWithNext.iterator();
              if (!this.local$iterator.hasNext()) {
                return;
              } else {
                this.state_0 = 2;
                continue;
              }

            case 1:
              throw this.exception_0;
            case 2:
              this.local$current = this.local$iterator.next();
              this.state_0 = 3;
              continue;
            case 3:
              if (!this.local$iterator.hasNext()) {
                this.state_0 = 5;
                continue;
              }
              this.local$next = this.local$iterator.next();
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$closure$transform(this.local$current, this.local$next), this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.local$current = this.local$next;
              this.state_0 = 3;
              continue;
            case 5:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function zipWithNext$lambda_0(this$zipWithNext_0, closure$transform_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$zipWithNext$lambda(this$zipWithNext_0, closure$transform_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function zipWithNext_2($receiver, transform) {
      return sequence(zipWithNext$lambda_0($receiver, transform));
    }
    function joinTo_9($receiver, buffer, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      var tmp$;
      buffer.append_gw00v9$(prefix);
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if ((count = count + 1 | 0, count) > 1)
          buffer.append_gw00v9$(separator);
        if (limit < 0 || count <= limit) {
          appendElement_0(buffer, element, transform);
        } else
          break;
      }
      if (limit >= 0 && count > limit)
        buffer.append_gw00v9$(truncated);
      buffer.append_gw00v9$(postfix);
      return buffer;
    }
    function joinToString_9($receiver, separator, prefix, postfix, limit, truncated, transform) {
      if (separator === void 0)
        separator = ', ';
      if (prefix === void 0)
        prefix = '';
      if (postfix === void 0)
        postfix = '';
      if (limit === void 0)
        limit = -1;
      if (truncated === void 0)
        truncated = '...';
      if (transform === void 0)
        transform = null;
      return joinTo_9($receiver, StringBuilder_init_1(), separator, prefix, postfix, limit, truncated, transform).toString();
    }
    function asIterable$lambda_8(this$asIterable) {
      return function () {
        return this$asIterable.iterator();
      };
    }
    function asIterable_10($receiver) {
      return new Iterable$ObjectLiteral_0(asIterable$lambda_8($receiver));
    }
    var asSequence_10 = defineInlineFunction('kotlin.kotlin.sequences.asSequence_veqyi0$', function ($receiver) {
      return $receiver;
    });
    function average_17($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_18($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_19($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_20($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_21($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function average_22($receiver) {
      var tmp$;
      var sum = 0.0;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
        checkCountOverflow((count = count + 1 | 0, count));
      }
      return count === 0 ? kotlin_js_internal_DoubleCompanionObject.NaN : sum / count;
    }
    function sum_17($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element;
      }
      return sum;
    }
    function sum_18($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element;
      }
      return sum;
    }
    function sum_19($receiver) {
      var tmp$;
      var sum = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum + element | 0;
      }
      return sum;
    }
    function sum_20($receiver) {
      var tmp$;
      var sum = L0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = sum.add(element);
      }
      return sum;
    }
    function sum_21($receiver) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
      }
      return sum;
    }
    function sum_22($receiver) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += element;
      }
      return sum;
    }
    function minus_7($receiver, element) {
      var result = LinkedHashSet_init_3(mapCapacity($receiver.size));
      var removed = {v: false};
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element_0 = tmp$.next();
        var predicate$result;
        if (!removed.v && equals(element_0, element)) {
          removed.v = true;
          predicate$result = false;
        } else {
          predicate$result = true;
        }
        if (predicate$result)
          result.add_11rb$(element_0);
      }
      return result;
    }
    function minus_8($receiver, elements) {
      var result = LinkedHashSet_init_1($receiver);
      removeAll_2(result, elements);
      return result;
    }
    function minus_9($receiver, elements) {
      var other = convertToSetForSetOperationWith(elements, $receiver);
      if (other.isEmpty())
        return toSet_8($receiver);
      if (Kotlin.isType(other, Set)) {
        var destination = LinkedHashSet_init_0();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!other.contains_11rb$(element))
            destination.add_11rb$(element);
        }
        return destination;
      }var result = LinkedHashSet_init_1($receiver);
      result.removeAll_brywnq$(other);
      return result;
    }
    function minus_10($receiver, elements) {
      var result = LinkedHashSet_init_1($receiver);
      removeAll_1(result, elements);
      return result;
    }
    var minusElement_1 = defineInlineFunction('kotlin.kotlin.collections.minusElement_xfiyik$', wrapFunction(function () {
      var minus = _.kotlin.collections.minus_xfiyik$;
      return function ($receiver, element) {
        return minus($receiver, element);
      };
    }));
    function plus_11($receiver, element) {
      var result = LinkedHashSet_init_3(mapCapacity($receiver.size + 1 | 0));
      result.addAll_brywnq$($receiver);
      result.add_11rb$(element);
      return result;
    }
    function plus_12($receiver, elements) {
      var result = LinkedHashSet_init_3(mapCapacity($receiver.size + elements.length | 0));
      result.addAll_brywnq$($receiver);
      addAll_1(result, elements);
      return result;
    }
    function plus_13($receiver, elements) {
      var tmp$, tmp$_0;
      var result = LinkedHashSet_init_3(mapCapacity((tmp$_0 = (tmp$ = collectionSizeOrNull(elements)) != null ? $receiver.size + tmp$ | 0 : null) != null ? tmp$_0 : $receiver.size * 2 | 0));
      result.addAll_brywnq$($receiver);
      addAll(result, elements);
      return result;
    }
    function plus_14($receiver, elements) {
      var result = LinkedHashSet_init_3(mapCapacity($receiver.size * 2 | 0));
      result.addAll_brywnq$($receiver);
      addAll_0(result, elements);
      return result;
    }
    var plusElement_2 = defineInlineFunction('kotlin.kotlin.collections.plusElement_xfiyik$', wrapFunction(function () {
      var plus = _.kotlin.collections.plus_xfiyik$;
      return function ($receiver, element) {
        return plus($receiver, element);
      };
    }));
    function Iterable$ObjectLiteral_1(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Iterable$ObjectLiteral_1.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Iterable$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterable]};
    function Sequence$ObjectLiteral_1(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral_1.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    var elementAtOrElse_11 = defineInlineFunction('kotlin.kotlin.text.elementAtOrElse_qdauc8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver.charCodeAt(index) : unboxChar(defaultValue(index));
      };
    }));
    var elementAtOrNull_11 = defineInlineFunction('kotlin.kotlin.text.elementAtOrNull_94bcnn$', wrapFunction(function () {
      var getOrNull = _.kotlin.text.getOrNull_94bcnn$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var find_10 = defineInlineFunction('kotlin.kotlin.text.find_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var firstOrNull$result;
        firstOrNull$break: do {
          var tmp$;
          tmp$ = iterator($receiver);
          while (tmp$.hasNext()) {
            var element = unboxChar(tmp$.next());
            if (predicate(toBoxedChar(element))) {
              firstOrNull$result = element;
              break firstOrNull$break;
            }}
          firstOrNull$result = null;
        }
         while (false);
        return firstOrNull$result;
      };
    }));
    var findLast_11 = defineInlineFunction('kotlin.kotlin.text.findLast_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver.charCodeAt(index);
            if (predicate(toBoxedChar(element))) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    function first_22($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Char sequence is empty.');
      return $receiver.charCodeAt(0);
    }
    var first_23 = defineInlineFunction('kotlin.kotlin.text.first_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element)))
            return element;
        }
        throw new NoSuchElementException_init('Char sequence contains no character matching the predicate.');
      };
    }));
    function firstOrNull_22($receiver) {
      return $receiver.length === 0 ? null : $receiver.charCodeAt(0);
    }
    var firstOrNull_23 = defineInlineFunction('kotlin.kotlin.text.firstOrNull_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element)))
            return element;
        }
        return null;
      };
    }));
    var getOrElse_9 = defineInlineFunction('kotlin.kotlin.text.getOrElse_qdauc8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, index, defaultValue) {
        return index >= 0 && index <= get_lastIndex($receiver) ? $receiver.charCodeAt(index) : unboxChar(defaultValue(index));
      };
    }));
    function getOrNull_9($receiver, index) {
      return index >= 0 && index <= get_lastIndex_13($receiver) ? $receiver.charCodeAt(index) : null;
    }
    var indexOfFirst_11 = defineInlineFunction('kotlin.kotlin.text.indexOfFirst_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          if (predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return index;
          }}
        return -1;
      };
    }));
    var indexOfLast_11 = defineInlineFunction('kotlin.kotlin.text.indexOfLast_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return index;
          }}
        return -1;
      };
    }));
    function last_23($receiver) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Char sequence is empty.');
      return $receiver.charCodeAt(get_lastIndex_13($receiver));
    }
    var last_24 = defineInlineFunction('kotlin.kotlin.text.last_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.charCodeAt(index);
          if (predicate(toBoxedChar(element)))
            return element;
        }
        throw new NoSuchElementException_init('Char sequence contains no character matching the predicate.');
      };
    }));
    function lastOrNull_23($receiver) {
      return $receiver.length === 0 ? null : $receiver.charCodeAt($receiver.length - 1 | 0);
    }
    var lastOrNull_24 = defineInlineFunction('kotlin.kotlin.text.lastOrNull_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.charCodeAt(index);
          if (predicate(toBoxedChar(element)))
            return element;
        }
        return null;
      };
    }));
    var random_25 = defineInlineFunction('kotlin.kotlin.text.random_gw00vp$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.text.random_kewcp8$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_26($receiver, random) {
      if ($receiver.length === 0)
        throw new NoSuchElementException('Char sequence is empty.');
      return $receiver.charCodeAt(random.nextInt_za3lpa$($receiver.length));
    }
    var randomOrNull_25 = defineInlineFunction('kotlin.kotlin.text.randomOrNull_gw00vp$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.text.randomOrNull_kewcp8$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_26($receiver, random) {
      if ($receiver.length === 0)
        return null;
      return $receiver.charCodeAt(random.nextInt_za3lpa$($receiver.length));
    }
    function single_22($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          throw new NoSuchElementException('Char sequence is empty.');
        case 1:
          tmp$ = $receiver.charCodeAt(0);
          break;
        default:throw IllegalArgumentException_init_0('Char sequence has more than one element.');
      }
      return tmp$;
    }
    var single_23 = defineInlineFunction('kotlin.kotlin.text.single_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var unboxChar = Kotlin.unboxChar;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element))) {
            if (found)
              throw IllegalArgumentException_init('Char sequence contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Char sequence contains no character matching the predicate.');
        return unboxChar(Kotlin.isChar(tmp$_0 = toBoxedChar(single)) ? tmp$_0 : throwCCE());
      };
    }));
    function singleOrNull_22($receiver) {
      return $receiver.length === 1 ? $receiver.charCodeAt(0) : null;
    }
    var singleOrNull_23 = defineInlineFunction('kotlin.kotlin.text.singleOrNull_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var single = null;
        var found = false;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element))) {
            if (found)
              return null;
            single = element;
            found = true;
          }}
        if (!found)
          return null;
        return single;
      };
    }));
    function drop_10($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return Kotlin.subSequence($receiver, coerceAtMost_2(n, $receiver.length), $receiver.length);
    }
    function drop_11($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return $receiver.substring(coerceAtMost_2(n, $receiver.length));
    }
    function dropLast_9($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_10($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    function dropLast_10($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_11($receiver, coerceAtLeast_2($receiver.length - n | 0, 0));
    }
    var dropLastWhile_9 = defineInlineFunction('kotlin.kotlin.text.dropLastWhile_2pivbd$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index))))
            return Kotlin.subSequence($receiver, 0, index + 1 | 0);
        return '';
      };
    }));
    var dropLastWhile_10 = defineInlineFunction('kotlin.kotlin.text.dropLastWhile_ouje1d$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return $receiver.substring(0, index + 1 | 0);
          }return '';
      };
    }));
    var dropWhile_10 = defineInlineFunction('kotlin.kotlin.text.dropWhile_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index))))
            return Kotlin.subSequence($receiver, index, $receiver.length);
        return '';
      };
    }));
    var dropWhile_11 = defineInlineFunction('kotlin.kotlin.text.dropWhile_ouje1d$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return $receiver.substring(index);
          }return '';
      };
    }));
    var filter_10 = defineInlineFunction('kotlin.kotlin.text.filter_2pivbd$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$;
        tmp$ = $receiver.length;
        for (var index = 0; index < tmp$; index++) {
          var element = $receiver.charCodeAt(index);
          if (predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination;
      };
    }));
    var filter_11 = defineInlineFunction('kotlin.kotlin.text.filter_ouje1d$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$;
        tmp$ = $receiver.length;
        for (var index = 0; index < tmp$; index++) {
          var element = $receiver.charCodeAt(index);
          if (predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination.toString();
      };
    }));
    var filterIndexed_10 = defineInlineFunction('kotlin.kotlin.text.filterIndexed_3xan9v$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          var index_0 = (tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0);
          var element = toBoxedChar(item);
          if (predicate(index_0, element))
            destination.append_s8itvh$(unboxChar(element));
        }
        return destination;
      };
    }));
    var filterIndexed_11 = defineInlineFunction('kotlin.kotlin.text.filterIndexed_4cgdv1$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          var index_0 = (tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0);
          var element = toBoxedChar(item);
          if (predicate(index_0, element))
            destination.append_s8itvh$(unboxChar(element));
        }
        return destination.toString();
      };
    }));
    var filterIndexedTo_10 = defineInlineFunction('kotlin.kotlin.text.filterIndexedTo_2omorh$', wrapFunction(function () {
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, destination, predicate) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          var index_0 = (tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0);
          var element = toBoxedChar(item);
          if (predicate(index_0, element))
            destination.append_s8itvh$(unboxChar(element));
        }
        return destination;
      };
    }));
    var filterNot_10 = defineInlineFunction('kotlin.kotlin.text.filterNot_2pivbd$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (!predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination;
      };
    }));
    var filterNot_11 = defineInlineFunction('kotlin.kotlin.text.filterNot_ouje1d$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var destination = StringBuilder_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (!predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination.toString();
      };
    }));
    var filterNotTo_10 = defineInlineFunction('kotlin.kotlin.text.filterNotTo_2vcf41$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (!predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination;
      };
    }));
    var filterTo_10 = defineInlineFunction('kotlin.kotlin.text.filterTo_2vcf41$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, destination, predicate) {
        var tmp$;
        tmp$ = $receiver.length;
        for (var index = 0; index < tmp$; index++) {
          var element = $receiver.charCodeAt(index);
          if (predicate(toBoxedChar(element)))
            destination.append_s8itvh$(element);
        }
        return destination;
      };
    }));
    function slice_19($receiver, indices) {
      if (indices.isEmpty())
        return '';
      return subSequence_0($receiver, indices);
    }
    function slice_20($receiver, indices) {
      if (indices.isEmpty())
        return '';
      return substring_1($receiver, indices);
    }
    function slice_21($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return '';
      var result = StringBuilder_init(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var i = tmp$.next();
        result.append_s8itvh$($receiver.charCodeAt(i));
      }
      return result;
    }
    var slice_22 = defineInlineFunction('kotlin.kotlin.text.slice_djwhei$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var slice = _.kotlin.text.slice_ymrxhc$;
      return function ($receiver, indices) {
        var tmp$;
        return slice(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE(), indices).toString();
      };
    }));
    function take_10($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return Kotlin.subSequence($receiver, 0, coerceAtMost_2(n, $receiver.length));
    }
    function take_11($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return $receiver.substring(0, coerceAtMost_2(n, $receiver.length));
    }
    function takeLast_9($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }var length = $receiver.length;
      return Kotlin.subSequence($receiver, length - coerceAtMost_2(n, length) | 0, length);
    }
    function takeLast_10($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested character count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }var length = $receiver.length;
      return $receiver.substring(length - coerceAtMost_2(n, length) | 0);
    }
    var takeLastWhile_9 = defineInlineFunction('kotlin.kotlin.text.takeLastWhile_2pivbd$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return Kotlin.subSequence($receiver, index + 1 | 0, $receiver.length);
          }}
        return Kotlin.subSequence($receiver, 0, $receiver.length);
      };
    }));
    var takeLastWhile_10 = defineInlineFunction('kotlin.kotlin.text.takeLastWhile_ouje1d$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver); index >= 0; index--) {
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return $receiver.substring(index + 1 | 0);
          }}
        return $receiver;
      };
    }));
    var takeWhile_10 = defineInlineFunction('kotlin.kotlin.text.takeWhile_2pivbd$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.length;
        for (var index = 0; index < tmp$; index++)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return Kotlin.subSequence($receiver, 0, index);
          }return Kotlin.subSequence($receiver, 0, $receiver.length);
      };
    }));
    var takeWhile_11 = defineInlineFunction('kotlin.kotlin.text.takeWhile_ouje1d$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.length;
        for (var index = 0; index < tmp$; index++)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index)))) {
            return $receiver.substring(0, index);
          }return $receiver;
      };
    }));
    function reversed_12($receiver) {
      return StringBuilder_init_0($receiver).reverse();
    }
    var reversed_13 = defineInlineFunction('kotlin.kotlin.text.reversed_pdl1vz$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var reversed = _.kotlin.text.reversed_gw00vp$;
      return function ($receiver) {
        var tmp$;
        return reversed(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
      };
    }));
    var associate_10 = defineInlineFunction('kotlin.kotlin.text.associate_b3xl1f$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var pair = transform(toBoxedChar(element));
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associateBy_21 = defineInlineFunction('kotlin.kotlin.text.associateBy_16h5q4$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), toBoxedChar(element));
        }
        return destination;
      };
    }));
    var associateBy_22 = defineInlineFunction('kotlin.kotlin.text.associateBy_m7aj6v$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector, valueTransform) {
        var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
        var destination = LinkedHashMap_init(capacity);
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var associateByTo_21 = defineInlineFunction('kotlin.kotlin.text.associateByTo_lm6k0r$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), toBoxedChar(element));
        }
        return destination;
      };
    }));
    var associateByTo_22 = defineInlineFunction('kotlin.kotlin.text.associateByTo_woixqq$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          destination.put_xwzc9p$(keySelector(toBoxedChar(element)), valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var associateTo_10 = defineInlineFunction('kotlin.kotlin.text.associateTo_1pzh9q$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var pair = transform(toBoxedChar(element));
          destination.put_xwzc9p$(pair.first, pair.second);
        }
        return destination;
      };
    }));
    var associateWith_1 = defineInlineFunction('kotlin.kotlin.text.associateWith_16h5q4$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var coerceAtLeast = _.kotlin.ranges.coerceAtLeast_dqglrj$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, valueSelector) {
        var result = LinkedHashMap_init(coerceAtLeast(mapCapacity($receiver.length), 16));
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          result.put_xwzc9p$(toBoxedChar(element), valueSelector(toBoxedChar(element)));
        }
        return result;
      };
    }));
    var associateWithTo_1 = defineInlineFunction('kotlin.kotlin.text.associateWithTo_dykjl$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, valueSelector) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          destination.put_xwzc9p$(toBoxedChar(element), valueSelector(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    function toCollection_10($receiver, destination) {
      var tmp$;
      tmp$ = iterator_4($receiver);
      while (tmp$.hasNext()) {
        var item = unboxChar(tmp$.next());
        destination.add_11rb$(toBoxedChar(item));
      }
      return destination;
    }
    function toHashSet_10($receiver) {
      return toCollection_10($receiver, HashSet_init_2(mapCapacity($receiver.length)));
    }
    function toList_11($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptyList();
          break;
        case 1:
          tmp$ = listOf(toBoxedChar($receiver.charCodeAt(0)));
          break;
        default:tmp$ = toMutableList_11($receiver);
          break;
      }
      return tmp$;
    }
    function toMutableList_11($receiver) {
      return toCollection_10($receiver, ArrayList_init_0($receiver.length));
    }
    function toSet_10($receiver) {
      var tmp$;
      switch ($receiver.length) {
        case 0:
          tmp$ = emptySet();
          break;
        case 1:
          tmp$ = setOf(toBoxedChar($receiver.charCodeAt(0)));
          break;
        default:tmp$ = toCollection_10($receiver, LinkedHashSet_init_3(mapCapacity($receiver.length)));
          break;
      }
      return tmp$;
    }
    var flatMap_11 = defineInlineFunction('kotlin.kotlin.text.flatMap_83nucd$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var list = transform(toBoxedChar(element));
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_11 = defineInlineFunction('kotlin.kotlin.text.flatMapTo_kg2lzy$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var list = transform(toBoxedChar(element));
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var groupBy_21 = defineInlineFunction('kotlin.kotlin.text.groupBy_16h5q4$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var groupBy_22 = defineInlineFunction('kotlin.kotlin.text.groupBy_m7aj6v$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var groupByTo_21 = defineInlineFunction('kotlin.kotlin.text.groupByTo_mntg7c$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(toBoxedChar(element));
        }
        return destination;
      };
    }));
    var groupByTo_22 = defineInlineFunction('kotlin.kotlin.text.groupByTo_dgnza9$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var key = keySelector(toBoxedChar(element));
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(toBoxedChar(element)));
        }
        return destination;
      };
    }));
    var groupingBy_2 = defineInlineFunction('kotlin.kotlin.text.groupingBy_16h5q4$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Grouping = _.kotlin.collections.Grouping;
      function groupingBy$ObjectLiteral(this$groupingBy, closure$keySelector) {
        this.this$groupingBy = this$groupingBy;
        this.closure$keySelector = closure$keySelector;
      }
      groupingBy$ObjectLiteral.prototype.sourceIterator = function () {
        return iterator(this.this$groupingBy);
      };
      groupingBy$ObjectLiteral.prototype.keyOf_11rb$ = function (element) {
        return this.closure$keySelector(toBoxedChar(element));
      };
      groupingBy$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Grouping]};
      return function ($receiver, keySelector) {
        return new groupingBy$ObjectLiteral($receiver, keySelector);
      };
    }));
    var map_11 = defineInlineFunction('kotlin.kotlin.text.map_16h5q4$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          destination.add_11rb$(transform(toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapIndexed_10 = defineInlineFunction('kotlin.kotlin.text.mapIndexed_bnyqco$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.length);
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapIndexedNotNull_2 = defineInlineFunction('kotlin.kotlin.text.mapIndexedNotNull_iqd6dn$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          var tmp$_1;
          if ((tmp$_1 = transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item))) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedNotNullTo_2 = defineInlineFunction('kotlin.kotlin.text.mapIndexedNotNullTo_cynlyo$', wrapFunction(function () {
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          var tmp$_1;
          if ((tmp$_1 = transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item))) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return destination;
      };
    }));
    var mapIndexedTo_10 = defineInlineFunction('kotlin.kotlin.text.mapIndexedTo_4f8103$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item)));
        }
        return destination;
      };
    }));
    var mapNotNull_3 = defineInlineFunction('kotlin.kotlin.text.mapNotNull_10i1d3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var tmp$_0;
          if ((tmp$_0 = transform(toBoxedChar(element))) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapNotNullTo_3 = defineInlineFunction('kotlin.kotlin.text.mapNotNullTo_jcwsr8$', wrapFunction(function () {
      var unboxChar = Kotlin.unboxChar;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          var tmp$_0;
          if ((tmp$_0 = transform(toBoxedChar(element))) != null) {
            destination.add_11rb$(tmp$_0);
          }}
        return destination;
      };
    }));
    var mapTo_11 = defineInlineFunction('kotlin.kotlin.text.mapTo_wrnknd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          destination.add_11rb$(transform(toBoxedChar(item)));
        }
        return destination;
      };
    }));
    function withIndex$lambda_9(this$withIndex) {
      return function () {
        return iterator_4(this$withIndex);
      };
    }
    function withIndex_10($receiver) {
      return new IndexingIterable(withIndex$lambda_9($receiver));
    }
    var all_11 = defineInlineFunction('kotlin.kotlin.text.all_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (!predicate(toBoxedChar(element)))
            return false;
        }
        return true;
      };
    }));
    function any_23($receiver) {
      return !($receiver.length === 0);
    }
    var any_24 = defineInlineFunction('kotlin.kotlin.text.any_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element)))
            return true;
        }
        return false;
      };
    }));
    var count_24 = defineInlineFunction('kotlin.kotlin.text.count_gw00vp$', function ($receiver) {
      return $receiver.length;
    });
    var count_25 = defineInlineFunction('kotlin.kotlin.text.count_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        var count = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element)))
            count = count + 1 | 0;
        }
        return count;
      };
    }));
    var fold_10 = defineInlineFunction('kotlin.kotlin.text.fold_riyz04$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        var accumulator = initial;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          accumulator = operation(accumulator, toBoxedChar(element));
        }
        return accumulator;
      };
    }));
    var foldIndexed_10 = defineInlineFunction('kotlin.kotlin.text.foldIndexed_l9i73k$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0;
        var index = 0;
        var accumulator = initial;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, toBoxedChar(element));
        }
        return accumulator;
      };
    }));
    var foldRight_9 = defineInlineFunction('kotlin.kotlin.text.foldRight_xy5j5e$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(toBoxedChar($receiver.charCodeAt((tmp$ = index, index = tmp$ - 1 | 0, tmp$))), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_9 = defineInlineFunction('kotlin.kotlin.text.foldRightIndexed_bpin9y$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, toBoxedChar($receiver.charCodeAt(index)), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var forEach_11 = defineInlineFunction('kotlin.kotlin.text.forEach_57f55l$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, action) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          action(toBoxedChar(element));
        }
      };
    }));
    var forEachIndexed_10 = defineInlineFunction('kotlin.kotlin.text.forEachIndexed_q254al$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, action) {
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var item = unboxChar(tmp$.next());
          action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), toBoxedChar(item));
        }
      };
    }));
    function max_15($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver.charCodeAt(0);
      tmp$ = get_lastIndex_13($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.charCodeAt(i);
        if (max < e)
          max = e;
      }
      return max;
    }
    var maxBy_11 = defineInlineFunction('kotlin.kotlin.text.maxBy_lwkw4q$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var maxElem = $receiver.charCodeAt(0);
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(toBoxedChar(maxElem));
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.charCodeAt(i);
          var v = selector(toBoxedChar(e));
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    function maxWith_11($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var max = $receiver.charCodeAt(0);
      tmp$ = get_lastIndex_13($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.charCodeAt(i);
        if (comparator.compare(toBoxedChar(max), toBoxedChar(e)) < 0)
          max = e;
      }
      return max;
    }
    function min_15($receiver) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver.charCodeAt(0);
      tmp$ = get_lastIndex_13($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.charCodeAt(i);
        if (min > e)
          min = e;
      }
      return min;
    }
    var minBy_11 = defineInlineFunction('kotlin.kotlin.text.minBy_lwkw4q$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, selector) {
        if ($receiver.length === 0)
          return null;
        var minElem = $receiver.charCodeAt(0);
        var lastIndex = get_lastIndex($receiver);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(toBoxedChar(minElem));
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.charCodeAt(i);
          var v = selector(toBoxedChar(e));
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    function minWith_11($receiver, comparator) {
      var tmp$;
      if ($receiver.length === 0)
        return null;
      var min = $receiver.charCodeAt(0);
      tmp$ = get_lastIndex_13($receiver);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.charCodeAt(i);
        if (comparator.compare(toBoxedChar(min), toBoxedChar(e)) > 0)
          min = e;
      }
      return min;
    }
    function none_23($receiver) {
      return $receiver.length === 0;
    }
    var none_24 = defineInlineFunction('kotlin.kotlin.text.none_2pivbd$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element)))
            return false;
        }
        return true;
      };
    }));
    var onEach_2 = defineInlineFunction('kotlin.kotlin.text.onEach_jdhw1f$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, action) {
        var tmp$;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          action(toBoxedChar(element));
        }
        return $receiver;
      };
    }));
    var reduce_10 = defineInlineFunction('kotlin.kotlin.text.reduce_bc19pa$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty char sequence can't be reduced.");
        var accumulator = $receiver.charCodeAt(0);
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(toBoxedChar(accumulator), toBoxedChar($receiver.charCodeAt(index))));
        }
        return accumulator;
      };
    }));
    var reduceIndexed_10 = defineInlineFunction('kotlin.kotlin.text.reduceIndexed_8uyn22$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          throw UnsupportedOperationException_init("Empty char sequence can't be reduced.");
        var accumulator = $receiver.charCodeAt(0);
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(index, toBoxedChar(accumulator), toBoxedChar($receiver.charCodeAt(index))));
        }
        return accumulator;
      };
    }));
    var reduceOrNull_10 = defineInlineFunction('kotlin.kotlin.text.reduceOrNull_bc19pa$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return null;
        var accumulator = $receiver.charCodeAt(0);
        tmp$ = get_lastIndex($receiver);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = unboxChar(operation(toBoxedChar(accumulator), toBoxedChar($receiver.charCodeAt(index))));
        }
        return accumulator;
      };
    }));
    var reduceRight_9 = defineInlineFunction('kotlin.kotlin.text.reduceRight_bc19pa$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty char sequence can't be reduced.");
        var accumulator = $receiver.charCodeAt((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = unboxChar(operation(toBoxedChar($receiver.charCodeAt((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0))), toBoxedChar(accumulator)));
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_9 = defineInlineFunction('kotlin.kotlin.text.reduceRightIndexed_8uyn22$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty char sequence can't be reduced.");
        var accumulator = $receiver.charCodeAt((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = unboxChar(operation(index, toBoxedChar($receiver.charCodeAt(index)), toBoxedChar(accumulator)));
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_9 = defineInlineFunction('kotlin.kotlin.text.reduceRightOrNull_bc19pa$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.text.get_lastIndex_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver);
        if (index < 0)
          return null;
        var accumulator = $receiver.charCodeAt((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = unboxChar(operation(toBoxedChar($receiver.charCodeAt((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0))), toBoxedChar(accumulator)));
        }
        return accumulator;
      };
    }));
    var scan_10 = defineInlineFunction('kotlin.kotlin.text.scan_riyz04$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          accumulator = operation(accumulator, toBoxedChar(element));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_10 = defineInlineFunction('kotlin.kotlin.text.scanIndexed_l9i73k$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        if ($receiver.length === 0)
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.length + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = get_indices($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          accumulator = operation(index, accumulator, toBoxedChar($receiver.charCodeAt(index)));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanReduce_10 = defineInlineFunction('kotlin.kotlin.text.scanReduce_bc19pa$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver.charCodeAt(0)};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(toBoxedChar(accumulator.v));
        var result = $receiver_0;
        tmp$ = $receiver.length;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = unboxChar(operation(toBoxedChar(accumulator.v), toBoxedChar($receiver.charCodeAt(index))));
          result.add_11rb$(toBoxedChar(accumulator.v));
        }
        return result;
      };
    }));
    var scanReduceIndexed_10 = defineInlineFunction('kotlin.kotlin.text.scanReduceIndexed_8uyn22$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.length === 0)
          return emptyList();
        var accumulator = {v: $receiver.charCodeAt(0)};
        var $receiver_0 = ArrayList_init($receiver.length);
        $receiver_0.add_11rb$(toBoxedChar(accumulator.v));
        var result = $receiver_0;
        tmp$ = $receiver.length;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = unboxChar(operation(index, toBoxedChar(accumulator.v), toBoxedChar($receiver.charCodeAt(index))));
          result.add_11rb$(toBoxedChar(accumulator.v));
        }
        return result;
      };
    }));
    var sumBy_10 = defineInlineFunction('kotlin.kotlin.text.sumBy_kg4n8i$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, selector) {
        var tmp$;
        var sum = 0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          sum = sum + selector(toBoxedChar(element)) | 0;
        }
        return sum;
      };
    }));
    var sumByDouble_10 = defineInlineFunction('kotlin.kotlin.text.sumByDouble_4bpanu$', wrapFunction(function () {
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      return function ($receiver, selector) {
        var tmp$;
        var sum = 0.0;
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          sum += selector(toBoxedChar(element));
        }
        return sum;
      };
    }));
    function chunked_3($receiver, size) {
      return windowed_3($receiver, size, size, true);
    }
    function chunked_4($receiver, size, transform) {
      return windowed_4($receiver, size, size, true, transform);
    }
    function chunkedSequence$lambda(it) {
      return it.toString();
    }
    function chunkedSequence($receiver, size) {
      return chunkedSequence_0($receiver, size, chunkedSequence$lambda);
    }
    function chunkedSequence_0($receiver, size, transform) {
      return windowedSequence_0($receiver, size, size, true, transform);
    }
    var partition_10 = defineInlineFunction('kotlin.kotlin.text.partition_2pivbd$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = StringBuilder_init();
        var second = StringBuilder_init();
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element))) {
            first.append_s8itvh$(element);
          } else {
            second.append_s8itvh$(element);
          }
        }
        return new Pair_init(first, second);
      };
    }));
    var partition_11 = defineInlineFunction('kotlin.kotlin.text.partition_ouje1d$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      var iterator = _.kotlin.text.iterator_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var unboxChar = Kotlin.unboxChar;
      var Pair_init = _.kotlin.Pair;
      return function ($receiver, predicate) {
        var tmp$;
        var first = StringBuilder_init();
        var second = StringBuilder_init();
        tmp$ = iterator($receiver);
        while (tmp$.hasNext()) {
          var element = unboxChar(tmp$.next());
          if (predicate(toBoxedChar(element))) {
            first.append_s8itvh$(element);
          } else {
            second.append_s8itvh$(element);
          }
        }
        return new Pair_init(first.toString(), second.toString());
      };
    }));
    function windowed$lambda(it) {
      return it.toString();
    }
    function windowed_3($receiver, size, step, partialWindows) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      return windowed_4($receiver, size, step, partialWindows, windowed$lambda);
    }
    function windowed_4($receiver, size, step, partialWindows, transform) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      var tmp$;
      checkWindowSizeStep(size, step);
      var thisSize = $receiver.length;
      var resultCapacity = (thisSize / step | 0) + (thisSize % step === 0 ? 0 : 1) | 0;
      var result = ArrayList_init_0(resultCapacity);
      var index = 0;
      while (0 <= index && index < thisSize) {
        var end = index + size | 0;
        if (end < 0 || end > thisSize) {
          if (partialWindows)
            tmp$ = thisSize;
          else
            break;
        } else
          tmp$ = end;
        var coercedEnd = tmp$;
        result.add_11rb$(transform(Kotlin.subSequence($receiver, index, coercedEnd)));
        index = index + step | 0;
      }
      return result;
    }
    function windowedSequence$lambda(it) {
      return it.toString();
    }
    function windowedSequence($receiver, size, step, partialWindows) {
      if (step === void 0)
        step = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      return windowedSequence_0($receiver, size, step, partialWindows, windowedSequence$lambda);
    }
    function windowedSequence$lambda_0(closure$size, this$windowedSequence, closure$transform) {
      return function (index) {
        var end = index + closure$size | 0;
        var coercedEnd = end < 0 || end > this$windowedSequence.length ? this$windowedSequence.length : end;
        return closure$transform(Kotlin.subSequence(this$windowedSequence, index, coercedEnd));
      };
    }
    function windowedSequence_0($receiver, size, step_0, partialWindows, transform) {
      if (step_0 === void 0)
        step_0 = 1;
      if (partialWindows === void 0)
        partialWindows = false;
      checkWindowSizeStep(size, step_0);
      var windows = step(partialWindows ? get_indices_13($receiver) : until_4(0, $receiver.length - size + 1 | 0), step_0);
      return map_10(asSequence_8(windows), windowedSequence$lambda_0(size, $receiver, transform));
    }
    function zip_57($receiver, other) {
      var length = Math_0.min($receiver.length, other.length);
      var list = ArrayList_init_0(length);
      for (var i = 0; i < length; i++) {
        list.add_11rb$(to(toBoxedChar($receiver.charCodeAt(i)), toBoxedChar(other.charCodeAt(i))));
      }
      return list;
    }
    var zip_58 = defineInlineFunction('kotlin.kotlin.text.zip_tac5w1$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var length = Math_0.min($receiver.length, other.length);
        var list = ArrayList_init(length);
        for (var i = 0; i < length; i++) {
          list.add_11rb$(transform(toBoxedChar($receiver.charCodeAt(i)), toBoxedChar(other.charCodeAt(i))));
        }
        return list;
      };
    }));
    function zipWithNext_3($receiver) {
      var zipWithNext$result;
      zipWithNext$break: do {
        var size = $receiver.length - 1 | 0;
        if (size < 1) {
          zipWithNext$result = emptyList();
          break zipWithNext$break;
        }var result = ArrayList_init_0(size);
        for (var index = 0; index < size; index++) {
          result.add_11rb$(to(toBoxedChar($receiver.charCodeAt(index)), toBoxedChar($receiver.charCodeAt(index + 1 | 0))));
        }
        zipWithNext$result = result;
      }
       while (false);
      return zipWithNext$result;
    }
    var zipWithNext_4 = defineInlineFunction('kotlin.kotlin.text.zipWithNext_hf4kax$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, transform) {
        var size = $receiver.length - 1 | 0;
        if (size < 1)
          return emptyList();
        var result = ArrayList_init(size);
        for (var index = 0; index < size; index++) {
          result.add_11rb$(transform(toBoxedChar($receiver.charCodeAt(index)), toBoxedChar($receiver.charCodeAt(index + 1 | 0))));
        }
        return result;
      };
    }));
    function asIterable$lambda_9(this$asIterable) {
      return function () {
        return iterator_4(this$asIterable);
      };
    }
    function asIterable_11($receiver) {
      var tmp$ = typeof $receiver === 'string';
      if (tmp$) {
        tmp$ = $receiver.length === 0;
      }if (tmp$)
        return emptyList();
      return new Iterable$ObjectLiteral_1(asIterable$lambda_9($receiver));
    }
    function asSequence$lambda_9(this$asSequence) {
      return function () {
        return iterator_4(this$asSequence);
      };
    }
    function asSequence_11($receiver) {
      var tmp$ = typeof $receiver === 'string';
      if (tmp$) {
        tmp$ = $receiver.length === 0;
      }if (tmp$)
        return emptySequence();
      return new Sequence$ObjectLiteral_1(asSequence$lambda_9($receiver));
    }
    function UByteArray$lambda(closure$init) {
      return function (index) {
        return closure$init(index).data;
      };
    }
    function UIntArray$lambda(closure$init) {
      return function (index) {
        return closure$init(index).data;
      };
    }
    function ULongArray$lambda(closure$init) {
      return function (index) {
        return closure$init(index).data;
      };
    }
    function UShortArray$lambda(closure$init) {
      return function (index) {
        return closure$init(index).data;
      };
    }
    var component1_9 = defineInlineFunction('kotlin.kotlin.collections.component1_9hsmwz$', function ($receiver) {
      return $receiver.get_za3lpa$(0);
    });
    var component1_10 = defineInlineFunction('kotlin.kotlin.collections.component1_rnn80q$', function ($receiver) {
      return $receiver.get_za3lpa$(0);
    });
    var component1_11 = defineInlineFunction('kotlin.kotlin.collections.component1_o5f02i$', function ($receiver) {
      return $receiver.get_za3lpa$(0);
    });
    var component1_12 = defineInlineFunction('kotlin.kotlin.collections.component1_k4ndbq$', function ($receiver) {
      return $receiver.get_za3lpa$(0);
    });
    var component2_9 = defineInlineFunction('kotlin.kotlin.collections.component2_9hsmwz$', function ($receiver) {
      return $receiver.get_za3lpa$(1);
    });
    var component2_10 = defineInlineFunction('kotlin.kotlin.collections.component2_rnn80q$', function ($receiver) {
      return $receiver.get_za3lpa$(1);
    });
    var component2_11 = defineInlineFunction('kotlin.kotlin.collections.component2_o5f02i$', function ($receiver) {
      return $receiver.get_za3lpa$(1);
    });
    var component2_12 = defineInlineFunction('kotlin.kotlin.collections.component2_k4ndbq$', function ($receiver) {
      return $receiver.get_za3lpa$(1);
    });
    var component3_9 = defineInlineFunction('kotlin.kotlin.collections.component3_9hsmwz$', function ($receiver) {
      return $receiver.get_za3lpa$(2);
    });
    var component3_10 = defineInlineFunction('kotlin.kotlin.collections.component3_rnn80q$', function ($receiver) {
      return $receiver.get_za3lpa$(2);
    });
    var component3_11 = defineInlineFunction('kotlin.kotlin.collections.component3_o5f02i$', function ($receiver) {
      return $receiver.get_za3lpa$(2);
    });
    var component3_12 = defineInlineFunction('kotlin.kotlin.collections.component3_k4ndbq$', function ($receiver) {
      return $receiver.get_za3lpa$(2);
    });
    var component4_9 = defineInlineFunction('kotlin.kotlin.collections.component4_9hsmwz$', function ($receiver) {
      return $receiver.get_za3lpa$(3);
    });
    var component4_10 = defineInlineFunction('kotlin.kotlin.collections.component4_rnn80q$', function ($receiver) {
      return $receiver.get_za3lpa$(3);
    });
    var component4_11 = defineInlineFunction('kotlin.kotlin.collections.component4_o5f02i$', function ($receiver) {
      return $receiver.get_za3lpa$(3);
    });
    var component4_12 = defineInlineFunction('kotlin.kotlin.collections.component4_k4ndbq$', function ($receiver) {
      return $receiver.get_za3lpa$(3);
    });
    var component5_9 = defineInlineFunction('kotlin.kotlin.collections.component5_9hsmwz$', function ($receiver) {
      return $receiver.get_za3lpa$(4);
    });
    var component5_10 = defineInlineFunction('kotlin.kotlin.collections.component5_rnn80q$', function ($receiver) {
      return $receiver.get_za3lpa$(4);
    });
    var component5_11 = defineInlineFunction('kotlin.kotlin.collections.component5_o5f02i$', function ($receiver) {
      return $receiver.get_za3lpa$(4);
    });
    var component5_12 = defineInlineFunction('kotlin.kotlin.collections.component5_k4ndbq$', function ($receiver) {
      return $receiver.get_za3lpa$(4);
    });
    var elementAtOrElse_12 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_kot4le$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var elementAtOrElse_13 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_rzo8b8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var elementAtOrElse_14 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_e4wdik$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var elementAtOrElse_15 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrElse_9sv3bs$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var elementAtOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_h8io69$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_h8io69$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_k9lyrg$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_k9lyrg$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_14 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_hlz5c8$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_hlz5c8$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var elementAtOrNull_15 = defineInlineFunction('kotlin.kotlin.collections.elementAtOrNull_7156lo$', wrapFunction(function () {
      var getOrNull = _.kotlin.collections.getOrNull_7156lo$;
      return function ($receiver, index) {
        return getOrNull($receiver, index);
      };
    }));
    var find_11 = defineInlineFunction('kotlin.kotlin.collections.find_qooazb$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_12 = defineInlineFunction('kotlin.kotlin.collections.find_xmet5j$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_13 = defineInlineFunction('kotlin.kotlin.collections.find_khxg6n$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var find_14 = defineInlineFunction('kotlin.kotlin.collections.find_zbhqtl$', function ($receiver, predicate) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    });
    var findLast_12 = defineInlineFunction('kotlin.kotlin.collections.findLast_qooazb$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver.storage)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver.get_za3lpa$(index);
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_13 = defineInlineFunction('kotlin.kotlin.collections.findLast_xmet5j$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver.storage)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver.get_za3lpa$(index);
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_14 = defineInlineFunction('kotlin.kotlin.collections.findLast_khxg6n$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver.storage)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver.get_za3lpa$(index);
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var findLast_15 = defineInlineFunction('kotlin.kotlin.collections.findLast_zbhqtl$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      return function ($receiver, predicate) {
        var lastOrNull$result;
        lastOrNull$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver.storage)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            var element = $receiver.get_za3lpa$(index);
            if (predicate(element)) {
              lastOrNull$result = element;
              break lastOrNull$break;
            }}
          lastOrNull$result = null;
        }
         while (false);
        return lastOrNull$result;
      };
    }));
    var first_24 = defineInlineFunction('kotlin.kotlin.collections.first_9hsmwz$', wrapFunction(function () {
      var first = _.kotlin.collections.first_tmsbgo$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(first($receiver.storage));
      };
    }));
    var first_25 = defineInlineFunction('kotlin.kotlin.collections.first_rnn80q$', wrapFunction(function () {
      var first = _.kotlin.collections.first_se6h4x$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(first($receiver.storage));
      };
    }));
    var first_26 = defineInlineFunction('kotlin.kotlin.collections.first_o5f02i$', wrapFunction(function () {
      var first = _.kotlin.collections.first_964n91$;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(first($receiver.storage));
      };
    }));
    var first_27 = defineInlineFunction('kotlin.kotlin.collections.first_k4ndbq$', wrapFunction(function () {
      var first = _.kotlin.collections.first_i2lc79$;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(first($receiver.storage));
      };
    }));
    var first_28 = defineInlineFunction('kotlin.kotlin.collections.first_qooazb$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_29 = defineInlineFunction('kotlin.kotlin.collections.first_xmet5j$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_30 = defineInlineFunction('kotlin.kotlin.collections.first_khxg6n$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var first_31 = defineInlineFunction('kotlin.kotlin.collections.first_zbhqtl$', wrapFunction(function () {
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    function firstOrNull_24($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$(0);
    }
    function firstOrNull_25($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$(0);
    }
    function firstOrNull_26($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$(0);
    }
    function firstOrNull_27($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$(0);
    }
    var firstOrNull_28 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_qooazb$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_29 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_30 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var firstOrNull_31 = defineInlineFunction('kotlin.kotlin.collections.firstOrNull_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return element;
      }
      return null;
    });
    var getOrElse_10 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_kot4le$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var getOrElse_11 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_rzo8b8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var getOrElse_12 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_e4wdik$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    var getOrElse_13 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_9sv3bs$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, index, defaultValue) {
        var tmp$ = index >= 0;
        if (tmp$) {
          tmp$ = index <= get_lastIndex($receiver.storage);
        }return tmp$ ? $receiver.get_za3lpa$(index) : defaultValue(index);
      };
    }));
    function getOrNull_10($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_2($receiver.storage);
      }return tmp$ ? $receiver.get_za3lpa$(index) : null;
    }
    function getOrNull_11($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_3($receiver.storage);
      }return tmp$ ? $receiver.get_za3lpa$(index) : null;
    }
    function getOrNull_12($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_0($receiver.storage);
      }return tmp$ ? $receiver.get_za3lpa$(index) : null;
    }
    function getOrNull_13($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_1($receiver.storage);
      }return tmp$ ? $receiver.get_za3lpa$(index) : null;
    }
    var indexOf_11 = defineInlineFunction('kotlin.kotlin.collections.indexOf_xx0iru$', wrapFunction(function () {
      var indexOf = _.kotlin.collections.indexOf_c03ot6$;
      return function ($receiver, element) {
        return indexOf($receiver.storage, element.data);
      };
    }));
    var indexOf_12 = defineInlineFunction('kotlin.kotlin.collections.indexOf_e8hpy6$', wrapFunction(function () {
      var indexOf = _.kotlin.collections.indexOf_uxdaoa$;
      return function ($receiver, element) {
        return indexOf($receiver.storage, element.data);
      };
    }));
    var indexOf_13 = defineInlineFunction('kotlin.kotlin.collections.indexOf_iga3ee$', wrapFunction(function () {
      var indexOf = _.kotlin.collections.indexOf_jlnu8a$;
      return function ($receiver, element) {
        return indexOf($receiver.storage, element.data);
      };
    }));
    var indexOf_14 = defineInlineFunction('kotlin.kotlin.collections.indexOf_iss4kq$', wrapFunction(function () {
      var indexOf = _.kotlin.collections.indexOf_s7ir3o$;
      return function ($receiver, element) {
        return indexOf($receiver.storage, element.data);
      };
    }));
    var indexOfFirst_12 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_qooazb$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var UInt_init = _.kotlin.UInt;
      var indexOfFirst$lambda = wrapFunction(function () {
        var UInt_init = _.kotlin.UInt;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UInt_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfFirst$result;
        indexOfFirst$break: do {
          for (var index = 0; index !== $receiver_0.length; ++index) {
            if (predicate(new UInt_init($receiver_0[index]))) {
              indexOfFirst$result = index;
              break indexOfFirst$break;
            }}
          indexOfFirst$result = -1;
        }
         while (false);
        return indexOfFirst$result;
      };
    }));
    var indexOfFirst_13 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_xmet5j$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var ULong_init = _.kotlin.ULong;
      var indexOfFirst$lambda = wrapFunction(function () {
        var ULong_init = _.kotlin.ULong;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new ULong_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfFirst$result;
        indexOfFirst$break: do {
          for (var index = 0; index !== $receiver_0.length; ++index) {
            if (predicate(new ULong_init($receiver_0[index]))) {
              indexOfFirst$result = index;
              break indexOfFirst$break;
            }}
          indexOfFirst$result = -1;
        }
         while (false);
        return indexOfFirst$result;
      };
    }));
    var indexOfFirst_14 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_khxg6n$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var UByte_init = _.kotlin.UByte;
      var indexOfFirst$lambda = wrapFunction(function () {
        var UByte_init = _.kotlin.UByte;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UByte_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfFirst$result;
        indexOfFirst$break: do {
          for (var index = 0; index !== $receiver_0.length; ++index) {
            if (predicate(new UByte_init($receiver_0[index]))) {
              indexOfFirst$result = index;
              break indexOfFirst$break;
            }}
          indexOfFirst$result = -1;
        }
         while (false);
        return indexOfFirst$result;
      };
    }));
    var indexOfFirst_15 = defineInlineFunction('kotlin.kotlin.collections.indexOfFirst_zbhqtl$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var UShort_init = _.kotlin.UShort;
      var indexOfFirst$lambda = wrapFunction(function () {
        var UShort_init = _.kotlin.UShort;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UShort_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfFirst$result;
        indexOfFirst$break: do {
          for (var index = 0; index !== $receiver_0.length; ++index) {
            if (predicate(new UShort_init($receiver_0[index]))) {
              indexOfFirst$result = index;
              break indexOfFirst$break;
            }}
          indexOfFirst$result = -1;
        }
         while (false);
        return indexOfFirst$result;
      };
    }));
    var indexOfLast_12 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_qooazb$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var UInt_init = _.kotlin.UInt;
      var indexOfLast$lambda = wrapFunction(function () {
        var UInt_init = _.kotlin.UInt;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UInt_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfLast$result;
        indexOfLast$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver_0)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            if (predicate(new UInt_init($receiver_0[index]))) {
              indexOfLast$result = index;
              break indexOfLast$break;
            }}
          indexOfLast$result = -1;
        }
         while (false);
        return indexOfLast$result;
      };
    }));
    var indexOfLast_13 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_xmet5j$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var ULong_init = _.kotlin.ULong;
      var indexOfLast$lambda = wrapFunction(function () {
        var ULong_init = _.kotlin.ULong;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new ULong_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfLast$result;
        indexOfLast$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver_0)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            if (predicate(new ULong_init($receiver_0[index]))) {
              indexOfLast$result = index;
              break indexOfLast$break;
            }}
          indexOfLast$result = -1;
        }
         while (false);
        return indexOfLast$result;
      };
    }));
    var indexOfLast_14 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_khxg6n$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var UByte_init = _.kotlin.UByte;
      var indexOfLast$lambda = wrapFunction(function () {
        var UByte_init = _.kotlin.UByte;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UByte_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfLast$result;
        indexOfLast$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver_0)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            if (predicate(new UByte_init($receiver_0[index]))) {
              indexOfLast$result = index;
              break indexOfLast$break;
            }}
          indexOfLast$result = -1;
        }
         while (false);
        return indexOfLast$result;
      };
    }));
    var indexOfLast_15 = defineInlineFunction('kotlin.kotlin.collections.indexOfLast_zbhqtl$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var UShort_init = _.kotlin.UShort;
      var indexOfLast$lambda = wrapFunction(function () {
        var UShort_init = _.kotlin.UShort;
        return function (closure$predicate) {
          return function (it) {
            return closure$predicate(new UShort_init(it));
          };
        };
      });
      return function ($receiver, predicate) {
        var $receiver_0 = $receiver.storage;
        var indexOfLast$result;
        indexOfLast$break: do {
          var tmp$;
          tmp$ = reversed(get_indices($receiver_0)).iterator();
          while (tmp$.hasNext()) {
            var index = tmp$.next();
            if (predicate(new UShort_init($receiver_0[index]))) {
              indexOfLast$result = index;
              break indexOfLast$break;
            }}
          indexOfLast$result = -1;
        }
         while (false);
        return indexOfLast$result;
      };
    }));
    var last_25 = defineInlineFunction('kotlin.kotlin.collections.last_9hsmwz$', wrapFunction(function () {
      var last = _.kotlin.collections.last_tmsbgo$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(last($receiver.storage));
      };
    }));
    var last_26 = defineInlineFunction('kotlin.kotlin.collections.last_rnn80q$', wrapFunction(function () {
      var last = _.kotlin.collections.last_se6h4x$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(last($receiver.storage));
      };
    }));
    var last_27 = defineInlineFunction('kotlin.kotlin.collections.last_o5f02i$', wrapFunction(function () {
      var last = _.kotlin.collections.last_964n91$;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(last($receiver.storage));
      };
    }));
    var last_28 = defineInlineFunction('kotlin.kotlin.collections.last_k4ndbq$', wrapFunction(function () {
      var last = _.kotlin.collections.last_i2lc79$;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(last($receiver.storage));
      };
    }));
    var last_29 = defineInlineFunction('kotlin.kotlin.collections.last_qooazb$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_30 = defineInlineFunction('kotlin.kotlin.collections.last_xmet5j$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_31 = defineInlineFunction('kotlin.kotlin.collections.last_khxg6n$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var last_32 = defineInlineFunction('kotlin.kotlin.collections.last_zbhqtl$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        throw new NoSuchElementException_init('Array contains no element matching the predicate.');
      };
    }));
    var lastIndexOf_11 = defineInlineFunction('kotlin.kotlin.collections.lastIndexOf_xx0iru$', wrapFunction(function () {
      var lastIndexOf = _.kotlin.collections.lastIndexOf_c03ot6$;
      return function ($receiver, element) {
        return lastIndexOf($receiver.storage, element.data);
      };
    }));
    var lastIndexOf_12 = defineInlineFunction('kotlin.kotlin.collections.lastIndexOf_e8hpy6$', wrapFunction(function () {
      var lastIndexOf = _.kotlin.collections.lastIndexOf_uxdaoa$;
      return function ($receiver, element) {
        return lastIndexOf($receiver.storage, element.data);
      };
    }));
    var lastIndexOf_13 = defineInlineFunction('kotlin.kotlin.collections.lastIndexOf_iga3ee$', wrapFunction(function () {
      var lastIndexOf = _.kotlin.collections.lastIndexOf_jlnu8a$;
      return function ($receiver, element) {
        return lastIndexOf($receiver.storage, element.data);
      };
    }));
    var lastIndexOf_14 = defineInlineFunction('kotlin.kotlin.collections.lastIndexOf_iss4kq$', wrapFunction(function () {
      var lastIndexOf = _.kotlin.collections.lastIndexOf_s7ir3o$;
      return function ($receiver, element) {
        return lastIndexOf($receiver.storage, element.data);
      };
    }));
    function lastOrNull_25($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
    }
    function lastOrNull_26($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
    }
    function lastOrNull_27($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
    }
    function lastOrNull_28($receiver) {
      return $receiver.isEmpty() ? null : $receiver.get_za3lpa$($receiver.size - 1 | 0);
    }
    var lastOrNull_29 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_qooazb$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_30 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_xmet5j$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_31 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_khxg6n$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var lastOrNull_32 = defineInlineFunction('kotlin.kotlin.collections.lastOrNull_zbhqtl$', wrapFunction(function () {
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver.storage)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          var element = $receiver.get_za3lpa$(index);
          if (predicate(element))
            return element;
        }
        return null;
      };
    }));
    var random_27 = defineInlineFunction('kotlin.kotlin.collections.random_9hsmwz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_b7l3ya$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_28 = defineInlineFunction('kotlin.kotlin.collections.random_rnn80q$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_2qnwpx$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_29 = defineInlineFunction('kotlin.kotlin.collections.random_o5f02i$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_i3mfo9$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_30 = defineInlineFunction('kotlin.kotlin.collections.random_k4ndbq$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.collections.random_7icwln$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_31($receiver, random) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('Array is empty.');
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function random_32($receiver, random) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('Array is empty.');
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function random_33($receiver, random) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('Array is empty.');
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function random_34($receiver, random) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('Array is empty.');
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    var randomOrNull_27 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_9hsmwz$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_b7l3ya$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_28 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_rnn80q$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_2qnwpx$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_29 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_o5f02i$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_i3mfo9$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_30 = defineInlineFunction('kotlin.kotlin.collections.randomOrNull_k4ndbq$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.collections.randomOrNull_7icwln$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_31($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function randomOrNull_32($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function randomOrNull_33($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    function randomOrNull_34($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return $receiver.get_za3lpa$(random.nextInt_za3lpa$($receiver.size));
    }
    var single_24 = defineInlineFunction('kotlin.kotlin.collections.single_9hsmwz$', wrapFunction(function () {
      var single = _.kotlin.collections.single_tmsbgo$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(single($receiver.storage));
      };
    }));
    var single_25 = defineInlineFunction('kotlin.kotlin.collections.single_rnn80q$', wrapFunction(function () {
      var single = _.kotlin.collections.single_se6h4x$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(single($receiver.storage));
      };
    }));
    var single_26 = defineInlineFunction('kotlin.kotlin.collections.single_o5f02i$', wrapFunction(function () {
      var single = _.kotlin.collections.single_964n91$;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(single($receiver.storage));
      };
    }));
    var single_27 = defineInlineFunction('kotlin.kotlin.collections.single_k4ndbq$', wrapFunction(function () {
      var single = _.kotlin.collections.single_i2lc79$;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(single($receiver.storage));
      };
    }));
    var single_28 = defineInlineFunction('kotlin.kotlin.collections.single_qooazb$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var UInt = _.kotlin.UInt;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return Kotlin.isType(tmp$_0 = single, UInt) ? tmp$_0 : throwCCE();
      };
    }));
    var single_29 = defineInlineFunction('kotlin.kotlin.collections.single_xmet5j$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var ULong = _.kotlin.ULong;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return Kotlin.isType(tmp$_0 = single, ULong) ? tmp$_0 : throwCCE();
      };
    }));
    var single_30 = defineInlineFunction('kotlin.kotlin.collections.single_khxg6n$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var UByte = _.kotlin.UByte;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return Kotlin.isType(tmp$_0 = single, UByte) ? tmp$_0 : throwCCE();
      };
    }));
    var single_31 = defineInlineFunction('kotlin.kotlin.collections.single_zbhqtl$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      var NoSuchElementException_init = _.kotlin.NoSuchElementException;
      var UShort = _.kotlin.UShort;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0;
        var single = null;
        var found = false;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            if (found)
              throw IllegalArgumentException_init('Array contains more than one matching element.');
            single = element;
            found = true;
          }}
        if (!found)
          throw new NoSuchElementException_init('Array contains no element matching the predicate.');
        return Kotlin.isType(tmp$_0 = single, UShort) ? tmp$_0 : throwCCE();
      };
    }));
    function singleOrNull_24($receiver) {
      return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
    }
    function singleOrNull_25($receiver) {
      return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
    }
    function singleOrNull_26($receiver) {
      return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
    }
    function singleOrNull_27($receiver) {
      return $receiver.size === 1 ? $receiver.get_za3lpa$(0) : null;
    }
    var singleOrNull_28 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_qooazb$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_29 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_30 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    var singleOrNull_31 = defineInlineFunction('kotlin.kotlin.collections.singleOrNull_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      var single = null;
      var found = false;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          if (found)
            return null;
          single = element;
          found = true;
        }}
      if (!found)
        return null;
      return single;
    });
    function drop_12($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_11($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function drop_13($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_12($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function drop_14($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_13($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function drop_15($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return takeLast_14($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function dropLast_11($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_12($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function dropLast_12($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_13($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function dropLast_13($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_14($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    function dropLast_14($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }return take_15($receiver, coerceAtLeast_2($receiver.size - n | 0, 0));
    }
    var dropLastWhile_11 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_qooazb$', wrapFunction(function () {
      var take = _.kotlin.collections.take_h8io69$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_12 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_xmet5j$', wrapFunction(function () {
      var take = _.kotlin.collections.take_k9lyrg$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_13 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_khxg6n$', wrapFunction(function () {
      var take = _.kotlin.collections.take_hlz5c8$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropLastWhile_14 = defineInlineFunction('kotlin.kotlin.collections.dropLastWhile_zbhqtl$', wrapFunction(function () {
      var take = _.kotlin.collections.take_7156lo$;
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return take($receiver, index + 1 | 0);
          }}
        return emptyList();
      };
    }));
    var dropWhile_12 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_qooazb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_13 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_xmet5j$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_14 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_khxg6n$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var dropWhile_15 = defineInlineFunction('kotlin.kotlin.collections.dropWhile_zbhqtl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var yielding = false;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (yielding)
            list.add_11rb$(item);
          else if (!predicate(item)) {
            list.add_11rb$(item);
            yielding = true;
          }}
        return list;
      };
    }));
    var filter_12 = defineInlineFunction('kotlin.kotlin.collections.filter_qooazb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_13 = defineInlineFunction('kotlin.kotlin.collections.filter_xmet5j$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_14 = defineInlineFunction('kotlin.kotlin.collections.filter_khxg6n$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filter_15 = defineInlineFunction('kotlin.kotlin.collections.filter_zbhqtl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_b50w5$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_qk9l51$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_flgcod$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexed_15 = defineInlineFunction('kotlin.kotlin.collections.filterIndexed_nbkmjf$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
            destination.add_11rb$(item);
        }
        return destination;
      };
    }));
    var filterIndexedTo_11 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_ku9oc1$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_12 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_6qz3q4$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_13 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_6ojnv4$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterIndexedTo_14 = defineInlineFunction('kotlin.kotlin.collections.filterIndexedTo_v5t4zi$', function ($receiver, destination, predicate) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if (predicate((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item))
          destination.add_11rb$(item);
      }
      return destination;
    });
    var filterNot_12 = defineInlineFunction('kotlin.kotlin.collections.filterNot_qooazb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_13 = defineInlineFunction('kotlin.kotlin.collections.filterNot_xmet5j$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_14 = defineInlineFunction('kotlin.kotlin.collections.filterNot_khxg6n$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNot_15 = defineInlineFunction('kotlin.kotlin.collections.filterNot_zbhqtl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element))
            destination.add_11rb$(element);
        }
        return destination;
      };
    }));
    var filterNotTo_11 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_gqevbp$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_12 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_xxeg5c$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_13 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_9jj6to$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterNotTo_14 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_z9kluq$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_11 = defineInlineFunction('kotlin.kotlin.collections.filterTo_gqevbp$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_12 = defineInlineFunction('kotlin.kotlin.collections.filterTo_xxeg5c$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_13 = defineInlineFunction('kotlin.kotlin.collections.filterTo_9jj6to$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    var filterTo_14 = defineInlineFunction('kotlin.kotlin.collections.filterTo_z9kluq$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          destination.add_11rb$(element);
      }
      return destination;
    });
    function slice_23($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList_8(new UIntArray(copyOfRange_6($receiver.storage, indices.start, indices.endInclusive + 1 | 0)));
    }
    function slice_24($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList_9(new ULongArray(copyOfRange_7($receiver.storage, indices.start, indices.endInclusive + 1 | 0)));
    }
    function slice_25($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList_10(new UByteArray(copyOfRange_4($receiver.storage, indices.start, indices.endInclusive + 1 | 0)));
    }
    function slice_26($receiver, indices) {
      if (indices.isEmpty()) {
        return emptyList();
      }return asList_11(new UShortArray(copyOfRange_5($receiver.storage, indices.start, indices.endInclusive + 1 | 0)));
    }
    function slice_27($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver.get_za3lpa$(index));
      }
      return list;
    }
    function slice_28($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver.get_za3lpa$(index));
      }
      return list;
    }
    function slice_29($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver.get_za3lpa$(index));
      }
      return list;
    }
    function slice_30($receiver, indices) {
      var tmp$;
      var size = collectionSizeOrDefault(indices, 10);
      if (size === 0)
        return emptyList();
      var list = ArrayList_init_0(size);
      tmp$ = indices.iterator();
      while (tmp$.hasNext()) {
        var index = tmp$.next();
        list.add_11rb$($receiver.get_za3lpa$(index));
      }
      return list;
    }
    function sliceArray_17($receiver, indices) {
      return new UIntArray(sliceArray_2($receiver.storage, indices));
    }
    function sliceArray_18($receiver, indices) {
      return new ULongArray(sliceArray_3($receiver.storage, indices));
    }
    function sliceArray_19($receiver, indices) {
      return new UByteArray(sliceArray_0($receiver.storage, indices));
    }
    function sliceArray_20($receiver, indices) {
      return new UShortArray(sliceArray_1($receiver.storage, indices));
    }
    function sliceArray_21($receiver, indices) {
      return new UIntArray(sliceArray_11($receiver.storage, indices));
    }
    function sliceArray_22($receiver, indices) {
      return new ULongArray(sliceArray_12($receiver.storage, indices));
    }
    function sliceArray_23($receiver, indices) {
      return new UByteArray(sliceArray_9($receiver.storage, indices));
    }
    function sliceArray_24($receiver, indices) {
      return new UShortArray(sliceArray_10($receiver.storage, indices));
    }
    function take_12($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(0));
      var count = 0;
      var list = ArrayList_init_0(n);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_13($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(0));
      var count = 0;
      var list = ArrayList_init_0(n);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_14($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(0));
      var count = 0;
      var list = ArrayList_init_0(n);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function take_15($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      if (n >= $receiver.size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(0));
      var count = 0;
      var list = ArrayList_init_0(n);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        list.add_11rb$(item);
        if ((count = count + 1 | 0, count) === n)
          break;
      }
      return list;
    }
    function takeLast_11($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.size;
      if (n >= size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(size - 1 | 0));
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver.get_za3lpa$(index));
      return list;
    }
    function takeLast_12($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.size;
      if (n >= size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(size - 1 | 0));
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver.get_za3lpa$(index));
      return list;
    }
    function takeLast_13($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.size;
      if (n >= size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(size - 1 | 0));
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver.get_za3lpa$(index));
      return list;
    }
    function takeLast_14($receiver, n) {
      if (!(n >= 0)) {
        var message = 'Requested element count ' + n + ' is less than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }if (n === 0)
        return emptyList();
      var size = $receiver.size;
      if (n >= size)
        return toList_8($receiver);
      if (n === 1)
        return listOf($receiver.get_za3lpa$(size - 1 | 0));
      var list = ArrayList_init_0(n);
      for (var index = size - n | 0; index < size; index++)
        list.add_11rb$($receiver.get_za3lpa$(index));
      return list;
    }
    var takeLastWhile_11 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_qooazb$', wrapFunction(function () {
      var drop = _.kotlin.collections.drop_h8io69$;
      var toList = _.kotlin.collections.toList_7wnvza$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_12 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_xmet5j$', wrapFunction(function () {
      var drop = _.kotlin.collections.drop_k9lyrg$;
      var toList = _.kotlin.collections.toList_7wnvza$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_13 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_khxg6n$', wrapFunction(function () {
      var drop = _.kotlin.collections.drop_hlz5c8$;
      var toList = _.kotlin.collections.toList_7wnvza$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeLastWhile_14 = defineInlineFunction('kotlin.kotlin.collections.takeLastWhile_zbhqtl$', wrapFunction(function () {
      var drop = _.kotlin.collections.drop_7156lo$;
      var toList = _.kotlin.collections.toList_7wnvza$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, predicate) {
        for (var index = get_lastIndex($receiver.storage); index >= 0; index--) {
          if (!predicate($receiver.get_za3lpa$(index))) {
            return drop($receiver, index + 1 | 0);
          }}
        return toList($receiver);
      };
    }));
    var takeWhile_12 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_qooazb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_13 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_xmet5j$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_14 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_khxg6n$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var takeWhile_15 = defineInlineFunction('kotlin.kotlin.collections.takeWhile_zbhqtl$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, predicate) {
        var tmp$;
        var list = ArrayList_init();
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (!predicate(item))
            break;
          list.add_11rb$(item);
        }
        return list;
      };
    }));
    var reverse_8 = defineInlineFunction('kotlin.kotlin.collections.reverse_9hsmwz$', wrapFunction(function () {
      var reverse = _.kotlin.collections.reverse_tmsbgo$;
      return function ($receiver) {
        reverse($receiver.storage);
      };
    }));
    var reverse_9 = defineInlineFunction('kotlin.kotlin.collections.reverse_rnn80q$', wrapFunction(function () {
      var reverse = _.kotlin.collections.reverse_se6h4x$;
      return function ($receiver) {
        reverse($receiver.storage);
      };
    }));
    var reverse_10 = defineInlineFunction('kotlin.kotlin.collections.reverse_o5f02i$', wrapFunction(function () {
      var reverse = _.kotlin.collections.reverse_964n91$;
      return function ($receiver) {
        reverse($receiver.storage);
      };
    }));
    var reverse_11 = defineInlineFunction('kotlin.kotlin.collections.reverse_k4ndbq$', wrapFunction(function () {
      var reverse = _.kotlin.collections.reverse_i2lc79$;
      return function ($receiver) {
        reverse($receiver.storage);
      };
    }));
    function reversed_14($receiver) {
      if ($receiver.isEmpty())
        return emptyList();
      var list = toMutableList_9($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_15($receiver) {
      if ($receiver.isEmpty())
        return emptyList();
      var list = toMutableList_9($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_16($receiver) {
      if ($receiver.isEmpty())
        return emptyList();
      var list = toMutableList_9($receiver);
      reverse_12(list);
      return list;
    }
    function reversed_17($receiver) {
      if ($receiver.isEmpty())
        return emptyList();
      var list = toMutableList_9($receiver);
      reverse_12(list);
      return list;
    }
    var reversedArray_8 = defineInlineFunction('kotlin.kotlin.collections.reversedArray_9hsmwz$', wrapFunction(function () {
      var reversedArray = _.kotlin.collections.reversedArray_tmsbgo$;
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver) {
        return new UIntArray_init(reversedArray($receiver.storage));
      };
    }));
    var reversedArray_9 = defineInlineFunction('kotlin.kotlin.collections.reversedArray_rnn80q$', wrapFunction(function () {
      var reversedArray = _.kotlin.collections.reversedArray_se6h4x$;
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver) {
        return new ULongArray_init(reversedArray($receiver.storage));
      };
    }));
    var reversedArray_10 = defineInlineFunction('kotlin.kotlin.collections.reversedArray_o5f02i$', wrapFunction(function () {
      var reversedArray = _.kotlin.collections.reversedArray_964n91$;
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver) {
        return new UByteArray_init(reversedArray($receiver.storage));
      };
    }));
    var reversedArray_11 = defineInlineFunction('kotlin.kotlin.collections.reversedArray_k4ndbq$', wrapFunction(function () {
      var reversedArray = _.kotlin.collections.reversedArray_i2lc79$;
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver) {
        return new UShortArray_init(reversedArray($receiver.storage));
      };
    }));
    function sortDescending_8($receiver) {
      if ($receiver.size > 1) {
        sort_0($receiver);
        reverse_2($receiver.storage);
      }}
    function sortDescending_9($receiver) {
      if ($receiver.size > 1) {
        sort_1($receiver);
        reverse_3($receiver.storage);
      }}
    function sortDescending_10($receiver) {
      if ($receiver.size > 1) {
        sort_2($receiver);
        reverse_0($receiver.storage);
      }}
    function sortDescending_11($receiver) {
      if ($receiver.size > 1) {
        sort_3($receiver);
        reverse_1($receiver.storage);
      }}
    function sorted_9($receiver) {
      var $receiver_0 = new UIntArray($receiver.storage.slice());
      sort_0($receiver_0);
      return asList_8($receiver_0);
    }
    function sorted_10($receiver) {
      var $receiver_0 = new ULongArray(copyOf_11($receiver.storage));
      sort_1($receiver_0);
      return asList_9($receiver_0);
    }
    function sorted_11($receiver) {
      var $receiver_0 = new UByteArray($receiver.storage.slice());
      sort_2($receiver_0);
      return asList_10($receiver_0);
    }
    function sorted_12($receiver) {
      var $receiver_0 = new UShortArray($receiver.storage.slice());
      sort_3($receiver_0);
      return asList_11($receiver_0);
    }
    function sortedArray_7($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UIntArray($receiver.storage.slice());
      sort_0($receiver_0);
      return $receiver_0;
    }
    function sortedArray_8($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new ULongArray(copyOf_11($receiver.storage));
      sort_1($receiver_0);
      return $receiver_0;
    }
    function sortedArray_9($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UByteArray($receiver.storage.slice());
      sort_2($receiver_0);
      return $receiver_0;
    }
    function sortedArray_10($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UShortArray($receiver.storage.slice());
      sort_3($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_7($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UIntArray($receiver.storage.slice());
      sortDescending_8($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_8($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new ULongArray(copyOf_11($receiver.storage));
      sortDescending_9($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_9($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UByteArray($receiver.storage.slice());
      sortDescending_10($receiver_0);
      return $receiver_0;
    }
    function sortedArrayDescending_10($receiver) {
      if ($receiver.isEmpty())
        return $receiver;
      var $receiver_0 = new UShortArray($receiver.storage.slice());
      sortDescending_11($receiver_0);
      return $receiver_0;
    }
    function sortedDescending_9($receiver) {
      var $receiver_0 = new UIntArray($receiver.storage.slice());
      sort_0($receiver_0);
      return reversed_14($receiver_0);
    }
    function sortedDescending_10($receiver) {
      var $receiver_0 = new ULongArray(copyOf_11($receiver.storage));
      sort_1($receiver_0);
      return reversed_15($receiver_0);
    }
    function sortedDescending_11($receiver) {
      var $receiver_0 = new UByteArray($receiver.storage.slice());
      sort_2($receiver_0);
      return reversed_16($receiver_0);
    }
    function sortedDescending_12($receiver) {
      var $receiver_0 = new UShortArray($receiver.storage.slice());
      sort_3($receiver_0);
      return reversed_17($receiver_0);
    }
    var asByteArray = defineInlineFunction('kotlin.kotlin.collections.asByteArray_o5f02i$', function ($receiver) {
      return $receiver.storage;
    });
    var asIntArray = defineInlineFunction('kotlin.kotlin.collections.asIntArray_9hsmwz$', function ($receiver) {
      return $receiver.storage;
    });
    var asLongArray = defineInlineFunction('kotlin.kotlin.collections.asLongArray_rnn80q$', function ($receiver) {
      return $receiver.storage;
    });
    var asShortArray = defineInlineFunction('kotlin.kotlin.collections.asShortArray_k4ndbq$', function ($receiver) {
      return $receiver.storage;
    });
    var asUByteArray = defineInlineFunction('kotlin.kotlin.collections.asUByteArray_964n91$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver) {
        return new UByteArray_init($receiver);
      };
    }));
    var asUIntArray = defineInlineFunction('kotlin.kotlin.collections.asUIntArray_tmsbgo$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver) {
        return new UIntArray_init($receiver);
      };
    }));
    var asULongArray = defineInlineFunction('kotlin.kotlin.collections.asULongArray_se6h4x$', wrapFunction(function () {
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver) {
        return new ULongArray_init($receiver);
      };
    }));
    var asUShortArray = defineInlineFunction('kotlin.kotlin.collections.asUShortArray_i2lc79$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver) {
        return new UShortArray_init($receiver);
      };
    }));
    function contentEquals_0($receiver, other) {
      return contentEquals($receiver.storage, other.storage);
    }
    function contentEquals_1($receiver, other) {
      return contentEquals($receiver.storage, other.storage);
    }
    function contentEquals_2($receiver, other) {
      return contentEquals($receiver.storage, other.storage);
    }
    function contentEquals_3($receiver, other) {
      return contentEquals($receiver.storage, other.storage);
    }
    function contentHashCode_0($receiver) {
      return contentHashCode($receiver.storage);
    }
    function contentHashCode_1($receiver) {
      return contentHashCode($receiver.storage);
    }
    function contentHashCode_2($receiver) {
      return contentHashCode($receiver.storage);
    }
    function contentHashCode_3($receiver) {
      return contentHashCode($receiver.storage);
    }
    function contentToString($receiver) {
      return joinToString_8($receiver, ', ', '[', ']');
    }
    function contentToString_0($receiver) {
      return joinToString_8($receiver, ', ', '[', ']');
    }
    function contentToString_1($receiver) {
      return joinToString_8($receiver, ', ', '[', ']');
    }
    function contentToString_2($receiver) {
      return joinToString_8($receiver, ', ', '[', ']');
    }
    var copyInto = defineInlineFunction('kotlin.kotlin.collections.copyInto_obrcu7$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.size;
        arrayCopy($receiver.storage, destination.storage, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_0 = defineInlineFunction('kotlin.kotlin.collections.copyInto_jkamab$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.size;
        arrayCopy($receiver.storage, destination.storage, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_1 = defineInlineFunction('kotlin.kotlin.collections.copyInto_qvi9gr$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.size;
        arrayCopy($receiver.storage, destination.storage, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_2 = defineInlineFunction('kotlin.kotlin.collections.copyInto_7fpan5$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.size;
        arrayCopy($receiver.storage, destination.storage, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyOf = defineInlineFunction('kotlin.kotlin.collections.copyOf_9hsmwz$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver) {
        return new UIntArray_init($receiver.storage.slice());
      };
    }));
    var copyOf_0 = defineInlineFunction('kotlin.kotlin.collections.copyOf_rnn80q$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_se6h4x$;
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver) {
        return new ULongArray_init(copyOf($receiver.storage));
      };
    }));
    var copyOf_1 = defineInlineFunction('kotlin.kotlin.collections.copyOf_o5f02i$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver) {
        return new UByteArray_init($receiver.storage.slice());
      };
    }));
    var copyOf_2 = defineInlineFunction('kotlin.kotlin.collections.copyOf_k4ndbq$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver) {
        return new UShortArray_init($receiver.storage.slice());
      };
    }));
    var copyOf_3 = defineInlineFunction('kotlin.kotlin.collections.copyOf_h8io69$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_c03ot6$;
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver, newSize) {
        return new UIntArray_init(copyOf($receiver.storage, newSize));
      };
    }));
    var copyOf_4 = defineInlineFunction('kotlin.kotlin.collections.copyOf_k9lyrg$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_3aefkx$;
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver, newSize) {
        return new ULongArray_init(copyOf($receiver.storage, newSize));
      };
    }));
    var copyOf_5 = defineInlineFunction('kotlin.kotlin.collections.copyOf_hlz5c8$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_mrm5p$;
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver, newSize) {
        return new UByteArray_init(copyOf($receiver.storage, newSize));
      };
    }));
    var copyOf_6 = defineInlineFunction('kotlin.kotlin.collections.copyOf_7156lo$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_m2jy6x$;
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver, newSize) {
        return new UShortArray_init(copyOf($receiver.storage, newSize));
      };
    }));
    var copyOfRange = defineInlineFunction('kotlin.kotlin.collections.copyOfRange_cb631t$', wrapFunction(function () {
      var copyOfRange = _.kotlin.collections.copyOfRange_6pxxqk$;
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver, fromIndex, toIndex) {
        return new UIntArray_init(copyOfRange($receiver.storage, fromIndex, toIndex));
      };
    }));
    var copyOfRange_0 = defineInlineFunction('kotlin.kotlin.collections.copyOfRange_xv12r2$', wrapFunction(function () {
      var copyOfRange = _.kotlin.collections.copyOfRange_2n8m0j$;
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver, fromIndex, toIndex) {
        return new ULongArray_init(copyOfRange($receiver.storage, fromIndex, toIndex));
      };
    }));
    var copyOfRange_1 = defineInlineFunction('kotlin.kotlin.collections.copyOfRange_csz0hm$', wrapFunction(function () {
      var copyOfRange = _.kotlin.collections.copyOfRange_ietg8x$;
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver, fromIndex, toIndex) {
        return new UByteArray_init(copyOfRange($receiver.storage, fromIndex, toIndex));
      };
    }));
    var copyOfRange_2 = defineInlineFunction('kotlin.kotlin.collections.copyOfRange_7s1pa$', wrapFunction(function () {
      var copyOfRange = _.kotlin.collections.copyOfRange_qxueih$;
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver, fromIndex, toIndex) {
        return new UShortArray_init(copyOfRange($receiver.storage, fromIndex, toIndex));
      };
    }));
    function fill($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      fill_6($receiver.storage, element.data, fromIndex, toIndex);
    }
    function fill_0($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      fill_7($receiver.storage, element.data, fromIndex, toIndex);
    }
    function fill_1($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      fill_4($receiver.storage, element.data, fromIndex, toIndex);
    }
    function fill_2($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      fill_5($receiver.storage, element.data, fromIndex, toIndex);
    }
    var get_indices_8 = defineInlineFunction('kotlin.kotlin.collections.get_indices_9hsmwz$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      return function ($receiver) {
        return get_indices($receiver.storage);
      };
    }));
    var get_indices_9 = defineInlineFunction('kotlin.kotlin.collections.get_indices_rnn80q$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      return function ($receiver) {
        return get_indices($receiver.storage);
      };
    }));
    var get_indices_10 = defineInlineFunction('kotlin.kotlin.collections.get_indices_o5f02i$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      return function ($receiver) {
        return get_indices($receiver.storage);
      };
    }));
    var get_indices_11 = defineInlineFunction('kotlin.kotlin.collections.get_indices_k4ndbq$', wrapFunction(function () {
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      return function ($receiver) {
        return get_indices($receiver.storage);
      };
    }));
    var get_lastIndex_8 = defineInlineFunction('kotlin.kotlin.collections.get_lastIndex_9hsmwz$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver) {
        return get_lastIndex($receiver.storage);
      };
    }));
    var get_lastIndex_9 = defineInlineFunction('kotlin.kotlin.collections.get_lastIndex_rnn80q$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver) {
        return get_lastIndex($receiver.storage);
      };
    }));
    var get_lastIndex_10 = defineInlineFunction('kotlin.kotlin.collections.get_lastIndex_o5f02i$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver) {
        return get_lastIndex($receiver.storage);
      };
    }));
    var get_lastIndex_11 = defineInlineFunction('kotlin.kotlin.collections.get_lastIndex_k4ndbq$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver) {
        return get_lastIndex($receiver.storage);
      };
    }));
    var plus_15 = defineInlineFunction('kotlin.kotlin.collections.plus_xx0iru$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        var tmp$ = $receiver.storage;
        var element_0 = element.data;
        return new UIntArray_init(primitiveArrayConcat(tmp$, new Int32Array([element_0])));
      };
    }));
    var plus_16 = defineInlineFunction('kotlin.kotlin.collections.plus_e8hpy6$', wrapFunction(function () {
      var ULongArray_init = _.kotlin.ULongArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return new ULongArray_init(primitiveArrayConcat($receiver.storage, Kotlin.longArrayOf(element.data)));
      };
    }));
    var plus_17 = defineInlineFunction('kotlin.kotlin.collections.plus_iga3ee$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        var tmp$ = $receiver.storage;
        var element_0 = element.data;
        return new UByteArray_init(primitiveArrayConcat(tmp$, new Int8Array([element_0])));
      };
    }));
    var plus_18 = defineInlineFunction('kotlin.kotlin.collections.plus_iss4kq$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        var tmp$ = $receiver.storage;
        var element_0 = element.data;
        return new UShortArray_init(primitiveArrayConcat(tmp$, new Int16Array([element_0])));
      };
    }));
    function plus_19($receiver, elements) {
      var tmp$, tmp$_0;
      var index = $receiver.size;
      var result = copyOf_18($receiver.storage, $receiver.size + elements.size | 0);
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element.data;
      }
      return new UIntArray(result);
    }
    function plus_20($receiver, elements) {
      var tmp$, tmp$_0;
      var index = $receiver.size;
      var result = copyOf_19($receiver.storage, $receiver.size + elements.size | 0);
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element.data;
      }
      return new ULongArray(result);
    }
    function plus_21($receiver, elements) {
      var tmp$, tmp$_0;
      var index = $receiver.size;
      var result = copyOf_16($receiver.storage, $receiver.size + elements.size | 0);
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element.data;
      }
      return new UByteArray(result);
    }
    function plus_22($receiver, elements) {
      var tmp$, tmp$_0;
      var index = $receiver.size;
      var result = copyOf_17($receiver.storage, $receiver.size + elements.size | 0);
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element.data;
      }
      return new UShortArray(result);
    }
    var plus_23 = defineInlineFunction('kotlin.kotlin.collections.plus_yvstjl$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return new UIntArray_init(primitiveArrayConcat($receiver.storage, elements.storage));
      };
    }));
    var plus_24 = defineInlineFunction('kotlin.kotlin.collections.plus_oi0tr9$', wrapFunction(function () {
      var ULongArray_init = _.kotlin.ULongArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return new ULongArray_init(primitiveArrayConcat($receiver.storage, elements.storage));
      };
    }));
    var plus_25 = defineInlineFunction('kotlin.kotlin.collections.plus_7u5a2r$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return new UByteArray_init(primitiveArrayConcat($receiver.storage, elements.storage));
      };
    }));
    var plus_26 = defineInlineFunction('kotlin.kotlin.collections.plus_7t078x$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return new UShortArray_init(primitiveArrayConcat($receiver.storage, elements.storage));
      };
    }));
    function sort_0($receiver) {
      if ($receiver.size > 1)
        sortArray_2($receiver);
    }
    function sort_1($receiver) {
      if ($receiver.size > 1)
        sortArray_3($receiver);
    }
    function sort_2($receiver) {
      if ($receiver.size > 1)
        sortArray_0($receiver);
    }
    function sort_3($receiver) {
      if ($receiver.size > 1)
        sortArray_1($receiver);
    }
    var toByteArray_1 = defineInlineFunction('kotlin.kotlin.collections.toByteArray_o5f02i$', function ($receiver) {
      return $receiver.storage.slice();
    });
    var toIntArray_1 = defineInlineFunction('kotlin.kotlin.collections.toIntArray_9hsmwz$', function ($receiver) {
      return $receiver.storage.slice();
    });
    var toLongArray_1 = defineInlineFunction('kotlin.kotlin.collections.toLongArray_rnn80q$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_se6h4x$;
      return function ($receiver) {
        return copyOf($receiver.storage);
      };
    }));
    var toShortArray_1 = defineInlineFunction('kotlin.kotlin.collections.toShortArray_k4ndbq$', function ($receiver) {
      return $receiver.storage.slice();
    });
    function toTypedArray$lambda(this$toTypedArray) {
      return function (index) {
        return this$toTypedArray.get_za3lpa$(index);
      };
    }
    function toTypedArray($receiver) {
      return Kotlin.newArrayF($receiver.size, toTypedArray$lambda($receiver));
    }
    function toTypedArray$lambda_0(this$toTypedArray) {
      return function (index) {
        return this$toTypedArray.get_za3lpa$(index);
      };
    }
    function toTypedArray_0($receiver) {
      return Kotlin.newArrayF($receiver.size, toTypedArray$lambda_0($receiver));
    }
    function toTypedArray$lambda_1(this$toTypedArray) {
      return function (index) {
        return this$toTypedArray.get_za3lpa$(index);
      };
    }
    function toTypedArray_1($receiver) {
      return Kotlin.newArrayF($receiver.size, toTypedArray$lambda_1($receiver));
    }
    function toTypedArray$lambda_2(this$toTypedArray) {
      return function (index) {
        return this$toTypedArray.get_za3lpa$(index);
      };
    }
    function toTypedArray_2($receiver) {
      return Kotlin.newArrayF($receiver.size, toTypedArray$lambda_2($receiver));
    }
    function toUByteArray$lambda(this$toUByteArray) {
      return function (index) {
        return this$toUByteArray[index];
      };
    }
    function toUByteArray($receiver) {
      return new UByteArray(Kotlin.fillArray(new Int8Array($receiver.length), UByteArray$lambda(toUByteArray$lambda($receiver))));
    }
    var toUByteArray_0 = defineInlineFunction('kotlin.kotlin.collections.toUByteArray_964n91$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      return function ($receiver) {
        return new UByteArray_init($receiver.slice());
      };
    }));
    function toUIntArray$lambda(this$toUIntArray) {
      return function (index) {
        return this$toUIntArray[index];
      };
    }
    function toUIntArray($receiver) {
      return new UIntArray(Kotlin.fillArray(new Int32Array($receiver.length), UIntArray$lambda(toUIntArray$lambda($receiver))));
    }
    var toUIntArray_0 = defineInlineFunction('kotlin.kotlin.collections.toUIntArray_tmsbgo$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      return function ($receiver) {
        return new UIntArray_init($receiver.slice());
      };
    }));
    function toULongArray$lambda(this$toULongArray) {
      return function (index) {
        return this$toULongArray[index];
      };
    }
    function toULongArray($receiver) {
      return new ULongArray(Kotlin.longArrayF($receiver.length, ULongArray$lambda(toULongArray$lambda($receiver))));
    }
    var toULongArray_0 = defineInlineFunction('kotlin.kotlin.collections.toULongArray_se6h4x$', wrapFunction(function () {
      var copyOf = _.kotlin.collections.copyOf_se6h4x$;
      var ULongArray_init = _.kotlin.ULongArray;
      return function ($receiver) {
        return new ULongArray_init(copyOf($receiver));
      };
    }));
    function toUShortArray$lambda(this$toUShortArray) {
      return function (index) {
        return this$toUShortArray[index];
      };
    }
    function toUShortArray($receiver) {
      return new UShortArray(Kotlin.fillArray(new Int16Array($receiver.length), UShortArray$lambda(toUShortArray$lambda($receiver))));
    }
    var toUShortArray_0 = defineInlineFunction('kotlin.kotlin.collections.toUShortArray_i2lc79$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      return function ($receiver) {
        return new UShortArray_init($receiver.slice());
      };
    }));
    var flatMap_12 = defineInlineFunction('kotlin.kotlin.collections.flatMap_9x3iol$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_13 = defineInlineFunction('kotlin.kotlin.collections.flatMap_kl1qv1$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_14 = defineInlineFunction('kotlin.kotlin.collections.flatMap_meox5n$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMap_15 = defineInlineFunction('kotlin.kotlin.collections.flatMap_qlvsvp$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, transform) {
        var destination = ArrayList_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_12 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_2mlxn4$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_13 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_lr0q20$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_14 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_ks816o$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var flatMapTo_15 = defineInlineFunction('kotlin.kotlin.collections.flatMapTo_sj6bcg$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, destination, transform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var list = transform(element);
          addAll(destination, list);
        }
        return destination;
      };
    }));
    var groupBy_23 = defineInlineFunction('kotlin.kotlin.collections.groupBy_u4a5xu$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_24 = defineInlineFunction('kotlin.kotlin.collections.groupBy_zdbp9g$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_25 = defineInlineFunction('kotlin.kotlin.collections.groupBy_kzs0c$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_26 = defineInlineFunction('kotlin.kotlin.collections.groupBy_2isg0e$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupBy_27 = defineInlineFunction('kotlin.kotlin.collections.groupBy_gswmyr$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_28 = defineInlineFunction('kotlin.kotlin.collections.groupBy_9qm17u$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_29 = defineInlineFunction('kotlin.kotlin.collections.groupBy_th0ibu$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupBy_30 = defineInlineFunction('kotlin.kotlin.collections.groupBy_4blai2$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, keySelector, valueTransform) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_23 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_fcjoze$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_24 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_vtu9nb$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_25 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_ktjfzn$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_26 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_ce468p$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(element);
        }
        return destination;
      };
    }));
    var groupByTo_27 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_b5z689$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_28 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_rmnvm8$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_29 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_mp9yos$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var groupByTo_30 = defineInlineFunction('kotlin.kotlin.collections.groupByTo_7f472c$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function ($receiver, destination, keySelector, valueTransform) {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          var key = keySelector(element);
          var tmp$_0;
          var value = destination.get_11rb$(key);
          if (value == null) {
            var answer = ArrayList_init();
            destination.put_xwzc9p$(key, answer);
            tmp$_0 = answer;
          } else {
            tmp$_0 = value;
          }
          var list = tmp$_0;
          list.add_11rb$(valueTransform(element));
        }
        return destination;
      };
    }));
    var map_12 = defineInlineFunction('kotlin.kotlin.collections.map_u4a5xu$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_13 = defineInlineFunction('kotlin.kotlin.collections.map_zdbp9g$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_14 = defineInlineFunction('kotlin.kotlin.collections.map_kzs0c$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var map_15 = defineInlineFunction('kotlin.kotlin.collections.map_2isg0e$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return destination;
      };
    }));
    var mapIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_jouoa$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_395egw$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_49o2oo$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.mapIndexed_ef33e$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, transform) {
        var destination = ArrayList_init($receiver.size);
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
        }
        return destination;
      };
    }));
    var mapIndexedTo_11 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_rvnxhh$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_12 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_9b7vob$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_13 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_goploj$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapIndexedTo_14 = defineInlineFunction('kotlin.kotlin.collections.mapIndexedTo_58tnad$', function ($receiver, destination, transform) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item));
      }
      return destination;
    });
    var mapTo_12 = defineInlineFunction('kotlin.kotlin.collections.mapTo_a7z7jd$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_13 = defineInlineFunction('kotlin.kotlin.collections.mapTo_pyoptr$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_14 = defineInlineFunction('kotlin.kotlin.collections.mapTo_8x217r$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    var mapTo_15 = defineInlineFunction('kotlin.kotlin.collections.mapTo_sq9iuv$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(transform(item));
      }
      return destination;
    });
    function withIndex$lambda_10(this$withIndex) {
      return function () {
        return this$withIndex.iterator();
      };
    }
    function withIndex_11($receiver) {
      return new IndexingIterable(withIndex$lambda_10($receiver));
    }
    function withIndex$lambda_11(this$withIndex) {
      return function () {
        return this$withIndex.iterator();
      };
    }
    function withIndex_12($receiver) {
      return new IndexingIterable(withIndex$lambda_11($receiver));
    }
    function withIndex$lambda_12(this$withIndex) {
      return function () {
        return this$withIndex.iterator();
      };
    }
    function withIndex_13($receiver) {
      return new IndexingIterable(withIndex$lambda_12($receiver));
    }
    function withIndex$lambda_13(this$withIndex) {
      return function () {
        return this$withIndex.iterator();
      };
    }
    function withIndex_14($receiver) {
      return new IndexingIterable(withIndex$lambda_13($receiver));
    }
    var all_12 = defineInlineFunction('kotlin.kotlin.collections.all_qooazb$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_13 = defineInlineFunction('kotlin.kotlin.collections.all_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_14 = defineInlineFunction('kotlin.kotlin.collections.all_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var all_15 = defineInlineFunction('kotlin.kotlin.collections.all_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element))
          return false;
      }
      return true;
    });
    var any_25 = defineInlineFunction('kotlin.kotlin.collections.any_9hsmwz$', wrapFunction(function () {
      var any = _.kotlin.collections.any_tmsbgo$;
      return function ($receiver) {
        return any($receiver.storage);
      };
    }));
    var any_26 = defineInlineFunction('kotlin.kotlin.collections.any_rnn80q$', wrapFunction(function () {
      var any = _.kotlin.collections.any_se6h4x$;
      return function ($receiver) {
        return any($receiver.storage);
      };
    }));
    var any_27 = defineInlineFunction('kotlin.kotlin.collections.any_o5f02i$', wrapFunction(function () {
      var any = _.kotlin.collections.any_964n91$;
      return function ($receiver) {
        return any($receiver.storage);
      };
    }));
    var any_28 = defineInlineFunction('kotlin.kotlin.collections.any_k4ndbq$', wrapFunction(function () {
      var any = _.kotlin.collections.any_i2lc79$;
      return function ($receiver) {
        return any($receiver.storage);
      };
    }));
    var any_29 = defineInlineFunction('kotlin.kotlin.collections.any_qooazb$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_30 = defineInlineFunction('kotlin.kotlin.collections.any_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_31 = defineInlineFunction('kotlin.kotlin.collections.any_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    var any_32 = defineInlineFunction('kotlin.kotlin.collections.any_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return true;
      }
      return false;
    });
    var count_26 = defineInlineFunction('kotlin.kotlin.collections.count_qooazb$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_27 = defineInlineFunction('kotlin.kotlin.collections.count_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_28 = defineInlineFunction('kotlin.kotlin.collections.count_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var count_29 = defineInlineFunction('kotlin.kotlin.collections.count_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      var count = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          count = count + 1 | 0;
      }
      return count;
    });
    var fold_11 = defineInlineFunction('kotlin.kotlin.collections.fold_cc7t7m$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_12 = defineInlineFunction('kotlin.kotlin.collections.fold_hnxoxe$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_13 = defineInlineFunction('kotlin.kotlin.collections.fold_108ycy$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var fold_14 = defineInlineFunction('kotlin.kotlin.collections.fold_yg11c4$', function ($receiver, initial, operation) {
      var tmp$;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation(accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_rqncna$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_qls2om$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_5t7keu$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.foldIndexed_p2uijk$', function ($receiver, initial, operation) {
      var tmp$, tmp$_0;
      var index = 0;
      var accumulator = initial;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        accumulator = operation((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), accumulator, element);
      }
      return accumulator;
    });
    var foldRight_10 = defineInlineFunction('kotlin.kotlin.collections.foldRight_5s0g0$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$)), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_11 = defineInlineFunction('kotlin.kotlin.collections.foldRight_lyd3s4$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$)), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_12 = defineInlineFunction('kotlin.kotlin.collections.foldRight_dta9x0$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$)), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRight_13 = defineInlineFunction('kotlin.kotlin.collections.foldRight_5zirmo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, initial, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$)), accumulator);
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_10 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_fk7jvo$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_d0iq0w$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_im8vyw$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var foldRightIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.foldRightIndexed_fcpaf8$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, initial, operation) {
        var index = get_lastIndex($receiver.storage);
        var accumulator = initial;
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var forEach_12 = defineInlineFunction('kotlin.kotlin.collections.forEach_eawsih$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEach_13 = defineInlineFunction('kotlin.kotlin.collections.forEach_1whwah$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEach_14 = defineInlineFunction('kotlin.kotlin.collections.forEach_59pkyn$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEach_15 = defineInlineFunction('kotlin.kotlin.collections.forEach_k1g2rr$', function ($receiver, action) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        action(element);
      }
    });
    var forEachIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_xun1h1$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_domd91$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_dagzgd$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    var forEachIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.forEachIndexed_kerkq3$', function ($receiver, action) {
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        action((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), item);
      }
    });
    function max_16($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_2($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (uintCompare(max.data, e.data) < 0)
          max = e;
      }
      return max;
    }
    function max_17($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_3($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (ulongCompare(max.data, e.data) < 0)
          max = e;
      }
      return max;
    }
    function max_18($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_0($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (Kotlin.primitiveCompareTo(max.data & 255, e.data & 255) < 0)
          max = e;
      }
      return max;
    }
    function max_19($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_1($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (Kotlin.primitiveCompareTo(max.data & 65535, e.data & 65535) < 0)
          max = e;
      }
      return max;
    }
    var maxBy_12 = defineInlineFunction('kotlin.kotlin.collections.maxBy_ds5w84$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var maxElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_13 = defineInlineFunction('kotlin.kotlin.collections.maxBy_j7uywm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var maxElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_14 = defineInlineFunction('kotlin.kotlin.collections.maxBy_uuq3a6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var maxElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    var maxBy_15 = defineInlineFunction('kotlin.kotlin.collections.maxBy_k4xxks$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var maxElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return maxElem;
        var maxValue = selector(maxElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(maxValue, v) < 0) {
            maxElem = e;
            maxValue = v;
          }}
        return maxElem;
      };
    }));
    function maxWith_12($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_2($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_13($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_3($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_14($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_0($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function maxWith_15($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var max = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_1($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(max, e) < 0)
          max = e;
      }
      return max;
    }
    function min_16($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_2($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (uintCompare(min.data, e.data) > 0)
          min = e;
      }
      return min;
    }
    function min_17($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_3($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (ulongCompare(min.data, e.data) > 0)
          min = e;
      }
      return min;
    }
    function min_18($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_0($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (Kotlin.primitiveCompareTo(min.data & 255, e.data & 255) > 0)
          min = e;
      }
      return min;
    }
    function min_19($receiver) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_1($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (Kotlin.primitiveCompareTo(min.data & 65535, e.data & 65535) > 0)
          min = e;
      }
      return min;
    }
    var minBy_12 = defineInlineFunction('kotlin.kotlin.collections.minBy_ds5w84$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var minElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_13 = defineInlineFunction('kotlin.kotlin.collections.minBy_j7uywm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var minElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_14 = defineInlineFunction('kotlin.kotlin.collections.minBy_uuq3a6$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var minElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    var minBy_15 = defineInlineFunction('kotlin.kotlin.collections.minBy_k4xxks$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, selector) {
        if ($receiver.isEmpty())
          return null;
        var minElem = $receiver.get_za3lpa$(0);
        var lastIndex = get_lastIndex($receiver.storage);
        if (lastIndex === 0)
          return minElem;
        var minValue = selector(minElem);
        for (var i = 1; i <= lastIndex; i++) {
          var e = $receiver.get_za3lpa$(i);
          var v = selector(e);
          if (Kotlin.compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }}
        return minElem;
      };
    }));
    function minWith_12($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_2($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_13($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_3($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_14($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_0($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    function minWith_15($receiver, comparator) {
      var tmp$;
      if ($receiver.isEmpty())
        return null;
      var min = $receiver.get_za3lpa$(0);
      tmp$ = get_lastIndex_1($receiver.storage);
      for (var i = 1; i <= tmp$; i++) {
        var e = $receiver.get_za3lpa$(i);
        if (comparator.compare(min, e) > 0)
          min = e;
      }
      return min;
    }
    var none_25 = defineInlineFunction('kotlin.kotlin.collections.none_9hsmwz$', function ($receiver) {
      return $receiver.isEmpty();
    });
    var none_26 = defineInlineFunction('kotlin.kotlin.collections.none_rnn80q$', function ($receiver) {
      return $receiver.isEmpty();
    });
    var none_27 = defineInlineFunction('kotlin.kotlin.collections.none_o5f02i$', function ($receiver) {
      return $receiver.isEmpty();
    });
    var none_28 = defineInlineFunction('kotlin.kotlin.collections.none_k4ndbq$', function ($receiver) {
      return $receiver.isEmpty();
    });
    var none_29 = defineInlineFunction('kotlin.kotlin.collections.none_qooazb$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_30 = defineInlineFunction('kotlin.kotlin.collections.none_xmet5j$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_31 = defineInlineFunction('kotlin.kotlin.collections.none_khxg6n$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    var none_32 = defineInlineFunction('kotlin.kotlin.collections.none_zbhqtl$', function ($receiver, predicate) {
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element))
          return false;
      }
      return true;
    });
    var reduce_11 = defineInlineFunction('kotlin.kotlin.collections.reduce_3r8egg$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduce_12 = defineInlineFunction('kotlin.kotlin.collections.reduce_753k0q$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduce_13 = defineInlineFunction('kotlin.kotlin.collections.reduce_go0zkm$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduce_14 = defineInlineFunction('kotlin.kotlin.collections.reduce_t1b21c$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_mwzc8c$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_ufwt8q$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_7gvi6e$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.reduceIndexed_pd8rcc$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceOrNull_11 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_3r8egg$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return null;
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_753k0q$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return null;
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_go0zkm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return null;
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceOrNull_14 = defineInlineFunction('kotlin.kotlin.collections.reduceOrNull_t1b21c$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return null;
        var accumulator = $receiver.get_za3lpa$(0);
        tmp$ = get_lastIndex($receiver.storage);
        for (var index = 1; index <= tmp$; index++) {
          accumulator = operation(accumulator, $receiver.get_za3lpa$(index));
        }
        return accumulator;
      };
    }));
    var reduceRight_10 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_3r8egg$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_11 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_753k0q$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_12 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_go0zkm$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRight_13 = defineInlineFunction('kotlin.kotlin.collections.reduceRight_t1b21c$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_10 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_mwzc8c$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_ufwt8q$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_7gvi6e$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.reduceRightIndexed_pd8rcc$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          throw UnsupportedOperationException_init("Empty array can't be reduced.");
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation(index, $receiver.get_za3lpa$(index), accumulator);
          index = index - 1 | 0;
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_10 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_3r8egg$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_tmsbgo$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          return null;
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_11 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_753k0q$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_se6h4x$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          return null;
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_12 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_go0zkm$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_964n91$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          return null;
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var reduceRightOrNull_13 = defineInlineFunction('kotlin.kotlin.collections.reduceRightOrNull_t1b21c$', wrapFunction(function () {
      var get_lastIndex = _.kotlin.collections.get_lastIndex_i2lc79$;
      return function ($receiver, operation) {
        var tmp$, tmp$_0;
        var index = get_lastIndex($receiver.storage);
        if (index < 0)
          return null;
        var accumulator = $receiver.get_za3lpa$((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        while (index >= 0) {
          accumulator = operation($receiver.get_za3lpa$((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0)), accumulator);
        }
        return accumulator;
      };
    }));
    var scan_11 = defineInlineFunction('kotlin.kotlin.collections.scan_cc7t7m$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_12 = defineInlineFunction('kotlin.kotlin.collections.scan_hnxoxe$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_13 = defineInlineFunction('kotlin.kotlin.collections.scan_108ycy$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scan_14 = defineInlineFunction('kotlin.kotlin.collections.scan_yg11c4$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, initial, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          accumulator = operation(accumulator, element);
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_rqncna$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var get_indices = _.kotlin.collections.get_indices_tmsbgo$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = get_indices($receiver.storage);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_qls2om$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var get_indices = _.kotlin.collections.get_indices_se6h4x$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = get_indices($receiver.storage);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_5t7keu$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var get_indices = _.kotlin.collections.get_indices_964n91$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = get_indices($receiver.storage);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.scanIndexed_p2uijk$', wrapFunction(function () {
      var listOf = _.kotlin.collections.listOf_mh5how$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var get_indices = _.kotlin.collections.get_indices_i2lc79$;
      return function ($receiver, initial, operation) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        if ($receiver.isEmpty())
          return listOf(initial);
        var $receiver_0 = ArrayList_init($receiver.size + 1 | 0);
        $receiver_0.add_11rb$(initial);
        var result = $receiver_0;
        var accumulator = initial;
        tmp$ = get_indices($receiver.storage);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          accumulator = operation(index, accumulator, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator);
        }
        return result;
      };
    }));
    var scanReduce_11 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_3r8egg$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_12 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_753k0q$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_13 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_go0zkm$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduce_14 = defineInlineFunction('kotlin.kotlin.collections.scanReduce_t1b21c$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_11 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_mwzc8c$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_12 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_ufwt8q$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_13 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_7gvi6e$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var scanReduceIndexed_14 = defineInlineFunction('kotlin.kotlin.collections.scanReduceIndexed_pd8rcc$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function ($receiver, operation) {
        var tmp$;
        if ($receiver.isEmpty())
          return emptyList();
        var accumulator = {v: $receiver.get_za3lpa$(0)};
        var $receiver_0 = ArrayList_init($receiver.size);
        $receiver_0.add_11rb$(accumulator.v);
        var result = $receiver_0;
        tmp$ = $receiver.size;
        for (var index = 1; index < tmp$; index++) {
          accumulator.v = operation(index, accumulator.v, $receiver.get_za3lpa$(index));
          result.add_11rb$(accumulator.v);
        }
        return result;
      };
    }));
    var sumBy_11 = defineInlineFunction('kotlin.kotlin.collections.sumBy_ea99pf$', wrapFunction(function () {
      var UInt = _.kotlin.UInt;
      return function ($receiver, selector) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + selector(element).data | 0);
        }
        return sum;
      };
    }));
    var sumBy_12 = defineInlineFunction('kotlin.kotlin.collections.sumBy_1x5f3j$', wrapFunction(function () {
      var UInt = _.kotlin.UInt;
      return function ($receiver, selector) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + selector(element).data | 0);
        }
        return sum;
      };
    }));
    var sumBy_13 = defineInlineFunction('kotlin.kotlin.collections.sumBy_59225l$', wrapFunction(function () {
      var UInt = _.kotlin.UInt;
      return function ($receiver, selector) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + selector(element).data | 0);
        }
        return sum;
      };
    }));
    var sumBy_14 = defineInlineFunction('kotlin.kotlin.collections.sumBy_k23lkt$', wrapFunction(function () {
      var UInt = _.kotlin.UInt;
      return function ($receiver, selector) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + selector(element).data | 0);
        }
        return sum;
      };
    }));
    var sumByDouble_11 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_ikkbw$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_12 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_hgvjqe$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_13 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_er5b4e$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    var sumByDouble_14 = defineInlineFunction('kotlin.kotlin.collections.sumByDouble_q0eyz0$', function ($receiver, selector) {
      var tmp$;
      var sum = 0.0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum += selector(element);
      }
      return sum;
    });
    function zip_59($receiver, other) {
      var size = Math_0.min($receiver.size, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other[i]));
      }
      return list;
    }
    function zip_60($receiver, other) {
      var size = Math_0.min($receiver.size, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other[i]));
      }
      return list;
    }
    function zip_61($receiver, other) {
      var size = Math_0.min($receiver.size, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other[i]));
      }
      return list;
    }
    function zip_62($receiver, other) {
      var size = Math_0.min($receiver.size, other.length);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other[i]));
      }
      return list;
    }
    var zip_63 = defineInlineFunction('kotlin.kotlin.collections.zip_ilfx1p$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other[i]));
        }
        return list;
      };
    }));
    var zip_64 = defineInlineFunction('kotlin.kotlin.collections.zip_fbdgv3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other[i]));
        }
        return list;
      };
    }));
    var zip_65 = defineInlineFunction('kotlin.kotlin.collections.zip_ibakv3$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other[i]));
        }
        return list;
      };
    }));
    var zip_66 = defineInlineFunction('kotlin.kotlin.collections.zip_fmivq1$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.length);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other[i]));
        }
        return list;
      };
    }));
    function zip_67($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.size;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
      }
      return list;
    }
    function zip_68($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.size;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
      }
      return list;
    }
    function zip_69($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.size;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
      }
      return list;
    }
    function zip_70($receiver, other) {
      var tmp$, tmp$_0;
      var arraySize = $receiver.size;
      var list = ArrayList_init_0(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
      var i = 0;
      tmp$ = other.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (i >= arraySize)
          break;
        list.add_11rb$(to($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
      }
      return list;
    }
    var zip_71 = defineInlineFunction('kotlin.kotlin.collections.zip_jz53jz$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.size;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
        }
        return list;
      };
    }));
    var zip_72 = defineInlineFunction('kotlin.kotlin.collections.zip_hqy71z$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.size;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
        }
        return list;
      };
    }));
    var zip_73 = defineInlineFunction('kotlin.kotlin.collections.zip_ky5z4v$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.size;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
        }
        return list;
      };
    }));
    var zip_74 = defineInlineFunction('kotlin.kotlin.collections.zip_34ejj$', wrapFunction(function () {
      var collectionSizeOrDefault = _.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var tmp$, tmp$_0;
        var arraySize = $receiver.size;
        var list = ArrayList_init(Math_0.min(collectionSizeOrDefault(other, 10), arraySize));
        var i = 0;
        tmp$ = other.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (i >= arraySize)
            break;
          list.add_11rb$(transform($receiver.get_za3lpa$((tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0)), element));
        }
        return list;
      };
    }));
    function zip_75($receiver, other) {
      var size = Math_0.min($receiver.size, other.size);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
      }
      return list;
    }
    function zip_76($receiver, other) {
      var size = Math_0.min($receiver.size, other.size);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
      }
      return list;
    }
    function zip_77($receiver, other) {
      var size = Math_0.min($receiver.size, other.size);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
      }
      return list;
    }
    function zip_78($receiver, other) {
      var size = Math_0.min($receiver.size, other.size);
      var list = ArrayList_init_0(size);
      for (var i = 0; i < size; i++) {
        list.add_11rb$(to($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
      }
      return list;
    }
    var zip_79 = defineInlineFunction('kotlin.kotlin.collections.zip_2rncf9$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.size);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
        }
        return list;
      };
    }));
    var zip_80 = defineInlineFunction('kotlin.kotlin.collections.zip_zcfx1j$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.size);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
        }
        return list;
      };
    }));
    var zip_81 = defineInlineFunction('kotlin.kotlin.collections.zip_wjicwn$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.size);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
        }
        return list;
      };
    }));
    var zip_82 = defineInlineFunction('kotlin.kotlin.collections.zip_arkjhh$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      var Math_0 = Math;
      return function ($receiver, other, transform) {
        var size = Math_0.min($receiver.size, other.size);
        var list = ArrayList_init(size);
        for (var i = 0; i < size; i++) {
          list.add_11rb$(transform($receiver.get_za3lpa$(i), other.get_za3lpa$(i)));
        }
        return list;
      };
    }));
    function sum_23($receiver) {
      var tmp$;
      var sum = new UInt(0);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = new UInt(sum.data + element.data | 0);
      }
      return sum;
    }
    function sum_24($receiver) {
      var tmp$;
      var sum = new ULong(Kotlin.Long.ZERO);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = new ULong(sum.data.add(element.data));
      }
      return sum;
    }
    function sum_25($receiver) {
      var tmp$;
      var sum = new UInt(0);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = new UInt(sum.data + (new UInt(element.data & 255)).data | 0);
      }
      return sum;
    }
    function sum_26($receiver) {
      var tmp$;
      var sum = new UInt(0);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        sum = new UInt(sum.data + (new UInt(element.data & 65535)).data | 0);
      }
      return sum;
    }
    var sum_27 = defineInlineFunction('kotlin.kotlin.collections.sum_9hsmwz$', wrapFunction(function () {
      var sum = _.kotlin.collections.sum_tmsbgo$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(sum($receiver.storage));
      };
    }));
    var sum_28 = defineInlineFunction('kotlin.kotlin.collections.sum_rnn80q$', wrapFunction(function () {
      var sum = _.kotlin.collections.sum_se6h4x$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(sum($receiver.storage));
      };
    }));
    var sum_29 = defineInlineFunction('kotlin.kotlin.collections.sum_o5f02i$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var UInt = _.kotlin.UInt;
      var sum$lambda = wrapFunction(function () {
        var UInt_init = _.kotlin.UInt;
        return function (it) {
          return new UInt_init(it.data & 255);
        };
      });
      return function ($receiver) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + (new UInt(element.data & 255)).data | 0);
        }
        return sum;
      };
    }));
    var sum_30 = defineInlineFunction('kotlin.kotlin.collections.sum_k4ndbq$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var UInt = _.kotlin.UInt;
      var sum$lambda = wrapFunction(function () {
        var UInt_init = _.kotlin.UInt;
        return function (it) {
          return new UInt_init(it.data & 65535);
        };
      });
      return function ($receiver) {
        var tmp$;
        var sum = new UInt(0);
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          sum = new UInt(sum.data + (new UInt(element.data & 65535)).data | 0);
        }
        return sum;
      };
    }));
    function toUByteArray_1($receiver) {
      var tmp$, tmp$_0;
      var result = UByteArray_init($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result.set_2c6cbe$((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), element);
      }
      return result;
    }
    function toUIntArray_1($receiver) {
      var tmp$, tmp$_0;
      var result = UIntArray_init($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result.set_6sqrdv$((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), element);
      }
      return result;
    }
    function toULongArray_1($receiver) {
      var tmp$, tmp$_0;
      var result = ULongArray_init($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result.set_2ccimm$((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), element);
      }
      return result;
    }
    function toUShortArray_1($receiver) {
      var tmp$, tmp$_0;
      var result = UShortArray_init($receiver.size);
      var index = 0;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result.set_1pe3u2$((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0), element);
      }
      return result;
    }
    function sum_31($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + element.data | 0);
      }
      return sum;
    }
    function sum_32($receiver) {
      var tmp$;
      var sum = new ULong(Kotlin.Long.ZERO);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new ULong(sum.data.add(element.data));
      }
      return sum;
    }
    function sum_33($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + (new UInt(element.data & 255)).data | 0);
      }
      return sum;
    }
    function sum_34($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + (new UInt(element.data & 65535)).data | 0);
      }
      return sum;
    }
    function maxOf_1(a, b) {
      return uintCompare(a.data, b.data) >= 0 ? a : b;
    }
    function maxOf_2(a, b) {
      return ulongCompare(a.data, b.data) >= 0 ? a : b;
    }
    function maxOf_3(a, b) {
      return Kotlin.primitiveCompareTo(a.data & 255, b.data & 255) >= 0 ? a : b;
    }
    function maxOf_4(a, b) {
      return Kotlin.primitiveCompareTo(a.data & 65535, b.data & 65535) >= 0 ? a : b;
    }
    var maxOf_5 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_fdjnod$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_oqfnby$;
      return function (a, b, c) {
        return maxOf(a, maxOf(b, c));
      };
    }));
    var maxOf_6 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_yrdxh8$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_jpm79w$;
      return function (a, b, c) {
        return maxOf(a, maxOf(b, c));
      };
    }));
    var maxOf_7 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_l1b9e8$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_jl2jf8$;
      return function (a, b, c) {
        return maxOf(a, maxOf(b, c));
      };
    }));
    var maxOf_8 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_3bef2c$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_2ahd1g$;
      return function (a, b, c) {
        return maxOf(a, maxOf(b, c));
      };
    }));
    function minOf_1(a, b) {
      return uintCompare(a.data, b.data) <= 0 ? a : b;
    }
    function minOf_2(a, b) {
      return ulongCompare(a.data, b.data) <= 0 ? a : b;
    }
    function minOf_3(a, b) {
      return Kotlin.primitiveCompareTo(a.data & 255, b.data & 255) <= 0 ? a : b;
    }
    function minOf_4(a, b) {
      return Kotlin.primitiveCompareTo(a.data & 65535, b.data & 65535) <= 0 ? a : b;
    }
    var minOf_5 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_fdjnod$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_oqfnby$;
      return function (a, b, c) {
        return minOf(a, minOf(b, c));
      };
    }));
    var minOf_6 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_yrdxh8$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_jpm79w$;
      return function (a, b, c) {
        return minOf(a, minOf(b, c));
      };
    }));
    var minOf_7 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_l1b9e8$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_jl2jf8$;
      return function (a, b, c) {
        return minOf(a, minOf(b, c));
      };
    }));
    var minOf_8 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_3bef2c$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_2ahd1g$;
      return function (a, b, c) {
        return minOf(a, minOf(b, c));
      };
    }));
    var random_35 = defineInlineFunction('kotlin.kotlin.ranges.random_fouy9j$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.ranges.random_7v08js$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    var random_36 = defineInlineFunction('kotlin.kotlin.ranges.random_6ij5nc$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var random = _.kotlin.ranges.random_nk0vix$;
      return function ($receiver) {
        return random($receiver, Random.Default);
      };
    }));
    function random_37($receiver, random) {
      try {
        return nextUInt_2(random, $receiver);
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          throw new NoSuchElementException(e.message);
        } else
          throw e;
      }
    }
    function random_38($receiver, random) {
      try {
        return nextULong_2(random, $receiver);
      } catch (e) {
        if (Kotlin.isType(e, IllegalArgumentException)) {
          throw new NoSuchElementException(e.message);
        } else
          throw e;
      }
    }
    var randomOrNull_35 = defineInlineFunction('kotlin.kotlin.ranges.randomOrNull_fouy9j$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.ranges.randomOrNull_7v08js$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    var randomOrNull_36 = defineInlineFunction('kotlin.kotlin.ranges.randomOrNull_6ij5nc$', wrapFunction(function () {
      var Random = _.kotlin.random.Random;
      var randomOrNull = _.kotlin.ranges.randomOrNull_nk0vix$;
      return function ($receiver) {
        return randomOrNull($receiver, Random.Default);
      };
    }));
    function randomOrNull_37($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return nextUInt_2(random, $receiver);
    }
    function randomOrNull_38($receiver, random) {
      if ($receiver.isEmpty())
        return null;
      return nextULong_2(random, $receiver);
    }
    var contains_43 = defineInlineFunction('kotlin.kotlin.ranges.contains_dwfzbl$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    var contains_44 = defineInlineFunction('kotlin.kotlin.ranges.contains_ky6e3h$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    function contains_45($receiver, value) {
      return $receiver.contains_mef7kx$(new UInt(value.data & 255));
    }
    function contains_46($receiver, value) {
      return $receiver.contains_mef7kx$(new ULong(Kotlin.Long.fromInt(value.data).and(L255)));
    }
    function contains_47($receiver, value) {
      return $receiver.contains_mef7kx$(new ULong(Kotlin.Long.fromInt(value.data).and(L4294967295)));
    }
    function contains_48($receiver, value) {
      var tmp$;
      var tmp$_0 = (tmp$ = new ULong(value.data.shiftRightUnsigned(32))) != null ? tmp$.equals(new ULong(Kotlin.Long.ZERO)) : null;
      if (tmp$_0) {
        tmp$_0 = $receiver.contains_mef7kx$(new UInt(value.data.toInt()));
      }return tmp$_0;
    }
    function contains_49($receiver, value) {
      return $receiver.contains_mef7kx$(new UInt(value.data & 65535));
    }
    function contains_50($receiver, value) {
      return $receiver.contains_mef7kx$(new ULong(Kotlin.Long.fromInt(value.data).and(L65535)));
    }
    function downTo_16($receiver, to) {
      return UIntProgression$Companion_getInstance().fromClosedRange_fjk8us$(new UInt($receiver.data & 255), new UInt(to.data & 255), -1);
    }
    function downTo_17($receiver, to) {
      return UIntProgression$Companion_getInstance().fromClosedRange_fjk8us$($receiver, to, -1);
    }
    function downTo_18($receiver, to) {
      return ULongProgression$Companion_getInstance().fromClosedRange_15zasp$($receiver, to, L_1);
    }
    function downTo_19($receiver, to) {
      return UIntProgression$Companion_getInstance().fromClosedRange_fjk8us$(new UInt($receiver.data & 65535), new UInt(to.data & 65535), -1);
    }
    function reversed_18($receiver) {
      return UIntProgression$Companion_getInstance().fromClosedRange_fjk8us$($receiver.last, $receiver.first, -$receiver.step | 0);
    }
    function reversed_19($receiver) {
      return ULongProgression$Companion_getInstance().fromClosedRange_15zasp$($receiver.last, $receiver.first, $receiver.step.unaryMinus());
    }
    function step_2($receiver, step) {
      checkStepIsPositive(step > 0, step);
      return UIntProgression$Companion_getInstance().fromClosedRange_fjk8us$($receiver.first, $receiver.last, $receiver.step > 0 ? step : -step | 0);
    }
    function step_3($receiver, step) {
      checkStepIsPositive(step.toNumber() > 0, step);
      return ULongProgression$Companion_getInstance().fromClosedRange_15zasp$($receiver.first, $receiver.last, $receiver.step.toNumber() > 0 ? step : step.unaryMinus());
    }
    function until_16($receiver, to) {
      if (Kotlin.primitiveCompareTo(to.data & 255, UByte$Companion_getInstance().MIN_VALUE.data & 255) <= 0)
        return UIntRange$Companion_getInstance().EMPTY;
      var tmp$ = new UInt($receiver.data & 255);
      var other = new UInt(1);
      return new UIntRange(tmp$, new UInt((new UInt(to.data & 255)).data - other.data | 0));
    }
    function until_17($receiver, to) {
      if (uintCompare(to.data, UInt$Companion_getInstance().MIN_VALUE.data) <= 0)
        return UIntRange$Companion_getInstance().EMPTY;
      return new UIntRange($receiver, new UInt(to.data - (new UInt(1)).data | 0));
    }
    function until_18($receiver, to) {
      if (ulongCompare(to.data, ULong$Companion_getInstance().MIN_VALUE.data) <= 0)
        return ULongRange$Companion_getInstance().EMPTY;
      return new ULongRange_0($receiver, new ULong(to.data.subtract((new ULong(Kotlin.Long.fromInt((new UInt(1)).data).and(L4294967295))).data)));
    }
    function until_19($receiver, to) {
      if (Kotlin.primitiveCompareTo(to.data & 65535, UShort$Companion_getInstance().MIN_VALUE.data & 65535) <= 0)
        return UIntRange$Companion_getInstance().EMPTY;
      var tmp$ = new UInt($receiver.data & 65535);
      var other = new UInt(1);
      return new UIntRange(tmp$, new UInt((new UInt(to.data & 65535)).data - other.data | 0));
    }
    function coerceAtLeast_6($receiver, minimumValue) {
      return uintCompare($receiver.data, minimumValue.data) < 0 ? minimumValue : $receiver;
    }
    function coerceAtLeast_7($receiver, minimumValue) {
      return ulongCompare($receiver.data, minimumValue.data) < 0 ? minimumValue : $receiver;
    }
    function coerceAtLeast_8($receiver, minimumValue) {
      return Kotlin.primitiveCompareTo($receiver.data & 255, minimumValue.data & 255) < 0 ? minimumValue : $receiver;
    }
    function coerceAtLeast_9($receiver, minimumValue) {
      return Kotlin.primitiveCompareTo($receiver.data & 65535, minimumValue.data & 65535) < 0 ? minimumValue : $receiver;
    }
    function coerceAtMost_6($receiver, maximumValue) {
      return uintCompare($receiver.data, maximumValue.data) > 0 ? maximumValue : $receiver;
    }
    function coerceAtMost_7($receiver, maximumValue) {
      return ulongCompare($receiver.data, maximumValue.data) > 0 ? maximumValue : $receiver;
    }
    function coerceAtMost_8($receiver, maximumValue) {
      return Kotlin.primitiveCompareTo($receiver.data & 255, maximumValue.data & 255) > 0 ? maximumValue : $receiver;
    }
    function coerceAtMost_9($receiver, maximumValue) {
      return Kotlin.primitiveCompareTo($receiver.data & 65535, maximumValue.data & 65535) > 0 ? maximumValue : $receiver;
    }
    function coerceIn_10($receiver, minimumValue, maximumValue) {
      if (uintCompare(minimumValue.data, maximumValue.data) > 0)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if (uintCompare($receiver.data, minimumValue.data) < 0)
        return minimumValue;
      if (uintCompare($receiver.data, maximumValue.data) > 0)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_11($receiver, minimumValue, maximumValue) {
      if (ulongCompare(minimumValue.data, maximumValue.data) > 0)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if (ulongCompare($receiver.data, minimumValue.data) < 0)
        return minimumValue;
      if (ulongCompare($receiver.data, maximumValue.data) > 0)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_12($receiver, minimumValue, maximumValue) {
      if (Kotlin.primitiveCompareTo(minimumValue.data & 255, maximumValue.data & 255) > 0)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if (Kotlin.primitiveCompareTo($receiver.data & 255, minimumValue.data & 255) < 0)
        return minimumValue;
      if (Kotlin.primitiveCompareTo($receiver.data & 255, maximumValue.data & 255) > 0)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_13($receiver, minimumValue, maximumValue) {
      if (Kotlin.primitiveCompareTo(minimumValue.data & 65535, maximumValue.data & 65535) > 0)
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
      if (Kotlin.primitiveCompareTo($receiver.data & 65535, minimumValue.data & 65535) < 0)
        return minimumValue;
      if (Kotlin.primitiveCompareTo($receiver.data & 65535, maximumValue.data & 65535) > 0)
        return maximumValue;
      return $receiver;
    }
    function coerceIn_14($receiver, range) {
      var tmp$;
      if (Kotlin.isType(range, ClosedFloatingPointRange)) {
        return coerceIn_6($receiver, range);
      }if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if (uintCompare($receiver.data, range.start.data) < 0)
        tmp$ = range.start;
      else {
        if (uintCompare($receiver.data, range.endInclusive.data) > 0)
          tmp$ = range.endInclusive;
        else
          tmp$ = $receiver;
      }
      return tmp$;
    }
    function coerceIn_15($receiver, range) {
      var tmp$;
      if (Kotlin.isType(range, ClosedFloatingPointRange)) {
        return coerceIn_6($receiver, range);
      }if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot coerce value to an empty range: ' + range + '.');
      if (ulongCompare($receiver.data, range.start.data) < 0)
        tmp$ = range.start;
      else {
        if (ulongCompare($receiver.data, range.endInclusive.data) > 0)
          tmp$ = range.endInclusive;
        else
          tmp$ = $receiver;
      }
      return tmp$;
    }
    function sum_35($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + element.data | 0);
      }
      return sum;
    }
    function sum_36($receiver) {
      var tmp$;
      var sum = new ULong(Kotlin.Long.ZERO);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new ULong(sum.data.add(element.data));
      }
      return sum;
    }
    function sum_37($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + (new UInt(element.data & 255)).data | 0);
      }
      return sum;
    }
    function sum_38($receiver) {
      var tmp$;
      var sum = new UInt(0);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        sum = new UInt(sum.data + (new UInt(element.data & 65535)).data | 0);
      }
      return sum;
    }
    var PI;
    var E;
    function Annotation() {
    }
    Annotation.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Annotation', interfaces: []};
    function CharSequence() {
    }
    CharSequence.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'CharSequence', interfaces: []};
    function Iterable() {
    }
    Iterable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Iterable', interfaces: []};
    function MutableIterable() {
    }
    MutableIterable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableIterable', interfaces: [Iterable]};
    function Collection() {
    }
    Collection.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Collection', interfaces: [Iterable]};
    function MutableCollection() {
    }
    MutableCollection.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableCollection', interfaces: [MutableIterable, Collection]};
    function List() {
    }
    List.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'List', interfaces: [Collection]};
    function MutableList() {
    }
    MutableList.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableList', interfaces: [MutableCollection, List]};
    function Set() {
    }
    Set.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Set', interfaces: [Collection]};
    function MutableSet() {
    }
    MutableSet.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableSet', interfaces: [MutableCollection, Set]};
    function Map() {
    }
    Map.prototype.getOrDefault_xwzc9p$ = function (key, defaultValue) {
      var tmp$;
      return (tmp$ = null) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    function Map$Entry() {
    }
    Map$Entry.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Entry', interfaces: []};
    Map.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Map', interfaces: []};
    function MutableMap() {
    }
    MutableMap.prototype.remove_xwzc9p$ = function (key, value) {
      return true;
    };
    function MutableMap$MutableEntry() {
    }
    MutableMap$MutableEntry.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableEntry', interfaces: [Map$Entry]};
    MutableMap.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableMap', interfaces: [Map]};
    function Function_0() {
    }
    Function_0.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Function', interfaces: []};
    function Iterator() {
    }
    Iterator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Iterator', interfaces: []};
    function MutableIterator() {
    }
    MutableIterator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableIterator', interfaces: [Iterator]};
    function ListIterator() {
    }
    ListIterator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ListIterator', interfaces: [Iterator]};
    function MutableListIterator() {
    }
    MutableListIterator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableListIterator', interfaces: [MutableIterator, ListIterator]};
    function ByteIterator() {
    }
    ByteIterator.prototype.next = function () {
      return this.nextByte();
    };
    ByteIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'ByteIterator', interfaces: [Iterator]};
    function CharIterator() {
    }
    CharIterator.prototype.next = function () {
      return toBoxedChar(this.nextChar());
    };
    CharIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'CharIterator', interfaces: [Iterator]};
    function ShortIterator() {
    }
    ShortIterator.prototype.next = function () {
      return this.nextShort();
    };
    ShortIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'ShortIterator', interfaces: [Iterator]};
    function IntIterator() {
    }
    IntIterator.prototype.next = function () {
      return this.nextInt();
    };
    IntIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'IntIterator', interfaces: [Iterator]};
    function LongIterator() {
    }
    LongIterator.prototype.next = function () {
      return this.nextLong();
    };
    LongIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'LongIterator', interfaces: [Iterator]};
    function FloatIterator() {
    }
    FloatIterator.prototype.next = function () {
      return this.nextFloat();
    };
    FloatIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'FloatIterator', interfaces: [Iterator]};
    function DoubleIterator() {
    }
    DoubleIterator.prototype.next = function () {
      return this.nextDouble();
    };
    DoubleIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'DoubleIterator', interfaces: [Iterator]};
    function BooleanIterator() {
    }
    BooleanIterator.prototype.next = function () {
      return this.nextBoolean();
    };
    BooleanIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'BooleanIterator', interfaces: [Iterator]};
    function CharProgressionIterator(first, last, step) {
      CharIterator.call(this);
      this.step = step;
      this.finalElement_0 = last | 0;
      this.hasNext_0 = this.step > 0 ? first <= last : first >= last;
      this.next_0 = this.hasNext_0 ? first | 0 : this.finalElement_0;
    }
    CharProgressionIterator.prototype.hasNext = function () {
      return this.hasNext_0;
    };
    CharProgressionIterator.prototype.nextChar = function () {
      var value = this.next_0;
      if (value === this.finalElement_0) {
        if (!this.hasNext_0)
          throw NoSuchElementException_init();
        this.hasNext_0 = false;
      } else {
        this.next_0 = this.next_0 + this.step | 0;
      }
      return toChar(value);
    };
    CharProgressionIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'CharProgressionIterator', interfaces: [CharIterator]};
    function IntProgressionIterator(first, last, step) {
      IntIterator.call(this);
      this.step = step;
      this.finalElement_0 = last;
      this.hasNext_0 = this.step > 0 ? first <= last : first >= last;
      this.next_0 = this.hasNext_0 ? first : this.finalElement_0;
    }
    IntProgressionIterator.prototype.hasNext = function () {
      return this.hasNext_0;
    };
    IntProgressionIterator.prototype.nextInt = function () {
      var value = this.next_0;
      if (value === this.finalElement_0) {
        if (!this.hasNext_0)
          throw NoSuchElementException_init();
        this.hasNext_0 = false;
      } else {
        this.next_0 = this.next_0 + this.step | 0;
      }
      return value;
    };
    IntProgressionIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'IntProgressionIterator', interfaces: [IntIterator]};
    function LongProgressionIterator(first, last, step) {
      LongIterator.call(this);
      this.step = step;
      this.finalElement_0 = last;
      this.hasNext_0 = this.step.toNumber() > 0 ? first.compareTo_11rb$(last) <= 0 : first.compareTo_11rb$(last) >= 0;
      this.next_0 = this.hasNext_0 ? first : this.finalElement_0;
    }
    LongProgressionIterator.prototype.hasNext = function () {
      return this.hasNext_0;
    };
    LongProgressionIterator.prototype.nextLong = function () {
      var value = this.next_0;
      if (equals(value, this.finalElement_0)) {
        if (!this.hasNext_0)
          throw NoSuchElementException_init();
        this.hasNext_0 = false;
      } else {
        this.next_0 = this.next_0.add(this.step);
      }
      return value;
    };
    LongProgressionIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'LongProgressionIterator', interfaces: [LongIterator]};
    function CharProgression(start, endInclusive, step) {
      CharProgression$Companion_getInstance();
      if (step === 0)
        throw IllegalArgumentException_init_0('Step must be non-zero.');
      if (step === -2147483648)
        throw IllegalArgumentException_init_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
      this.first = start;
      this.last = toChar(getProgressionLastElement(start | 0, endInclusive | 0, step));
      this.step = step;
    }
    CharProgression.prototype.iterator = function () {
      return new CharProgressionIterator(this.first, this.last, this.step);
    };
    CharProgression.prototype.isEmpty = function () {
      return this.step > 0 ? this.first > this.last : this.first < this.last;
    };
    CharProgression.prototype.equals = function (other) {
      return Kotlin.isType(other, CharProgression) && (this.isEmpty() && other.isEmpty() || (this.first === other.first && this.last === other.last && this.step === other.step));
    };
    CharProgression.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * ((31 * (this.first | 0) | 0) + (this.last | 0) | 0) | 0) + this.step | 0;
    };
    CharProgression.prototype.toString = function () {
      return this.step > 0 ? String.fromCharCode(this.first) + '..' + String.fromCharCode(this.last) + ' step ' + this.step : String.fromCharCode(this.first) + ' downTo ' + String.fromCharCode(this.last) + ' step ' + (-this.step | 0);
    };
    function CharProgression$Companion() {
      CharProgression$Companion_instance = this;
    }
    CharProgression$Companion.prototype.fromClosedRange_ayra44$ = function (rangeStart, rangeEnd, step) {
      return new CharProgression(rangeStart, rangeEnd, step);
    };
    CharProgression$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var CharProgression$Companion_instance = null;
    function CharProgression$Companion_getInstance() {
      if (CharProgression$Companion_instance === null) {
        new CharProgression$Companion();
      }return CharProgression$Companion_instance;
    }
    CharProgression.$metadata$ = {kind: Kind_CLASS, simpleName: 'CharProgression', interfaces: [Iterable]};
    function IntProgression(start, endInclusive, step) {
      IntProgression$Companion_getInstance();
      if (step === 0)
        throw IllegalArgumentException_init_0('Step must be non-zero.');
      if (step === -2147483648)
        throw IllegalArgumentException_init_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
      this.first = start;
      this.last = getProgressionLastElement(start, endInclusive, step);
      this.step = step;
    }
    IntProgression.prototype.iterator = function () {
      return new IntProgressionIterator(this.first, this.last, this.step);
    };
    IntProgression.prototype.isEmpty = function () {
      return this.step > 0 ? this.first > this.last : this.first < this.last;
    };
    IntProgression.prototype.equals = function (other) {
      return Kotlin.isType(other, IntProgression) && (this.isEmpty() && other.isEmpty() || (this.first === other.first && this.last === other.last && this.step === other.step));
    };
    IntProgression.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * ((31 * this.first | 0) + this.last | 0) | 0) + this.step | 0;
    };
    IntProgression.prototype.toString = function () {
      return this.step > 0 ? this.first.toString() + '..' + this.last + ' step ' + this.step : this.first.toString() + ' downTo ' + this.last + ' step ' + (-this.step | 0);
    };
    function IntProgression$Companion() {
      IntProgression$Companion_instance = this;
    }
    IntProgression$Companion.prototype.fromClosedRange_qt1dr2$ = function (rangeStart, rangeEnd, step) {
      return new IntProgression(rangeStart, rangeEnd, step);
    };
    IntProgression$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var IntProgression$Companion_instance = null;
    function IntProgression$Companion_getInstance() {
      if (IntProgression$Companion_instance === null) {
        new IntProgression$Companion();
      }return IntProgression$Companion_instance;
    }
    IntProgression.$metadata$ = {kind: Kind_CLASS, simpleName: 'IntProgression', interfaces: [Iterable]};
    function LongProgression(start, endInclusive, step) {
      LongProgression$Companion_getInstance();
      if (equals(step, L0))
        throw IllegalArgumentException_init_0('Step must be non-zero.');
      if (equals(step, Long$Companion$MIN_VALUE))
        throw IllegalArgumentException_init_0('Step must be greater than Long.MIN_VALUE to avoid overflow on negation.');
      this.first = start;
      this.last = getProgressionLastElement_0(start, endInclusive, step);
      this.step = step;
    }
    LongProgression.prototype.iterator = function () {
      return new LongProgressionIterator(this.first, this.last, this.step);
    };
    LongProgression.prototype.isEmpty = function () {
      return this.step.toNumber() > 0 ? this.first.compareTo_11rb$(this.last) > 0 : this.first.compareTo_11rb$(this.last) < 0;
    };
    LongProgression.prototype.equals = function (other) {
      return Kotlin.isType(other, LongProgression) && (this.isEmpty() && other.isEmpty() || (equals(this.first, other.first) && equals(this.last, other.last) && equals(this.step, other.step)));
    };
    LongProgression.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : Kotlin.Long.fromInt(31).multiply(Kotlin.Long.fromInt(31).multiply(this.first.xor(this.first.shiftRightUnsigned(32))).add(this.last.xor(this.last.shiftRightUnsigned(32)))).add(this.step.xor(this.step.shiftRightUnsigned(32))).toInt();
    };
    LongProgression.prototype.toString = function () {
      return this.step.toNumber() > 0 ? this.first.toString() + '..' + this.last.toString() + ' step ' + this.step.toString() : this.first.toString() + ' downTo ' + this.last.toString() + ' step ' + this.step.unaryMinus().toString();
    };
    function LongProgression$Companion() {
      LongProgression$Companion_instance = this;
    }
    LongProgression$Companion.prototype.fromClosedRange_b9bd0d$ = function (rangeStart, rangeEnd, step) {
      return new LongProgression(rangeStart, rangeEnd, step);
    };
    LongProgression$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var LongProgression$Companion_instance = null;
    function LongProgression$Companion_getInstance() {
      if (LongProgression$Companion_instance === null) {
        new LongProgression$Companion();
      }return LongProgression$Companion_instance;
    }
    LongProgression.$metadata$ = {kind: Kind_CLASS, simpleName: 'LongProgression', interfaces: [Iterable]};
    function ClosedRange() {
    }
    ClosedRange.prototype.contains_mef7kx$ = function (value) {
      return Kotlin.compareTo(value, this.start) >= 0 && Kotlin.compareTo(value, this.endInclusive) <= 0;
    };
    ClosedRange.prototype.isEmpty = function () {
      return Kotlin.compareTo(this.start, this.endInclusive) > 0;
    };
    ClosedRange.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ClosedRange', interfaces: []};
    function CharRange(start, endInclusive) {
      CharRange$Companion_getInstance();
      CharProgression.call(this, start, endInclusive, 1);
    }
    Object.defineProperty(CharRange.prototype, 'start', {get: function () {
      return toBoxedChar(this.first);
    }});
    Object.defineProperty(CharRange.prototype, 'endInclusive', {get: function () {
      return toBoxedChar(this.last);
    }});
    CharRange.prototype.contains_mef7kx$ = function (value) {
      return this.first <= value && value <= this.last;
    };
    CharRange.prototype.isEmpty = function () {
      return this.first > this.last;
    };
    CharRange.prototype.equals = function (other) {
      return Kotlin.isType(other, CharRange) && (this.isEmpty() && other.isEmpty() || (this.first === other.first && this.last === other.last));
    };
    CharRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * (this.first | 0) | 0) + (this.last | 0) | 0;
    };
    CharRange.prototype.toString = function () {
      return String.fromCharCode(this.first) + '..' + String.fromCharCode(this.last);
    };
    function CharRange$Companion() {
      CharRange$Companion_instance = this;
      this.EMPTY = new CharRange(toChar(1), toChar(0));
    }
    CharRange$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var CharRange$Companion_instance = null;
    function CharRange$Companion_getInstance() {
      if (CharRange$Companion_instance === null) {
        new CharRange$Companion();
      }return CharRange$Companion_instance;
    }
    CharRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'CharRange', interfaces: [ClosedRange, CharProgression]};
    function IntRange(start, endInclusive) {
      IntRange$Companion_getInstance();
      IntProgression.call(this, start, endInclusive, 1);
    }
    Object.defineProperty(IntRange.prototype, 'start', {get: function () {
      return this.first;
    }});
    Object.defineProperty(IntRange.prototype, 'endInclusive', {get: function () {
      return this.last;
    }});
    IntRange.prototype.contains_mef7kx$ = function (value) {
      return this.first <= value && value <= this.last;
    };
    IntRange.prototype.isEmpty = function () {
      return this.first > this.last;
    };
    IntRange.prototype.equals = function (other) {
      return Kotlin.isType(other, IntRange) && (this.isEmpty() && other.isEmpty() || (this.first === other.first && this.last === other.last));
    };
    IntRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * this.first | 0) + this.last | 0;
    };
    IntRange.prototype.toString = function () {
      return this.first.toString() + '..' + this.last;
    };
    function IntRange$Companion() {
      IntRange$Companion_instance = this;
      this.EMPTY = new IntRange(1, 0);
    }
    IntRange$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var IntRange$Companion_instance = null;
    function IntRange$Companion_getInstance() {
      if (IntRange$Companion_instance === null) {
        new IntRange$Companion();
      }return IntRange$Companion_instance;
    }
    IntRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'IntRange', interfaces: [ClosedRange, IntProgression]};
    function LongRange(start, endInclusive) {
      LongRange$Companion_getInstance();
      LongProgression.call(this, start, endInclusive, L1);
    }
    Object.defineProperty(LongRange.prototype, 'start', {get: function () {
      return this.first;
    }});
    Object.defineProperty(LongRange.prototype, 'endInclusive', {get: function () {
      return this.last;
    }});
    LongRange.prototype.contains_mef7kx$ = function (value) {
      return this.first.compareTo_11rb$(value) <= 0 && value.compareTo_11rb$(this.last) <= 0;
    };
    LongRange.prototype.isEmpty = function () {
      return this.first.compareTo_11rb$(this.last) > 0;
    };
    LongRange.prototype.equals = function (other) {
      return Kotlin.isType(other, LongRange) && (this.isEmpty() && other.isEmpty() || (equals(this.first, other.first) && equals(this.last, other.last)));
    };
    LongRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : Kotlin.Long.fromInt(31).multiply(this.first.xor(this.first.shiftRightUnsigned(32))).add(this.last.xor(this.last.shiftRightUnsigned(32))).toInt();
    };
    LongRange.prototype.toString = function () {
      return this.first.toString() + '..' + this.last.toString();
    };
    function LongRange$Companion() {
      LongRange$Companion_instance = this;
      this.EMPTY = new LongRange(L1, L0);
    }
    LongRange$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var LongRange$Companion_instance = null;
    function LongRange$Companion_getInstance() {
      if (LongRange$Companion_instance === null) {
        new LongRange$Companion();
      }return LongRange$Companion_instance;
    }
    LongRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'LongRange', interfaces: [ClosedRange, LongProgression]};
    function Unit() {
      Unit_instance = this;
    }
    Unit.prototype.toString = function () {
      return 'kotlin.Unit';
    };
    Unit.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Unit', interfaces: []};
    var Unit_instance = null;
    function Unit_getInstance() {
      if (Unit_instance === null) {
        new Unit();
      }return Unit_instance;
    }
    function AnnotationTarget(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function AnnotationTarget_initFields() {
      AnnotationTarget_initFields = function () {
      };
      AnnotationTarget$CLASS_instance = new AnnotationTarget('CLASS', 0);
      AnnotationTarget$ANNOTATION_CLASS_instance = new AnnotationTarget('ANNOTATION_CLASS', 1);
      AnnotationTarget$TYPE_PARAMETER_instance = new AnnotationTarget('TYPE_PARAMETER', 2);
      AnnotationTarget$PROPERTY_instance = new AnnotationTarget('PROPERTY', 3);
      AnnotationTarget$FIELD_instance = new AnnotationTarget('FIELD', 4);
      AnnotationTarget$LOCAL_VARIABLE_instance = new AnnotationTarget('LOCAL_VARIABLE', 5);
      AnnotationTarget$VALUE_PARAMETER_instance = new AnnotationTarget('VALUE_PARAMETER', 6);
      AnnotationTarget$CONSTRUCTOR_instance = new AnnotationTarget('CONSTRUCTOR', 7);
      AnnotationTarget$FUNCTION_instance = new AnnotationTarget('FUNCTION', 8);
      AnnotationTarget$PROPERTY_GETTER_instance = new AnnotationTarget('PROPERTY_GETTER', 9);
      AnnotationTarget$PROPERTY_SETTER_instance = new AnnotationTarget('PROPERTY_SETTER', 10);
      AnnotationTarget$TYPE_instance = new AnnotationTarget('TYPE', 11);
      AnnotationTarget$EXPRESSION_instance = new AnnotationTarget('EXPRESSION', 12);
      AnnotationTarget$FILE_instance = new AnnotationTarget('FILE', 13);
      AnnotationTarget$TYPEALIAS_instance = new AnnotationTarget('TYPEALIAS', 14);
    }
    var AnnotationTarget$CLASS_instance;
    function AnnotationTarget$CLASS_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$CLASS_instance;
    }
    var AnnotationTarget$ANNOTATION_CLASS_instance;
    function AnnotationTarget$ANNOTATION_CLASS_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$ANNOTATION_CLASS_instance;
    }
    var AnnotationTarget$TYPE_PARAMETER_instance;
    function AnnotationTarget$TYPE_PARAMETER_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$TYPE_PARAMETER_instance;
    }
    var AnnotationTarget$PROPERTY_instance;
    function AnnotationTarget$PROPERTY_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$PROPERTY_instance;
    }
    var AnnotationTarget$FIELD_instance;
    function AnnotationTarget$FIELD_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$FIELD_instance;
    }
    var AnnotationTarget$LOCAL_VARIABLE_instance;
    function AnnotationTarget$LOCAL_VARIABLE_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$LOCAL_VARIABLE_instance;
    }
    var AnnotationTarget$VALUE_PARAMETER_instance;
    function AnnotationTarget$VALUE_PARAMETER_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$VALUE_PARAMETER_instance;
    }
    var AnnotationTarget$CONSTRUCTOR_instance;
    function AnnotationTarget$CONSTRUCTOR_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$CONSTRUCTOR_instance;
    }
    var AnnotationTarget$FUNCTION_instance;
    function AnnotationTarget$FUNCTION_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$FUNCTION_instance;
    }
    var AnnotationTarget$PROPERTY_GETTER_instance;
    function AnnotationTarget$PROPERTY_GETTER_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$PROPERTY_GETTER_instance;
    }
    var AnnotationTarget$PROPERTY_SETTER_instance;
    function AnnotationTarget$PROPERTY_SETTER_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$PROPERTY_SETTER_instance;
    }
    var AnnotationTarget$TYPE_instance;
    function AnnotationTarget$TYPE_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$TYPE_instance;
    }
    var AnnotationTarget$EXPRESSION_instance;
    function AnnotationTarget$EXPRESSION_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$EXPRESSION_instance;
    }
    var AnnotationTarget$FILE_instance;
    function AnnotationTarget$FILE_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$FILE_instance;
    }
    var AnnotationTarget$TYPEALIAS_instance;
    function AnnotationTarget$TYPEALIAS_getInstance() {
      AnnotationTarget_initFields();
      return AnnotationTarget$TYPEALIAS_instance;
    }
    AnnotationTarget.$metadata$ = {kind: Kind_CLASS, simpleName: 'AnnotationTarget', interfaces: [Enum]};
    function AnnotationTarget$values() {
      return [AnnotationTarget$CLASS_getInstance(), AnnotationTarget$ANNOTATION_CLASS_getInstance(), AnnotationTarget$TYPE_PARAMETER_getInstance(), AnnotationTarget$PROPERTY_getInstance(), AnnotationTarget$FIELD_getInstance(), AnnotationTarget$LOCAL_VARIABLE_getInstance(), AnnotationTarget$VALUE_PARAMETER_getInstance(), AnnotationTarget$CONSTRUCTOR_getInstance(), AnnotationTarget$FUNCTION_getInstance(), AnnotationTarget$PROPERTY_GETTER_getInstance(), AnnotationTarget$PROPERTY_SETTER_getInstance(), AnnotationTarget$TYPE_getInstance(), AnnotationTarget$EXPRESSION_getInstance(), AnnotationTarget$FILE_getInstance(), AnnotationTarget$TYPEALIAS_getInstance()];
    }
    AnnotationTarget.values = AnnotationTarget$values;
    function AnnotationTarget$valueOf(name) {
      switch (name) {
        case 'CLASS':
          return AnnotationTarget$CLASS_getInstance();
        case 'ANNOTATION_CLASS':
          return AnnotationTarget$ANNOTATION_CLASS_getInstance();
        case 'TYPE_PARAMETER':
          return AnnotationTarget$TYPE_PARAMETER_getInstance();
        case 'PROPERTY':
          return AnnotationTarget$PROPERTY_getInstance();
        case 'FIELD':
          return AnnotationTarget$FIELD_getInstance();
        case 'LOCAL_VARIABLE':
          return AnnotationTarget$LOCAL_VARIABLE_getInstance();
        case 'VALUE_PARAMETER':
          return AnnotationTarget$VALUE_PARAMETER_getInstance();
        case 'CONSTRUCTOR':
          return AnnotationTarget$CONSTRUCTOR_getInstance();
        case 'FUNCTION':
          return AnnotationTarget$FUNCTION_getInstance();
        case 'PROPERTY_GETTER':
          return AnnotationTarget$PROPERTY_GETTER_getInstance();
        case 'PROPERTY_SETTER':
          return AnnotationTarget$PROPERTY_SETTER_getInstance();
        case 'TYPE':
          return AnnotationTarget$TYPE_getInstance();
        case 'EXPRESSION':
          return AnnotationTarget$EXPRESSION_getInstance();
        case 'FILE':
          return AnnotationTarget$FILE_getInstance();
        case 'TYPEALIAS':
          return AnnotationTarget$TYPEALIAS_getInstance();
        default:throwISE('No enum constant kotlin.annotation.AnnotationTarget.' + name);
      }
    }
    AnnotationTarget.valueOf_61zpoe$ = AnnotationTarget$valueOf;
    function AnnotationRetention(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function AnnotationRetention_initFields() {
      AnnotationRetention_initFields = function () {
      };
      AnnotationRetention$SOURCE_instance = new AnnotationRetention('SOURCE', 0);
      AnnotationRetention$BINARY_instance = new AnnotationRetention('BINARY', 1);
      AnnotationRetention$RUNTIME_instance = new AnnotationRetention('RUNTIME', 2);
    }
    var AnnotationRetention$SOURCE_instance;
    function AnnotationRetention$SOURCE_getInstance() {
      AnnotationRetention_initFields();
      return AnnotationRetention$SOURCE_instance;
    }
    var AnnotationRetention$BINARY_instance;
    function AnnotationRetention$BINARY_getInstance() {
      AnnotationRetention_initFields();
      return AnnotationRetention$BINARY_instance;
    }
    var AnnotationRetention$RUNTIME_instance;
    function AnnotationRetention$RUNTIME_getInstance() {
      AnnotationRetention_initFields();
      return AnnotationRetention$RUNTIME_instance;
    }
    AnnotationRetention.$metadata$ = {kind: Kind_CLASS, simpleName: 'AnnotationRetention', interfaces: [Enum]};
    function AnnotationRetention$values() {
      return [AnnotationRetention$SOURCE_getInstance(), AnnotationRetention$BINARY_getInstance(), AnnotationRetention$RUNTIME_getInstance()];
    }
    AnnotationRetention.values = AnnotationRetention$values;
    function AnnotationRetention$valueOf(name) {
      switch (name) {
        case 'SOURCE':
          return AnnotationRetention$SOURCE_getInstance();
        case 'BINARY':
          return AnnotationRetention$BINARY_getInstance();
        case 'RUNTIME':
          return AnnotationRetention$RUNTIME_getInstance();
        default:throwISE('No enum constant kotlin.annotation.AnnotationRetention.' + name);
      }
    }
    AnnotationRetention.valueOf_61zpoe$ = AnnotationRetention$valueOf;
    function Target(allowedTargets) {
      this.allowedTargets = allowedTargets;
    }
    Target.$metadata$ = {kind: Kind_CLASS, simpleName: 'Target', interfaces: [Annotation]};
    function Retention(value) {
      if (value === void 0)
        value = AnnotationRetention$RUNTIME_getInstance();
      this.value = value;
    }
    Retention.$metadata$ = {kind: Kind_CLASS, simpleName: 'Retention', interfaces: [Annotation]};
    function Repeatable() {
    }
    Repeatable.$metadata$ = {kind: Kind_CLASS, simpleName: 'Repeatable', interfaces: [Annotation]};
    function MustBeDocumented() {
    }
    MustBeDocumented.$metadata$ = {kind: Kind_CLASS, simpleName: 'MustBeDocumented', interfaces: [Annotation]};
    function PureReifiable() {
    }
    PureReifiable.$metadata$ = {kind: Kind_CLASS, simpleName: 'PureReifiable', interfaces: [Annotation]};
    function PlatformDependent() {
    }
    PlatformDependent.$metadata$ = {kind: Kind_CLASS, simpleName: 'PlatformDependent', interfaces: [Annotation]};
    function mod(a, b) {
      var mod = a % b;
      return mod >= 0 ? mod : mod + b | 0;
    }
    function mod_0(a, b) {
      var mod = a.modulo(b);
      return mod.toNumber() >= 0 ? mod : mod.add(b);
    }
    function differenceModulo(a, b, c) {
      return mod(mod(a, c) - mod(b, c) | 0, c);
    }
    function differenceModulo_0(a, b, c) {
      return mod_0(mod_0(a, c).subtract(mod_0(b, c)), c);
    }
    function getProgressionLastElement(start, end, step) {
      if (step > 0)
        return start >= end ? end : end - differenceModulo(end, start, step) | 0;
      else if (step < 0)
        return start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
      else
        throw IllegalArgumentException_init_0('Step is zero.');
    }
    function getProgressionLastElement_0(start, end, step) {
      if (step.toNumber() > 0)
        return start.compareTo_11rb$(end) >= 0 ? end : end.subtract(differenceModulo_0(end, start, step));
      else if (step.toNumber() < 0)
        return start.compareTo_11rb$(end) <= 0 ? end : end.add(differenceModulo_0(start, end, step.unaryMinus()));
      else
        throw IllegalArgumentException_init_0('Step is zero.');
    }
    function KAnnotatedElement() {
    }
    KAnnotatedElement.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KAnnotatedElement', interfaces: []};
    function KCallable() {
    }
    KCallable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KCallable', interfaces: [KAnnotatedElement]};
    function KClass() {
    }
    KClass.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KClass', interfaces: [KClassifier, KAnnotatedElement, KDeclarationContainer]};
    function KClassifier() {
    }
    KClassifier.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KClassifier', interfaces: []};
    function KDeclarationContainer() {
    }
    KDeclarationContainer.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KDeclarationContainer', interfaces: []};
    function KFunction() {
    }
    KFunction.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KFunction', interfaces: [Function_0, KCallable]};
    function KParameter() {
    }
    function KParameter$Kind(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function KParameter$Kind_initFields() {
      KParameter$Kind_initFields = function () {
      };
      KParameter$Kind$INSTANCE_instance = new KParameter$Kind('INSTANCE', 0);
      KParameter$Kind$EXTENSION_RECEIVER_instance = new KParameter$Kind('EXTENSION_RECEIVER', 1);
      KParameter$Kind$VALUE_instance = new KParameter$Kind('VALUE', 2);
    }
    var KParameter$Kind$INSTANCE_instance;
    function KParameter$Kind$INSTANCE_getInstance() {
      KParameter$Kind_initFields();
      return KParameter$Kind$INSTANCE_instance;
    }
    var KParameter$Kind$EXTENSION_RECEIVER_instance;
    function KParameter$Kind$EXTENSION_RECEIVER_getInstance() {
      KParameter$Kind_initFields();
      return KParameter$Kind$EXTENSION_RECEIVER_instance;
    }
    var KParameter$Kind$VALUE_instance;
    function KParameter$Kind$VALUE_getInstance() {
      KParameter$Kind_initFields();
      return KParameter$Kind$VALUE_instance;
    }
    KParameter$Kind.$metadata$ = {kind: Kind_CLASS, simpleName: 'Kind', interfaces: [Enum]};
    function KParameter$Kind$values() {
      return [KParameter$Kind$INSTANCE_getInstance(), KParameter$Kind$EXTENSION_RECEIVER_getInstance(), KParameter$Kind$VALUE_getInstance()];
    }
    KParameter$Kind.values = KParameter$Kind$values;
    function KParameter$Kind$valueOf(name) {
      switch (name) {
        case 'INSTANCE':
          return KParameter$Kind$INSTANCE_getInstance();
        case 'EXTENSION_RECEIVER':
          return KParameter$Kind$EXTENSION_RECEIVER_getInstance();
        case 'VALUE':
          return KParameter$Kind$VALUE_getInstance();
        default:throwISE('No enum constant kotlin.reflect.KParameter.Kind.' + name);
      }
    }
    KParameter$Kind.valueOf_61zpoe$ = KParameter$Kind$valueOf;
    KParameter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KParameter', interfaces: [KAnnotatedElement]};
    function KProperty() {
    }
    function KProperty$Accessor() {
    }
    KProperty$Accessor.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Accessor', interfaces: []};
    function KProperty$Getter() {
    }
    KProperty$Getter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Getter', interfaces: [KFunction, KProperty$Accessor]};
    KProperty.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KProperty', interfaces: [KCallable]};
    function KMutableProperty() {
    }
    function KMutableProperty$Setter() {
    }
    KMutableProperty$Setter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Setter', interfaces: [KFunction, KProperty$Accessor]};
    KMutableProperty.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KMutableProperty', interfaces: [KProperty]};
    function KProperty0() {
    }
    function KProperty0$Getter() {
    }
    KProperty0$Getter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Getter', interfaces: [KProperty$Getter]};
    KProperty0.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KProperty0', interfaces: [KProperty]};
    function KMutableProperty0() {
    }
    function KMutableProperty0$Setter() {
    }
    KMutableProperty0$Setter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Setter', interfaces: [KMutableProperty$Setter]};
    KMutableProperty0.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KMutableProperty0', interfaces: [KMutableProperty, KProperty0]};
    function KProperty1() {
    }
    function KProperty1$Getter() {
    }
    KProperty1$Getter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Getter', interfaces: [KProperty$Getter]};
    KProperty1.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KProperty1', interfaces: [KProperty]};
    function KMutableProperty1() {
    }
    function KMutableProperty1$Setter() {
    }
    KMutableProperty1$Setter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Setter', interfaces: [KMutableProperty$Setter]};
    KMutableProperty1.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KMutableProperty1', interfaces: [KMutableProperty, KProperty1]};
    function KProperty2() {
    }
    function KProperty2$Getter() {
    }
    KProperty2$Getter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Getter', interfaces: [KProperty$Getter]};
    KProperty2.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KProperty2', interfaces: [KProperty]};
    function KMutableProperty2() {
    }
    function KMutableProperty2$Setter() {
    }
    KMutableProperty2$Setter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Setter', interfaces: [KMutableProperty$Setter]};
    KMutableProperty2.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KMutableProperty2', interfaces: [KMutableProperty, KProperty2]};
    function KType() {
    }
    KType.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KType', interfaces: [KAnnotatedElement]};
    function KTypeProjection(variance, type) {
      KTypeProjection$Companion_getInstance();
      this.variance = variance;
      this.type = type;
    }
    function KTypeProjection$Companion() {
      KTypeProjection$Companion_instance = this;
      this.STAR = new KTypeProjection(null, null);
    }
    KTypeProjection$Companion.prototype.invariant_saj79j$ = function (type) {
      return new KTypeProjection(KVariance$INVARIANT_getInstance(), type);
    };
    KTypeProjection$Companion.prototype.contravariant_saj79j$ = function (type) {
      return new KTypeProjection(KVariance$IN_getInstance(), type);
    };
    KTypeProjection$Companion.prototype.covariant_saj79j$ = function (type) {
      return new KTypeProjection(KVariance$OUT_getInstance(), type);
    };
    KTypeProjection$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var KTypeProjection$Companion_instance = null;
    function KTypeProjection$Companion_getInstance() {
      if (KTypeProjection$Companion_instance === null) {
        new KTypeProjection$Companion();
      }return KTypeProjection$Companion_instance;
    }
    KTypeProjection.$metadata$ = {kind: Kind_CLASS, simpleName: 'KTypeProjection', interfaces: []};
    KTypeProjection.prototype.component1 = function () {
      return this.variance;
    };
    KTypeProjection.prototype.component2 = function () {
      return this.type;
    };
    KTypeProjection.prototype.copy_wulwk3$ = function (variance, type) {
      return new KTypeProjection(variance === void 0 ? this.variance : variance, type === void 0 ? this.type : type);
    };
    KTypeProjection.prototype.toString = function () {
      return 'KTypeProjection(variance=' + Kotlin.toString(this.variance) + (', type=' + Kotlin.toString(this.type)) + ')';
    };
    KTypeProjection.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.variance) | 0;
      result = result * 31 + Kotlin.hashCode(this.type) | 0;
      return result;
    };
    KTypeProjection.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.variance, other.variance) && Kotlin.equals(this.type, other.type)))));
    };
    function KTypeParameter() {
    }
    KTypeParameter.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'KTypeParameter', interfaces: [KClassifier]};
    function KVariance(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function KVariance_initFields() {
      KVariance_initFields = function () {
      };
      KVariance$INVARIANT_instance = new KVariance('INVARIANT', 0);
      KVariance$IN_instance = new KVariance('IN', 1);
      KVariance$OUT_instance = new KVariance('OUT', 2);
    }
    var KVariance$INVARIANT_instance;
    function KVariance$INVARIANT_getInstance() {
      KVariance_initFields();
      return KVariance$INVARIANT_instance;
    }
    var KVariance$IN_instance;
    function KVariance$IN_getInstance() {
      KVariance_initFields();
      return KVariance$IN_instance;
    }
    var KVariance$OUT_instance;
    function KVariance$OUT_getInstance() {
      KVariance_initFields();
      return KVariance$OUT_instance;
    }
    KVariance.$metadata$ = {kind: Kind_CLASS, simpleName: 'KVariance', interfaces: [Enum]};
    function KVariance$values() {
      return [KVariance$INVARIANT_getInstance(), KVariance$IN_getInstance(), KVariance$OUT_getInstance()];
    }
    KVariance.values = KVariance$values;
    function KVariance$valueOf(name) {
      switch (name) {
        case 'INVARIANT':
          return KVariance$INVARIANT_getInstance();
        case 'IN':
          return KVariance$IN_getInstance();
        case 'OUT':
          return KVariance$OUT_getInstance();
        default:throwISE('No enum constant kotlin.reflect.KVariance.' + name);
      }
    }
    KVariance.valueOf_61zpoe$ = KVariance$valueOf;
    function KVisibility(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function KVisibility_initFields() {
      KVisibility_initFields = function () {
      };
      KVisibility$PUBLIC_instance = new KVisibility('PUBLIC', 0);
      KVisibility$PROTECTED_instance = new KVisibility('PROTECTED', 1);
      KVisibility$INTERNAL_instance = new KVisibility('INTERNAL', 2);
      KVisibility$PRIVATE_instance = new KVisibility('PRIVATE', 3);
    }
    var KVisibility$PUBLIC_instance;
    function KVisibility$PUBLIC_getInstance() {
      KVisibility_initFields();
      return KVisibility$PUBLIC_instance;
    }
    var KVisibility$PROTECTED_instance;
    function KVisibility$PROTECTED_getInstance() {
      KVisibility_initFields();
      return KVisibility$PROTECTED_instance;
    }
    var KVisibility$INTERNAL_instance;
    function KVisibility$INTERNAL_getInstance() {
      KVisibility_initFields();
      return KVisibility$INTERNAL_instance;
    }
    var KVisibility$PRIVATE_instance;
    function KVisibility$PRIVATE_getInstance() {
      KVisibility_initFields();
      return KVisibility$PRIVATE_instance;
    }
    KVisibility.$metadata$ = {kind: Kind_CLASS, simpleName: 'KVisibility', interfaces: [Enum]};
    function KVisibility$values() {
      return [KVisibility$PUBLIC_getInstance(), KVisibility$PROTECTED_getInstance(), KVisibility$INTERNAL_getInstance(), KVisibility$PRIVATE_getInstance()];
    }
    KVisibility.values = KVisibility$values;
    function KVisibility$valueOf(name) {
      switch (name) {
        case 'PUBLIC':
          return KVisibility$PUBLIC_getInstance();
        case 'PROTECTED':
          return KVisibility$PROTECTED_getInstance();
        case 'INTERNAL':
          return KVisibility$INTERNAL_getInstance();
        case 'PRIVATE':
          return KVisibility$PRIVATE_getInstance();
        default:throwISE('No enum constant kotlin.reflect.KVisibility.' + name);
      }
    }
    KVisibility.valueOf_61zpoe$ = KVisibility$valueOf;
    function arrayIterator$ObjectLiteral(closure$arr) {
      this.closure$arr = closure$arr;
      this.index = 0;
    }
    arrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$arr.length;
    };
    arrayIterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.index < this.closure$arr.length) {
        return this.closure$arr[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    arrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    function arrayIterator(array, type) {
      if (type == null) {
        var arr = array;
        return new arrayIterator$ObjectLiteral(arr);
      } else
        switch (type) {
          case 'BooleanArray':
            return booleanArrayIterator(array);
          case 'ByteArray':
            return byteArrayIterator(array);
          case 'ShortArray':
            return shortArrayIterator(array);
          case 'CharArray':
            return charArrayIterator(array);
          case 'IntArray':
            return intArrayIterator(array);
          case 'LongArray':
            return longArrayIterator(array);
          case 'FloatArray':
            return floatArrayIterator(array);
          case 'DoubleArray':
            return doubleArrayIterator(array);
          default:throw IllegalStateException_init_0('Unsupported type argument for arrayIterator: ' + toString(type));
        }
    }
    function booleanArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      BooleanIterator.call(this);
      this.index = 0;
    }
    booleanArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    booleanArrayIterator$ObjectLiteral.prototype.nextBoolean = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    booleanArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [BooleanIterator]};
    function booleanArrayIterator(array) {
      return new booleanArrayIterator$ObjectLiteral(array);
    }
    function byteArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      ByteIterator.call(this);
      this.index = 0;
    }
    byteArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    byteArrayIterator$ObjectLiteral.prototype.nextByte = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    byteArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [ByteIterator]};
    function byteArrayIterator(array) {
      return new byteArrayIterator$ObjectLiteral(array);
    }
    function shortArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      ShortIterator.call(this);
      this.index = 0;
    }
    shortArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    shortArrayIterator$ObjectLiteral.prototype.nextShort = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    shortArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [ShortIterator]};
    function shortArrayIterator(array) {
      return new shortArrayIterator$ObjectLiteral(array);
    }
    function charArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      CharIterator.call(this);
      this.index = 0;
    }
    charArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    charArrayIterator$ObjectLiteral.prototype.nextChar = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    charArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [CharIterator]};
    function charArrayIterator(array) {
      return new charArrayIterator$ObjectLiteral(array);
    }
    function intArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      IntIterator.call(this);
      this.index = 0;
    }
    intArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    intArrayIterator$ObjectLiteral.prototype.nextInt = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    intArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [IntIterator]};
    function intArrayIterator(array) {
      return new intArrayIterator$ObjectLiteral(array);
    }
    function floatArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      FloatIterator.call(this);
      this.index = 0;
    }
    floatArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    floatArrayIterator$ObjectLiteral.prototype.nextFloat = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    floatArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [FloatIterator]};
    function floatArrayIterator(array) {
      return new floatArrayIterator$ObjectLiteral(array);
    }
    function doubleArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      DoubleIterator.call(this);
      this.index = 0;
    }
    doubleArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    doubleArrayIterator$ObjectLiteral.prototype.nextDouble = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    doubleArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [DoubleIterator]};
    function doubleArrayIterator(array) {
      return new doubleArrayIterator$ObjectLiteral(array);
    }
    function longArrayIterator$ObjectLiteral(closure$array) {
      this.closure$array = closure$array;
      LongIterator.call(this);
      this.index = 0;
    }
    longArrayIterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index < this.closure$array.length;
    };
    longArrayIterator$ObjectLiteral.prototype.nextLong = function () {
      var tmp$;
      if (this.index < this.closure$array.length) {
        return this.closure$array[tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$];
      } else
        throw new NoSuchElementException(this.index.toString());
    };
    longArrayIterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [LongIterator]};
    function longArrayIterator(array) {
      return new longArrayIterator$ObjectLiteral(array);
    }
    function PropertyMetadata(name) {
      this.callableName = name;
    }
    PropertyMetadata.$metadata$ = {kind: Kind_CLASS, simpleName: 'PropertyMetadata', interfaces: []};
    function noWhenBranchMatched() {
      throw NoWhenBranchMatchedException_init();
    }
    function subSequence(c, startIndex, endIndex) {
      if (typeof c === 'string') {
        return c.substring(startIndex, endIndex);
      } else {
        return c.subSequence_vux9f0$(startIndex, endIndex);
      }
    }
    function captureStack(baseClass, instance) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(instance, get_js(Kotlin.getKClassFromExpression(instance)));
      } else {
        instance.stack = (new Error()).stack;
      }
    }
    function newThrowable(message, cause) {
      var tmp$;
      var throwable = new Error();
      if (equals(typeof message, 'undefined')) {
        tmp$ = cause != null ? cause.toString() : null;
      } else {
        tmp$ = message;
      }
      throwable.message = tmp$;
      throwable.cause = cause;
      throwable.name = 'Throwable';
      return throwable;
    }
    function BoxedChar(c) {
      this.c = c;
    }
    BoxedChar.prototype.equals = function (other) {
      return Kotlin.isType(other, BoxedChar) && this.c === other.c;
    };
    BoxedChar.prototype.hashCode = function () {
      return this.c;
    };
    BoxedChar.prototype.toString = function () {
      return String.fromCharCode(unboxChar(this.c));
    };
    BoxedChar.prototype.compareTo_11rb$ = function (other) {
      return this.c - other;
    };
    BoxedChar.prototype.valueOf = function () {
      return this.c;
    };
    BoxedChar.$metadata$ = {kind: Kind_CLASS, simpleName: 'BoxedChar', interfaces: [Comparable]};
    var concat = defineInlineFunction('kotlin.concat_2r4q7p$', function (args) {
      var typed = Array(args.length);
      for (var i = 0; i !== args.length; ++i) {
        var arr = args[i];
        if (!Kotlin.isArray(arr)) {
          typed[i] = [].slice.call(arr);
        } else {
          typed[i] = arr;
        }
      }
      return [].concat.apply([], typed);
    });
    function arrayConcat(a, b) {
      var args = arguments;
      var typed = Array(args.length);
      for (var i = 0; i !== args.length; ++i) {
        var arr = args[i];
        if (!Kotlin.isArray(arr)) {
          typed[i] = [].slice.call(arr);
        } else {
          typed[i] = arr;
        }
      }
      return [].concat.apply([], typed);
    }
    function primitiveArrayConcat(a, b) {
      var args = arguments;
      if (Kotlin.isArray(a) && a.$type$ === undefined) {
        var typed = Array(args.length);
        for (var i = 0; i !== args.length; ++i) {
          var arr = args[i];
          if (!Kotlin.isArray(arr)) {
            typed[i] = [].slice.call(arr);
          } else {
            typed[i] = arr;
          }
        }
        return [].concat.apply([], typed);
      } else {
        var size = 0;
        for (var i_0 = 0; i_0 !== args.length; ++i_0) {
          var tmp$;
          size = size + (typeof (tmp$ = args[i_0].length) === 'number' ? tmp$ : throwCCE_0()) | 0;
        }
        var result = new a.constructor(size);
        if (a.$type$ !== undefined) {
          result.$type$ = a.$type$;
        }size = 0;
        for (var i_1 = 0; i_1 !== args.length; ++i_1) {
          var tmp$_0, tmp$_1;
          var arr_0 = args[i_1];
          tmp$_0 = arr_0.length;
          for (var j = 0; j < tmp$_0; j++) {
            result[tmp$_1 = size, size = tmp$_1 + 1 | 0, tmp$_1] = arr_0[j];
          }
        }
        return result;
      }
    }
    function booleanArrayOf() {
      var type = 'BooleanArray';
      var array = [].slice.call(arguments);
      array.$type$ = type;
      return array;
    }
    function charArrayOf() {
      var type = 'CharArray';
      var array = new Uint16Array([].slice.call(arguments));
      array.$type$ = type;
      return array;
    }
    function longArrayOf() {
      var type = 'LongArray';
      var array = [].slice.call(arguments);
      array.$type$ = type;
      return array;
    }
    var withType = defineInlineFunction('kotlin.withType', function (type, array) {
      array.$type$ = type;
      return array;
    });
    function CoroutineImpl(resultContinuation) {
      this.resultContinuation_0 = resultContinuation;
      this.state_0 = 0;
      this.exceptionState_0 = 0;
      this.result_0 = null;
      this.exception_0 = null;
      this.finallyPath_0 = null;
      this.context_hxcuhl$_0 = this.resultContinuation_0.context;
      this.intercepted__0 = null;
    }
    Object.defineProperty(CoroutineImpl.prototype, 'context', {get: function () {
      return this.context_hxcuhl$_0;
    }});
    CoroutineImpl.prototype.intercepted = function () {
      var tmp$, tmp$_0, tmp$_1;
      var tmp$_2;
      if ((tmp$_1 = this.intercepted__0) != null)
        tmp$_2 = tmp$_1;
      else {
        var $receiver = (tmp$_0 = (tmp$ = this.context.get_j3r2sn$(ContinuationInterceptor$Key_getInstance())) != null ? tmp$.interceptContinuation_wj8d80$(this) : null) != null ? tmp$_0 : this;
        this.intercepted__0 = $receiver;
        tmp$_2 = $receiver;
      }
      return tmp$_2;
    };
    CoroutineImpl.prototype.resumeWith_tl1gpc$ = function (result) {
      var current = {v: this};
      var getOrNull$result;
      var tmp$;
      if (result.isFailure) {
        getOrNull$result = null;
      } else {
        getOrNull$result = (tmp$ = result.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      }
      var currentResult = {v: getOrNull$result};
      var currentException = {v: result.exceptionOrNull()};
      while (true) {
        var $receiver = current.v;
        var tmp$_0;
        var completion = $receiver.resultContinuation_0;
        if (currentException.v == null) {
          $receiver.result_0 = currentResult.v;
        } else {
          $receiver.state_0 = $receiver.exceptionState_0;
          $receiver.exception_0 = currentException.v;
        }
        try {
          var outcome = $receiver.doResume();
          if (outcome === get_COROUTINE_SUSPENDED())
            return;
          currentResult.v = outcome;
          currentException.v = null;
        } catch (exception) {
          currentResult.v = null;
          currentException.v = exception;
        }
        $receiver.releaseIntercepted_0();
        if (Kotlin.isType(completion, CoroutineImpl)) {
          current.v = completion;
        } else {
          var tmp$_1;
          if ((tmp$_0 = currentException.v) != null) {
            completion.resumeWith_tl1gpc$(new Result(createFailure(tmp$_0)));
            tmp$_1 = Unit;
          } else
            tmp$_1 = null;
          if (tmp$_1 == null) {
            completion.resumeWith_tl1gpc$(new Result(currentResult.v));
          }return;
        }
      }
    };
    CoroutineImpl.prototype.releaseIntercepted_0 = function () {
      var intercepted = this.intercepted__0;
      if (intercepted != null && intercepted !== this) {
        ensureNotNull(this.context.get_j3r2sn$(ContinuationInterceptor$Key_getInstance())).releaseInterceptedContinuation_k98bjh$(intercepted);
      }this.intercepted__0 = CompletedContinuation_getInstance();
    };
    CoroutineImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'CoroutineImpl', interfaces: [Continuation]};
    function CompletedContinuation() {
      CompletedContinuation_instance = this;
    }
    Object.defineProperty(CompletedContinuation.prototype, 'context', {get: function () {
      throw IllegalStateException_init_0('This continuation is already complete'.toString());
    }});
    CompletedContinuation.prototype.resumeWith_tl1gpc$ = function (result) {
      throw IllegalStateException_init_0('This continuation is already complete'.toString());
    };
    CompletedContinuation.prototype.toString = function () {
      return 'This continuation is already complete';
    };
    CompletedContinuation.$metadata$ = {kind: Kind_OBJECT, simpleName: 'CompletedContinuation', interfaces: [Continuation]};
    var CompletedContinuation_instance = null;
    function CompletedContinuation_getInstance() {
      if (CompletedContinuation_instance === null) {
        new CompletedContinuation();
      }return CompletedContinuation_instance;
    }
    createCoroutineFromSuspendFunction$ObjectLiteral.prototype = Object.create(CoroutineImpl.prototype);
    createCoroutineFromSuspendFunction$ObjectLiteral.prototype.constructor = createCoroutineFromSuspendFunction$ObjectLiteral;
    function createCoroutineFromSuspendFunction$ObjectLiteral(closure$block, resultContinuation) {
      this.closure$block = closure$block;
      CoroutineImpl.call(this, resultContinuation);
    }
    createCoroutineFromSuspendFunction$ObjectLiteral.prototype.doResume = function () {
      var tmp$;
      if ((tmp$ = this.exception_0) != null) {
        throw tmp$;
      }return this.closure$block();
    };
    createCoroutineFromSuspendFunction$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [CoroutineImpl]};
    var startCoroutineUninterceptedOrReturn = defineInlineFunction('kotlin.kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn_x18nsh$', function ($receiver, completion) {
      return $receiver(completion, false);
    });
    var startCoroutineUninterceptedOrReturn_0 = defineInlineFunction('kotlin.kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn_3a617i$', function ($receiver, receiver, completion) {
      return $receiver(receiver, completion, false);
    });
    function createCoroutineUnintercepted$lambda(this$createCoroutineUnintercepted, closure$completion) {
      return function () {
        return this$createCoroutineUnintercepted(closure$completion);
      };
    }
    function createCoroutineUnintercepted($receiver, completion) {
      if ($receiver.length == 2) {
        return $receiver(completion, true);
      } else {
        var tmp$;
        return new createCoroutineFromSuspendFunction$ObjectLiteral(createCoroutineUnintercepted$lambda($receiver, completion), Kotlin.isType(tmp$ = completion, Continuation) ? tmp$ : throwCCE_0());
      }
    }
    function createCoroutineUnintercepted$lambda_0(this$createCoroutineUnintercepted, closure$receiver, closure$completion) {
      return function () {
        return this$createCoroutineUnintercepted(closure$receiver, closure$completion);
      };
    }
    function createCoroutineUnintercepted_0($receiver, receiver, completion) {
      if ($receiver.length == 3) {
        return $receiver(receiver, completion, true);
      } else {
        var tmp$;
        return new createCoroutineFromSuspendFunction$ObjectLiteral(createCoroutineUnintercepted$lambda_0($receiver, receiver, completion), Kotlin.isType(tmp$ = completion, Continuation) ? tmp$ : throwCCE_0());
      }
    }
    function intercepted($receiver) {
      var tmp$, tmp$_0, tmp$_1;
      return (tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = $receiver, CoroutineImpl) ? tmp$ : null) != null ? tmp$_0.intercepted() : null) != null ? tmp$_1 : $receiver;
    }
    var createCoroutineFromSuspendFunction = wrapFunction(function () {
      createCoroutineFromSuspendFunction$ObjectLiteral.prototype = Object.create(CoroutineImpl.prototype);
      createCoroutineFromSuspendFunction$ObjectLiteral.prototype.constructor = createCoroutineFromSuspendFunction$ObjectLiteral;
      function createCoroutineFromSuspendFunction$ObjectLiteral(closure$block, resultContinuation) {
        this.closure$block = closure$block;
        CoroutineImpl.call(this, resultContinuation);
      }
      createCoroutineFromSuspendFunction$ObjectLiteral.prototype.doResume = function () {
        var tmp$;
        if ((tmp$ = this.exception_0) != null) {
          throw tmp$;
        }return this.closure$block();
      };
      createCoroutineFromSuspendFunction$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [CoroutineImpl]};
      return function (completion, block) {
        var tmp$;
        return new createCoroutineFromSuspendFunction$ObjectLiteral(block, Kotlin.isType(tmp$ = completion, Continuation) ? tmp$ : throwCCE_0());
      };
    });
    var isArrayish = defineInlineFunction('kotlin.kotlin.js.isArrayish_kcmwxo$', function (o) {
      return Kotlin.isArrayish(o);
    });
    var jsDeleteProperty = defineInlineFunction('kotlin.kotlin.js.jsDeleteProperty_dgzutr$', function (obj, property) {
      delete obj[property];
    });
    var jsBitwiseOr = defineInlineFunction('kotlin.kotlin.js.jsBitwiseOr_fkghef$', function (lhs, rhs) {
      return lhs | rhs;
    });
    var jsTypeOf = defineInlineFunction('kotlin.kotlin.js.jsTypeOf_s8jyv4$', function (a) {
      return typeof a;
    });
    var emptyArray = defineInlineFunction('kotlin.kotlin.emptyArray_287e2$', function () {
      return [];
    });
    function lazy(initializer) {
      return new UnsafeLazyImpl(initializer);
    }
    function lazy_0(mode, initializer) {
      return new UnsafeLazyImpl(initializer);
    }
    function lazy_1(lock, initializer) {
      return new UnsafeLazyImpl(initializer);
    }
    function fillFrom(src, dst) {
      var tmp$;
      var srcLen = src.length;
      var dstLen = dst.length;
      var index = 0;
      while (index < srcLen && index < dstLen) {
        dst[index] = src[tmp$ = index, index = tmp$ + 1 | 0, tmp$];
      }
      return dst;
    }
    function arrayCopyResize(source, newSize, defaultValue) {
      var tmp$;
      var result = source.slice(0, newSize);
      if (source.$type$ !== undefined) {
        result.$type$ = source.$type$;
      }var index = source.length;
      if (newSize > index) {
        result.length = newSize;
        while (index < newSize) {
          result[tmp$ = index, index = tmp$ + 1 | 0, tmp$] = defaultValue;
        }
      }return result;
    }
    function arrayPlusCollection(array, collection) {
      var tmp$, tmp$_0;
      var result = array.slice();
      result.length += collection.size;
      if (array.$type$ !== undefined) {
        result.$type$ = array.$type$;
      }var index = array.length;
      tmp$ = collection.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        result[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return result;
    }
    function fillFromCollection(dst, startIndex, collection) {
      var tmp$, tmp$_0;
      var index = startIndex;
      tmp$ = collection.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        dst[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = element;
      }
      return dst;
    }
    var copyArrayType = defineInlineFunction('kotlin.kotlin.copyArrayType_dgzutr$', function (from, to) {
      if (from.$type$ !== undefined) {
        to.$type$ = from.$type$;
      }});
    var jsIsType = defineInlineFunction('kotlin.kotlin.jsIsType_dgzutr$', function (obj, jsClass) {
      return Kotlin.isType(obj, jsClass);
    });
    function withSign($receiver, sign) {
      var thisSignBit = Kotlin.doubleSignBit($receiver);
      var newSignBit = Kotlin.doubleSignBit(sign);
      return thisSignBit === newSignBit ? $receiver : -$receiver;
    }
    var fromBits = defineInlineFunction('kotlin.kotlin.fromBits_pkt8ie$', function ($receiver, bits) {
      return Kotlin.doubleFromBits(bits);
    });
    var fromBits_0 = defineInlineFunction('kotlin.kotlin.fromBits_4ql4v8$', function ($receiver, bits) {
      return Kotlin.floatFromBits(bits);
    });
    var Long = defineInlineFunction('kotlin.kotlin.Long_6xvm5r$', function (low, high) {
      return Kotlin.Long.fromBits(low, high);
    });
    var get_low = defineInlineFunction('kotlin.kotlin.get_low_nzsbcz$', function ($receiver) {
      return $receiver.getLowBits();
    });
    var get_high = defineInlineFunction('kotlin.kotlin.get_high_nzsbcz$', function ($receiver) {
      return $receiver.getHighBits();
    });
    function toString_0($receiver, radix) {
      return $receiver.toString(checkRadix(radix));
    }
    function elementAt_2($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_3($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_0($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_4($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_1($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_5($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_2($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_6($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_3($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_7($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_4($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_8($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_5($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_9($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_6($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_10($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_7($receiver))
        tmp$ = $receiver[index];
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function asList($receiver) {
      return new ArrayList($receiver);
    }
    var asList_0 = defineInlineFunction('kotlin.kotlin.collections.asList_964n91$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_1 = defineInlineFunction('kotlin.kotlin.collections.asList_i2lc79$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_2 = defineInlineFunction('kotlin.kotlin.collections.asList_tmsbgo$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_3 = defineInlineFunction('kotlin.kotlin.collections.asList_se6h4x$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_4 = defineInlineFunction('kotlin.kotlin.collections.asList_rjqryz$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_5 = defineInlineFunction('kotlin.kotlin.collections.asList_bvy38s$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    var asList_6 = defineInlineFunction('kotlin.kotlin.collections.asList_l1lu5t$', wrapFunction(function () {
      var asList = _.kotlin.collections.asList_us0mfu$;
      return function ($receiver) {
        return asList($receiver);
      };
    }));
    function asList$ObjectLiteral(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral.prototype, 'size', {get: function () {
      return this.this$asList.length;
    }});
    asList$ObjectLiteral.prototype.isEmpty = function () {
      return this.this$asList.length === 0;
    };
    asList$ObjectLiteral.prototype.contains_11rb$ = function (element) {
      return contains_7(this.this$asList, element);
    };
    asList$ObjectLiteral.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return toBoxedChar(this.this$asList[index]);
    };
    asList$ObjectLiteral.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isChar((tmp$ = toBoxedChar(element)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0()))
        return -1;
      return indexOf_7(this.this$asList, element);
    };
    asList$ObjectLiteral.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isChar((tmp$ = toBoxedChar(element)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0()))
        return -1;
      return lastIndexOf_7(this.this$asList, element);
    };
    asList$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [RandomAccess, AbstractList]};
    function asList_7($receiver) {
      return new asList$ObjectLiteral($receiver);
    }
    var copyInto_3 = defineInlineFunction('kotlin.kotlin.collections.copyInto_bpr3is$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_4 = defineInlineFunction('kotlin.kotlin.collections.copyInto_tpo7sv$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_5 = defineInlineFunction('kotlin.kotlin.collections.copyInto_caitwp$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_6 = defineInlineFunction('kotlin.kotlin.collections.copyInto_1zk1dd$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_7 = defineInlineFunction('kotlin.kotlin.collections.copyInto_1csvzz$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_8 = defineInlineFunction('kotlin.kotlin.collections.copyInto_94rtex$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_9 = defineInlineFunction('kotlin.kotlin.collections.copyInto_bogo1$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_10 = defineInlineFunction('kotlin.kotlin.collections.copyInto_ufe64f$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyInto_11 = defineInlineFunction('kotlin.kotlin.collections.copyInto_c3e475$', wrapFunction(function () {
      var arrayCopy = _.kotlin.collections.arrayCopy;
      return function ($receiver, destination, destinationOffset, startIndex, endIndex) {
        if (destinationOffset === void 0)
          destinationOffset = 0;
        if (startIndex === void 0)
          startIndex = 0;
        if (endIndex === void 0)
          endIndex = $receiver.length;
        arrayCopy($receiver, destination, destinationOffset, startIndex, endIndex);
        return destination;
      };
    }));
    var copyOf_7 = defineInlineFunction('kotlin.kotlin.collections.copyOf_us0mfu$', function ($receiver) {
      return $receiver.slice();
    });
    var copyOf_8 = defineInlineFunction('kotlin.kotlin.collections.copyOf_964n91$', function ($receiver) {
      return $receiver.slice();
    });
    var copyOf_9 = defineInlineFunction('kotlin.kotlin.collections.copyOf_i2lc79$', function ($receiver) {
      return $receiver.slice();
    });
    var copyOf_10 = defineInlineFunction('kotlin.kotlin.collections.copyOf_tmsbgo$', function ($receiver) {
      return $receiver.slice();
    });
    function copyOf_11($receiver) {
      var type = 'LongArray';
      var array = $receiver.slice();
      array.$type$ = type;
      return array;
    }
    var copyOf_12 = defineInlineFunction('kotlin.kotlin.collections.copyOf_rjqryz$', function ($receiver) {
      return $receiver.slice();
    });
    var copyOf_13 = defineInlineFunction('kotlin.kotlin.collections.copyOf_bvy38s$', function ($receiver) {
      return $receiver.slice();
    });
    function copyOf_14($receiver) {
      var type = 'BooleanArray';
      var array = $receiver.slice();
      array.$type$ = type;
      return array;
    }
    function copyOf_15($receiver) {
      var type = 'CharArray';
      var array = $receiver.slice();
      array.$type$ = type;
      return array;
    }
    function copyOf_16($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return fillFrom($receiver, new Int8Array(newSize));
    }
    function copyOf_17($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return fillFrom($receiver, new Int16Array(newSize));
    }
    function copyOf_18($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return fillFrom($receiver, new Int32Array(newSize));
    }
    function copyOf_19($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }var type = 'LongArray';
      var array = arrayCopyResize($receiver, newSize, L0);
      array.$type$ = type;
      return array;
    }
    function copyOf_20($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return fillFrom($receiver, new Float32Array(newSize));
    }
    function copyOf_21($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return fillFrom($receiver, new Float64Array(newSize));
    }
    function copyOf_22($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }var type = 'BooleanArray';
      var array = arrayCopyResize($receiver, newSize, false);
      array.$type$ = type;
      return array;
    }
    function copyOf_23($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }var type = 'CharArray';
      var array = fillFrom($receiver, Kotlin.charArray(newSize));
      array.$type$ = type;
      return array;
    }
    function copyOf_24($receiver, newSize) {
      if (!(newSize >= 0)) {
        var message = 'Invalid new array size: ' + newSize + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return arrayCopyResize($receiver, newSize, null);
    }
    function copyOfRange_3($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_4($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_5($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_6($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_7($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      var type = 'LongArray';
      var array = $receiver.slice(fromIndex, toIndex);
      array.$type$ = type;
      return array;
    }
    function copyOfRange_8($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_9($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      return $receiver.slice(fromIndex, toIndex);
    }
    function copyOfRange_10($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      var type = 'BooleanArray';
      var array = $receiver.slice(fromIndex, toIndex);
      array.$type$ = type;
      return array;
    }
    function copyOfRange_11($receiver, fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      var type = 'CharArray';
      var array = $receiver.slice(fromIndex, toIndex);
      array.$type$ = type;
      return array;
    }
    function fill_3($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_4($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_5($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_6($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_7($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_8($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_9($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_10($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    function fill_11($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, $receiver.length);
      $receiver.fill(element, fromIndex, toIndex);
    }
    var plus_27 = defineInlineFunction('kotlin.kotlin.collections.plus_mjy6jw$', function ($receiver, element) {
      return $receiver.concat([element]);
    });
    var plus_28 = defineInlineFunction('kotlin.kotlin.collections.plus_jlnu8a$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, new Int8Array([element]));
      };
    }));
    var plus_29 = defineInlineFunction('kotlin.kotlin.collections.plus_s7ir3o$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, new Int16Array([element]));
      };
    }));
    var plus_30 = defineInlineFunction('kotlin.kotlin.collections.plus_c03ot6$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, new Int32Array([element]));
      };
    }));
    var plus_31 = defineInlineFunction('kotlin.kotlin.collections.plus_uxdaoa$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, Kotlin.longArrayOf(element));
      };
    }));
    var plus_32 = defineInlineFunction('kotlin.kotlin.collections.plus_omthmc$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, new Float32Array([element]));
      };
    }));
    var plus_33 = defineInlineFunction('kotlin.kotlin.collections.plus_taaqy$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, new Float64Array([element]));
      };
    }));
    var plus_34 = defineInlineFunction('kotlin.kotlin.collections.plus_yax8s4$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, Kotlin.booleanArrayOf(element));
      };
    }));
    var plus_35 = defineInlineFunction('kotlin.kotlin.collections.plus_o2f9me$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, element) {
        return primitiveArrayConcat($receiver, Kotlin.charArrayOf(element));
      };
    }));
    function plus_36($receiver, elements) {
      return arrayPlusCollection($receiver, elements);
    }
    function plus_37($receiver, elements) {
      return fillFromCollection(copyOf_16($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    function plus_38($receiver, elements) {
      return fillFromCollection(copyOf_17($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    function plus_39($receiver, elements) {
      return fillFromCollection(copyOf_18($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    function plus_40($receiver, elements) {
      return arrayPlusCollection($receiver, elements);
    }
    function plus_41($receiver, elements) {
      return fillFromCollection(copyOf_20($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    function plus_42($receiver, elements) {
      return fillFromCollection(copyOf_21($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    function plus_43($receiver, elements) {
      return arrayPlusCollection($receiver, elements);
    }
    function plus_44($receiver, elements) {
      return fillFromCollection(copyOf_23($receiver, $receiver.length + elements.size | 0), $receiver.length, elements);
    }
    var plus_45 = defineInlineFunction('kotlin.kotlin.collections.plus_vu4gah$', function ($receiver, elements) {
      return $receiver.concat(elements);
    });
    var plus_46 = defineInlineFunction('kotlin.kotlin.collections.plus_ndt7zj$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_47 = defineInlineFunction('kotlin.kotlin.collections.plus_907jet$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_48 = defineInlineFunction('kotlin.kotlin.collections.plus_mgkctd$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_49 = defineInlineFunction('kotlin.kotlin.collections.plus_tq12cv$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_50 = defineInlineFunction('kotlin.kotlin.collections.plus_tec1tx$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_51 = defineInlineFunction('kotlin.kotlin.collections.plus_pmvpm9$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_52 = defineInlineFunction('kotlin.kotlin.collections.plus_qsfoml$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plus_53 = defineInlineFunction('kotlin.kotlin.collections.plus_wxyzfz$', wrapFunction(function () {
      var primitiveArrayConcat = _.primitiveArrayConcat;
      return function ($receiver, elements) {
        return primitiveArrayConcat($receiver, elements);
      };
    }));
    var plusElement_3 = defineInlineFunction('kotlin.kotlin.collections.plusElement_mjy6jw$', function ($receiver, element) {
      return $receiver.concat([element]);
    });
    function sort$lambda(a, b) {
      return a.compareTo_11rb$(b);
    }
    function sort_4($receiver) {
      if ($receiver.length > 1) {
        $receiver.sort(sort$lambda);
      }}
    function sort_5($receiver) {
      if ($receiver.length > 1)
        sortArray($receiver);
    }
    function sort_6($receiver, comparison) {
      if ($receiver.length > 1)
        sortArrayWith($receiver, comparison);
    }
    var sort_7 = defineInlineFunction('kotlin.kotlin.collections.sort_hcmc5n$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_8 = defineInlineFunction('kotlin.kotlin.collections.sort_6749zv$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_9 = defineInlineFunction('kotlin.kotlin.collections.sort_vuuzha$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_10 = defineInlineFunction('kotlin.kotlin.collections.sort_y2xy0v$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_11 = defineInlineFunction('kotlin.kotlin.collections.sort_rx1g57$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_12 = defineInlineFunction('kotlin.kotlin.collections.sort_qgorx0$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    var sort_13 = defineInlineFunction('kotlin.kotlin.collections.sort_vuimop$', function ($receiver, comparison) {
      $receiver.sort(comparison);
    });
    function sortWith($receiver, comparator) {
      if ($receiver.length > 1)
        sortArrayWith_0($receiver, comparator);
    }
    function toTypedArray_3($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_4($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_5($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_6($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_7($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_8($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray_9($receiver) {
      return [].slice.call($receiver);
    }
    function toTypedArray$lambda_3(this$toTypedArray) {
      return function (index) {
        return toBoxedChar(this$toTypedArray[index]);
      };
    }
    function toTypedArray_10($receiver) {
      return Kotlin.newArrayF($receiver.length, toTypedArray$lambda_3($receiver));
    }
    function reverse_12($receiver) {
      var midPoint = ($receiver.size / 2 | 0) - 1 | 0;
      if (midPoint < 0)
        return;
      var reverseIndex = get_lastIndex_12($receiver);
      for (var index = 0; index <= midPoint; index++) {
        var tmp = $receiver.get_za3lpa$(index);
        $receiver.set_wxm5ur$(index, $receiver.get_za3lpa$(reverseIndex));
        $receiver.set_wxm5ur$(reverseIndex, tmp);
        reverseIndex = reverseIndex - 1 | 0;
      }
    }
    function maxOf_9(a, b) {
      return Kotlin.compareTo(a, b) >= 0 ? a : b;
    }
    var maxOf_10 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_5gdoe6$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var maxOf_11 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_8bdmd0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var maxOf_12 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_vux9f0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var maxOf_13 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_3pjtqy$', function (a, b) {
      return a.compareTo_11rb$(b) >= 0 ? a : b;
    });
    var maxOf_14 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var maxOf_15 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    function maxOf_16(a, b, c) {
      return maxOf_9(a, maxOf_9(b, c));
    }
    var maxOf_17 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_d9r5kp$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.max(a, b, c);
      };
    }));
    var maxOf_18 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_i3nxhr$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.max(a, b, c);
      };
    }));
    var maxOf_19 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_qt1dr2$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.max(a, b, c);
      };
    }));
    var maxOf_20 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_b9bd0d$', function (a, b, c) {
      var b_0 = b.compareTo_11rb$(c) >= 0 ? b : c;
      return a.compareTo_11rb$(b_0) >= 0 ? a : b_0;
    });
    var maxOf_21 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_y2kzbl$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.max(a, b, c);
      };
    }));
    var maxOf_22 = defineInlineFunction('kotlin.kotlin.comparisons.maxOf_yvo9jy$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.max(a, b, c);
      };
    }));
    function minOf_9(a, b) {
      return Kotlin.compareTo(a, b) <= 0 ? a : b;
    }
    var minOf_10 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_5gdoe6$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var minOf_11 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_8bdmd0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var minOf_12 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_vux9f0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var minOf_13 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_3pjtqy$', function (a, b) {
      return a.compareTo_11rb$(b) <= 0 ? a : b;
    });
    var minOf_14 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var minOf_15 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    function minOf_16(a, b, c) {
      return minOf_9(a, minOf_9(b, c));
    }
    var minOf_17 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_d9r5kp$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.min(a, b, c);
      };
    }));
    var minOf_18 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_i3nxhr$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.min(a, b, c);
      };
    }));
    var minOf_19 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_qt1dr2$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.min(a, b, c);
      };
    }));
    var minOf_20 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_b9bd0d$', function (a, b, c) {
      var b_0 = b.compareTo_11rb$(c) <= 0 ? b : c;
      return a.compareTo_11rb$(b_0) <= 0 ? a : b_0;
    });
    var minOf_21 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_y2kzbl$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.min(a, b, c);
      };
    }));
    var minOf_22 = defineInlineFunction('kotlin.kotlin.comparisons.minOf_yvo9jy$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b, c) {
        return Math_0.min(a, b, c);
      };
    }));
    function elementAt_11($receiver, index) {
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_13($receiver))
        tmp$ = $receiver.charCodeAt(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', length: ' + $receiver.length + '}');
      }
      return tmp$;
    }
    function elementAt_12($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_2($receiver.storage);
      }var tmp$_0;
      if (tmp$)
        tmp$_0 = $receiver.get_za3lpa$(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.size + '}');
      }
      return tmp$_0;
    }
    function elementAt_13($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_3($receiver.storage);
      }var tmp$_0;
      if (tmp$)
        tmp$_0 = $receiver.get_za3lpa$(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.size + '}');
      }
      return tmp$_0;
    }
    function elementAt_14($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_0($receiver.storage);
      }var tmp$_0;
      if (tmp$)
        tmp$_0 = $receiver.get_za3lpa$(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.size + '}');
      }
      return tmp$_0;
    }
    function elementAt_15($receiver, index) {
      var tmp$ = index >= 0;
      if (tmp$) {
        tmp$ = index <= get_lastIndex_1($receiver.storage);
      }var tmp$_0;
      if (tmp$)
        tmp$_0 = $receiver.get_za3lpa$(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + $receiver.size + '}');
      }
      return tmp$_0;
    }
    function asList$ObjectLiteral_0(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral_0.prototype, 'size', {get: function () {
      return this.this$asList.size;
    }});
    asList$ObjectLiteral_0.prototype.isEmpty = function () {
      return this.this$asList.isEmpty();
    };
    asList$ObjectLiteral_0.prototype.contains_11rb$ = function (element) {
      return this.this$asList.contains_11rb$(element);
    };
    asList$ObjectLiteral_0.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return this.this$asList.get_za3lpa$(index);
    };
    asList$ObjectLiteral_0.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UInt))
        return -1;
      return indexOf_2(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_0.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UInt))
        return -1;
      return lastIndexOf_2(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [RandomAccess, AbstractList]};
    function asList_8($receiver) {
      return new asList$ObjectLiteral_0($receiver);
    }
    function asList$ObjectLiteral_1(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral_1.prototype, 'size', {get: function () {
      return this.this$asList.size;
    }});
    asList$ObjectLiteral_1.prototype.isEmpty = function () {
      return this.this$asList.isEmpty();
    };
    asList$ObjectLiteral_1.prototype.contains_11rb$ = function (element) {
      return this.this$asList.contains_11rb$(element);
    };
    asList$ObjectLiteral_1.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return this.this$asList.get_za3lpa$(index);
    };
    asList$ObjectLiteral_1.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), ULong))
        return -1;
      return indexOf_3(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_1.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), ULong))
        return -1;
      return lastIndexOf_3(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [RandomAccess, AbstractList]};
    function asList_9($receiver) {
      return new asList$ObjectLiteral_1($receiver);
    }
    function asList$ObjectLiteral_2(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral_2.prototype, 'size', {get: function () {
      return this.this$asList.size;
    }});
    asList$ObjectLiteral_2.prototype.isEmpty = function () {
      return this.this$asList.isEmpty();
    };
    asList$ObjectLiteral_2.prototype.contains_11rb$ = function (element) {
      return this.this$asList.contains_11rb$(element);
    };
    asList$ObjectLiteral_2.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return this.this$asList.get_za3lpa$(index);
    };
    asList$ObjectLiteral_2.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UByte))
        return -1;
      return indexOf_0(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_2.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UByte))
        return -1;
      return lastIndexOf_0(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [RandomAccess, AbstractList]};
    function asList_10($receiver) {
      return new asList$ObjectLiteral_2($receiver);
    }
    function asList$ObjectLiteral_3(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral_3.prototype, 'size', {get: function () {
      return this.this$asList.size;
    }});
    asList$ObjectLiteral_3.prototype.isEmpty = function () {
      return this.this$asList.isEmpty();
    };
    asList$ObjectLiteral_3.prototype.contains_11rb$ = function (element) {
      return this.this$asList.contains_11rb$(element);
    };
    asList$ObjectLiteral_3.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return this.this$asList.get_za3lpa$(index);
    };
    asList$ObjectLiteral_3.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UShort))
        return -1;
      return indexOf_1(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_3.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UShort))
        return -1;
      return lastIndexOf_1(this.this$asList.storage, element.data);
    };
    asList$ObjectLiteral_3.$metadata$ = {kind: Kind_CLASS, interfaces: [RandomAccess, AbstractList]};
    function asList_11($receiver) {
      return new asList$ObjectLiteral_3($receiver);
    }
    var buttonset = defineInlineFunction('kotlin.jquery.ui.buttonset_vwohdt$', function ($receiver) {
      return $receiver.buttonset();
    });
    var dialog = defineInlineFunction('kotlin.jquery.ui.dialog_vwohdt$', function ($receiver) {
      return $receiver.dialog();
    });
    var dialog_0 = defineInlineFunction('kotlin.jquery.ui.dialog_pm4xy9$', function ($receiver, params) {
      return $receiver.dialog(params);
    });
    var dialog_1 = defineInlineFunction('kotlin.jquery.ui.dialog_zc05ld$', function ($receiver, mode, param) {
      return $receiver.dialog(mode, param);
    });
    var dialog_2 = defineInlineFunction('kotlin.jquery.ui.dialog_v89ba5$', function ($receiver, mode) {
      return $receiver.dialog(mode);
    });
    var dialog_3 = defineInlineFunction('kotlin.jquery.ui.dialog_pfp31$', function ($receiver, mode, param, value) {
      return $receiver.dialog(mode, param, value);
    });
    var button = defineInlineFunction('kotlin.jquery.ui.button_vwohdt$', function ($receiver) {
      return $receiver.button();
    });
    var accordion = defineInlineFunction('kotlin.jquery.ui.accordion_vwohdt$', function ($receiver) {
      return $receiver.accordion();
    });
    var draggable = defineInlineFunction('kotlin.jquery.ui.draggable_pm4xy9$', function ($receiver, params) {
      return $receiver.draggable(params);
    });
    var selectable = defineInlineFunction('kotlin.jquery.ui.selectable_vwohdt$', function ($receiver) {
      return $receiver.selectable();
    });
    function Comparator() {
    }
    Comparator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Comparator', interfaces: []};
    var Comparator_0 = defineInlineFunction('kotlin.kotlin.Comparator_x4fedy$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      return function (comparison) {
        return new Comparator$ObjectLiteral(comparison);
      };
    }));
    function native(name) {
      if (name === void 0)
        name = '';
      this.name = name;
    }
    native.$metadata$ = {kind: Kind_CLASS, simpleName: 'native', interfaces: [Annotation]};
    function nativeGetter() {
    }
    nativeGetter.$metadata$ = {kind: Kind_CLASS, simpleName: 'nativeGetter', interfaces: [Annotation]};
    function nativeSetter() {
    }
    nativeSetter.$metadata$ = {kind: Kind_CLASS, simpleName: 'nativeSetter', interfaces: [Annotation]};
    function nativeInvoke() {
    }
    nativeInvoke.$metadata$ = {kind: Kind_CLASS, simpleName: 'nativeInvoke', interfaces: [Annotation]};
    function library(name) {
      if (name === void 0)
        name = '';
      this.name = name;
    }
    library.$metadata$ = {kind: Kind_CLASS, simpleName: 'library', interfaces: [Annotation]};
    function marker() {
    }
    marker.$metadata$ = {kind: Kind_CLASS, simpleName: 'marker', interfaces: [Annotation]};
    function JsName(name) {
      this.name = name;
    }
    JsName.$metadata$ = {kind: Kind_CLASS, simpleName: 'JsName', interfaces: [Annotation]};
    function JsModule(import_0) {
      this.import = import_0;
    }
    JsModule.$metadata$ = {kind: Kind_CLASS, simpleName: 'JsModule', interfaces: [Annotation]};
    function JsNonModule() {
    }
    JsNonModule.$metadata$ = {kind: Kind_CLASS, simpleName: 'JsNonModule', interfaces: [Annotation]};
    function JsQualifier(value) {
      this.value = value;
    }
    JsQualifier.$metadata$ = {kind: Kind_CLASS, simpleName: 'JsQualifier', interfaces: [Annotation]};
    function ExperimentalJsExport() {
    }
    ExperimentalJsExport.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalJsExport', interfaces: [Annotation]};
    function JsExport() {
    }
    JsExport.$metadata$ = {kind: Kind_CLASS, simpleName: 'JsExport', interfaces: [Annotation]};
    function Volatile() {
    }
    Volatile.$metadata$ = {kind: Kind_CLASS, simpleName: 'Volatile', interfaces: [Annotation]};
    function Synchronized() {
    }
    Synchronized.$metadata$ = {kind: Kind_CLASS, simpleName: 'Synchronized', interfaces: [Annotation]};
    var orEmpty = defineInlineFunction('kotlin.kotlin.collections.orEmpty_oachgz$', function ($receiver) {
      return $receiver != null ? $receiver : [];
    });
    var toTypedArray_11 = defineInlineFunction('kotlin.kotlin.collections.toTypedArray_4c7yge$', wrapFunction(function () {
      var copyToArray = _.kotlin.collections.copyToArray;
      return function ($receiver) {
        return copyToArray($receiver);
      };
    }));
    function copyToArray(collection) {
      return collection.toArray !== undefined ? collection.toArray() : copyToArrayImpl(collection);
    }
    function copyToArrayImpl(collection) {
      var array = [];
      var iterator = collection.iterator();
      while (iterator.hasNext())
        array.push(iterator.next());
      return array;
    }
    function copyToArrayImpl_0(collection, array) {
      var tmp$;
      if (array.length < collection.size) {
        return copyToArrayImpl(collection);
      }var iterator = collection.iterator();
      var index = 0;
      while (iterator.hasNext()) {
        array[tmp$ = index, index = tmp$ + 1 | 0, tmp$] = iterator.next();
      }
      if (index < array.length) {
        array[index] = null;
      }return array;
    }
    function listOf(element) {
      return arrayListOf_0([element]);
    }
    function setOf(element) {
      return hashSetOf_0([element]);
    }
    function mapOf(pair) {
      return hashMapOf_0([pair]);
    }
    function fill_12($receiver, value) {
      var tmp$;
      tmp$ = get_lastIndex_12($receiver);
      for (var index = 0; index <= tmp$; index++) {
        $receiver.set_wxm5ur$(index, value);
      }
    }
    function shuffle($receiver) {
      shuffle_0($receiver, Random$Default_getInstance());
    }
    function shuffled($receiver) {
      var $receiver_0 = toMutableList_8($receiver);
      shuffle($receiver_0);
      return $receiver_0;
    }
    function sort_14($receiver) {
      collectionsSort($receiver, naturalOrder());
    }
    function sortWith_0($receiver, comparator) {
      collectionsSort($receiver, comparator);
    }
    function collectionsSort(list, comparator) {
      if (list.size <= 1)
        return;
      var array = copyToArray(list);
      sortArrayWith_0(array, comparator);
      for (var i = 0; i < array.length; i++) {
        list.set_wxm5ur$(i, array[i]);
      }
    }
    function arrayOfNulls(reference, size) {
      return Kotlin.newArray(size, null);
    }
    function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(startIndex, endIndex, source.length);
      var rangeSize = endIndex - startIndex | 0;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
      if (ArrayBuffer.isView(destination) && ArrayBuffer.isView(source)) {
        var subrange = source.subarray(startIndex, endIndex);
        destination.set(subrange, destinationOffset);
      } else {
        if (source !== destination || destinationOffset <= startIndex) {
          for (var index = 0; index < rangeSize; index++) {
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
        } else {
          for (var index_0 = rangeSize - 1 | 0; index_0 >= 0; index_0--) {
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
        }
      }
    }
    var toSingletonMapOrSelf = defineInlineFunction('kotlin.kotlin.collections.toSingletonMapOrSelf_1vp4qn$', function ($receiver) {
      return $receiver;
    });
    var toSingletonMap = defineInlineFunction('kotlin.kotlin.collections.toSingletonMap_3imywq$', wrapFunction(function () {
      var toMutableMap = _.kotlin.collections.toMutableMap_abgq59$;
      return function ($receiver) {
        return toMutableMap($receiver);
      };
    }));
    var copyToArrayOfAny = defineInlineFunction('kotlin.kotlin.collections.copyToArrayOfAny_e0iprw$', function ($receiver, isVarargs) {
      return isVarargs ? $receiver : $receiver.slice();
    });
    function checkIndexOverflow(index) {
      if (index < 0) {
        throwIndexOverflow();
      }return index;
    }
    function checkCountOverflow(count) {
      if (count < 0) {
        throwCountOverflow();
      }return count;
    }
    function mapCapacity(expectedSize) {
      return expectedSize;
    }
    function checkBuilderCapacity(capacity) {
      if (!(capacity >= 0)) {
        var message = 'capacity must be non-negative.';
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function AbstractMutableCollection() {
      AbstractCollection.call(this);
    }
    AbstractMutableCollection.prototype.remove_11rb$ = function (element) {
      var iterator = this.iterator();
      while (iterator.hasNext()) {
        if (equals(iterator.next(), element)) {
          iterator.remove();
          return true;
        }}
      return false;
    };
    AbstractMutableCollection.prototype.addAll_brywnq$ = function (elements) {
      var tmp$;
      var modified = false;
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (this.add_11rb$(element))
          modified = true;
      }
      return modified;
    };
    function AbstractMutableCollection$removeAll$lambda(closure$elements) {
      return function (it) {
        return closure$elements.contains_11rb$(it);
      };
    }
    AbstractMutableCollection.prototype.removeAll_brywnq$ = function (elements) {
      var tmp$;
      return removeAll_3(Kotlin.isType(tmp$ = this, MutableIterable) ? tmp$ : throwCCE_0(), AbstractMutableCollection$removeAll$lambda(elements));
    };
    function AbstractMutableCollection$retainAll$lambda(closure$elements) {
      return function (it) {
        return !closure$elements.contains_11rb$(it);
      };
    }
    AbstractMutableCollection.prototype.retainAll_brywnq$ = function (elements) {
      var tmp$;
      return removeAll_3(Kotlin.isType(tmp$ = this, MutableIterable) ? tmp$ : throwCCE_0(), AbstractMutableCollection$retainAll$lambda(elements));
    };
    AbstractMutableCollection.prototype.clear = function () {
      var iterator = this.iterator();
      while (iterator.hasNext()) {
        iterator.next();
        iterator.remove();
      }
    };
    AbstractMutableCollection.prototype.toJSON = function () {
      return this.toArray();
    };
    AbstractMutableCollection.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractMutableCollection', interfaces: [MutableCollection, AbstractCollection]};
    function AbstractMutableList() {
      AbstractMutableCollection.call(this);
      this.modCount = 0;
    }
    AbstractMutableList.prototype.add_11rb$ = function (element) {
      this.add_wxm5ur$(this.size, element);
      return true;
    };
    AbstractMutableList.prototype.addAll_u57x28$ = function (index, elements) {
      var tmp$, tmp$_0;
      var _index = index;
      var changed = false;
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var e = tmp$.next();
        this.add_wxm5ur$((tmp$_0 = _index, _index = tmp$_0 + 1 | 0, tmp$_0), e);
        changed = true;
      }
      return changed;
    };
    AbstractMutableList.prototype.clear = function () {
      this.removeRange_vux9f0$(0, this.size);
    };
    function AbstractMutableList$removeAll$lambda(closure$elements) {
      return function (it) {
        return closure$elements.contains_11rb$(it);
      };
    }
    AbstractMutableList.prototype.removeAll_brywnq$ = function (elements) {
      return removeAll_4(this, AbstractMutableList$removeAll$lambda(elements));
    };
    function AbstractMutableList$retainAll$lambda(closure$elements) {
      return function (it) {
        return !closure$elements.contains_11rb$(it);
      };
    }
    AbstractMutableList.prototype.retainAll_brywnq$ = function (elements) {
      return removeAll_4(this, AbstractMutableList$retainAll$lambda(elements));
    };
    AbstractMutableList.prototype.iterator = function () {
      return new AbstractMutableList$IteratorImpl(this);
    };
    AbstractMutableList.prototype.contains_11rb$ = function (element) {
      return this.indexOf_11rb$(element) >= 0;
    };
    AbstractMutableList.prototype.indexOf_11rb$ = function (element) {
      var tmp$;
      tmp$ = get_lastIndex_12(this);
      for (var index = 0; index <= tmp$; index++) {
        if (equals(this.get_za3lpa$(index), element)) {
          return index;
        }}
      return -1;
    };
    AbstractMutableList.prototype.lastIndexOf_11rb$ = function (element) {
      for (var index = get_lastIndex_12(this); index >= 0; index--) {
        if (equals(this.get_za3lpa$(index), element)) {
          return index;
        }}
      return -1;
    };
    AbstractMutableList.prototype.listIterator = function () {
      return this.listIterator_za3lpa$(0);
    };
    AbstractMutableList.prototype.listIterator_za3lpa$ = function (index) {
      return new AbstractMutableList$ListIteratorImpl(this, index);
    };
    AbstractMutableList.prototype.subList_vux9f0$ = function (fromIndex, toIndex) {
      return new AbstractMutableList$SubList(this, fromIndex, toIndex);
    };
    AbstractMutableList.prototype.removeRange_vux9f0$ = function (fromIndex, toIndex) {
      var iterator = this.listIterator_za3lpa$(fromIndex);
      var times = toIndex - fromIndex | 0;
      for (var index = 0; index < times; index++) {
        iterator.next();
        iterator.remove();
      }
    };
    AbstractMutableList.prototype.equals = function (other) {
      if (other === this)
        return true;
      if (!Kotlin.isType(other, List))
        return false;
      return AbstractList$Companion_getInstance().orderedEquals_e92ka7$(this, other);
    };
    AbstractMutableList.prototype.hashCode = function () {
      return AbstractList$Companion_getInstance().orderedHashCode_nykoif$(this);
    };
    function AbstractMutableList$IteratorImpl($outer) {
      this.$outer = $outer;
      this.index_0 = 0;
      this.last_0 = -1;
    }
    AbstractMutableList$IteratorImpl.prototype.hasNext = function () {
      return this.index_0 < this.$outer.size;
    };
    AbstractMutableList$IteratorImpl.prototype.next = function () {
      var tmp$;
      if (!this.hasNext())
        throw NoSuchElementException_init();
      this.last_0 = (tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$);
      return this.$outer.get_za3lpa$(this.last_0);
    };
    AbstractMutableList$IteratorImpl.prototype.remove = function () {
      if (!(this.last_0 !== -1)) {
        var message = 'Call next() or previous() before removing element from the iterator.';
        throw IllegalStateException_init_0(message.toString());
      }this.$outer.removeAt_za3lpa$(this.last_0);
      this.index_0 = this.last_0;
      this.last_0 = -1;
    };
    AbstractMutableList$IteratorImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'IteratorImpl', interfaces: [MutableIterator]};
    function AbstractMutableList$ListIteratorImpl($outer, index) {
      this.$outer = $outer;
      AbstractMutableList$IteratorImpl.call(this, this.$outer);
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.$outer.size);
      this.index_0 = index;
    }
    AbstractMutableList$ListIteratorImpl.prototype.hasPrevious = function () {
      return this.index_0 > 0;
    };
    AbstractMutableList$ListIteratorImpl.prototype.nextIndex = function () {
      return this.index_0;
    };
    AbstractMutableList$ListIteratorImpl.prototype.previous = function () {
      if (!this.hasPrevious())
        throw NoSuchElementException_init();
      this.last_0 = (this.index_0 = this.index_0 - 1 | 0, this.index_0);
      return this.$outer.get_za3lpa$(this.last_0);
    };
    AbstractMutableList$ListIteratorImpl.prototype.previousIndex = function () {
      return this.index_0 - 1 | 0;
    };
    AbstractMutableList$ListIteratorImpl.prototype.add_11rb$ = function (element) {
      this.$outer.add_wxm5ur$(this.index_0, element);
      this.index_0 = this.index_0 + 1 | 0;
      this.last_0 = -1;
    };
    AbstractMutableList$ListIteratorImpl.prototype.set_11rb$ = function (element) {
      if (!(this.last_0 !== -1)) {
        var message = 'Call next() or previous() before updating element value with the iterator.';
        throw IllegalStateException_init_0(message.toString());
      }this.$outer.set_wxm5ur$(this.last_0, element);
    };
    AbstractMutableList$ListIteratorImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'ListIteratorImpl', interfaces: [MutableListIterator, AbstractMutableList$IteratorImpl]};
    function AbstractMutableList$SubList(list, fromIndex, toIndex) {
      AbstractMutableList.call(this);
      this.list_0 = list;
      this.fromIndex_0 = fromIndex;
      this._size_0 = 0;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(this.fromIndex_0, toIndex, this.list_0.size);
      this._size_0 = toIndex - this.fromIndex_0 | 0;
    }
    AbstractMutableList$SubList.prototype.add_wxm5ur$ = function (index, element) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this._size_0);
      this.list_0.add_wxm5ur$(this.fromIndex_0 + index | 0, element);
      this._size_0 = this._size_0 + 1 | 0;
    };
    AbstractMutableList$SubList.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this._size_0);
      return this.list_0.get_za3lpa$(this.fromIndex_0 + index | 0);
    };
    AbstractMutableList$SubList.prototype.removeAt_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this._size_0);
      var result = this.list_0.removeAt_za3lpa$(this.fromIndex_0 + index | 0);
      this._size_0 = this._size_0 - 1 | 0;
      return result;
    };
    AbstractMutableList$SubList.prototype.set_wxm5ur$ = function (index, element) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this._size_0);
      return this.list_0.set_wxm5ur$(this.fromIndex_0 + index | 0, element);
    };
    Object.defineProperty(AbstractMutableList$SubList.prototype, 'size', {get: function () {
      return this._size_0;
    }});
    AbstractMutableList$SubList.$metadata$ = {kind: Kind_CLASS, simpleName: 'SubList', interfaces: [RandomAccess, AbstractMutableList]};
    AbstractMutableList.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractMutableList', interfaces: [MutableList, AbstractMutableCollection]};
    function AbstractMutableMap() {
      AbstractMap.call(this);
      this._keys_qe2m0n$_0 = null;
      this._values_kxdlqh$_0 = null;
    }
    function AbstractMutableMap$SimpleEntry(key, value) {
      this.key_5xhq3d$_0 = key;
      this._value_0 = value;
    }
    Object.defineProperty(AbstractMutableMap$SimpleEntry.prototype, 'key', {get: function () {
      return this.key_5xhq3d$_0;
    }});
    Object.defineProperty(AbstractMutableMap$SimpleEntry.prototype, 'value', {get: function () {
      return this._value_0;
    }});
    AbstractMutableMap$SimpleEntry.prototype.setValue_11rc$ = function (newValue) {
      var oldValue = this._value_0;
      this._value_0 = newValue;
      return oldValue;
    };
    AbstractMutableMap$SimpleEntry.prototype.hashCode = function () {
      return AbstractMap$Companion_getInstance().entryHashCode_9fthdn$(this);
    };
    AbstractMutableMap$SimpleEntry.prototype.toString = function () {
      return AbstractMap$Companion_getInstance().entryToString_9fthdn$(this);
    };
    AbstractMutableMap$SimpleEntry.prototype.equals = function (other) {
      return AbstractMap$Companion_getInstance().entryEquals_js7fox$(this, other);
    };
    AbstractMutableMap$SimpleEntry.$metadata$ = {kind: Kind_CLASS, simpleName: 'SimpleEntry', interfaces: [MutableMap$MutableEntry]};
    function AbstractMutableMap$AbstractMutableMap$SimpleEntry_init(entry, $this) {
      $this = $this || Object.create(AbstractMutableMap$SimpleEntry.prototype);
      AbstractMutableMap$SimpleEntry.call($this, entry.key, entry.value);
      return $this;
    }
    AbstractMutableMap.prototype.clear = function () {
      this.entries.clear();
    };
    function AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral(this$AbstractMutableMap) {
      this.this$AbstractMutableMap = this$AbstractMutableMap;
      AbstractMutableSet.call(this);
    }
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.add_11rb$ = function (element) {
      throw UnsupportedOperationException_init_0('Add is not supported on keys');
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.clear = function () {
      this.this$AbstractMutableMap.clear();
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.contains_11rb$ = function (element) {
      return this.this$AbstractMutableMap.containsKey_11rb$(element);
    };
    function AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral(closure$entryIterator) {
      this.closure$entryIterator = closure$entryIterator;
    }
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.closure$entryIterator.hasNext();
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral.prototype.next = function () {
      return this.closure$entryIterator.next().key;
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral.prototype.remove = function () {
      this.closure$entryIterator.remove();
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MutableIterator]};
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.iterator = function () {
      var entryIterator = this.this$AbstractMutableMap.entries.iterator();
      return new AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral$iterator$ObjectLiteral(entryIterator);
    };
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype.remove_11rb$ = function (element) {
      if (this.this$AbstractMutableMap.containsKey_11rb$(element)) {
        this.this$AbstractMutableMap.remove_11rb$(element);
        return true;
      }return false;
    };
    Object.defineProperty(AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.prototype, 'size', {get: function () {
      return this.this$AbstractMutableMap.size;
    }});
    AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractMutableSet]};
    Object.defineProperty(AbstractMutableMap.prototype, 'keys', {get: function () {
      if (this._keys_qe2m0n$_0 == null) {
        this._keys_qe2m0n$_0 = new AbstractMutableMap$get_AbstractMutableMap$keys$ObjectLiteral(this);
      }return ensureNotNull(this._keys_qe2m0n$_0);
    }});
    AbstractMutableMap.prototype.putAll_a2k3zr$ = function (from) {
      var tmp$;
      tmp$ = from.entries.iterator();
      while (tmp$.hasNext()) {
        var tmp$_0 = tmp$.next();
        var key = tmp$_0.key;
        var value = tmp$_0.value;
        this.put_xwzc9p$(key, value);
      }
    };
    function AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral(this$AbstractMutableMap) {
      this.this$AbstractMutableMap = this$AbstractMutableMap;
      AbstractMutableCollection.call(this);
    }
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.add_11rb$ = function (element) {
      throw UnsupportedOperationException_init_0('Add is not supported on values');
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.clear = function () {
      this.this$AbstractMutableMap.clear();
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.contains_11rb$ = function (element) {
      return this.this$AbstractMutableMap.containsValue_11rc$(element);
    };
    function AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral(closure$entryIterator) {
      this.closure$entryIterator = closure$entryIterator;
    }
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.closure$entryIterator.hasNext();
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral.prototype.next = function () {
      return this.closure$entryIterator.next().value;
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral.prototype.remove = function () {
      this.closure$entryIterator.remove();
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MutableIterator]};
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.iterator = function () {
      var entryIterator = this.this$AbstractMutableMap.entries.iterator();
      return new AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral$iterator$ObjectLiteral(entryIterator);
    };
    Object.defineProperty(AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype, 'size', {get: function () {
      return this.this$AbstractMutableMap.size;
    }});
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.equals = function (other) {
      if (this === other)
        return true;
      if (!Kotlin.isType(other, Collection))
        return false;
      return AbstractList$Companion_getInstance().orderedEquals_e92ka7$(this, other);
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.prototype.hashCode = function () {
      return AbstractList$Companion_getInstance().orderedHashCode_nykoif$(this);
    };
    AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractMutableCollection]};
    Object.defineProperty(AbstractMutableMap.prototype, 'values', {get: function () {
      if (this._values_kxdlqh$_0 == null) {
        this._values_kxdlqh$_0 = new AbstractMutableMap$get_AbstractMutableMap$values$ObjectLiteral(this);
      }return ensureNotNull(this._values_kxdlqh$_0);
    }});
    AbstractMutableMap.prototype.remove_11rb$ = function (key) {
      var iter = this.entries.iterator();
      while (iter.hasNext()) {
        var entry = iter.next();
        var k = entry.key;
        if (equals(key, k)) {
          var value = entry.value;
          iter.remove();
          return value;
        }}
      return null;
    };
    AbstractMutableMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractMutableMap', interfaces: [MutableMap, AbstractMap]};
    function AbstractMutableSet() {
      AbstractMutableCollection.call(this);
    }
    AbstractMutableSet.prototype.equals = function (other) {
      if (other === this)
        return true;
      if (!Kotlin.isType(other, Set))
        return false;
      return AbstractSet$Companion_getInstance().setEquals_y8f7en$(this, other);
    };
    AbstractMutableSet.prototype.hashCode = function () {
      return AbstractSet$Companion_getInstance().unorderedHashCode_nykoif$(this);
    };
    AbstractMutableSet.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractMutableSet', interfaces: [MutableSet, AbstractMutableCollection]};
    function ArrayList(array) {
      AbstractMutableList.call(this);
      this.array_hd7ov6$_0 = array;
    }
    ArrayList.prototype.trimToSize = function () {
    };
    ArrayList.prototype.ensureCapacity_za3lpa$ = function (minCapacity) {
    };
    Object.defineProperty(ArrayList.prototype, 'size', {get: function () {
      return this.array_hd7ov6$_0.length;
    }});
    ArrayList.prototype.get_za3lpa$ = function (index) {
      var tmp$;
      return (tmp$ = this.array_hd7ov6$_0[this.rangeCheck_xcmk5o$_0(index)]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    ArrayList.prototype.set_wxm5ur$ = function (index, element) {
      var tmp$;
      this.rangeCheck_xcmk5o$_0(index);
      var $receiver = this.array_hd7ov6$_0[index];
      this.array_hd7ov6$_0[index] = element;
      return (tmp$ = $receiver) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    ArrayList.prototype.add_11rb$ = function (element) {
      this.array_hd7ov6$_0.push(element);
      this.modCount = this.modCount + 1 | 0;
      return true;
    };
    ArrayList.prototype.add_wxm5ur$ = function (index, element) {
      this.array_hd7ov6$_0.splice(this.insertionRangeCheck_xwivfl$_0(index), 0, element);
      this.modCount = this.modCount + 1 | 0;
    };
    ArrayList.prototype.addAll_brywnq$ = function (elements) {
      if (elements.isEmpty())
        return false;
      this.array_hd7ov6$_0 = this.array_hd7ov6$_0.concat(copyToArray(elements));
      this.modCount = this.modCount + 1 | 0;
      return true;
    };
    ArrayList.prototype.addAll_u57x28$ = function (index, elements) {
      this.insertionRangeCheck_xwivfl$_0(index);
      if (index === this.size)
        return this.addAll_brywnq$(elements);
      if (elements.isEmpty())
        return false;
      if (index === this.size)
        return this.addAll_brywnq$(elements);
      else if (index === 0) {
        this.array_hd7ov6$_0 = copyToArray(elements).concat(this.array_hd7ov6$_0);
      } else {
        this.array_hd7ov6$_0 = copyOfRange_3(this.array_hd7ov6$_0, 0, index).concat(copyToArray(elements), copyOfRange_3(this.array_hd7ov6$_0, index, this.size));
      }
      this.modCount = this.modCount + 1 | 0;
      return true;
    };
    ArrayList.prototype.removeAt_za3lpa$ = function (index) {
      this.rangeCheck_xcmk5o$_0(index);
      this.modCount = this.modCount + 1 | 0;
      return index === get_lastIndex_12(this) ? this.array_hd7ov6$_0.pop() : this.array_hd7ov6$_0.splice(index, 1)[0];
    };
    ArrayList.prototype.remove_11rb$ = function (element) {
      var tmp$;
      tmp$ = this.array_hd7ov6$_0;
      for (var index = 0; index !== tmp$.length; ++index) {
        if (equals(this.array_hd7ov6$_0[index], element)) {
          this.array_hd7ov6$_0.splice(index, 1);
          this.modCount = this.modCount + 1 | 0;
          return true;
        }}
      return false;
    };
    ArrayList.prototype.removeRange_vux9f0$ = function (fromIndex, toIndex) {
      this.modCount = this.modCount + 1 | 0;
      this.array_hd7ov6$_0.splice(fromIndex, toIndex - fromIndex | 0);
    };
    ArrayList.prototype.clear = function () {
      this.array_hd7ov6$_0 = [];
      this.modCount = this.modCount + 1 | 0;
    };
    ArrayList.prototype.indexOf_11rb$ = function (element) {
      return indexOf(this.array_hd7ov6$_0, element);
    };
    ArrayList.prototype.lastIndexOf_11rb$ = function (element) {
      return lastIndexOf(this.array_hd7ov6$_0, element);
    };
    ArrayList.prototype.toString = function () {
      return arrayToString(this.array_hd7ov6$_0);
    };
    ArrayList.prototype.toArray = function () {
      return [].slice.call(this.array_hd7ov6$_0);
    };
    ArrayList.prototype.rangeCheck_xcmk5o$_0 = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return index;
    };
    ArrayList.prototype.insertionRangeCheck_xwivfl$_0 = function (index) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.size);
      return index;
    };
    ArrayList.$metadata$ = {kind: Kind_CLASS, simpleName: 'ArrayList', interfaces: [RandomAccess, AbstractMutableList, MutableList]};
    function ArrayList_init($this) {
      $this = $this || Object.create(ArrayList.prototype);
      ArrayList.call($this, []);
      return $this;
    }
    function ArrayList_init_0(initialCapacity, $this) {
      if (initialCapacity === void 0)
        initialCapacity = 0;
      $this = $this || Object.create(ArrayList.prototype);
      ArrayList.call($this, []);
      return $this;
    }
    function ArrayList_init_1(elements, $this) {
      $this = $this || Object.create(ArrayList.prototype);
      ArrayList.call($this, copyToArray(elements));
      return $this;
    }
    function Comparator$ObjectLiteral(closure$comparison) {
      this.closure$comparison = closure$comparison;
    }
    Comparator$ObjectLiteral.prototype.compare = function (a, b) {
      return this.closure$comparison(a, b);
    };
    Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
    function sortArrayWith(array, comparison) {
      if (getStableSortingIsSupported()) {
        array.sort(comparison);
      } else {
        mergeSort(array, 0, get_lastIndex(array), new Comparator$ObjectLiteral(comparison));
      }
    }
    function sortArrayWith$lambda(closure$comparator) {
      return function (a, b) {
        return closure$comparator.compare(a, b);
      };
    }
    function sortArrayWith_0(array, comparator) {
      if (getStableSortingIsSupported()) {
        var comparison = sortArrayWith$lambda(comparator);
        array.sort(comparison);
      } else {
        mergeSort(array, 0, get_lastIndex(array), comparator);
      }
    }
    function sortArray$lambda(a, b) {
      return Kotlin.compareTo(a, b);
    }
    function sortArray(array) {
      if (getStableSortingIsSupported()) {
        var comparison = sortArray$lambda;
        array.sort(comparison);
      } else {
        mergeSort(array, 0, get_lastIndex(array), naturalOrder());
      }
    }
    var _stableSortingIsSupported;
    function getStableSortingIsSupported$lambda(a, b) {
      return (a & 3) - (b & 3) | 0;
    }
    function getStableSortingIsSupported() {
      if (_stableSortingIsSupported != null) {
        return _stableSortingIsSupported;
      }_stableSortingIsSupported = false;
      var array = [];
      for (var index = 0; index < 600; index++)
        array.push(index);
      var comparison = getStableSortingIsSupported$lambda;
      array.sort(comparison);
      for (var index_0 = 1; index_0 < array.length; index_0++) {
        var a = array[index_0 - 1 | 0];
        var b = array[index_0];
        if ((a & 3) === (b & 3) && a >= b)
          return false;
      }
      _stableSortingIsSupported = true;
      return true;
    }
    function mergeSort(array, start, endInclusive, comparator) {
      var buffer = Kotlin.newArray(array.length, null);
      var result = mergeSort_0(array, buffer, start, endInclusive, comparator);
      if (result !== array) {
        var tmp$, tmp$_0;
        var index = 0;
        for (tmp$ = 0; tmp$ !== result.length; ++tmp$) {
          var item = result[tmp$];
          array[tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0] = item;
        }
      }}
    function mergeSort_0(array, buffer, start, end, comparator) {
      if (start === end) {
        return array;
      }var median = (start + end | 0) / 2 | 0;
      var left = mergeSort_0(array, buffer, start, median, comparator);
      var right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator);
      var target = left === buffer ? array : buffer;
      var leftIndex = start;
      var rightIndex = median + 1 | 0;
      for (var i = start; i <= end; i++) {
        if (leftIndex <= median && rightIndex <= end) {
          var leftValue = left[leftIndex];
          var rightValue = right[rightIndex];
          if (comparator.compare(leftValue, rightValue) <= 0) {
            target[i] = leftValue;
            leftIndex = leftIndex + 1 | 0;
          } else {
            target[i] = rightValue;
            rightIndex = rightIndex + 1 | 0;
          }
        } else if (leftIndex <= median) {
          target[i] = left[leftIndex];
          leftIndex = leftIndex + 1 | 0;
        } else {
          target[i] = right[rightIndex];
          rightIndex = rightIndex + 1 | 0;
        }
      }
      return target;
    }
    function contentDeepHashCodeImpl($receiver) {
      var tmp$, tmp$_0;
      var result = 1;
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        if (element == null)
          tmp$_0 = 0;
        else {
          if (Kotlin.isArrayish(element)) {
            tmp$_0 = contentDeepHashCodeImpl(element);
          } else if (Kotlin.isType(element, UByteArray))
            tmp$_0 = contentHashCode_2(element);
          else if (Kotlin.isType(element, UShortArray))
            tmp$_0 = contentHashCode_3(element);
          else if (Kotlin.isType(element, UIntArray))
            tmp$_0 = contentHashCode_0(element);
          else if (Kotlin.isType(element, ULongArray))
            tmp$_0 = contentHashCode_1(element);
          else
            tmp$_0 = hashCode(element);
        }
        var elementHash = tmp$_0;
        result = (31 * result | 0) + elementHash | 0;
      }
      return result;
    }
    function EqualityComparator() {
    }
    function EqualityComparator$HashCode() {
      EqualityComparator$HashCode_instance = this;
    }
    EqualityComparator$HashCode.prototype.equals_oaftn8$ = function (value1, value2) {
      return equals(value1, value2);
    };
    EqualityComparator$HashCode.prototype.getHashCode_s8jyv4$ = function (value) {
      var tmp$;
      return (tmp$ = value != null ? hashCode(value) : null) != null ? tmp$ : 0;
    };
    EqualityComparator$HashCode.$metadata$ = {kind: Kind_OBJECT, simpleName: 'HashCode', interfaces: [EqualityComparator]};
    var EqualityComparator$HashCode_instance = null;
    function EqualityComparator$HashCode_getInstance() {
      if (EqualityComparator$HashCode_instance === null) {
        new EqualityComparator$HashCode();
      }return EqualityComparator$HashCode_instance;
    }
    EqualityComparator.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'EqualityComparator', interfaces: []};
    function HashMap() {
      this.internalMap_uxhen5$_0 = null;
      this.equality_vgh6cm$_0 = null;
      this._entries_7ih87x$_0 = null;
    }
    function HashMap$EntrySet($outer) {
      this.$outer = $outer;
      AbstractMutableSet.call(this);
    }
    HashMap$EntrySet.prototype.add_11rb$ = function (element) {
      throw UnsupportedOperationException_init_0('Add is not supported on entries');
    };
    HashMap$EntrySet.prototype.clear = function () {
      this.$outer.clear();
    };
    HashMap$EntrySet.prototype.contains_11rb$ = function (element) {
      return this.$outer.containsEntry_8hxqw4$(element);
    };
    HashMap$EntrySet.prototype.iterator = function () {
      return this.$outer.internalMap_uxhen5$_0.iterator();
    };
    HashMap$EntrySet.prototype.remove_11rb$ = function (element) {
      if (this.contains_11rb$(element)) {
        this.$outer.remove_11rb$(element.key);
        return true;
      }return false;
    };
    Object.defineProperty(HashMap$EntrySet.prototype, 'size', {get: function () {
      return this.$outer.size;
    }});
    HashMap$EntrySet.$metadata$ = {kind: Kind_CLASS, simpleName: 'EntrySet', interfaces: [AbstractMutableSet]};
    HashMap.prototype.clear = function () {
      this.internalMap_uxhen5$_0.clear();
    };
    HashMap.prototype.containsKey_11rb$ = function (key) {
      return this.internalMap_uxhen5$_0.contains_11rb$(key);
    };
    HashMap.prototype.containsValue_11rc$ = function (value) {
      var $receiver = this.internalMap_uxhen5$_0;
      var any$result;
      any$break: do {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (this.equality_vgh6cm$_0.equals_oaftn8$(element.value, value)) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      return any$result;
    };
    Object.defineProperty(HashMap.prototype, 'entries', {get: function () {
      if (this._entries_7ih87x$_0 == null) {
        this._entries_7ih87x$_0 = this.createEntrySet();
      }return ensureNotNull(this._entries_7ih87x$_0);
    }});
    HashMap.prototype.createEntrySet = function () {
      return new HashMap$EntrySet(this);
    };
    HashMap.prototype.get_11rb$ = function (key) {
      return this.internalMap_uxhen5$_0.get_11rb$(key);
    };
    HashMap.prototype.put_xwzc9p$ = function (key, value) {
      return this.internalMap_uxhen5$_0.put_xwzc9p$(key, value);
    };
    HashMap.prototype.remove_11rb$ = function (key) {
      return this.internalMap_uxhen5$_0.remove_11rb$(key);
    };
    Object.defineProperty(HashMap.prototype, 'size', {get: function () {
      return this.internalMap_uxhen5$_0.size;
    }});
    HashMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'HashMap', interfaces: [AbstractMutableMap, MutableMap]};
    function HashMap_init(internalMap, $this) {
      $this = $this || Object.create(HashMap.prototype);
      AbstractMutableMap.call($this);
      HashMap.call($this);
      $this.internalMap_uxhen5$_0 = internalMap;
      $this.equality_vgh6cm$_0 = internalMap.equality;
      return $this;
    }
    function HashMap_init_0($this) {
      $this = $this || Object.create(HashMap.prototype);
      HashMap_init(new InternalHashCodeMap(EqualityComparator$HashCode_getInstance()), $this);
      return $this;
    }
    function HashMap_init_1(initialCapacity, loadFactor, $this) {
      if (loadFactor === void 0)
        loadFactor = 0.0;
      $this = $this || Object.create(HashMap.prototype);
      HashMap_init_0($this);
      if (!(initialCapacity >= 0)) {
        var message = 'Negative initial capacity: ' + initialCapacity;
        throw IllegalArgumentException_init_0(message.toString());
      }if (!(loadFactor >= 0)) {
        var message_0 = 'Non-positive load factor: ' + loadFactor;
        throw IllegalArgumentException_init_0(message_0.toString());
      }return $this;
    }
    function HashMap_init_2(initialCapacity, $this) {
      $this = $this || Object.create(HashMap.prototype);
      HashMap_init_1(initialCapacity, 0.0, $this);
      return $this;
    }
    function HashMap_init_3(original, $this) {
      $this = $this || Object.create(HashMap.prototype);
      HashMap_init_0($this);
      $this.putAll_a2k3zr$(original);
      return $this;
    }
    function stringMapOf(pairs) {
      var $receiver = HashMap_init(new InternalStringMap(EqualityComparator$HashCode_getInstance()));
      putAll($receiver, pairs);
      return $receiver;
    }
    function HashSet() {
      this.map_eot64i$_0 = null;
    }
    HashSet.prototype.add_11rb$ = function (element) {
      var old = this.map_eot64i$_0.put_xwzc9p$(element, this);
      return old == null;
    };
    HashSet.prototype.clear = function () {
      this.map_eot64i$_0.clear();
    };
    HashSet.prototype.contains_11rb$ = function (element) {
      return this.map_eot64i$_0.containsKey_11rb$(element);
    };
    HashSet.prototype.isEmpty = function () {
      return this.map_eot64i$_0.isEmpty();
    };
    HashSet.prototype.iterator = function () {
      return this.map_eot64i$_0.keys.iterator();
    };
    HashSet.prototype.remove_11rb$ = function (element) {
      return this.map_eot64i$_0.remove_11rb$(element) != null;
    };
    Object.defineProperty(HashSet.prototype, 'size', {get: function () {
      return this.map_eot64i$_0.size;
    }});
    HashSet.$metadata$ = {kind: Kind_CLASS, simpleName: 'HashSet', interfaces: [AbstractMutableSet, MutableSet]};
    function HashSet_init($this) {
      $this = $this || Object.create(HashSet.prototype);
      AbstractMutableSet.call($this);
      HashSet.call($this);
      $this.map_eot64i$_0 = HashMap_init_0();
      return $this;
    }
    function HashSet_init_0(elements, $this) {
      $this = $this || Object.create(HashSet.prototype);
      AbstractMutableSet.call($this);
      HashSet.call($this);
      $this.map_eot64i$_0 = HashMap_init_2(elements.size);
      $this.addAll_brywnq$(elements);
      return $this;
    }
    function HashSet_init_1(initialCapacity, loadFactor, $this) {
      if (loadFactor === void 0)
        loadFactor = 0.0;
      $this = $this || Object.create(HashSet.prototype);
      AbstractMutableSet.call($this);
      HashSet.call($this);
      $this.map_eot64i$_0 = HashMap_init_1(initialCapacity, loadFactor);
      return $this;
    }
    function HashSet_init_2(initialCapacity, $this) {
      $this = $this || Object.create(HashSet.prototype);
      HashSet_init_1(initialCapacity, 0.0, $this);
      return $this;
    }
    function HashSet_init_3(map, $this) {
      $this = $this || Object.create(HashSet.prototype);
      AbstractMutableSet.call($this);
      HashSet.call($this);
      $this.map_eot64i$_0 = map;
      return $this;
    }
    function stringSetOf(elements) {
      var $receiver = HashSet_init_3(stringMapOf([]));
      addAll_1($receiver, elements);
      return $receiver;
    }
    function InternalHashCodeMap(equality) {
      this.equality_mamlu8$_0 = equality;
      this.backingMap_0 = this.createJsMap();
      this.size_x3bm7r$_0 = 0;
    }
    Object.defineProperty(InternalHashCodeMap.prototype, 'equality', {get: function () {
      return this.equality_mamlu8$_0;
    }});
    Object.defineProperty(InternalHashCodeMap.prototype, 'size', {get: function () {
      return this.size_x3bm7r$_0;
    }, set: function (size) {
      this.size_x3bm7r$_0 = size;
    }});
    InternalHashCodeMap.prototype.put_xwzc9p$ = function (key, value) {
      var hashCode = this.equality.getHashCode_s8jyv4$(key);
      var chainOrEntry = this.getChainOrEntryOrNull_0(hashCode);
      if (chainOrEntry == null) {
        this.backingMap_0[hashCode] = new AbstractMutableMap$SimpleEntry(key, value);
      } else {
        if (!Kotlin.isArray(chainOrEntry)) {
          var entry = chainOrEntry;
          if (this.equality.equals_oaftn8$(entry.key, key)) {
            return entry.setValue_11rc$(value);
          } else {
            this.backingMap_0[hashCode] = [entry, new AbstractMutableMap$SimpleEntry(key, value)];
            this.size = this.size + 1 | 0;
            return null;
          }
        } else {
          var chain = chainOrEntry;
          var entry_0 = this.findEntryInChain_0(chain, key);
          if (entry_0 != null) {
            return entry_0.setValue_11rc$(value);
          }chain.push(new AbstractMutableMap$SimpleEntry(key, value));
        }
      }
      this.size = this.size + 1 | 0;
      return null;
    };
    InternalHashCodeMap.prototype.remove_11rb$ = function (key) {
      var tmp$;
      var hashCode = this.equality.getHashCode_s8jyv4$(key);
      tmp$ = this.getChainOrEntryOrNull_0(hashCode);
      if (tmp$ == null) {
        return null;
      }var chainOrEntry = tmp$;
      if (!Kotlin.isArray(chainOrEntry)) {
        var entry = chainOrEntry;
        if (this.equality.equals_oaftn8$(entry.key, key)) {
          delete this.backingMap_0[hashCode];
          this.size = this.size - 1 | 0;
          return entry.value;
        } else {
          return null;
        }
      } else {
        var chain = chainOrEntry;
        for (var index = 0; index !== chain.length; ++index) {
          var entry_0 = chain[index];
          if (this.equality.equals_oaftn8$(key, entry_0.key)) {
            if (chain.length === 1) {
              chain.length = 0;
              delete this.backingMap_0[hashCode];
            } else {
              chain.splice(index, 1);
            }
            this.size = this.size - 1 | 0;
            return entry_0.value;
          }}
      }
      return null;
    };
    InternalHashCodeMap.prototype.clear = function () {
      this.backingMap_0 = this.createJsMap();
      this.size = 0;
    };
    InternalHashCodeMap.prototype.contains_11rb$ = function (key) {
      return this.getEntry_0(key) != null;
    };
    InternalHashCodeMap.prototype.get_11rb$ = function (key) {
      var tmp$;
      return (tmp$ = this.getEntry_0(key)) != null ? tmp$.value : null;
    };
    InternalHashCodeMap.prototype.getEntry_0 = function (key) {
      var tmp$;
      tmp$ = this.getChainOrEntryOrNull_0(this.equality.getHashCode_s8jyv4$(key));
      if (tmp$ == null) {
        return null;
      }var chainOrEntry = tmp$;
      if (!Kotlin.isArray(chainOrEntry)) {
        var entry = chainOrEntry;
        if (this.equality.equals_oaftn8$(entry.key, key)) {
          return entry;
        } else {
          return null;
        }
      } else {
        var chain = chainOrEntry;
        return this.findEntryInChain_0(chain, key);
      }
    };
    InternalHashCodeMap.prototype.findEntryInChain_0 = function ($receiver, key) {
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
          var element = $receiver[tmp$];
          if (this.equality.equals_oaftn8$(element.key, key)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    };
    function InternalHashCodeMap$iterator$ObjectLiteral(this$InternalHashCodeMap) {
      this.this$InternalHashCodeMap = this$InternalHashCodeMap;
      this.state = -1;
      this.keys = Object.keys(this$InternalHashCodeMap.backingMap_0);
      this.keyIndex = -1;
      this.chainOrEntry = null;
      this.isChain = false;
      this.itemIndex = -1;
      this.lastEntry = null;
    }
    InternalHashCodeMap$iterator$ObjectLiteral.prototype.computeNext_0 = function () {
      if (this.chainOrEntry != null && this.isChain) {
        var chainSize = this.chainOrEntry.length;
        if ((this.itemIndex = this.itemIndex + 1 | 0, this.itemIndex) < chainSize)
          return 0;
      }if ((this.keyIndex = this.keyIndex + 1 | 0, this.keyIndex) < this.keys.length) {
        this.chainOrEntry = this.this$InternalHashCodeMap.backingMap_0[this.keys[this.keyIndex]];
        this.isChain = Kotlin.isArray(this.chainOrEntry);
        this.itemIndex = 0;
        return 0;
      } else {
        this.chainOrEntry = null;
        return 1;
      }
    };
    InternalHashCodeMap$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.state === -1)
        this.state = this.computeNext_0();
      return this.state === 0;
    };
    InternalHashCodeMap$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (!this.hasNext())
        throw NoSuchElementException_init();
      if (this.isChain) {
        tmp$ = this.chainOrEntry[this.itemIndex];
      } else {
        tmp$ = this.chainOrEntry;
      }
      var lastEntry = tmp$;
      this.lastEntry = lastEntry;
      this.state = -1;
      return lastEntry;
    };
    InternalHashCodeMap$iterator$ObjectLiteral.prototype.remove = function () {
      if (this.lastEntry == null) {
        var message = 'Required value was null.';
        throw IllegalStateException_init_0(message.toString());
      }this.this$InternalHashCodeMap.remove_11rb$(ensureNotNull(this.lastEntry).key);
      this.lastEntry = null;
      this.itemIndex = this.itemIndex - 1 | 0;
    };
    InternalHashCodeMap$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MutableIterator]};
    InternalHashCodeMap.prototype.iterator = function () {
      return new InternalHashCodeMap$iterator$ObjectLiteral(this);
    };
    InternalHashCodeMap.prototype.getChainOrEntryOrNull_0 = function (hashCode) {
      var chainOrEntry = this.backingMap_0[hashCode];
      return chainOrEntry === undefined ? null : chainOrEntry;
    };
    InternalHashCodeMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'InternalHashCodeMap', interfaces: [InternalMap]};
    function InternalMap() {
    }
    InternalMap.prototype.createJsMap = function () {
      var result = Object.create(null);
      result['foo'] = 1;
      delete result['foo'];
      return result;
    };
    InternalMap.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'InternalMap', interfaces: [MutableIterable]};
    function InternalStringMap(equality) {
      this.equality_qma612$_0 = equality;
      this.backingMap_0 = this.createJsMap();
      this.size_6u3ykz$_0 = 0;
    }
    Object.defineProperty(InternalStringMap.prototype, 'equality', {get: function () {
      return this.equality_qma612$_0;
    }});
    Object.defineProperty(InternalStringMap.prototype, 'size', {get: function () {
      return this.size_6u3ykz$_0;
    }, set: function (size) {
      this.size_6u3ykz$_0 = size;
    }});
    InternalStringMap.prototype.contains_11rb$ = function (key) {
      if (!(typeof key === 'string'))
        return false;
      return this.backingMap_0[key] !== undefined;
    };
    InternalStringMap.prototype.get_11rb$ = function (key) {
      if (!(typeof key === 'string'))
        return null;
      var value = this.backingMap_0[key];
      return value !== undefined ? value : null;
    };
    InternalStringMap.prototype.put_xwzc9p$ = function (key, value) {
      if (!(typeof key === 'string')) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }var oldValue = this.backingMap_0[key];
      this.backingMap_0[key] = value;
      if (oldValue === undefined) {
        this.size = this.size + 1 | 0;
        return null;
      } else {
        return oldValue;
      }
    };
    InternalStringMap.prototype.remove_11rb$ = function (key) {
      if (!(typeof key === 'string'))
        return null;
      var value = this.backingMap_0[key];
      if (value !== undefined) {
        delete this.backingMap_0[key];
        this.size = this.size - 1 | 0;
        return value;
      } else {
        return null;
      }
    };
    InternalStringMap.prototype.clear = function () {
      this.backingMap_0 = this.createJsMap();
      this.size = 0;
    };
    function InternalStringMap$iterator$ObjectLiteral(this$InternalStringMap) {
      this.this$InternalStringMap = this$InternalStringMap;
      this.keys_0 = Object.keys(this$InternalStringMap.backingMap_0);
      this.iterator_0 = Kotlin.arrayIterator(this.keys_0);
      this.lastKey_0 = null;
    }
    InternalStringMap$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.iterator_0.hasNext();
    };
    InternalStringMap$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$, tmp$_0;
      var key = this.iterator_0.next();
      this.lastKey_0 = key;
      tmp$_0 = (tmp$ = key) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      return this.this$InternalStringMap.newMapEntry_0(tmp$_0);
    };
    InternalStringMap$iterator$ObjectLiteral.prototype.remove = function () {
      var tmp$, tmp$_0;
      tmp$_0 = this.this$InternalStringMap;
      var value = this.lastKey_0;
      var checkNotNull$result;
      if (value == null) {
        var message = 'Required value was null.';
        throw IllegalStateException_init_0(message.toString());
      } else {
        checkNotNull$result = value;
      }
      tmp$_0.remove_11rb$((tmp$ = checkNotNull$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0());
    };
    InternalStringMap$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MutableIterator]};
    InternalStringMap.prototype.iterator = function () {
      return new InternalStringMap$iterator$ObjectLiteral(this);
    };
    function InternalStringMap$newMapEntry$ObjectLiteral(closure$key, this$InternalStringMap) {
      this.closure$key = closure$key;
      this.this$InternalStringMap = this$InternalStringMap;
    }
    Object.defineProperty(InternalStringMap$newMapEntry$ObjectLiteral.prototype, 'key', {get: function () {
      return this.closure$key;
    }});
    Object.defineProperty(InternalStringMap$newMapEntry$ObjectLiteral.prototype, 'value', {get: function () {
      return this.this$InternalStringMap.get_11rb$(this.closure$key);
    }});
    InternalStringMap$newMapEntry$ObjectLiteral.prototype.setValue_11rc$ = function (newValue) {
      return this.this$InternalStringMap.put_xwzc9p$(this.closure$key, newValue);
    };
    InternalStringMap$newMapEntry$ObjectLiteral.prototype.hashCode = function () {
      return AbstractMap$Companion_getInstance().entryHashCode_9fthdn$(this);
    };
    InternalStringMap$newMapEntry$ObjectLiteral.prototype.toString = function () {
      return AbstractMap$Companion_getInstance().entryToString_9fthdn$(this);
    };
    InternalStringMap$newMapEntry$ObjectLiteral.prototype.equals = function (other) {
      return AbstractMap$Companion_getInstance().entryEquals_js7fox$(this, other);
    };
    InternalStringMap$newMapEntry$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MutableMap$MutableEntry]};
    InternalStringMap.prototype.newMapEntry_0 = function (key) {
      return new InternalStringMap$newMapEntry$ObjectLiteral(key, this);
    };
    InternalStringMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'InternalStringMap', interfaces: [InternalMap]};
    function LinkedHashMap() {
      this.head_1lr44l$_0 = null;
      this.map_97q5dv$_0 = null;
    }
    function LinkedHashMap$ChainEntry(key, value) {
      AbstractMutableMap$SimpleEntry.call(this, key, value);
      this.next_8be2vx$ = null;
      this.prev_8be2vx$ = null;
    }
    LinkedHashMap$ChainEntry.$metadata$ = {kind: Kind_CLASS, simpleName: 'ChainEntry', interfaces: [AbstractMutableMap$SimpleEntry]};
    function LinkedHashMap$EntrySet($outer) {
      this.$outer = $outer;
      AbstractMutableSet.call(this);
    }
    function LinkedHashMap$EntrySet$EntryIterator($outer) {
      this.$outer = $outer;
      this.last_0 = null;
      this.next_0 = null;
      this.next_0 = this.$outer.$outer.head_1lr44l$_0;
    }
    LinkedHashMap$EntrySet$EntryIterator.prototype.hasNext = function () {
      return this.next_0 !== null;
    };
    LinkedHashMap$EntrySet$EntryIterator.prototype.next = function () {
      if (!this.hasNext())
        throw NoSuchElementException_init();
      var current = ensureNotNull(this.next_0);
      this.last_0 = current;
      var $receiver = current.next_8be2vx$;
      this.$outer.$outer;
      this.next_0 = $receiver !== this.$outer.$outer.head_1lr44l$_0 ? $receiver : null;
      return current;
    };
    LinkedHashMap$EntrySet$EntryIterator.prototype.remove = function () {
      if (!(this.last_0 != null)) {
        var message = 'Check failed.';
        throw IllegalStateException_init_0(message.toString());
      }this.$outer.$outer.remove_aul5td$_0(ensureNotNull(this.last_0));
      this.$outer.$outer.map_97q5dv$_0.remove_11rb$(ensureNotNull(this.last_0).key);
      this.last_0 = null;
    };
    LinkedHashMap$EntrySet$EntryIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'EntryIterator', interfaces: [MutableIterator]};
    LinkedHashMap$EntrySet.prototype.add_11rb$ = function (element) {
      throw UnsupportedOperationException_init_0('Add is not supported on entries');
    };
    LinkedHashMap$EntrySet.prototype.clear = function () {
      this.$outer.clear();
    };
    LinkedHashMap$EntrySet.prototype.contains_11rb$ = function (element) {
      return this.$outer.containsEntry_8hxqw4$(element);
    };
    LinkedHashMap$EntrySet.prototype.iterator = function () {
      return new LinkedHashMap$EntrySet$EntryIterator(this);
    };
    LinkedHashMap$EntrySet.prototype.remove_11rb$ = function (element) {
      if (this.contains_11rb$(element)) {
        this.$outer.remove_11rb$(element.key);
        return true;
      }return false;
    };
    Object.defineProperty(LinkedHashMap$EntrySet.prototype, 'size', {get: function () {
      return this.$outer.size;
    }});
    LinkedHashMap$EntrySet.$metadata$ = {kind: Kind_CLASS, simpleName: 'EntrySet', interfaces: [AbstractMutableSet]};
    LinkedHashMap.prototype.addToEnd_ufg2hg$_0 = function ($receiver) {
      if (!($receiver.next_8be2vx$ == null && $receiver.prev_8be2vx$ == null)) {
        var message = 'Check failed.';
        throw IllegalStateException_init_0(message.toString());
      }var _head = this.head_1lr44l$_0;
      if (_head == null) {
        this.head_1lr44l$_0 = $receiver;
        $receiver.next_8be2vx$ = $receiver;
        $receiver.prev_8be2vx$ = $receiver;
      } else {
        var value = _head.prev_8be2vx$;
        var checkNotNull$result;
        if (value == null) {
          var message_0 = 'Required value was null.';
          throw IllegalStateException_init_0(message_0.toString());
        } else {
          checkNotNull$result = value;
        }
        var _tail = checkNotNull$result;
        $receiver.prev_8be2vx$ = _tail;
        $receiver.next_8be2vx$ = _head;
        _head.prev_8be2vx$ = $receiver;
        _tail.next_8be2vx$ = $receiver;
      }
    };
    LinkedHashMap.prototype.remove_aul5td$_0 = function ($receiver) {
      if ($receiver.next_8be2vx$ === $receiver) {
        this.head_1lr44l$_0 = null;
      } else {
        if (this.head_1lr44l$_0 === $receiver) {
          this.head_1lr44l$_0 = $receiver.next_8be2vx$;
        }ensureNotNull($receiver.next_8be2vx$).prev_8be2vx$ = $receiver.prev_8be2vx$;
        ensureNotNull($receiver.prev_8be2vx$).next_8be2vx$ = $receiver.next_8be2vx$;
      }
      $receiver.next_8be2vx$ = null;
      $receiver.prev_8be2vx$ = null;
    };
    LinkedHashMap.prototype.clear = function () {
      this.map_97q5dv$_0.clear();
      this.head_1lr44l$_0 = null;
    };
    LinkedHashMap.prototype.containsKey_11rb$ = function (key) {
      return this.map_97q5dv$_0.containsKey_11rb$(key);
    };
    LinkedHashMap.prototype.containsValue_11rc$ = function (value) {
      var tmp$;
      tmp$ = this.head_1lr44l$_0;
      if (tmp$ == null) {
        return false;
      }var node = tmp$;
      do {
        if (equals(node.value, value)) {
          return true;
        }node = ensureNotNull(node.next_8be2vx$);
      }
       while (node !== this.head_1lr44l$_0);
      return false;
    };
    LinkedHashMap.prototype.createEntrySet = function () {
      return new LinkedHashMap$EntrySet(this);
    };
    LinkedHashMap.prototype.get_11rb$ = function (key) {
      var tmp$;
      return (tmp$ = this.map_97q5dv$_0.get_11rb$(key)) != null ? tmp$.value : null;
    };
    LinkedHashMap.prototype.put_xwzc9p$ = function (key, value) {
      var old = this.map_97q5dv$_0.get_11rb$(key);
      if (old == null) {
        var newEntry = new LinkedHashMap$ChainEntry(key, value);
        this.map_97q5dv$_0.put_xwzc9p$(key, newEntry);
        this.addToEnd_ufg2hg$_0(newEntry);
        return null;
      } else {
        return old.setValue_11rc$(value);
      }
    };
    LinkedHashMap.prototype.remove_11rb$ = function (key) {
      var entry = this.map_97q5dv$_0.remove_11rb$(key);
      if (entry != null) {
        this.remove_aul5td$_0(entry);
        return entry.value;
      }return null;
    };
    Object.defineProperty(LinkedHashMap.prototype, 'size', {get: function () {
      return this.map_97q5dv$_0.size;
    }});
    LinkedHashMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'LinkedHashMap', interfaces: [HashMap, MutableMap]};
    function LinkedHashMap_init($this) {
      $this = $this || Object.create(LinkedHashMap.prototype);
      HashMap_init_0($this);
      LinkedHashMap.call($this);
      $this.map_97q5dv$_0 = HashMap_init_0();
      return $this;
    }
    function LinkedHashMap_init_0(backingMap, $this) {
      $this = $this || Object.create(LinkedHashMap.prototype);
      HashMap_init_0($this);
      LinkedHashMap.call($this);
      var tmp$;
      $this.map_97q5dv$_0 = Kotlin.isType(tmp$ = backingMap, HashMap) ? tmp$ : throwCCE_0();
      return $this;
    }
    function LinkedHashMap_init_1(initialCapacity, loadFactor, $this) {
      if (loadFactor === void 0)
        loadFactor = 0.0;
      $this = $this || Object.create(LinkedHashMap.prototype);
      HashMap_init_1(initialCapacity, loadFactor, $this);
      LinkedHashMap.call($this);
      $this.map_97q5dv$_0 = HashMap_init_0();
      return $this;
    }
    function LinkedHashMap_init_2(initialCapacity, $this) {
      $this = $this || Object.create(LinkedHashMap.prototype);
      LinkedHashMap_init_1(initialCapacity, 0.0, $this);
      return $this;
    }
    function LinkedHashMap_init_3(original, $this) {
      $this = $this || Object.create(LinkedHashMap.prototype);
      HashMap_init_0($this);
      LinkedHashMap.call($this);
      $this.map_97q5dv$_0 = HashMap_init_0();
      $this.putAll_a2k3zr$(original);
      return $this;
    }
    function linkedStringMapOf(pairs) {
      var $receiver = LinkedHashMap_init_0(stringMapOf([]));
      putAll($receiver, pairs);
      return $receiver;
    }
    function LinkedHashSet() {
    }
    LinkedHashSet.$metadata$ = {kind: Kind_CLASS, simpleName: 'LinkedHashSet', interfaces: [HashSet, MutableSet]};
    function LinkedHashSet_init(map, $this) {
      $this = $this || Object.create(LinkedHashSet.prototype);
      HashSet_init_3(map, $this);
      LinkedHashSet.call($this);
      return $this;
    }
    function LinkedHashSet_init_0($this) {
      $this = $this || Object.create(LinkedHashSet.prototype);
      HashSet_init_3(LinkedHashMap_init(), $this);
      LinkedHashSet.call($this);
      return $this;
    }
    function LinkedHashSet_init_1(elements, $this) {
      $this = $this || Object.create(LinkedHashSet.prototype);
      HashSet_init_3(LinkedHashMap_init(), $this);
      LinkedHashSet.call($this);
      $this.addAll_brywnq$(elements);
      return $this;
    }
    function LinkedHashSet_init_2(initialCapacity, loadFactor, $this) {
      if (loadFactor === void 0)
        loadFactor = 0.0;
      $this = $this || Object.create(LinkedHashSet.prototype);
      HashSet_init_3(LinkedHashMap_init_1(initialCapacity, loadFactor), $this);
      LinkedHashSet.call($this);
      return $this;
    }
    function LinkedHashSet_init_3(initialCapacity, $this) {
      $this = $this || Object.create(LinkedHashSet.prototype);
      LinkedHashSet_init_2(initialCapacity, 0.0, $this);
      return $this;
    }
    function linkedStringSetOf(elements) {
      var $receiver = LinkedHashSet_init(linkedStringMapOf([]));
      addAll_1($receiver, elements);
      return $receiver;
    }
    function RandomAccess() {
    }
    RandomAccess.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'RandomAccess', interfaces: []};
    var synchronized = defineInlineFunction('kotlin.kotlin.synchronized_eocq09$', function (lock, block) {
      return block();
    });
    function BaseOutput() {
    }
    BaseOutput.prototype.println = function () {
      this.print_s8jyv4$('\n');
    };
    BaseOutput.prototype.println_s8jyv4$ = function (message) {
      this.print_s8jyv4$(message);
      this.println();
    };
    BaseOutput.prototype.flush = function () {
    };
    BaseOutput.$metadata$ = {kind: Kind_CLASS, simpleName: 'BaseOutput', interfaces: []};
    function NodeJsOutput(outputStream) {
      BaseOutput.call(this);
      this.outputStream = outputStream;
    }
    NodeJsOutput.prototype.print_s8jyv4$ = function (message) {
      var messageString = String(message);
      this.outputStream.write(messageString);
    };
    NodeJsOutput.$metadata$ = {kind: Kind_CLASS, simpleName: 'NodeJsOutput', interfaces: [BaseOutput]};
    function OutputToConsoleLog() {
      BaseOutput.call(this);
    }
    OutputToConsoleLog.prototype.print_s8jyv4$ = function (message) {
      console.log(message);
    };
    OutputToConsoleLog.prototype.println_s8jyv4$ = function (message) {
      console.log(message);
    };
    OutputToConsoleLog.prototype.println = function () {
      console.log('');
    };
    OutputToConsoleLog.$metadata$ = {kind: Kind_CLASS, simpleName: 'OutputToConsoleLog', interfaces: [BaseOutput]};
    function BufferedOutput() {
      BaseOutput.call(this);
      this.buffer = '';
    }
    BufferedOutput.prototype.print_s8jyv4$ = function (message) {
      this.buffer += String(message);
    };
    BufferedOutput.prototype.flush = function () {
      this.buffer = '';
    };
    BufferedOutput.$metadata$ = {kind: Kind_CLASS, simpleName: 'BufferedOutput', interfaces: [BaseOutput]};
    function BufferedOutputToConsoleLog() {
      BufferedOutput.call(this);
    }
    BufferedOutputToConsoleLog.prototype.print_s8jyv4$ = function (message) {
      var s = String(message);
      var i = s.lastIndexOf('\n', 0);
      if (i >= 0) {
        this.buffer = this.buffer + s.substring(0, i);
        this.flush();
        s = s.substring(i + 1 | 0);
      }this.buffer = this.buffer + s;
    };
    BufferedOutputToConsoleLog.prototype.flush = function () {
      console.log(this.buffer);
      this.buffer = '';
    };
    BufferedOutputToConsoleLog.$metadata$ = {kind: Kind_CLASS, simpleName: 'BufferedOutputToConsoleLog', interfaces: [BufferedOutput]};
    var output;
    function String_0(value) {
      return String(value);
    }
    function println() {
      output.println();
    }
    function println_0(message) {
      output.println_s8jyv4$(message);
    }
    function print(message) {
      output.print_s8jyv4$(message);
    }
    function SafeContinuation(delegate, initialResult) {
      this.delegate_0 = delegate;
      this.result_0 = initialResult;
    }
    Object.defineProperty(SafeContinuation.prototype, 'context', {get: function () {
      return this.delegate_0.context;
    }});
    SafeContinuation.prototype.resumeWith_tl1gpc$ = function (result) {
      var cur = this.result_0;
      if (cur === CoroutineSingletons$UNDECIDED_getInstance())
        this.result_0 = result.value;
      else if (cur === get_COROUTINE_SUSPENDED()) {
        this.result_0 = CoroutineSingletons$RESUMED_getInstance();
        this.delegate_0.resumeWith_tl1gpc$(result);
      } else
        throw IllegalStateException_init_0('Already resumed');
    };
    SafeContinuation.prototype.getOrThrow = function () {
      var tmp$;
      if (this.result_0 === CoroutineSingletons$UNDECIDED_getInstance()) {
        this.result_0 = get_COROUTINE_SUSPENDED();
        return get_COROUTINE_SUSPENDED();
      }var result = this.result_0;
      if (result === CoroutineSingletons$RESUMED_getInstance())
        tmp$ = get_COROUTINE_SUSPENDED();
      else if (Kotlin.isType(result, Result$Failure))
        throw result.exception;
      else
        tmp$ = result;
      return tmp$;
    };
    SafeContinuation.$metadata$ = {kind: Kind_CLASS, simpleName: 'SafeContinuation', interfaces: [Continuation]};
    function SafeContinuation_init(delegate, $this) {
      $this = $this || Object.create(SafeContinuation.prototype);
      SafeContinuation.call($this, delegate, CoroutineSingletons$UNDECIDED_getInstance());
      return $this;
    }
    function Continuation$ObjectLiteral(closure$context, closure$resumeWith) {
      this.closure$context = closure$context;
      this.closure$resumeWith = closure$resumeWith;
    }
    Object.defineProperty(Continuation$ObjectLiteral.prototype, 'context', {get: function () {
      return this.closure$context;
    }});
    Continuation$ObjectLiteral.prototype.resumeWith_tl1gpc$ = function (result) {
      this.closure$resumeWith(result);
    };
    Continuation$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Continuation]};
    function EmptyContinuation$lambda(result) {
      var tmp$;
      throwOnFailure(result);
      (tmp$ = result.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      return Unit;
    }
    var EmptyContinuation;
    var dateLocaleOptions = defineInlineFunction('kotlin.kotlin.js.dateLocaleOptions_49uy1x$', function (init) {
      var result = new Object();
      init(result);
      return result;
    });
    function createElement($receiver, name, init) {
      var $receiver_0 = $receiver.createElement(name);
      init($receiver_0);
      return $receiver_0;
    }
    function appendElement($receiver, name, init) {
      var $receiver_0 = createElement(ensureNotNull($receiver.ownerDocument), name, init);
      $receiver.appendChild($receiver_0);
      return $receiver_0;
    }
    function hasClass($receiver, cssClass) {
      var tmp$ = $receiver.className;
      return Regex_init_0('(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)').matches_6bul2c$(tmp$);
    }
    function addClass($receiver, cssClasses) {
      var destination = ArrayList_init();
      var tmp$;
      for (tmp$ = 0; tmp$ !== cssClasses.length; ++tmp$) {
        var element = cssClasses[tmp$];
        if (!hasClass($receiver, element))
          destination.add_11rb$(element);
      }
      var missingClasses = destination;
      if (!missingClasses.isEmpty()) {
        var tmp$_0;
        var presentClasses = trim_3(Kotlin.isCharSequence(tmp$_0 = $receiver.className) ? tmp$_0 : throwCCE()).toString();
        var $receiver_0 = StringBuilder_init_1();
        $receiver_0.append_61zpoe$(presentClasses);
        if (!(presentClasses.length === 0)) {
          $receiver_0.append_61zpoe$(' ');
        }joinTo_8(missingClasses, $receiver_0, ' ');
        $receiver.className = $receiver_0.toString();
        return true;
      }return false;
    }
    function removeClass($receiver, cssClasses) {
      var any$result;
      any$break: do {
        var tmp$;
        for (tmp$ = 0; tmp$ !== cssClasses.length; ++tmp$) {
          var element = cssClasses[tmp$];
          if (hasClass($receiver, element)) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      if (any$result) {
        var toBeRemoved = toSet(cssClasses);
        var tmp$_0;
        var tmp$_1 = trim_3(Kotlin.isCharSequence(tmp$_0 = $receiver.className) ? tmp$_0 : throwCCE()).toString();
        var $receiver_0 = Regex_init_0('\\s+').split_905azu$(tmp$_1, 0);
        var destination = ArrayList_init();
        var tmp$_2;
        tmp$_2 = $receiver_0.iterator();
        while (tmp$_2.hasNext()) {
          var element_0 = tmp$_2.next();
          if (!toBeRemoved.contains_11rb$(element_0))
            destination.add_11rb$(element_0);
        }
        $receiver.className = joinToString_8(destination, ' ');
        return true;
      }return false;
    }
    function get_isText($receiver) {
      return $receiver.nodeType === Node.TEXT_NODE || $receiver.nodeType === Node.CDATA_SECTION_NODE;
    }
    function get_isElement($receiver) {
      return $receiver.nodeType === Node.ELEMENT_NODE;
    }
    function EventListener(handler) {
      return new EventListenerHandler(handler);
    }
    function EventListenerHandler(handler) {
      this.handler_0 = handler;
    }
    EventListenerHandler.prototype.handleEvent = function (event) {
      this.handler_0(event);
    };
    EventListenerHandler.prototype.toString = function () {
      return 'EventListenerHandler(' + this.handler_0 + ')';
    };
    EventListenerHandler.$metadata$ = {kind: Kind_CLASS, simpleName: 'EventListenerHandler', interfaces: []};
    function asList$ObjectLiteral_4(this$asList) {
      this.this$asList = this$asList;
      AbstractList.call(this);
    }
    Object.defineProperty(asList$ObjectLiteral_4.prototype, 'size', {get: function () {
      return this.this$asList.length;
    }});
    asList$ObjectLiteral_4.prototype.get_za3lpa$ = function (index) {
      if (index >= 0 && index <= get_lastIndex_12(this)) {
        return this.this$asList.item(index);
      } else
        throw new IndexOutOfBoundsException('index ' + index + ' is not in range [0..' + get_lastIndex_12(this) + ']');
    };
    asList$ObjectLiteral_4.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractList]};
    function asList_12($receiver) {
      return new asList$ObjectLiteral_4($receiver);
    }
    function clear($receiver) {
      while ($receiver.hasChildNodes()) {
        $receiver.removeChild(ensureNotNull($receiver.firstChild));
      }
    }
    function appendText($receiver, text) {
      $receiver.appendChild(ensureNotNull($receiver.ownerDocument).createTextNode(text));
      return $receiver;
    }
    var asDynamic = defineInlineFunction('kotlin.kotlin.js.asDynamic_mzud1t$', function ($receiver) {
      return $receiver;
    });
    var unsafeCast = defineInlineFunction('kotlin.kotlin.js.unsafeCast_3752g7$', function ($receiver) {
      return $receiver;
    });
    var unsafeCast_0 = defineInlineFunction('kotlin.kotlin.js.unsafeCastDynamic', function ($receiver) {
      return $receiver;
    });
    function iterator($receiver) {
      var tmp$, tmp$_0;
      var r = $receiver;
      if ($receiver['iterator'] != null)
        tmp$_0 = $receiver['iterator']();
      else {
        if (Kotlin.isArrayish(r)) {
          tmp$_0 = Kotlin.arrayIterator(r);
        } else
          tmp$_0 = (Kotlin.isType(tmp$ = r, Iterable) ? tmp$ : throwCCE_0()).iterator();
      }
      return tmp$_0;
    }
    function throwNPE(message) {
      throw new NullPointerException(message);
    }
    function throwCCE_0() {
      throw new ClassCastException('Illegal cast');
    }
    function throwISE(message) {
      throw IllegalStateException_init_0(message);
    }
    function throwUPAE(propertyName) {
      throw UninitializedPropertyAccessException_init_0('lateinit property ' + propertyName + ' has not been initialized');
    }
    function Error_0(message, cause) {
      Throwable.call(this);
      var tmp$;
      tmp$ = cause != null ? cause : null;
      this.message_q7r8iu$_0 = typeof message === 'undefined' && tmp$ != null ? Kotlin.toString(tmp$) : message;
      this.cause_us9j0c$_0 = tmp$;
      Kotlin.captureStack(Throwable, this);
      this.name = 'Error';
    }
    Object.defineProperty(Error_0.prototype, 'message', {get: function () {
      return this.message_q7r8iu$_0;
    }});
    Object.defineProperty(Error_0.prototype, 'cause', {get: function () {
      return this.cause_us9j0c$_0;
    }});
    Error_0.$metadata$ = {kind: Kind_CLASS, simpleName: 'Error', interfaces: [Throwable]};
    function Error_init($this) {
      $this = $this || Object.create(Error_0.prototype);
      Error_0.call($this, null, null);
      get_js(getKClass(Error_0)).call($this, null, null);
      return $this;
    }
    function Error_init_0(message, $this) {
      $this = $this || Object.create(Error_0.prototype);
      Error_0.call($this, message, null);
      get_js(getKClass(Error_0)).call($this, message, null);
      return $this;
    }
    function Error_init_1(cause, $this) {
      $this = $this || Object.create(Error_0.prototype);
      Error_0.call($this, undefined, cause);
      get_js(getKClass(Error_0)).call($this, undefined, cause);
      return $this;
    }
    function Exception(message, cause) {
      Throwable.call(this);
      var tmp$;
      tmp$ = cause != null ? cause : null;
      this.message_8yp7un$_0 = typeof message === 'undefined' && tmp$ != null ? Kotlin.toString(tmp$) : message;
      this.cause_th0jdv$_0 = tmp$;
      Kotlin.captureStack(Throwable, this);
      this.name = 'Exception';
    }
    Object.defineProperty(Exception.prototype, 'message', {get: function () {
      return this.message_8yp7un$_0;
    }});
    Object.defineProperty(Exception.prototype, 'cause', {get: function () {
      return this.cause_th0jdv$_0;
    }});
    Exception.$metadata$ = {kind: Kind_CLASS, simpleName: 'Exception', interfaces: [Throwable]};
    function Exception_init($this) {
      $this = $this || Object.create(Exception.prototype);
      Exception.call($this, null, null);
      get_js(getKClass(Exception)).call($this, null, null);
      return $this;
    }
    function Exception_init_0(message, $this) {
      $this = $this || Object.create(Exception.prototype);
      Exception.call($this, message, null);
      get_js(getKClass(Exception)).call($this, message, null);
      return $this;
    }
    function Exception_init_1(cause, $this) {
      $this = $this || Object.create(Exception.prototype);
      Exception.call($this, undefined, cause);
      get_js(getKClass(Exception)).call($this, undefined, cause);
      return $this;
    }
    function RuntimeException(message, cause) {
      Exception.call(this, message, cause);
      this.name = 'RuntimeException';
    }
    RuntimeException.$metadata$ = {kind: Kind_CLASS, simpleName: 'RuntimeException', interfaces: [Exception]};
    function RuntimeException_init($this) {
      $this = $this || Object.create(RuntimeException.prototype);
      RuntimeException.call($this, null, null);
      return $this;
    }
    function RuntimeException_init_0(message, $this) {
      $this = $this || Object.create(RuntimeException.prototype);
      RuntimeException.call($this, message, null);
      return $this;
    }
    function RuntimeException_init_1(cause, $this) {
      $this = $this || Object.create(RuntimeException.prototype);
      RuntimeException.call($this, undefined, cause);
      return $this;
    }
    function IllegalArgumentException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'IllegalArgumentException';
    }
    IllegalArgumentException.$metadata$ = {kind: Kind_CLASS, simpleName: 'IllegalArgumentException', interfaces: [RuntimeException]};
    function IllegalArgumentException_init($this) {
      $this = $this || Object.create(IllegalArgumentException.prototype);
      IllegalArgumentException.call($this, null, null);
      return $this;
    }
    function IllegalArgumentException_init_0(message, $this) {
      $this = $this || Object.create(IllegalArgumentException.prototype);
      IllegalArgumentException.call($this, message, null);
      return $this;
    }
    function IllegalArgumentException_init_1(cause, $this) {
      $this = $this || Object.create(IllegalArgumentException.prototype);
      IllegalArgumentException.call($this, undefined, cause);
      return $this;
    }
    function IllegalStateException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'IllegalStateException';
    }
    IllegalStateException.$metadata$ = {kind: Kind_CLASS, simpleName: 'IllegalStateException', interfaces: [RuntimeException]};
    function IllegalStateException_init($this) {
      $this = $this || Object.create(IllegalStateException.prototype);
      IllegalStateException.call($this, null, null);
      return $this;
    }
    function IllegalStateException_init_0(message, $this) {
      $this = $this || Object.create(IllegalStateException.prototype);
      IllegalStateException.call($this, message, null);
      return $this;
    }
    function IllegalStateException_init_1(cause, $this) {
      $this = $this || Object.create(IllegalStateException.prototype);
      IllegalStateException.call($this, undefined, cause);
      return $this;
    }
    function IndexOutOfBoundsException(message) {
      RuntimeException_init_0(message, this);
      this.name = 'IndexOutOfBoundsException';
    }
    IndexOutOfBoundsException.$metadata$ = {kind: Kind_CLASS, simpleName: 'IndexOutOfBoundsException', interfaces: [RuntimeException]};
    function IndexOutOfBoundsException_init($this) {
      $this = $this || Object.create(IndexOutOfBoundsException.prototype);
      IndexOutOfBoundsException.call($this, null);
      return $this;
    }
    function ConcurrentModificationException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'ConcurrentModificationException';
    }
    ConcurrentModificationException.$metadata$ = {kind: Kind_CLASS, simpleName: 'ConcurrentModificationException', interfaces: [RuntimeException]};
    function ConcurrentModificationException_init($this) {
      $this = $this || Object.create(ConcurrentModificationException.prototype);
      ConcurrentModificationException.call($this, null, null);
      return $this;
    }
    function ConcurrentModificationException_init_0(message, $this) {
      $this = $this || Object.create(ConcurrentModificationException.prototype);
      ConcurrentModificationException.call($this, message, null);
      return $this;
    }
    function ConcurrentModificationException_init_1(cause, $this) {
      $this = $this || Object.create(ConcurrentModificationException.prototype);
      ConcurrentModificationException.call($this, undefined, cause);
      return $this;
    }
    function UnsupportedOperationException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'UnsupportedOperationException';
    }
    UnsupportedOperationException.$metadata$ = {kind: Kind_CLASS, simpleName: 'UnsupportedOperationException', interfaces: [RuntimeException]};
    function UnsupportedOperationException_init($this) {
      $this = $this || Object.create(UnsupportedOperationException.prototype);
      UnsupportedOperationException.call($this, null, null);
      return $this;
    }
    function UnsupportedOperationException_init_0(message, $this) {
      $this = $this || Object.create(UnsupportedOperationException.prototype);
      UnsupportedOperationException.call($this, message, null);
      return $this;
    }
    function UnsupportedOperationException_init_1(cause, $this) {
      $this = $this || Object.create(UnsupportedOperationException.prototype);
      UnsupportedOperationException.call($this, undefined, cause);
      return $this;
    }
    function NumberFormatException(message) {
      IllegalArgumentException_init_0(message, this);
      this.name = 'NumberFormatException';
    }
    NumberFormatException.$metadata$ = {kind: Kind_CLASS, simpleName: 'NumberFormatException', interfaces: [IllegalArgumentException]};
    function NumberFormatException_init($this) {
      $this = $this || Object.create(NumberFormatException.prototype);
      NumberFormatException.call($this, null);
      return $this;
    }
    function NullPointerException(message) {
      RuntimeException_init_0(message, this);
      this.name = 'NullPointerException';
    }
    NullPointerException.$metadata$ = {kind: Kind_CLASS, simpleName: 'NullPointerException', interfaces: [RuntimeException]};
    function NullPointerException_init($this) {
      $this = $this || Object.create(NullPointerException.prototype);
      NullPointerException.call($this, null);
      return $this;
    }
    function ClassCastException(message) {
      RuntimeException_init_0(message, this);
      this.name = 'ClassCastException';
    }
    ClassCastException.$metadata$ = {kind: Kind_CLASS, simpleName: 'ClassCastException', interfaces: [RuntimeException]};
    function ClassCastException_init($this) {
      $this = $this || Object.create(ClassCastException.prototype);
      ClassCastException.call($this, null);
      return $this;
    }
    function AssertionError(message, cause) {
      Error_0.call(this, message, cause);
      this.name = 'AssertionError';
    }
    AssertionError.$metadata$ = {kind: Kind_CLASS, simpleName: 'AssertionError', interfaces: [Error_0]};
    function AssertionError_init($this) {
      $this = $this || Object.create(AssertionError.prototype);
      AssertionError_init_0(null, $this);
      return $this;
    }
    function AssertionError_init_0(message, $this) {
      $this = $this || Object.create(AssertionError.prototype);
      AssertionError.call($this, message, null);
      return $this;
    }
    function AssertionError_init_1(message, $this) {
      $this = $this || Object.create(AssertionError.prototype);
      var tmp$;
      AssertionError.call($this, toString(message), Kotlin.isType(tmp$ = message, Throwable) ? tmp$ : null);
      return $this;
    }
    function NoSuchElementException(message) {
      RuntimeException_init_0(message, this);
      this.name = 'NoSuchElementException';
    }
    NoSuchElementException.$metadata$ = {kind: Kind_CLASS, simpleName: 'NoSuchElementException', interfaces: [RuntimeException]};
    function NoSuchElementException_init($this) {
      $this = $this || Object.create(NoSuchElementException.prototype);
      NoSuchElementException.call($this, null);
      return $this;
    }
    function ArithmeticException(message) {
      RuntimeException_init_0(message, this);
      this.name = 'ArithmeticException';
    }
    ArithmeticException.$metadata$ = {kind: Kind_CLASS, simpleName: 'ArithmeticException', interfaces: [RuntimeException]};
    function ArithmeticException_init($this) {
      $this = $this || Object.create(ArithmeticException.prototype);
      ArithmeticException.call($this, null);
      return $this;
    }
    function NoWhenBranchMatchedException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'NoWhenBranchMatchedException';
    }
    NoWhenBranchMatchedException.$metadata$ = {kind: Kind_CLASS, simpleName: 'NoWhenBranchMatchedException', interfaces: [RuntimeException]};
    function NoWhenBranchMatchedException_init($this) {
      $this = $this || Object.create(NoWhenBranchMatchedException.prototype);
      NoWhenBranchMatchedException.call($this, null, null);
      return $this;
    }
    function NoWhenBranchMatchedException_init_0(message, $this) {
      $this = $this || Object.create(NoWhenBranchMatchedException.prototype);
      NoWhenBranchMatchedException.call($this, message, null);
      return $this;
    }
    function NoWhenBranchMatchedException_init_1(cause, $this) {
      $this = $this || Object.create(NoWhenBranchMatchedException.prototype);
      NoWhenBranchMatchedException.call($this, undefined, cause);
      return $this;
    }
    function UninitializedPropertyAccessException(message, cause) {
      RuntimeException.call(this, message, cause);
      this.name = 'UninitializedPropertyAccessException';
    }
    UninitializedPropertyAccessException.$metadata$ = {kind: Kind_CLASS, simpleName: 'UninitializedPropertyAccessException', interfaces: [RuntimeException]};
    function UninitializedPropertyAccessException_init($this) {
      $this = $this || Object.create(UninitializedPropertyAccessException.prototype);
      UninitializedPropertyAccessException.call($this, null, null);
      return $this;
    }
    function UninitializedPropertyAccessException_init_0(message, $this) {
      $this = $this || Object.create(UninitializedPropertyAccessException.prototype);
      UninitializedPropertyAccessException.call($this, message, null);
      return $this;
    }
    function UninitializedPropertyAccessException_init_1(cause, $this) {
      $this = $this || Object.create(UninitializedPropertyAccessException.prototype);
      UninitializedPropertyAccessException.call($this, undefined, cause);
      return $this;
    }
    function eachCount($receiver) {
      var destination = LinkedHashMap_init();
      var tmp$;
      tmp$ = $receiver.sourceIterator();
      while (tmp$.hasNext()) {
        var e = tmp$.next();
        var key = $receiver.keyOf_11rb$(e);
        var accumulator = destination.get_11rb$(key);
        var tmp$_0;
        destination.put_xwzc9p$(key, (accumulator == null && !destination.containsKey_11rb$(key) ? 0 : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE()) + 1 | 0);
      }
      return destination;
    }
    function Serializable() {
    }
    Serializable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Serializable', interfaces: []};
    function min_20($receiver, a, b) {
      return a.compareTo_11rb$(b) <= 0 ? a : b;
    }
    function max_20($receiver, a, b) {
      return a.compareTo_11rb$(b) >= 0 ? a : b;
    }
    function json(pairs) {
      var tmp$;
      var res = {};
      for (tmp$ = 0; tmp$ !== pairs.length; ++tmp$) {
        var tmp$_0 = pairs[tmp$];
        var name = tmp$_0.component1(), value = tmp$_0.component2();
        res[name] = value;
      }
      return res;
    }
    function add($receiver, other) {
      var tmp$;
      var keys = Object.keys(other);
      for (tmp$ = 0; tmp$ !== keys.length; ++tmp$) {
        var key = keys[tmp$];
        if (other.hasOwnProperty(key)) {
          $receiver[key] = other[key];
        }}
      return $receiver;
    }
    var sin = defineInlineFunction('kotlin.kotlin.math.sin_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sin(x);
      };
    }));
    var cos = defineInlineFunction('kotlin.kotlin.math.cos_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.cos(x);
      };
    }));
    var tan = defineInlineFunction('kotlin.kotlin.math.tan_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.tan(x);
      };
    }));
    var asin = defineInlineFunction('kotlin.kotlin.math.asin_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.asin(x);
      };
    }));
    var acos = defineInlineFunction('kotlin.kotlin.math.acos_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.acos(x);
      };
    }));
    var atan = defineInlineFunction('kotlin.kotlin.math.atan_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.atan(x);
      };
    }));
    var atan2 = defineInlineFunction('kotlin.kotlin.math.atan2_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (y, x) {
        return Math_0.atan2(y, x);
      };
    }));
    var sinh = defineInlineFunction('kotlin.kotlin.math.sinh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sinh(x);
      };
    }));
    var cosh = defineInlineFunction('kotlin.kotlin.math.cosh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.cosh(x);
      };
    }));
    var tanh = defineInlineFunction('kotlin.kotlin.math.tanh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.tanh(x);
      };
    }));
    var asinh = defineInlineFunction('kotlin.kotlin.math.asinh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.asinh(x);
      };
    }));
    var acosh = defineInlineFunction('kotlin.kotlin.math.acosh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.acosh(x);
      };
    }));
    var atanh = defineInlineFunction('kotlin.kotlin.math.atanh_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.atanh(x);
      };
    }));
    var hypot = defineInlineFunction('kotlin.kotlin.math.hypot_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x, y) {
        return Math_0.hypot(x, y);
      };
    }));
    var sqrt = defineInlineFunction('kotlin.kotlin.math.sqrt_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sqrt(x);
      };
    }));
    var exp = defineInlineFunction('kotlin.kotlin.math.exp_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.exp(x);
      };
    }));
    var expm1 = defineInlineFunction('kotlin.kotlin.math.expm1_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.expm1(x);
      };
    }));
    function log(x, base) {
      if (base <= 0.0 || base === 1.0)
        return kotlin_js_internal_DoubleCompanionObject.NaN;
      return Math.log(x) / Math.log(base);
    }
    var ln = defineInlineFunction('kotlin.kotlin.math.ln_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log(x);
      };
    }));
    var log10 = defineInlineFunction('kotlin.kotlin.math.log10_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log10(x);
      };
    }));
    var log2 = defineInlineFunction('kotlin.kotlin.math.log2_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log2(x);
      };
    }));
    var ln1p = defineInlineFunction('kotlin.kotlin.math.ln1p_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log1p(x);
      };
    }));
    var ceil = defineInlineFunction('kotlin.kotlin.math.ceil_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.ceil(x);
      };
    }));
    var floor = defineInlineFunction('kotlin.kotlin.math.floor_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.floor(x);
      };
    }));
    var truncate = defineInlineFunction('kotlin.kotlin.math.truncate_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.trunc(x);
      };
    }));
    function round(x) {
      if (x % 0.5 !== 0.0) {
        return Math.round(x);
      }var floor = Math_0.floor(x);
      return floor % 2 === 0.0 ? floor : Math_0.ceil(x);
    }
    var abs = defineInlineFunction('kotlin.kotlin.math.abs_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.abs(x);
      };
    }));
    var sign = defineInlineFunction('kotlin.kotlin.math.sign_14dthe$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sign(x);
      };
    }));
    var min_21 = defineInlineFunction('kotlin.kotlin.math.min_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var max_21 = defineInlineFunction('kotlin.kotlin.math.max_lu1900$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var pow = defineInlineFunction('kotlin.kotlin.math.pow_38ydlf$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver, x) {
        return Math_0.pow($receiver, x);
      };
    }));
    var pow_0 = defineInlineFunction('kotlin.kotlin.math.pow_j6vyb1$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver, n) {
        return Math_0.pow($receiver, n);
      };
    }));
    var get_absoluteValue = defineInlineFunction('kotlin.kotlin.math.get_absoluteValue_yrwdxr$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.abs($receiver);
      };
    }));
    var get_sign = defineInlineFunction('kotlin.kotlin.math.get_sign_yrwdxr$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.sign($receiver);
      };
    }));
    var withSign_0 = defineInlineFunction('kotlin.kotlin.math.withSign_j6vyb1$', wrapFunction(function () {
      var withSign = _.kotlin.math.withSign_38ydlf$;
      return function ($receiver, sign) {
        return withSign($receiver, sign);
      };
    }));
    function get_ulp($receiver) {
      if ($receiver < 0)
        return get_ulp(-$receiver);
      else if (isNaN_0($receiver) || $receiver === kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY)
        return $receiver;
      else if ($receiver === kotlin_js_internal_DoubleCompanionObject.MAX_VALUE)
        return $receiver - nextDown($receiver);
      else
        return nextUp($receiver) - $receiver;
    }
    function nextUp($receiver) {
      if (isNaN_0($receiver) || $receiver === kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY)
        return $receiver;
      else if ($receiver === 0.0)
        return kotlin_js_internal_DoubleCompanionObject.MIN_VALUE;
      else {
        var bits = toRawBits($receiver).add(Kotlin.Long.fromInt($receiver > 0 ? 1 : -1));
        return Kotlin.doubleFromBits(bits);
      }
    }
    function nextDown($receiver) {
      if (isNaN_0($receiver) || $receiver === kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY)
        return $receiver;
      else if ($receiver === 0.0)
        return -kotlin_js_internal_DoubleCompanionObject.MIN_VALUE;
      else {
        var bits = toRawBits($receiver).add(Kotlin.Long.fromInt($receiver > 0 ? -1 : 1));
        return Kotlin.doubleFromBits(bits);
      }
    }
    function nextTowards($receiver, to) {
      if (isNaN_0($receiver) || isNaN_0(to))
        return kotlin_js_internal_DoubleCompanionObject.NaN;
      else if (to === $receiver)
        return to;
      else if (to > $receiver)
        return nextUp($receiver);
      else
        return nextDown($receiver);
    }
    function roundToInt($receiver) {
      if (isNaN_0($receiver))
        throw IllegalArgumentException_init_0('Cannot round NaN value.');
      else if ($receiver > 2147483647)
        return 2147483647;
      else if ($receiver < -2147483648)
        return -2147483648;
      else {
        return numberToInt(Math.round($receiver));
      }
    }
    function roundToLong($receiver) {
      if (isNaN_0($receiver))
        throw IllegalArgumentException_init_0('Cannot round NaN value.');
      else if ($receiver > Long$Companion$MAX_VALUE.toNumber())
        return Long$Companion$MAX_VALUE;
      else if ($receiver < Long$Companion$MIN_VALUE.toNumber())
        return Long$Companion$MIN_VALUE;
      else {
        return Kotlin.Long.fromNumber(Math.round($receiver));
      }
    }
    var sin_0 = defineInlineFunction('kotlin.kotlin.math.sin_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sin(x);
      };
    }));
    var cos_0 = defineInlineFunction('kotlin.kotlin.math.cos_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.cos(x);
      };
    }));
    var tan_0 = defineInlineFunction('kotlin.kotlin.math.tan_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.tan(x);
      };
    }));
    var asin_0 = defineInlineFunction('kotlin.kotlin.math.asin_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.asin(x);
      };
    }));
    var acos_0 = defineInlineFunction('kotlin.kotlin.math.acos_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.acos(x);
      };
    }));
    var atan_0 = defineInlineFunction('kotlin.kotlin.math.atan_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.atan(x);
      };
    }));
    var atan2_0 = defineInlineFunction('kotlin.kotlin.math.atan2_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (y, x) {
        return Math_0.atan2(y, x);
      };
    }));
    var sinh_0 = defineInlineFunction('kotlin.kotlin.math.sinh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sinh(x);
      };
    }));
    var cosh_0 = defineInlineFunction('kotlin.kotlin.math.cosh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.cosh(x);
      };
    }));
    var tanh_0 = defineInlineFunction('kotlin.kotlin.math.tanh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.tanh(x);
      };
    }));
    var asinh_0 = defineInlineFunction('kotlin.kotlin.math.asinh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.asinh(x);
      };
    }));
    var acosh_0 = defineInlineFunction('kotlin.kotlin.math.acosh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.acosh(x);
      };
    }));
    var atanh_0 = defineInlineFunction('kotlin.kotlin.math.atanh_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.atanh(x);
      };
    }));
    var hypot_0 = defineInlineFunction('kotlin.kotlin.math.hypot_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x, y) {
        return Math_0.hypot(x, y);
      };
    }));
    var sqrt_0 = defineInlineFunction('kotlin.kotlin.math.sqrt_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sqrt(x);
      };
    }));
    var exp_0 = defineInlineFunction('kotlin.kotlin.math.exp_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.exp(x);
      };
    }));
    var expm1_0 = defineInlineFunction('kotlin.kotlin.math.expm1_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.expm1(x);
      };
    }));
    var log_0 = defineInlineFunction('kotlin.kotlin.math.log_dleff0$', wrapFunction(function () {
      var log = _.kotlin.math.log_lu1900$;
      return function (x, base) {
        return log(x, base);
      };
    }));
    var ln_0 = defineInlineFunction('kotlin.kotlin.math.ln_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log(x);
      };
    }));
    var log10_0 = defineInlineFunction('kotlin.kotlin.math.log10_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log10(x);
      };
    }));
    var log2_0 = defineInlineFunction('kotlin.kotlin.math.log2_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log2(x);
      };
    }));
    var ln1p_0 = defineInlineFunction('kotlin.kotlin.math.ln1p_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.log1p(x);
      };
    }));
    var ceil_0 = defineInlineFunction('kotlin.kotlin.math.ceil_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.ceil(x);
      };
    }));
    var floor_0 = defineInlineFunction('kotlin.kotlin.math.floor_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.floor(x);
      };
    }));
    var truncate_0 = defineInlineFunction('kotlin.kotlin.math.truncate_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.trunc(x);
      };
    }));
    var round_0 = defineInlineFunction('kotlin.kotlin.math.round_mx4ult$', wrapFunction(function () {
      var round = _.kotlin.math.round_14dthe$;
      return function (x) {
        return round(x);
      };
    }));
    var abs_0 = defineInlineFunction('kotlin.kotlin.math.abs_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.abs(x);
      };
    }));
    var sign_0 = defineInlineFunction('kotlin.kotlin.math.sign_mx4ult$', wrapFunction(function () {
      var Math_0 = Math;
      return function (x) {
        return Math_0.sign(x);
      };
    }));
    var min_22 = defineInlineFunction('kotlin.kotlin.math.min_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var max_22 = defineInlineFunction('kotlin.kotlin.math.max_dleff0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var pow_1 = defineInlineFunction('kotlin.kotlin.math.pow_yni7l$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver, x) {
        return Math_0.pow($receiver, x);
      };
    }));
    var pow_2 = defineInlineFunction('kotlin.kotlin.math.pow_lcymw2$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver, n) {
        return Math_0.pow($receiver, n);
      };
    }));
    var get_absoluteValue_0 = defineInlineFunction('kotlin.kotlin.math.get_absoluteValue_81szk$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.abs($receiver);
      };
    }));
    var get_sign_0 = defineInlineFunction('kotlin.kotlin.math.get_sign_81szk$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.sign($receiver);
      };
    }));
    var withSign_1 = defineInlineFunction('kotlin.kotlin.math.withSign_yni7l$', wrapFunction(function () {
      var withSign = _.kotlin.math.withSign_38ydlf$;
      return function ($receiver, sign) {
        return withSign($receiver, sign);
      };
    }));
    var withSign_2 = defineInlineFunction('kotlin.kotlin.math.withSign_lcymw2$', wrapFunction(function () {
      var withSign = _.kotlin.math.withSign_38ydlf$;
      return function ($receiver, sign) {
        return withSign($receiver, sign);
      };
    }));
    var roundToInt_0 = defineInlineFunction('kotlin.kotlin.math.roundToInt_81szk$', wrapFunction(function () {
      var roundToInt = _.kotlin.math.roundToInt_yrwdxr$;
      return function ($receiver) {
        return roundToInt($receiver);
      };
    }));
    var roundToLong_0 = defineInlineFunction('kotlin.kotlin.math.roundToLong_81szk$', wrapFunction(function () {
      var roundToLong = _.kotlin.math.roundToLong_yrwdxr$;
      return function ($receiver) {
        return roundToLong($receiver);
      };
    }));
    function abs_1(n) {
      return n < 0 ? -n | 0 | 0 : n;
    }
    var min_23 = defineInlineFunction('kotlin.kotlin.math.min_vux9f0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.min(a, b);
      };
    }));
    var max_23 = defineInlineFunction('kotlin.kotlin.math.max_vux9f0$', wrapFunction(function () {
      var Math_0 = Math;
      return function (a, b) {
        return Math_0.max(a, b);
      };
    }));
    var get_absoluteValue_1 = defineInlineFunction('kotlin.kotlin.math.get_absoluteValue_s8ev3n$', wrapFunction(function () {
      var abs = _.kotlin.math.abs_za3lpa$;
      return function ($receiver) {
        return abs($receiver);
      };
    }));
    function get_sign_1($receiver) {
      if ($receiver < 0)
        return -1;
      else if ($receiver > 0)
        return 1;
      else
        return 0;
    }
    function abs_2(n) {
      return n.toNumber() < 0 ? n.unaryMinus() : n;
    }
    var min_24 = defineInlineFunction('kotlin.kotlin.math.min_3pjtqy$', function (a, b) {
      return a.compareTo_11rb$(b) <= 0 ? a : b;
    });
    var max_24 = defineInlineFunction('kotlin.kotlin.math.max_3pjtqy$', function (a, b) {
      return a.compareTo_11rb$(b) >= 0 ? a : b;
    });
    var get_absoluteValue_2 = defineInlineFunction('kotlin.kotlin.math.get_absoluteValue_mts6qi$', wrapFunction(function () {
      var abs = _.kotlin.math.abs_s8cxhz$;
      return function ($receiver) {
        return abs($receiver);
      };
    }));
    function get_sign_2($receiver) {
      if ($receiver.toNumber() < 0)
        return -1;
      else if ($receiver.toNumber() > 0)
        return 1;
      else
        return 0;
    }
    function isNaN_0($receiver) {
      return $receiver !== $receiver;
    }
    function isNaN_1($receiver) {
      return $receiver !== $receiver;
    }
    function isInfinite($receiver) {
      return $receiver === kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY || $receiver === kotlin_js_internal_DoubleCompanionObject.NEGATIVE_INFINITY;
    }
    function isInfinite_0($receiver) {
      return $receiver === kotlin_js_internal_FloatCompanionObject.POSITIVE_INFINITY || $receiver === kotlin_js_internal_FloatCompanionObject.NEGATIVE_INFINITY;
    }
    function isFinite($receiver) {
      return !isInfinite($receiver) && !isNaN_0($receiver);
    }
    function isFinite_0($receiver) {
      return !isInfinite_0($receiver) && !isNaN_1($receiver);
    }
    function countOneBits($receiver) {
      var v = $receiver;
      v = (v & 1431655765) + (v >>> 1 & 1431655765) | 0;
      v = (v & 858993459) + (v >>> 2 & 858993459) | 0;
      v = (v & 252645135) + (v >>> 4 & 252645135) | 0;
      v = (v & 16711935) + (v >>> 8 & 16711935) | 0;
      v = (v & 65535) + (v >>> 16) | 0;
      return v;
    }
    var countLeadingZeroBits = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_s8ev3n$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver);
      };
    }));
    function countTrailingZeroBits($receiver) {
      return 32 - Math_0.clz32(~($receiver | (-$receiver | 0))) | 0;
    }
    function takeHighestOneBit($receiver) {
      return $receiver === 0 ? 0 : 1 << 31 - Math_0.clz32($receiver);
    }
    function takeLowestOneBit($receiver) {
      return $receiver & (-$receiver | 0);
    }
    function rotateLeft($receiver, bitCount) {
      return $receiver << bitCount | $receiver >>> 32 - bitCount;
    }
    function rotateRight($receiver, bitCount) {
      return $receiver << 32 - bitCount | $receiver >>> bitCount;
    }
    function countOneBits_0($receiver) {
      return countOneBits($receiver.getHighBits()) + countOneBits($receiver.getLowBits()) | 0;
    }
    function countLeadingZeroBits_0($receiver) {
      var high = $receiver.getHighBits();
      if (high === 0) {
        return 32 + Math_0.clz32($receiver.getLowBits()) | 0;
      } else {
        return Math_0.clz32(high);
      }
    }
    function countTrailingZeroBits_0($receiver) {
      var low = $receiver.getLowBits();
      if (low === 0) {
        return 32 + countTrailingZeroBits($receiver.getHighBits()) | 0;
      } else
        return countTrailingZeroBits(low);
    }
    function takeHighestOneBit_0($receiver) {
      var high = $receiver.getHighBits();
      if (high === 0) {
        var low = takeHighestOneBit($receiver.getLowBits());
        return Kotlin.Long.fromBits(low, 0);
      } else {
        var high_0 = takeHighestOneBit(high);
        return Kotlin.Long.fromBits(0, high_0);
      }
    }
    function takeLowestOneBit_0($receiver) {
      var low = $receiver.getLowBits();
      if (low === 0) {
        var high = takeLowestOneBit($receiver.getHighBits());
        return Kotlin.Long.fromBits(0, high);
      } else {
        var low_0 = takeLowestOneBit(low);
        return Kotlin.Long.fromBits(low_0, 0);
      }
    }
    function rotateLeft_0($receiver, bitCount) {
      if ((bitCount & 31) !== 0) {
        var low = $receiver.getLowBits();
        var high = $receiver.getHighBits();
        var newLow = low << bitCount | high >>> (-bitCount | 0);
        var newHigh = high << bitCount | low >>> (-bitCount | 0);
        return (bitCount & 32) === 0 ? Kotlin.Long.fromBits(newLow, newHigh) : Kotlin.Long.fromBits(newHigh, newLow);
      } else {
        var tmp$;
        if ((bitCount & 32) === 0)
          tmp$ = $receiver;
        else {
          var tmp$_0 = $receiver.getHighBits();
          var high_0 = $receiver.getLowBits();
          tmp$ = Kotlin.Long.fromBits(tmp$_0, high_0);
        }
        return tmp$;
      }
    }
    var rotateRight_0 = defineInlineFunction('kotlin.kotlin.rotateRight_if0zpk$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_if0zpk$;
      return function ($receiver, bitCount) {
        return rotateLeft($receiver, -bitCount | 0);
      };
    }));
    var then = defineInlineFunction('kotlin.kotlin.js.then_eyvp0y$', function ($receiver, onFulfilled) {
      return $receiver.then(onFulfilled);
    });
    var then_0 = defineInlineFunction('kotlin.kotlin.js.then_a5sxob$', function ($receiver, onFulfilled, onRejected) {
      return $receiver.then(onFulfilled, onRejected);
    });
    function defaultPlatformRandom() {
      return Random_0(Math.random() * Math.pow(2, 32) | 0);
    }
    var INV_2_26;
    var INV_2_53;
    function doubleFromParts(hi26, low27) {
      return hi26 * INV_2_26 + low27 * INV_2_53;
    }
    function get_jsClass($receiver) {
      switch (typeof $receiver) {
        case 'string':
          return String;
        case 'number':
          return Number;
        case 'boolean':
          return Boolean;
        default:return Object.getPrototypeOf($receiver).constructor;
      }
    }
    function get_js($receiver) {
      var tmp$;
      return (Kotlin.isType(tmp$ = $receiver, KClassImpl) ? tmp$ : throwCCE_0()).jClass;
    }
    function get_kotlin($receiver) {
      return getKClass($receiver);
    }
    function KClassImpl(jClass) {
      this.jClass_1ppatx$_0 = jClass;
    }
    Object.defineProperty(KClassImpl.prototype, 'jClass', {get: function () {
      return this.jClass_1ppatx$_0;
    }});
    Object.defineProperty(KClassImpl.prototype, 'annotations', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'constructors', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isAbstract', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isCompanion', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isData', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isFinal', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isInner', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isOpen', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'isSealed', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'members', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'nestedClasses', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'objectInstance', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'qualifiedName', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'supertypes', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'typeParameters', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'sealedSubclasses', {get: function () {
      throw new NotImplementedError();
    }});
    Object.defineProperty(KClassImpl.prototype, 'visibility', {get: function () {
      throw new NotImplementedError();
    }});
    KClassImpl.prototype.equals = function (other) {
      return Kotlin.isType(other, KClassImpl) && equals(this.jClass, other.jClass);
    };
    KClassImpl.prototype.hashCode = function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.simpleName) != null ? hashCode(tmp$) : null) != null ? tmp$_0 : 0;
    };
    KClassImpl.prototype.toString = function () {
      return 'class ' + toString(this.simpleName);
    };
    KClassImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'KClassImpl', interfaces: [KClass]};
    function SimpleKClassImpl(jClass) {
      KClassImpl.call(this, jClass);
      var tmp$;
      this.simpleName_m7mxi0$_0 = (tmp$ = jClass.$metadata$) != null ? tmp$.simpleName : null;
    }
    Object.defineProperty(SimpleKClassImpl.prototype, 'simpleName', {get: function () {
      return this.simpleName_m7mxi0$_0;
    }});
    SimpleKClassImpl.prototype.isInstance_s8jyv4$ = function (value) {
      var jsClass = this.jClass;
      return Kotlin.isType(value, jsClass);
    };
    SimpleKClassImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'SimpleKClassImpl', interfaces: [KClassImpl]};
    function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
      KClassImpl.call(this, jClass);
      this.givenSimpleName_0 = givenSimpleName;
      this.isInstanceFunction_0 = isInstanceFunction;
    }
    PrimitiveKClassImpl.prototype.equals = function (other) {
      if (!Kotlin.isType(other, PrimitiveKClassImpl))
        return false;
      return KClassImpl.prototype.equals.call(this, other) && equals(this.givenSimpleName_0, other.givenSimpleName_0);
    };
    Object.defineProperty(PrimitiveKClassImpl.prototype, 'simpleName', {get: function () {
      return this.givenSimpleName_0;
    }});
    PrimitiveKClassImpl.prototype.isInstance_s8jyv4$ = function (value) {
      return this.isInstanceFunction_0(value);
    };
    PrimitiveKClassImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'PrimitiveKClassImpl', interfaces: [KClassImpl]};
    function NothingKClassImpl() {
      NothingKClassImpl_instance = this;
      KClassImpl.call(this, Object);
      this.simpleName_lnzy73$_0 = 'Nothing';
    }
    Object.defineProperty(NothingKClassImpl.prototype, 'simpleName', {get: function () {
      return this.simpleName_lnzy73$_0;
    }});
    NothingKClassImpl.prototype.isInstance_s8jyv4$ = function (value) {
      return false;
    };
    Object.defineProperty(NothingKClassImpl.prototype, 'jClass', {get: function () {
      throw UnsupportedOperationException_init_0("There's no native JS class for Nothing type");
    }});
    NothingKClassImpl.prototype.equals = function (other) {
      return other === this;
    };
    NothingKClassImpl.prototype.hashCode = function () {
      return 0;
    };
    NothingKClassImpl.$metadata$ = {kind: Kind_OBJECT, simpleName: 'NothingKClassImpl', interfaces: [KClassImpl]};
    var NothingKClassImpl_instance = null;
    function NothingKClassImpl_getInstance() {
      if (NothingKClassImpl_instance === null) {
        new NothingKClassImpl();
      }return NothingKClassImpl_instance;
    }
    function createKType(classifier, arguments_0, isMarkedNullable) {
      return new KTypeImpl(classifier, asList(arguments_0), isMarkedNullable);
    }
    function createDynamicKType() {
      return DynamicKType_getInstance();
    }
    function markKTypeNullable(kType) {
      return new KTypeImpl(ensureNotNull(kType.classifier), kType.arguments, true);
    }
    function createKTypeParameter(name, upperBounds, variance) {
      var tmp$;
      switch (variance) {
        case 'in':
          tmp$ = KVariance$IN_getInstance();
          break;
        case 'out':
          tmp$ = KVariance$OUT_getInstance();
          break;
        default:tmp$ = KVariance$INVARIANT_getInstance();
          break;
      }
      var kVariance = tmp$;
      return new KTypeParameterImpl(name, asList(upperBounds), kVariance, false);
    }
    function getStarKTypeProjection() {
      return KTypeProjection$Companion_getInstance().STAR;
    }
    function createCovariantKTypeProjection(type) {
      return KTypeProjection$Companion_getInstance().covariant_saj79j$(type);
    }
    function createInvariantKTypeProjection(type) {
      return KTypeProjection$Companion_getInstance().invariant_saj79j$(type);
    }
    function createContravariantKTypeProjection(type) {
      return KTypeProjection$Companion_getInstance().contravariant_saj79j$(type);
    }
    function KTypeImpl(classifier, arguments_0, isMarkedNullable) {
      this.classifier_50lv52$_0 = classifier;
      this.arguments_lev63t$_0 = arguments_0;
      this.isMarkedNullable_748rxs$_0 = isMarkedNullable;
    }
    Object.defineProperty(KTypeImpl.prototype, 'classifier', {get: function () {
      return this.classifier_50lv52$_0;
    }});
    Object.defineProperty(KTypeImpl.prototype, 'arguments', {get: function () {
      return this.arguments_lev63t$_0;
    }});
    Object.defineProperty(KTypeImpl.prototype, 'isMarkedNullable', {get: function () {
      return this.isMarkedNullable_748rxs$_0;
    }});
    Object.defineProperty(KTypeImpl.prototype, 'annotations', {get: function () {
      return emptyList();
    }});
    KTypeImpl.prototype.equals = function (other) {
      return Kotlin.isType(other, KTypeImpl) && equals(this.classifier, other.classifier) && equals(this.arguments, other.arguments) && this.isMarkedNullable === other.isMarkedNullable;
    };
    KTypeImpl.prototype.hashCode = function () {
      return (((hashCode(this.classifier) * 31 | 0) + hashCode(this.arguments) | 0) * 31 | 0) + hashCode(this.isMarkedNullable) | 0;
    };
    function KTypeImpl$toString$lambda(this$KTypeImpl) {
      return function (it) {
        return this$KTypeImpl.asString_0(it);
      };
    }
    KTypeImpl.prototype.toString = function () {
      var tmp$, tmp$_0;
      var kClass = Kotlin.isType(tmp$ = this.classifier, KClass) ? tmp$ : null;
      if (kClass == null)
        tmp$_0 = this.classifier.toString();
      else if (kClass.simpleName != null)
        tmp$_0 = kClass.simpleName;
      else
        tmp$_0 = '(non-denotable type)';
      var classifierName = tmp$_0;
      var args = this.arguments.isEmpty() ? '' : joinToString_8(this.arguments, ', ', '<', '>', void 0, void 0, KTypeImpl$toString$lambda(this));
      var nullable = this.isMarkedNullable ? '?' : '';
      return classifierName + args + nullable;
    };
    KTypeImpl.prototype.asString_0 = function ($receiver) {
      if ($receiver.variance == null)
        return '*';
      return prefixString($receiver.variance) + toString($receiver.type);
    };
    KTypeImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'KTypeImpl', interfaces: [KType]};
    function DynamicKType() {
      DynamicKType_instance = this;
      this.classifier_rcrrnf$_0 = null;
      this.arguments_2d0wf2$_0 = emptyList();
      this.isMarkedNullable_vgyq3p$_0 = false;
      this.annotations_1p17e4$_0 = emptyList();
    }
    Object.defineProperty(DynamicKType.prototype, 'classifier', {get: function () {
      return this.classifier_rcrrnf$_0;
    }});
    Object.defineProperty(DynamicKType.prototype, 'arguments', {get: function () {
      return this.arguments_2d0wf2$_0;
    }});
    Object.defineProperty(DynamicKType.prototype, 'isMarkedNullable', {get: function () {
      return this.isMarkedNullable_vgyq3p$_0;
    }});
    Object.defineProperty(DynamicKType.prototype, 'annotations', {get: function () {
      return this.annotations_1p17e4$_0;
    }});
    DynamicKType.prototype.toString = function () {
      return 'dynamic';
    };
    DynamicKType.$metadata$ = {kind: Kind_OBJECT, simpleName: 'DynamicKType', interfaces: [KType]};
    var DynamicKType_instance = null;
    function DynamicKType_getInstance() {
      if (DynamicKType_instance === null) {
        new DynamicKType();
      }return DynamicKType_instance;
    }
    function prefixString($receiver) {
      switch ($receiver.name) {
        case 'INVARIANT':
          return '';
        case 'IN':
          return 'in ';
        case 'OUT':
          return 'out ';
        default:return Kotlin.noWhenBranchMatched();
      }
    }
    function KTypeParameterImpl(name, upperBounds, variance, isReified) {
      this.name_81dqmp$_0 = name;
      this.upperBounds_nx4j3x$_0 = upperBounds;
      this.variance_jsggjt$_0 = variance;
      this.isReified_7azqms$_0 = isReified;
    }
    Object.defineProperty(KTypeParameterImpl.prototype, 'name', {get: function () {
      return this.name_81dqmp$_0;
    }});
    Object.defineProperty(KTypeParameterImpl.prototype, 'upperBounds', {get: function () {
      return this.upperBounds_nx4j3x$_0;
    }});
    Object.defineProperty(KTypeParameterImpl.prototype, 'variance', {get: function () {
      return this.variance_jsggjt$_0;
    }});
    Object.defineProperty(KTypeParameterImpl.prototype, 'isReified', {get: function () {
      return this.isReified_7azqms$_0;
    }});
    KTypeParameterImpl.prototype.toString = function () {
      return this.name;
    };
    KTypeParameterImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'KTypeParameterImpl', interfaces: [KTypeParameter]};
    KTypeParameterImpl.prototype.component1 = function () {
      return this.name;
    };
    KTypeParameterImpl.prototype.component2 = function () {
      return this.upperBounds;
    };
    KTypeParameterImpl.prototype.component3 = function () {
      return this.variance;
    };
    KTypeParameterImpl.prototype.component4 = function () {
      return this.isReified;
    };
    KTypeParameterImpl.prototype.copy_picmsx$ = function (name, upperBounds, variance, isReified) {
      return new KTypeParameterImpl(name === void 0 ? this.name : name, upperBounds === void 0 ? this.upperBounds : upperBounds, variance === void 0 ? this.variance : variance, isReified === void 0 ? this.isReified : isReified);
    };
    KTypeParameterImpl.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.name) | 0;
      result = result * 31 + Kotlin.hashCode(this.upperBounds) | 0;
      result = result * 31 + Kotlin.hashCode(this.variance) | 0;
      result = result * 31 + Kotlin.hashCode(this.isReified) | 0;
      return result;
    };
    KTypeParameterImpl.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.upperBounds, other.upperBounds) && Kotlin.equals(this.variance, other.variance) && Kotlin.equals(this.isReified, other.isReified)))));
    };
    function PrimitiveClasses() {
      PrimitiveClasses_instance = this;
      this.anyClass = new PrimitiveKClassImpl(Object, 'Any', PrimitiveClasses$anyClass$lambda);
      this.numberClass = new PrimitiveKClassImpl(Number, 'Number', PrimitiveClasses$numberClass$lambda);
      this.nothingClass = NothingKClassImpl_getInstance();
      this.booleanClass = new PrimitiveKClassImpl(Boolean, 'Boolean', PrimitiveClasses$booleanClass$lambda);
      this.byteClass = new PrimitiveKClassImpl(Number, 'Byte', PrimitiveClasses$byteClass$lambda);
      this.shortClass = new PrimitiveKClassImpl(Number, 'Short', PrimitiveClasses$shortClass$lambda);
      this.intClass = new PrimitiveKClassImpl(Number, 'Int', PrimitiveClasses$intClass$lambda);
      this.floatClass = new PrimitiveKClassImpl(Number, 'Float', PrimitiveClasses$floatClass$lambda);
      this.doubleClass = new PrimitiveKClassImpl(Number, 'Double', PrimitiveClasses$doubleClass$lambda);
      this.arrayClass = new PrimitiveKClassImpl(Array, 'Array', PrimitiveClasses$arrayClass$lambda);
      this.stringClass = new PrimitiveKClassImpl(String, 'String', PrimitiveClasses$stringClass$lambda);
      this.throwableClass = new PrimitiveKClassImpl(Error, 'Throwable', PrimitiveClasses$throwableClass$lambda);
      this.booleanArrayClass = new PrimitiveKClassImpl(Array, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
      this.charArrayClass = new PrimitiveKClassImpl(Uint16Array, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
      this.byteArrayClass = new PrimitiveKClassImpl(Int8Array, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
      this.shortArrayClass = new PrimitiveKClassImpl(Int16Array, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
      this.intArrayClass = new PrimitiveKClassImpl(Int32Array, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
      this.longArrayClass = new PrimitiveKClassImpl(Array, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
      this.floatArrayClass = new PrimitiveKClassImpl(Float32Array, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
      this.doubleArrayClass = new PrimitiveKClassImpl(Float64Array, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
    }
    function PrimitiveClasses$functionClass$lambda$lambda(closure$arity) {
      return function (it) {
        return typeof it === 'function' && it.length === closure$arity;
      };
    }
    PrimitiveClasses.prototype.functionClass = function (arity) {
      var tmp$;
      var tmp$_0;
      if ((tmp$ = functionClasses[arity]) != null)
        tmp$_0 = tmp$;
      else {
        var result = new PrimitiveKClassImpl(Function, 'Function' + arity, PrimitiveClasses$functionClass$lambda$lambda(arity));
        functionClasses[arity] = result;
        tmp$_0 = result;
      }
      return tmp$_0;
    };
    function PrimitiveClasses$anyClass$lambda(it) {
      return Kotlin.isType(it, Any);
    }
    function PrimitiveClasses$numberClass$lambda(it) {
      return Kotlin.isNumber(it);
    }
    function PrimitiveClasses$booleanClass$lambda(it) {
      return typeof it === 'boolean';
    }
    function PrimitiveClasses$byteClass$lambda(it) {
      return typeof it === 'number';
    }
    function PrimitiveClasses$shortClass$lambda(it) {
      return typeof it === 'number';
    }
    function PrimitiveClasses$intClass$lambda(it) {
      return typeof it === 'number';
    }
    function PrimitiveClasses$floatClass$lambda(it) {
      return typeof it === 'number';
    }
    function PrimitiveClasses$doubleClass$lambda(it) {
      return typeof it === 'number';
    }
    function PrimitiveClasses$arrayClass$lambda(it) {
      return Kotlin.isArray(it);
    }
    function PrimitiveClasses$stringClass$lambda(it) {
      return typeof it === 'string';
    }
    function PrimitiveClasses$throwableClass$lambda(it) {
      return Kotlin.isType(it, Throwable);
    }
    function PrimitiveClasses$booleanArrayClass$lambda(it) {
      return Kotlin.isBooleanArray(it);
    }
    function PrimitiveClasses$charArrayClass$lambda(it) {
      return Kotlin.isCharArray(it);
    }
    function PrimitiveClasses$byteArrayClass$lambda(it) {
      return Kotlin.isByteArray(it);
    }
    function PrimitiveClasses$shortArrayClass$lambda(it) {
      return Kotlin.isShortArray(it);
    }
    function PrimitiveClasses$intArrayClass$lambda(it) {
      return Kotlin.isIntArray(it);
    }
    function PrimitiveClasses$longArrayClass$lambda(it) {
      return Kotlin.isLongArray(it);
    }
    function PrimitiveClasses$floatArrayClass$lambda(it) {
      return Kotlin.isFloatArray(it);
    }
    function PrimitiveClasses$doubleArrayClass$lambda(it) {
      return Kotlin.isDoubleArray(it);
    }
    PrimitiveClasses.$metadata$ = {kind: Kind_OBJECT, simpleName: 'PrimitiveClasses', interfaces: []};
    var PrimitiveClasses_instance = null;
    function PrimitiveClasses_getInstance() {
      if (PrimitiveClasses_instance === null) {
        new PrimitiveClasses();
      }return PrimitiveClasses_instance;
    }
    var functionClasses;
    function getKClass(jClass) {
      return getOrCreateKClass(jClass);
    }
    function getKClassFromExpression(e) {
      var tmp$;
      switch (typeof e) {
        case 'string':
          tmp$ = PrimitiveClasses_getInstance().stringClass;
          break;
        case 'number':
          tmp$ = (e | 0) === e ? PrimitiveClasses_getInstance().intClass : PrimitiveClasses_getInstance().doubleClass;
          break;
        case 'boolean':
          tmp$ = PrimitiveClasses_getInstance().booleanClass;
          break;
        case 'function':
          tmp$ = PrimitiveClasses_getInstance().functionClass(e.length);
          break;
        default:if (Kotlin.isBooleanArray(e))
            tmp$ = PrimitiveClasses_getInstance().booleanArrayClass;
          else if (Kotlin.isCharArray(e))
            tmp$ = PrimitiveClasses_getInstance().charArrayClass;
          else if (Kotlin.isByteArray(e))
            tmp$ = PrimitiveClasses_getInstance().byteArrayClass;
          else if (Kotlin.isShortArray(e))
            tmp$ = PrimitiveClasses_getInstance().shortArrayClass;
          else if (Kotlin.isIntArray(e))
            tmp$ = PrimitiveClasses_getInstance().intArrayClass;
          else if (Kotlin.isLongArray(e))
            tmp$ = PrimitiveClasses_getInstance().longArrayClass;
          else if (Kotlin.isFloatArray(e))
            tmp$ = PrimitiveClasses_getInstance().floatArrayClass;
          else if (Kotlin.isDoubleArray(e))
            tmp$ = PrimitiveClasses_getInstance().doubleArrayClass;
          else if (Kotlin.isType(e, KClass))
            tmp$ = getKClass(KClass);
          else if (Kotlin.isArray(e))
            tmp$ = PrimitiveClasses_getInstance().arrayClass;
          else {
            var constructor = Object.getPrototypeOf(e).constructor;
            if (constructor === Object)
              tmp$ = PrimitiveClasses_getInstance().anyClass;
            else if (constructor === Error)
              tmp$ = PrimitiveClasses_getInstance().throwableClass;
            else {
              var jsClass = constructor;
              tmp$ = getOrCreateKClass(jsClass);
            }
          }

          break;
      }
      return tmp$;
    }
    function getOrCreateKClass(jClass) {
      var tmp$;
      if (jClass === String) {
        return PrimitiveClasses_getInstance().stringClass;
      }var metadata = jClass.$metadata$;
      if (metadata != null) {
        if (metadata.$kClass$ == null) {
          var kClass = new SimpleKClassImpl(jClass);
          metadata.$kClass$ = kClass;
          tmp$ = kClass;
        } else {
          tmp$ = metadata.$kClass$;
        }
      } else {
        tmp$ = new SimpleKClassImpl(jClass);
      }
      return tmp$;
    }
    function reset($receiver) {
      $receiver.lastIndex = 0;
    }
    var get_0 = defineInlineFunction('kotlin.kotlin.js.get_kmxd4d$', function ($receiver, index) {
      return $receiver[index];
    });
    var asArray = defineInlineFunction('kotlin.kotlin.js.asArray_tgewol$', function ($receiver) {
      return $receiver;
    });
    function ConstrainedOnceSequence(sequence) {
      this.sequenceRef_0 = sequence;
    }
    ConstrainedOnceSequence.prototype.iterator = function () {
      var tmp$;
      tmp$ = this.sequenceRef_0;
      if (tmp$ == null) {
        throw IllegalStateException_init_0('This sequence can be consumed only once.');
      }var sequence = tmp$;
      this.sequenceRef_0 = null;
      return sequence.iterator();
    };
    ConstrainedOnceSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'ConstrainedOnceSequence', interfaces: [Sequence]};
    function Appendable() {
    }
    Appendable.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Appendable', interfaces: []};
    function CharacterCodingException(message) {
      Exception_init_0(message, this);
      this.name = 'CharacterCodingException';
    }
    CharacterCodingException.$metadata$ = {kind: Kind_CLASS, simpleName: 'CharacterCodingException', interfaces: [Exception]};
    function CharacterCodingException_init($this) {
      $this = $this || Object.create(CharacterCodingException.prototype);
      CharacterCodingException.call($this, null);
      return $this;
    }
    function StringBuilder(content) {
      this.string_0 = content !== undefined ? content : '';
    }
    Object.defineProperty(StringBuilder.prototype, 'length', {get: function () {
      return this.string_0.length;
    }});
    StringBuilder.prototype.charCodeAt = function (index) {
      var $receiver = this.string_0;
      var tmp$;
      if (index >= 0 && index <= get_lastIndex_13($receiver))
        tmp$ = $receiver.charCodeAt(index);
      else {
        throw new IndexOutOfBoundsException('index: ' + index + ', length: ' + this.length + '}');
      }
      return tmp$;
    };
    StringBuilder.prototype.subSequence_vux9f0$ = function (startIndex, endIndex) {
      return this.string_0.substring(startIndex, endIndex);
    };
    StringBuilder.prototype.append_s8itvh$ = function (value) {
      this.string_0 += String.fromCharCode(value);
      return this;
    };
    StringBuilder.prototype.append_gw00v9$ = function (value) {
      this.string_0 += toString(value);
      return this;
    };
    StringBuilder.prototype.append_ezbsdh$ = function (value, startIndex, endIndex) {
      return this.appendRange_ezbsdh$(value, startIndex, endIndex);
    };
    StringBuilder.prototype.reverse = function () {
      var tmp$, tmp$_0;
      var reversed = '';
      var index = this.string_0.length - 1 | 0;
      while (index >= 0) {
        var low = this.string_0.charCodeAt((tmp$ = index, index = tmp$ - 1 | 0, tmp$));
        if (isLowSurrogate(low) && index >= 0) {
          var high = this.string_0.charCodeAt((tmp$_0 = index, index = tmp$_0 - 1 | 0, tmp$_0));
          if (isHighSurrogate(high)) {
            reversed = reversed + String.fromCharCode(toBoxedChar(high)) + String.fromCharCode(toBoxedChar(low));
          } else {
            reversed = reversed + String.fromCharCode(toBoxedChar(low)) + String.fromCharCode(toBoxedChar(high));
          }
        } else {
          reversed += String.fromCharCode(low);
        }
      }
      this.string_0 = reversed;
      return this;
    };
    StringBuilder.prototype.append_s8jyv4$ = function (value) {
      this.string_0 += toString(value);
      return this;
    };
    StringBuilder.prototype.append_6taknv$ = function (value) {
      this.string_0 += value;
      return this;
    };
    StringBuilder.prototype.append_4hbowm$ = function (value) {
      this.string_0 += concatToString(value);
      return this;
    };
    StringBuilder.prototype.append_61zpoe$ = function (value) {
      this.string_0 = this.string_0 + value;
      return this;
    };
    StringBuilder.prototype.capacity = function () {
      return this._capacity !== undefined ? Math_0.max(this._capacity, this.length) : this.length;
    };
    StringBuilder.prototype.ensureCapacity_za3lpa$ = function (minimumCapacity) {
      if (minimumCapacity > this.capacity()) {
        this._capacity = minimumCapacity;
      }};
    StringBuilder.prototype.indexOf_61zpoe$ = function (string) {
      return this.string_0.indexOf(string);
    };
    StringBuilder.prototype.indexOf_bm4lxs$ = function (string, startIndex) {
      return this.string_0.indexOf(string, startIndex);
    };
    StringBuilder.prototype.lastIndexOf_61zpoe$ = function (string) {
      return this.string_0.lastIndexOf(string);
    };
    StringBuilder.prototype.lastIndexOf_bm4lxs$ = function (string, startIndex) {
      if (string.length === 0 && startIndex < 0)
        return -1;
      return this.string_0.lastIndexOf(string, startIndex);
    };
    StringBuilder.prototype.insert_fzusl$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + toString(value) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insert_6t1mh3$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + String.fromCharCode(toBoxedChar(value)) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insert_7u455s$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + concatToString(value) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insert_1u9bqd$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + toString(value) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insert_6t2rgq$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + toString(value) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insert_19mbxw$ = function (index, value) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + value + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.setLength_za3lpa$ = function (newLength) {
      if (newLength < 0) {
        throw IllegalArgumentException_init_0('Negative new length: ' + newLength + '.');
      }if (newLength <= this.length) {
        this.string_0 = this.string_0.substring(0, newLength);
      } else {
        for (var i = this.length; i < newLength; i++) {
          this.string_0 += String.fromCharCode(0);
        }
      }
    };
    StringBuilder.prototype.substring_za3lpa$ = function (startIndex) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(startIndex, this.length);
      return this.string_0.substring(startIndex);
    };
    StringBuilder.prototype.substring_vux9f0$ = function (startIndex, endIndex) {
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, this.length);
      return this.string_0.substring(startIndex, endIndex);
    };
    StringBuilder.prototype.trimToSize = function () {
      if (this._capacity !== undefined) {
        this._capacity = this.length;
      }};
    StringBuilder.prototype.toString = function () {
      return this.string_0;
    };
    StringBuilder.prototype.clear = function () {
      this.string_0 = '';
      return this;
    };
    StringBuilder.prototype.set_6t1mh3$ = function (index, value) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + String.fromCharCode(toBoxedChar(value)) + this.string_0.substring(index + 1 | 0);
    };
    StringBuilder.prototype.setRange_98i29q$ = function (startIndex, endIndex, value) {
      this.checkReplaceRange_0(startIndex, endIndex, this.length);
      this.string_0 = this.string_0.substring(0, startIndex) + value + this.string_0.substring(endIndex);
      return this;
    };
    StringBuilder.prototype.checkReplaceRange_0 = function (startIndex, endIndex, length) {
      if (startIndex < 0 || startIndex > length) {
        throw new IndexOutOfBoundsException('startIndex: ' + startIndex + ', length: ' + length);
      }if (startIndex > endIndex) {
        throw IllegalArgumentException_init_0('startIndex(' + startIndex + ') > endIndex(' + endIndex + ')');
      }};
    StringBuilder.prototype.deleteAt_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + this.string_0.substring(index + 1 | 0);
      return this;
    };
    StringBuilder.prototype.deleteRange_vux9f0$ = function (startIndex, endIndex) {
      this.checkReplaceRange_0(startIndex, endIndex, this.length);
      this.string_0 = this.string_0.substring(0, startIndex) + this.string_0.substring(endIndex);
      return this;
    };
    StringBuilder.prototype.toCharArray_pqkatk$ = function (destination, destinationOffset, startIndex, endIndex) {
      if (destinationOffset === void 0)
        destinationOffset = 0;
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = this.length;
      var tmp$;
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, this.length);
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(destinationOffset, destinationOffset + endIndex - startIndex | 0, destination.length);
      var dstIndex = destinationOffset;
      for (var index = startIndex; index < endIndex; index++) {
        destination[tmp$ = dstIndex, dstIndex = tmp$ + 1 | 0, tmp$] = this.string_0.charCodeAt(index);
      }
    };
    StringBuilder.prototype.appendRange_8chfmy$ = function (value, startIndex, endIndex) {
      this.string_0 += concatToString_0(value, startIndex, endIndex);
      return this;
    };
    StringBuilder.prototype.appendRange_ezbsdh$ = function (value, startIndex, endIndex) {
      var stringCsq = toString(value);
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, stringCsq.length);
      this.string_0 += stringCsq.substring(startIndex, endIndex);
      return this;
    };
    StringBuilder.prototype.insertRange_ar8yzk$ = function (index, value, startIndex, endIndex) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      this.string_0 = this.string_0.substring(0, index) + concatToString_0(value, startIndex, endIndex) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.prototype.insertRange_4ge339$ = function (index, value, startIndex, endIndex) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.length);
      var stringCsq = toString(value);
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, stringCsq.length);
      this.string_0 = this.string_0.substring(0, index) + stringCsq.substring(startIndex, endIndex) + this.string_0.substring(index);
      return this;
    };
    StringBuilder.$metadata$ = {kind: Kind_CLASS, simpleName: 'StringBuilder', interfaces: [CharSequence, Appendable]};
    function StringBuilder_init(capacity, $this) {
      $this = $this || Object.create(StringBuilder.prototype);
      StringBuilder_init_1($this);
      $this._capacity = capacity;
      return $this;
    }
    function StringBuilder_init_0(content, $this) {
      $this = $this || Object.create(StringBuilder.prototype);
      StringBuilder.call($this, content.toString());
      return $this;
    }
    function StringBuilder_init_1($this) {
      $this = $this || Object.create(StringBuilder.prototype);
      StringBuilder.call($this, '');
      return $this;
    }
    var clear_0 = defineInlineFunction('kotlin.kotlin.text.clear_dn5lc7$', function ($receiver) {
      return $receiver.clear();
    });
    var set_0 = defineInlineFunction('kotlin.kotlin.text.set_fgr66m$', function ($receiver, index, value) {
      $receiver.set_6t1mh3$(index, value);
    });
    var setRange = defineInlineFunction('kotlin.kotlin.text.setRange_o6zo9x$', function ($receiver, startIndex, endIndex, value) {
      return $receiver.setRange_98i29q$(startIndex, endIndex, value);
    });
    var deleteAt = defineInlineFunction('kotlin.kotlin.text.deleteAt_pgf5y3$', function ($receiver, index) {
      return $receiver.deleteAt_za3lpa$(index);
    });
    var deleteRange = defineInlineFunction('kotlin.kotlin.text.deleteRange_52xiy5$', function ($receiver, startIndex, endIndex) {
      return $receiver.deleteRange_vux9f0$(startIndex, endIndex);
    });
    var toCharArray_1 = defineInlineFunction('kotlin.kotlin.text.toCharArray_uxry3l$', function ($receiver, destination, destinationOffset, startIndex, endIndex) {
      if (destinationOffset === void 0)
        destinationOffset = 0;
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = $receiver.length;
      $receiver.toCharArray_pqkatk$(destination, destinationOffset, startIndex, endIndex);
    });
    var appendRange = defineInlineFunction('kotlin.kotlin.text.appendRange_tjrg5r$', function ($receiver, value, startIndex, endIndex) {
      return $receiver.appendRange_8chfmy$(value, startIndex, endIndex);
    });
    var appendRange_0 = defineInlineFunction('kotlin.kotlin.text.appendRange_3tn578$', function ($receiver, value, startIndex, endIndex) {
      return $receiver.appendRange_ezbsdh$(value, startIndex, endIndex);
    });
    var insertRange = defineInlineFunction('kotlin.kotlin.text.insertRange_5k1bpj$', function ($receiver, index, value, startIndex, endIndex) {
      return $receiver.insertRange_ar8yzk$(index, value, startIndex, endIndex);
    });
    var insertRange_0 = defineInlineFunction('kotlin.kotlin.text.insertRange_abo1kk$', function ($receiver, index, value, startIndex, endIndex) {
      return $receiver.insertRange_4ge339$(index, value, startIndex, endIndex);
    });
    function isWhitespace($receiver) {
      return matches(String.fromCharCode($receiver), '[\\s\\xA0]');
    }
    var toLowerCase = defineInlineFunction('kotlin.kotlin.text.toLowerCase_myv2d0$', wrapFunction(function () {
      var toChar = Kotlin.toChar;
      return function ($receiver) {
        return toChar(String.fromCharCode($receiver | 0).toLowerCase().charCodeAt(0));
      };
    }));
    var toUpperCase = defineInlineFunction('kotlin.kotlin.text.toUpperCase_myv2d0$', wrapFunction(function () {
      var toChar = Kotlin.toChar;
      return function ($receiver) {
        return toChar(String.fromCharCode($receiver | 0).toUpperCase().charCodeAt(0));
      };
    }));
    function isHighSurrogate($receiver) {
      return (new CharRange(kotlin_js_internal_CharCompanionObject.MIN_HIGH_SURROGATE, kotlin_js_internal_CharCompanionObject.MAX_HIGH_SURROGATE)).contains_mef7kx$($receiver);
    }
    function isLowSurrogate($receiver) {
      return (new CharRange(kotlin_js_internal_CharCompanionObject.MIN_LOW_SURROGATE, kotlin_js_internal_CharCompanionObject.MAX_LOW_SURROGATE)).contains_mef7kx$($receiver);
    }
    function toBoolean($receiver) {
      return equals($receiver.toLowerCase(), 'true');
    }
    function toByte_0($receiver) {
      var tmp$;
      return (tmp$ = toByteOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toByte_1($receiver, radix) {
      var tmp$;
      return (tmp$ = toByteOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toShort_0($receiver) {
      var tmp$;
      return (tmp$ = toShortOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toShort_1($receiver, radix) {
      var tmp$;
      return (tmp$ = toShortOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toInt($receiver) {
      var tmp$;
      return (tmp$ = toIntOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toInt_0($receiver, radix) {
      var tmp$;
      return (tmp$ = toIntOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toLong($receiver) {
      var tmp$;
      return (tmp$ = toLongOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toLong_0($receiver, radix) {
      var tmp$;
      return (tmp$ = toLongOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toDouble($receiver) {
      var $receiver_0 = +$receiver;
      if (isNaN_0($receiver_0) && !isNaN_2($receiver) || ($receiver_0 === 0.0 && isBlank($receiver)))
        numberFormatError($receiver);
      return $receiver_0;
    }
    var toFloat = defineInlineFunction('kotlin.kotlin.text.toFloat_pdl1vz$', wrapFunction(function () {
      var toDouble = _.kotlin.text.toDouble_pdl1vz$;
      return function ($receiver) {
        return toDouble($receiver);
      };
    }));
    function toDoubleOrNull($receiver) {
      var $receiver_0 = +$receiver;
      return !(isNaN_0($receiver_0) && !isNaN_2($receiver) || ($receiver_0 === 0.0 && isBlank($receiver))) ? $receiver_0 : null;
    }
    var toFloatOrNull = defineInlineFunction('kotlin.kotlin.text.toFloatOrNull_pdl1vz$', wrapFunction(function () {
      var toDoubleOrNull = _.kotlin.text.toDoubleOrNull_pdl1vz$;
      return function ($receiver) {
        return toDoubleOrNull($receiver);
      };
    }));
    var toString_1 = defineInlineFunction('kotlin.kotlin.text.toString_798l30$', wrapFunction(function () {
      var toString = _.kotlin.text.toString_dqglrj$;
      return function ($receiver, radix) {
        return toString($receiver, radix);
      };
    }));
    var toString_2 = defineInlineFunction('kotlin.kotlin.text.toString_di2vk2$', wrapFunction(function () {
      var toString = _.kotlin.text.toString_dqglrj$;
      return function ($receiver, radix) {
        return toString($receiver, radix);
      };
    }));
    function toString_3($receiver, radix) {
      return $receiver.toString(checkRadix(radix));
    }
    function isNaN_2($receiver) {
      switch ($receiver.toLowerCase()) {
        case 'nan':
        case '+nan':
        case '-nan':
          return true;
        default:return false;
      }
    }
    function checkRadix(radix) {
      if (!(2 <= radix && radix <= 36)) {
        throw IllegalArgumentException_init_0('radix ' + radix + ' was not in valid range 2..36');
      }return radix;
    }
    function digitOf(char, radix) {
      var tmp$;
      if (char >= 48 && char <= 57)
        tmp$ = char - 48;
      else if (char >= 65 && char <= 90)
        tmp$ = char - 65 + 10 | 0;
      else if (char >= 97 && char <= 122)
        tmp$ = char - 97 + 10 | 0;
      else
        tmp$ = -1;
      var it = tmp$;
      return it >= radix ? -1 : it;
    }
    function RegexOption(name, ordinal, value) {
      Enum.call(this);
      this.value = value;
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function RegexOption_initFields() {
      RegexOption_initFields = function () {
      };
      RegexOption$IGNORE_CASE_instance = new RegexOption('IGNORE_CASE', 0, 'i');
      RegexOption$MULTILINE_instance = new RegexOption('MULTILINE', 1, 'm');
    }
    var RegexOption$IGNORE_CASE_instance;
    function RegexOption$IGNORE_CASE_getInstance() {
      RegexOption_initFields();
      return RegexOption$IGNORE_CASE_instance;
    }
    var RegexOption$MULTILINE_instance;
    function RegexOption$MULTILINE_getInstance() {
      RegexOption_initFields();
      return RegexOption$MULTILINE_instance;
    }
    RegexOption.$metadata$ = {kind: Kind_CLASS, simpleName: 'RegexOption', interfaces: [Enum]};
    function RegexOption$values() {
      return [RegexOption$IGNORE_CASE_getInstance(), RegexOption$MULTILINE_getInstance()];
    }
    RegexOption.values = RegexOption$values;
    function RegexOption$valueOf(name) {
      switch (name) {
        case 'IGNORE_CASE':
          return RegexOption$IGNORE_CASE_getInstance();
        case 'MULTILINE':
          return RegexOption$MULTILINE_getInstance();
        default:throwISE('No enum constant kotlin.text.RegexOption.' + name);
      }
    }
    RegexOption.valueOf_61zpoe$ = RegexOption$valueOf;
    function MatchGroup(value) {
      this.value = value;
    }
    MatchGroup.$metadata$ = {kind: Kind_CLASS, simpleName: 'MatchGroup', interfaces: []};
    MatchGroup.prototype.component1 = function () {
      return this.value;
    };
    MatchGroup.prototype.copy_61zpoe$ = function (value) {
      return new MatchGroup(value === void 0 ? this.value : value);
    };
    MatchGroup.prototype.toString = function () {
      return 'MatchGroup(value=' + Kotlin.toString(this.value) + ')';
    };
    MatchGroup.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.value) | 0;
      return result;
    };
    MatchGroup.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.value, other.value))));
    };
    function Regex(pattern, options) {
      Regex$Companion_getInstance();
      this.pattern = pattern;
      this.options = toSet_8(options);
      var destination = ArrayList_init_0(collectionSizeOrDefault(options, 10));
      var tmp$;
      tmp$ = options.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.value);
      }
      this.nativePattern_0 = new RegExp(pattern, joinToString_8(destination, '') + 'g');
    }
    Regex.prototype.matches_6bul2c$ = function (input) {
      reset(this.nativePattern_0);
      var match = this.nativePattern_0.exec(input.toString());
      return match != null && match.index === 0 && this.nativePattern_0.lastIndex === input.length;
    };
    Regex.prototype.containsMatchIn_6bul2c$ = function (input) {
      reset(this.nativePattern_0);
      return this.nativePattern_0.test(input.toString());
    };
    Regex.prototype.find_905azu$ = function (input, startIndex) {
      if (startIndex === void 0)
        startIndex = 0;
      return findNext(this.nativePattern_0, input.toString(), startIndex);
    };
    function Regex$findAll$lambda(closure$input, closure$startIndex, this$Regex) {
      return function () {
        return this$Regex.find_905azu$(closure$input, closure$startIndex);
      };
    }
    function Regex$findAll$lambda_0(match) {
      return match.next();
    }
    Regex.prototype.findAll_905azu$ = function (input, startIndex) {
      if (startIndex === void 0)
        startIndex = 0;
      return generateSequence_1(Regex$findAll$lambda(input, startIndex, this), Regex$findAll$lambda_0);
    };
    Regex.prototype.matchEntire_6bul2c$ = function (input) {
      if (startsWith_1(this.pattern, 94) && endsWith_0(this.pattern, 36))
        return this.find_905azu$(input);
      else
        return (new Regex('^' + trimEnd_2(trimStart_2(this.pattern, Kotlin.charArrayOf(94)), Kotlin.charArrayOf(36)) + '$', this.options)).find_905azu$(input);
    };
    Regex.prototype.replace_x2uqeu$ = function (input, replacement) {
      return input.toString().replace(this.nativePattern_0, replacement);
    };
    Regex.prototype.replace_20wsma$ = defineInlineFunction('kotlin.kotlin.text.Regex.replace_20wsma$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init_za3lpa$;
      var ensureNotNull = Kotlin.ensureNotNull;
      return function (input, transform) {
        var match = this.find_905azu$(input);
        if (match == null)
          return input.toString();
        var lastStart = 0;
        var length = input.length;
        var sb = StringBuilder_init(length);
        do {
          var foundMatch = ensureNotNull(match);
          sb.append_ezbsdh$(input, lastStart, foundMatch.range.start);
          sb.append_gw00v9$(transform(foundMatch));
          lastStart = foundMatch.range.endInclusive + 1 | 0;
          match = foundMatch.next();
        }
         while (lastStart < length && match != null);
        if (lastStart < length) {
          sb.append_ezbsdh$(input, lastStart, length);
        }return sb.toString();
      };
    }));
    Regex.prototype.replaceFirst_x2uqeu$ = function (input, replacement) {
      var $receiver = this.options;
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(item.value);
      }
      var nonGlobalOptions = joinToString_8(destination, '');
      return input.toString().replace(new RegExp(this.pattern, nonGlobalOptions), replacement);
    };
    Regex.prototype.split_905azu$ = function (input, limit) {
      if (limit === void 0)
        limit = 0;
      var tmp$;
      if (!(limit >= 0)) {
        var message = 'Limit must be non-negative, but was ' + limit;
        throw IllegalArgumentException_init_0(message.toString());
      }var it = this.findAll_905azu$(input);
      var matches = limit === 0 ? it : take_9(it, limit - 1 | 0);
      var result = ArrayList_init();
      var lastStart = 0;
      tmp$ = matches.iterator();
      while (tmp$.hasNext()) {
        var match = tmp$.next();
        result.add_11rb$(Kotlin.subSequence(input, lastStart, match.range.start).toString());
        lastStart = match.range.endInclusive + 1 | 0;
      }
      result.add_11rb$(Kotlin.subSequence(input, lastStart, input.length).toString());
      return result;
    };
    Regex.prototype.toString = function () {
      return this.nativePattern_0.toString();
    };
    function Regex$Companion() {
      Regex$Companion_instance = this;
      this.patternEscape_0 = new RegExp('[-\\\\^$*+?.()|[\\]{}]', 'g');
      this.replacementEscape_0 = new RegExp('\\$', 'g');
    }
    Regex$Companion.prototype.fromLiteral_61zpoe$ = function (literal) {
      return Regex_init_0(this.escape_61zpoe$(literal));
    };
    Regex$Companion.prototype.escape_61zpoe$ = function (literal) {
      return literal.replace(this.patternEscape_0, '\\$&');
    };
    Regex$Companion.prototype.escapeReplacement_61zpoe$ = function (literal) {
      return literal.replace(this.replacementEscape_0, '$$$$');
    };
    Regex$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var Regex$Companion_instance = null;
    function Regex$Companion_getInstance() {
      if (Regex$Companion_instance === null) {
        new Regex$Companion();
      }return Regex$Companion_instance;
    }
    Regex.$metadata$ = {kind: Kind_CLASS, simpleName: 'Regex', interfaces: []};
    function Regex_init(pattern, option, $this) {
      $this = $this || Object.create(Regex.prototype);
      Regex.call($this, pattern, setOf(option));
      return $this;
    }
    function Regex_init_0(pattern, $this) {
      $this = $this || Object.create(Regex.prototype);
      Regex.call($this, pattern, emptySet());
      return $this;
    }
    function Regex_0(pattern, option) {
      return new Regex(pattern, setOf(option));
    }
    function Regex_1(pattern) {
      return new Regex(pattern, emptySet());
    }
    function findNext$ObjectLiteral(closure$match, this$findNext, closure$input, closure$range) {
      this.closure$match = closure$match;
      this.this$findNext = this$findNext;
      this.closure$input = closure$input;
      this.closure$range = closure$range;
      this.range_co6b9w$_0 = closure$range;
      this.groups_qcaztb$_0 = new findNext$ObjectLiteral$groups$ObjectLiteral(closure$match);
      this.groupValues__0 = null;
    }
    Object.defineProperty(findNext$ObjectLiteral.prototype, 'range', {get: function () {
      return this.range_co6b9w$_0;
    }});
    Object.defineProperty(findNext$ObjectLiteral.prototype, 'value', {get: function () {
      return ensureNotNull(this.closure$match[0]);
    }});
    Object.defineProperty(findNext$ObjectLiteral.prototype, 'groups', {get: function () {
      return this.groups_qcaztb$_0;
    }});
    function findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral(closure$match) {
      this.closure$match = closure$match;
      AbstractList.call(this);
    }
    Object.defineProperty(findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral.prototype, 'size', {get: function () {
      return this.closure$match.length;
    }});
    findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral.prototype.get_za3lpa$ = function (index) {
      var tmp$;
      return (tmp$ = this.closure$match[index]) != null ? tmp$ : '';
    };
    findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractList]};
    Object.defineProperty(findNext$ObjectLiteral.prototype, 'groupValues', {get: function () {
      if (this.groupValues__0 == null) {
        this.groupValues__0 = new findNext$ObjectLiteral$get_findNext$ObjectLiteral$groupValues$ObjectLiteral(this.closure$match);
      }return ensureNotNull(this.groupValues__0);
    }});
    findNext$ObjectLiteral.prototype.next = function () {
      return findNext(this.this$findNext, this.closure$input, this.closure$range.isEmpty() ? this.closure$range.start + 1 | 0 : this.closure$range.endInclusive + 1 | 0);
    };
    function findNext$ObjectLiteral$groups$ObjectLiteral(closure$match) {
      this.closure$match = closure$match;
      AbstractCollection.call(this);
    }
    Object.defineProperty(findNext$ObjectLiteral$groups$ObjectLiteral.prototype, 'size', {get: function () {
      return this.closure$match.length;
    }});
    function findNext$ObjectLiteral$groups$ObjectLiteral$iterator$lambda(this$) {
      return function (it) {
        return this$.get_za3lpa$(it);
      };
    }
    findNext$ObjectLiteral$groups$ObjectLiteral.prototype.iterator = function () {
      return map_10(asSequence_8(get_indices_12(this)), findNext$ObjectLiteral$groups$ObjectLiteral$iterator$lambda(this)).iterator();
    };
    findNext$ObjectLiteral$groups$ObjectLiteral.prototype.get_za3lpa$ = function (index) {
      var tmp$;
      return (tmp$ = this.closure$match[index]) != null ? new MatchGroup(tmp$) : null;
    };
    findNext$ObjectLiteral$groups$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractCollection, MatchGroupCollection]};
    findNext$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [MatchResult]};
    function findNext($receiver, input, from) {
      $receiver.lastIndex = from;
      var match = $receiver.exec(input);
      if (match == null)
        return null;
      var range = new IntRange(match.index, $receiver.lastIndex - 1 | 0);
      return new findNext$ObjectLiteral(match, $receiver, input, range);
    }
    function Comparator$ObjectLiteral_0(closure$comparison) {
      this.closure$comparison = closure$comparison;
    }
    Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
      return this.closure$comparison(a, b);
    };
    Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
    function String_1(chars) {
      var tmp$;
      var result = '';
      for (tmp$ = 0; tmp$ !== chars.length; ++tmp$) {
        var char = unboxChar(chars[tmp$]);
        result += String.fromCharCode(char);
      }
      return result;
    }
    function String_2(chars, offset, length) {
      var tmp$;
      if (offset < 0 || length < 0 || (chars.length - offset | 0) < length)
        throw new IndexOutOfBoundsException('size: ' + chars.length + '; offset: ' + offset + '; length: ' + length);
      var result = '';
      tmp$ = offset + length | 0;
      for (var index = offset; index < tmp$; index++) {
        result += String.fromCharCode(chars[index]);
      }
      return result;
    }
    function concatToString($receiver) {
      var tmp$;
      var result = '';
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var char = unboxChar($receiver[tmp$]);
        result += String.fromCharCode(char);
      }
      return result;
    }
    function concatToString_0($receiver, startIndex, endIndex) {
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, $receiver.length);
      var result = '';
      for (var index = startIndex; index < endIndex; index++) {
        result += String.fromCharCode($receiver[index]);
      }
      return result;
    }
    function toCharArray$lambda_0(this$toCharArray) {
      return function (it) {
        return toBoxedChar(this$toCharArray.charCodeAt(it));
      };
    }
    function toCharArray_2($receiver) {
      return Kotlin.charArrayF($receiver.length, toCharArray$lambda_0($receiver));
    }
    function toCharArray$lambda_1(closure$startIndex, this$toCharArray) {
      return function (it) {
        return toBoxedChar(this$toCharArray.charCodeAt(closure$startIndex + it | 0));
      };
    }
    function toCharArray_3($receiver, startIndex, endIndex) {
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = $receiver.length;
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, $receiver.length);
      return Kotlin.charArrayF(endIndex - startIndex | 0, toCharArray$lambda_1(startIndex, $receiver));
    }
    function decodeToString($receiver) {
      return decodeUtf8($receiver, 0, $receiver.length, false);
    }
    function decodeToString_0($receiver, startIndex, endIndex, throwOnInvalidSequence) {
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = $receiver.length;
      if (throwOnInvalidSequence === void 0)
        throwOnInvalidSequence = false;
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, $receiver.length);
      return decodeUtf8($receiver, startIndex, endIndex, throwOnInvalidSequence);
    }
    function encodeToByteArray($receiver) {
      return encodeUtf8($receiver, 0, $receiver.length, false);
    }
    function encodeToByteArray_0($receiver, startIndex, endIndex, throwOnInvalidSequence) {
      if (startIndex === void 0)
        startIndex = 0;
      if (endIndex === void 0)
        endIndex = $receiver.length;
      if (throwOnInvalidSequence === void 0)
        throwOnInvalidSequence = false;
      AbstractList$Companion_getInstance().checkBoundsIndexes_cub51b$(startIndex, endIndex, $receiver.length);
      return encodeUtf8($receiver, startIndex, endIndex, throwOnInvalidSequence);
    }
    var toUpperCase_0 = defineInlineFunction('kotlin.kotlin.text.toUpperCase_pdl1vz$', function ($receiver) {
      return $receiver.toUpperCase();
    });
    var toLowerCase_0 = defineInlineFunction('kotlin.kotlin.text.toLowerCase_pdl1vz$', function ($receiver) {
      return $receiver.toLowerCase();
    });
    var nativeIndexOf = defineInlineFunction('kotlin.kotlin.text.nativeIndexOf_qhc31e$', function ($receiver, str, fromIndex) {
      return $receiver.indexOf(str, fromIndex);
    });
    var nativeLastIndexOf = defineInlineFunction('kotlin.kotlin.text.nativeLastIndexOf_qhc31e$', function ($receiver, str, fromIndex) {
      return $receiver.lastIndexOf(str, fromIndex);
    });
    var nativeStartsWith = defineInlineFunction('kotlin.kotlin.text.nativeStartsWith_qhc31e$', function ($receiver, s, position) {
      return $receiver.startsWith(s, position);
    });
    var nativeEndsWith = defineInlineFunction('kotlin.kotlin.text.nativeEndsWith_7azisw$', function ($receiver, s) {
      return $receiver.endsWith(s);
    });
    var substring = defineInlineFunction('kotlin.kotlin.text.substring_6ic1pp$', function ($receiver, startIndex) {
      return $receiver.substring(startIndex);
    });
    var substring_0 = defineInlineFunction('kotlin.kotlin.text.substring_qgyqat$', function ($receiver, startIndex, endIndex) {
      return $receiver.substring(startIndex, endIndex);
    });
    var concat_0 = defineInlineFunction('kotlin.kotlin.text.concat_rjktp$', function ($receiver, str) {
      return $receiver.concat(str);
    });
    var match = defineInlineFunction('kotlin.kotlin.text.match_rjktp$', function ($receiver, regex) {
      return $receiver.match(regex);
    });
    var nativeReplace = defineInlineFunction('kotlin.kotlin.text.nativeReplace_qmc7pb$', function ($receiver, pattern, replacement) {
      return $receiver.replace(pattern, replacement);
    });
    function compareTo($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (ignoreCase) {
        var n1 = $receiver.length;
        var n2 = other.length;
        var min = Math_0.min(n1, n2);
        if (min === 0)
          return n1 - n2 | 0;
        var start = 0;
        while (true) {
          var end = Math_0.min(start + 16 | 0, min);
          var s1 = $receiver.substring(start, end);
          var s2 = other.substring(start, end);
          if (!equals(s1, s2)) {
            s1 = s1.toUpperCase();
            s2 = s2.toUpperCase();
            if (!equals(s1, s2)) {
              s1 = s1.toLowerCase();
              s2 = s2.toLowerCase();
              if (!equals(s1, s2)) {
                return Kotlin.compareTo(s1, s2);
              }}}if (end === min)
            break;
          start = end;
        }
        return n1 - n2 | 0;
      } else {
        return Kotlin.compareTo($receiver, other);
      }
    }
    function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
      return compareTo(a, b, true);
    }
    var STRING_CASE_INSENSITIVE_ORDER;
    function get_CASE_INSENSITIVE_ORDER($receiver) {
      return STRING_CASE_INSENSITIVE_ORDER;
    }
    var nativeIndexOf_0 = defineInlineFunction('kotlin.kotlin.text.nativeIndexOf_p4qy6f$', function ($receiver, ch, fromIndex) {
      return $receiver.indexOf(String.fromCharCode(ch), fromIndex);
    });
    var nativeLastIndexOf_0 = defineInlineFunction('kotlin.kotlin.text.nativeLastIndexOf_p4qy6f$', function ($receiver, ch, fromIndex) {
      return $receiver.lastIndexOf(String.fromCharCode(ch), fromIndex);
    });
    function startsWith($receiver, prefix, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase) {
        return $receiver.startsWith(prefix, 0);
      } else
        return regionMatches($receiver, 0, prefix, 0, prefix.length, ignoreCase);
    }
    function startsWith_0($receiver, prefix, startIndex, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase) {
        return $receiver.startsWith(prefix, startIndex);
      } else
        return regionMatches($receiver, startIndex, prefix, 0, prefix.length, ignoreCase);
    }
    function endsWith($receiver, suffix, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase) {
        return $receiver.endsWith(suffix);
      } else
        return regionMatches($receiver, $receiver.length - suffix.length | 0, suffix, 0, suffix.length, ignoreCase);
    }
    function matches($receiver, regex) {
      var result = $receiver.match(regex);
      return result != null && result.length !== 0;
    }
    function isBlank($receiver) {
      return $receiver.length === 0 || matches(typeof $receiver === 'string' ? $receiver : $receiver.toString(), '^[\\s\\xA0]+$');
    }
    function equals_0($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      var tmp$;
      if ($receiver == null)
        tmp$ = other == null;
      else {
        var tmp$_0;
        if (!ignoreCase)
          tmp$_0 = equals($receiver, other);
        else {
          var tmp$_1 = other != null;
          if (tmp$_1) {
            tmp$_1 = equals($receiver.toLowerCase(), other.toLowerCase());
          }tmp$_0 = tmp$_1;
        }
        tmp$ = tmp$_0;
      }
      return tmp$;
    }
    function regionMatches($receiver, thisOffset, other, otherOffset, length, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return regionMatchesImpl($receiver, thisOffset, other, otherOffset, length, ignoreCase);
    }
    function capitalize($receiver) {
      return $receiver.length > 0 ? $receiver.substring(0, 1).toUpperCase() + $receiver.substring(1) : $receiver;
    }
    function decapitalize($receiver) {
      return $receiver.length > 0 ? $receiver.substring(0, 1).toLowerCase() + $receiver.substring(1) : $receiver;
    }
    function repeat($receiver, n) {
      var tmp$;
      if (!(n >= 0)) {
        var message = "Count 'n' must be non-negative, but was " + n + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }switch (n) {
        case 0:
          tmp$ = '';
          break;
        case 1:
          tmp$ = $receiver.toString();
          break;
        default:var result = '';
          if (!($receiver.length === 0)) {
            var s = $receiver.toString();
            var count = n;
            while (true) {
              if ((count & 1) === 1) {
                result += s;
              }count = count >>> 1;
              if (count === 0) {
                break;
              }s += s;
            }
          }
          return result;
      }
      return tmp$;
    }
    function replace($receiver, oldValue, newValue, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.replace(new RegExp(Regex$Companion_getInstance().escape_61zpoe$(oldValue), ignoreCase ? 'gi' : 'g'), Regex$Companion_getInstance().escapeReplacement_61zpoe$(newValue));
    }
    function replace_0($receiver, oldChar, newChar, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.replace(new RegExp(Regex$Companion_getInstance().escape_61zpoe$(String.fromCharCode(oldChar)), ignoreCase ? 'gi' : 'g'), String.fromCharCode(newChar));
    }
    function replaceFirst($receiver, oldValue, newValue, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.replace(new RegExp(Regex$Companion_getInstance().escape_61zpoe$(oldValue), ignoreCase ? 'i' : ''), Regex$Companion_getInstance().escapeReplacement_61zpoe$(newValue));
    }
    function replaceFirst_0($receiver, oldChar, newChar, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.replace(new RegExp(Regex$Companion_getInstance().escape_61zpoe$(String.fromCharCode(oldChar)), ignoreCase ? 'i' : ''), String.fromCharCode(newChar));
    }
    function malformed(size, index, throwOnMalformed) {
      if (throwOnMalformed)
        throw new CharacterCodingException('Malformed sequence starting at ' + (index - 1 | 0));
      return -size | 0;
    }
    function codePointFromSurrogate(string, high, index, endIndex, throwOnMalformed) {
      if (!(55296 <= high && high <= 56319) || index >= endIndex) {
        return malformed(0, index, throwOnMalformed);
      }var low = string.charCodeAt(index) | 0;
      if (!(56320 <= low && low <= 57343)) {
        return malformed(0, index, throwOnMalformed);
      }return 65536 + ((high & 1023) << 10) | low & 1023;
    }
    function codePointFrom2(bytes, byte1, index, endIndex, throwOnMalformed) {
      if ((byte1 & 30) === 0 || index >= endIndex) {
        return malformed(0, index, throwOnMalformed);
      }var byte2 = bytes[index];
      if ((byte2 & 192) !== 128) {
        return malformed(0, index, throwOnMalformed);
      }return byte1 << 6 ^ byte2 ^ 3968;
    }
    function codePointFrom3(bytes, byte1, index, endIndex, throwOnMalformed) {
      if (index >= endIndex) {
        return malformed(0, index, throwOnMalformed);
      }var byte2 = bytes[index];
      if ((byte1 & 15) === 0) {
        if ((byte2 & 224) !== 160) {
          return malformed(0, index, throwOnMalformed);
        }} else if ((byte1 & 15) === 13) {
        if ((byte2 & 224) !== 128) {
          return malformed(0, index, throwOnMalformed);
        }} else if ((byte2 & 192) !== 128) {
        return malformed(0, index, throwOnMalformed);
      }if ((index + 1 | 0) === endIndex) {
        return malformed(1, index, throwOnMalformed);
      }var byte3 = bytes[index + 1 | 0];
      if ((byte3 & 192) !== 128) {
        return malformed(1, index, throwOnMalformed);
      }return byte1 << 12 ^ byte2 << 6 ^ byte3 ^ -123008;
    }
    function codePointFrom4(bytes, byte1, index, endIndex, throwOnMalformed) {
      if (index >= endIndex) {
        malformed(0, index, throwOnMalformed);
      }var byte2 = bytes[index];
      if ((byte1 & 15) === 0) {
        if ((byte2 & 240) <= 128) {
          return malformed(0, index, throwOnMalformed);
        }} else if ((byte1 & 15) === 4) {
        if ((byte2 & 240) !== 128) {
          return malformed(0, index, throwOnMalformed);
        }} else if ((byte1 & 15) > 4) {
        return malformed(0, index, throwOnMalformed);
      } else if ((byte2 & 192) !== 128) {
        return malformed(0, index, throwOnMalformed);
      }if ((index + 1 | 0) === endIndex) {
        return malformed(1, index, throwOnMalformed);
      }var byte3 = bytes[index + 1 | 0];
      if ((byte3 & 192) !== 128) {
        return malformed(1, index, throwOnMalformed);
      }if ((index + 2 | 0) === endIndex) {
        return malformed(2, index, throwOnMalformed);
      }var byte4 = bytes[index + 2 | 0];
      if ((byte4 & 192) !== 128) {
        return malformed(2, index, throwOnMalformed);
      }return byte1 << 18 ^ byte2 << 12 ^ byte3 << 6 ^ byte4 ^ 3678080;
    }
    var MAX_BYTES_PER_CHAR;
    var REPLACEMENT_BYTE_SEQUENCE;
    function encodeUtf8(string, startIndex, endIndex, throwOnMalformed) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12;
      if (!(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }var bytes = new Int8Array((endIndex - startIndex | 0) * 3 | 0);
      var byteIndex = 0;
      var charIndex = startIndex;
      while (charIndex < endIndex) {
        var code = string.charCodeAt((tmp$ = charIndex, charIndex = tmp$ + 1 | 0, tmp$)) | 0;
        if (code < 128) {
          bytes[tmp$_0 = byteIndex, byteIndex = tmp$_0 + 1 | 0, tmp$_0] = toByte(code);
        } else if (code < 2048) {
          bytes[tmp$_1 = byteIndex, byteIndex = tmp$_1 + 1 | 0, tmp$_1] = toByte(code >> 6 | 192);
          bytes[tmp$_2 = byteIndex, byteIndex = tmp$_2 + 1 | 0, tmp$_2] = toByte(code & 63 | 128);
        } else if (code < 55296 || code >= 57344) {
          bytes[tmp$_3 = byteIndex, byteIndex = tmp$_3 + 1 | 0, tmp$_3] = toByte(code >> 12 | 224);
          bytes[tmp$_4 = byteIndex, byteIndex = tmp$_4 + 1 | 0, tmp$_4] = toByte(code >> 6 & 63 | 128);
          bytes[tmp$_5 = byteIndex, byteIndex = tmp$_5 + 1 | 0, tmp$_5] = toByte(code & 63 | 128);
        } else {
          var codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed);
          if (codePoint <= 0) {
            bytes[tmp$_6 = byteIndex, byteIndex = tmp$_6 + 1 | 0, tmp$_6] = REPLACEMENT_BYTE_SEQUENCE[0];
            bytes[tmp$_7 = byteIndex, byteIndex = tmp$_7 + 1 | 0, tmp$_7] = REPLACEMENT_BYTE_SEQUENCE[1];
            bytes[tmp$_8 = byteIndex, byteIndex = tmp$_8 + 1 | 0, tmp$_8] = REPLACEMENT_BYTE_SEQUENCE[2];
          } else {
            bytes[tmp$_9 = byteIndex, byteIndex = tmp$_9 + 1 | 0, tmp$_9] = toByte(codePoint >> 18 | 240);
            bytes[tmp$_10 = byteIndex, byteIndex = tmp$_10 + 1 | 0, tmp$_10] = toByte(codePoint >> 12 & 63 | 128);
            bytes[tmp$_11 = byteIndex, byteIndex = tmp$_11 + 1 | 0, tmp$_11] = toByte(codePoint >> 6 & 63 | 128);
            bytes[tmp$_12 = byteIndex, byteIndex = tmp$_12 + 1 | 0, tmp$_12] = toByte(codePoint & 63 | 128);
            charIndex = charIndex + 1 | 0;
          }
        }
      }
      return bytes.length === byteIndex ? bytes : copyOf_16(bytes, byteIndex);
    }
    var REPLACEMENT_CHAR;
    function decodeUtf8(bytes, startIndex, endIndex, throwOnMalformed) {
      var tmp$;
      if (!(startIndex >= 0 && endIndex <= bytes.length && startIndex <= endIndex)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }var byteIndex = startIndex;
      var stringBuilder = StringBuilder_init_1();
      while (byteIndex < endIndex) {
        var byte = bytes[tmp$ = byteIndex, byteIndex = tmp$ + 1 | 0, tmp$];
        if (byte >= 0)
          stringBuilder.append_s8itvh$(toChar(byte));
        else if (byte >> 5 === -2) {
          var code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed);
          if (code <= 0) {
            stringBuilder.append_s8itvh$(REPLACEMENT_CHAR);
            byteIndex = byteIndex + (-code | 0) | 0;
          } else {
            stringBuilder.append_s8itvh$(toChar(code));
            byteIndex = byteIndex + 1 | 0;
          }
        } else if (byte >> 4 === -2) {
          var code_0 = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed);
          if (code_0 <= 0) {
            stringBuilder.append_s8itvh$(REPLACEMENT_CHAR);
            byteIndex = byteIndex + (-code_0 | 0) | 0;
          } else {
            stringBuilder.append_s8itvh$(toChar(code_0));
            byteIndex = byteIndex + 2 | 0;
          }
        } else if (byte >> 3 === -2) {
          var code_1 = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed);
          if (code_1 <= 0) {
            stringBuilder.append_s8itvh$(REPLACEMENT_CHAR);
            byteIndex = byteIndex + (-code_1 | 0) | 0;
          } else {
            var high = code_1 - 65536 >> 10 | 55296;
            var low = code_1 & 1023 | 56320;
            stringBuilder.append_s8itvh$(toChar(high));
            stringBuilder.append_s8itvh$(toChar(low));
            byteIndex = byteIndex + 3 | 0;
          }
        } else {
          malformed(0, byteIndex, throwOnMalformed);
          stringBuilder.append_s8itvh$(REPLACEMENT_CHAR);
        }
      }
      return stringBuilder.toString();
    }
    function DurationUnit(name, ordinal, scale) {
      Enum.call(this);
      this.scale_8be2vx$ = scale;
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function DurationUnit_initFields() {
      DurationUnit_initFields = function () {
      };
      DurationUnit$NANOSECONDS_instance = new DurationUnit('NANOSECONDS', 0, 1.0);
      DurationUnit$MICROSECONDS_instance = new DurationUnit('MICROSECONDS', 1, 1000.0);
      DurationUnit$MILLISECONDS_instance = new DurationUnit('MILLISECONDS', 2, 1000000.0);
      DurationUnit$SECONDS_instance = new DurationUnit('SECONDS', 3, 1.0E9);
      DurationUnit$MINUTES_instance = new DurationUnit('MINUTES', 4, 6.0E10);
      DurationUnit$HOURS_instance = new DurationUnit('HOURS', 5, 3.6E12);
      DurationUnit$DAYS_instance = new DurationUnit('DAYS', 6, 8.64E13);
    }
    var DurationUnit$NANOSECONDS_instance;
    function DurationUnit$NANOSECONDS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$NANOSECONDS_instance;
    }
    var DurationUnit$MICROSECONDS_instance;
    function DurationUnit$MICROSECONDS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$MICROSECONDS_instance;
    }
    var DurationUnit$MILLISECONDS_instance;
    function DurationUnit$MILLISECONDS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$MILLISECONDS_instance;
    }
    var DurationUnit$SECONDS_instance;
    function DurationUnit$SECONDS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$SECONDS_instance;
    }
    var DurationUnit$MINUTES_instance;
    function DurationUnit$MINUTES_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$MINUTES_instance;
    }
    var DurationUnit$HOURS_instance;
    function DurationUnit$HOURS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$HOURS_instance;
    }
    var DurationUnit$DAYS_instance;
    function DurationUnit$DAYS_getInstance() {
      DurationUnit_initFields();
      return DurationUnit$DAYS_instance;
    }
    DurationUnit.$metadata$ = {kind: Kind_CLASS, simpleName: 'DurationUnit', interfaces: [Enum]};
    function DurationUnit$values() {
      return [DurationUnit$NANOSECONDS_getInstance(), DurationUnit$MICROSECONDS_getInstance(), DurationUnit$MILLISECONDS_getInstance(), DurationUnit$SECONDS_getInstance(), DurationUnit$MINUTES_getInstance(), DurationUnit$HOURS_getInstance(), DurationUnit$DAYS_getInstance()];
    }
    DurationUnit.values = DurationUnit$values;
    function DurationUnit$valueOf(name) {
      switch (name) {
        case 'NANOSECONDS':
          return DurationUnit$NANOSECONDS_getInstance();
        case 'MICROSECONDS':
          return DurationUnit$MICROSECONDS_getInstance();
        case 'MILLISECONDS':
          return DurationUnit$MILLISECONDS_getInstance();
        case 'SECONDS':
          return DurationUnit$SECONDS_getInstance();
        case 'MINUTES':
          return DurationUnit$MINUTES_getInstance();
        case 'HOURS':
          return DurationUnit$HOURS_getInstance();
        case 'DAYS':
          return DurationUnit$DAYS_getInstance();
        default:throwISE('No enum constant kotlin.time.DurationUnit.' + name);
      }
    }
    DurationUnit.valueOf_61zpoe$ = DurationUnit$valueOf;
    function convertDurationUnit(value, sourceUnit, targetUnit) {
      var tmp$;
      var sourceCompareTarget = Kotlin.compareTo(sourceUnit.scale_8be2vx$, targetUnit.scale_8be2vx$);
      if (sourceCompareTarget > 0)
        tmp$ = value * (sourceUnit.scale_8be2vx$ / targetUnit.scale_8be2vx$);
      else if (sourceCompareTarget < 0)
        tmp$ = value / (targetUnit.scale_8be2vx$ / sourceUnit.scale_8be2vx$);
      else
        tmp$ = value;
      return tmp$;
    }
    function MonotonicTimeSource() {
      MonotonicTimeSource_instance = this;
      var tmp$, tmp$_0, tmp$_1;
      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
      this.actualSource_0 = isNode ? new HrTimeSource(process) : (tmp$_1 = (tmp$_0 = (tmp$ = self) != null ? tmp$.performance : null) != null ? new PerformanceTimeSource(tmp$_0) : null) != null ? tmp$_1 : DateNowTimeSource_getInstance();
    }
    MonotonicTimeSource.prototype.markNow = function () {
      return this.actualSource_0.markNow();
    };
    MonotonicTimeSource.$metadata$ = {kind: Kind_OBJECT, simpleName: 'MonotonicTimeSource', interfaces: [TimeSource]};
    var MonotonicTimeSource_instance = null;
    function MonotonicTimeSource_getInstance() {
      if (MonotonicTimeSource_instance === null) {
        new MonotonicTimeSource();
      }return MonotonicTimeSource_instance;
    }
    function HrTimeSource(process) {
      this.process = process;
    }
    function HrTimeSource$markNow$ObjectLiteral(this$HrTimeSource) {
      this.this$HrTimeSource = this$HrTimeSource;
      TimeMark.call(this);
      this.startedAt = this$HrTimeSource.process.hrtime();
    }
    HrTimeSource$markNow$ObjectLiteral.prototype.elapsedNow = function () {
      var f = this.this$HrTimeSource.process.hrtime(this.startedAt);
      var seconds = f[0];
      var nanos = f[1];
      return get_seconds_1(seconds).plus_cgako$(get_nanoseconds_1(nanos));
    };
    HrTimeSource$markNow$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [TimeMark]};
    HrTimeSource.prototype.markNow = function () {
      return new HrTimeSource$markNow$ObjectLiteral(this);
    };
    HrTimeSource.prototype.toString = function () {
      return 'TimeSource(process.hrtime())';
    };
    HrTimeSource.$metadata$ = {kind: Kind_CLASS, simpleName: 'HrTimeSource', interfaces: [TimeSource]};
    function PerformanceTimeSource(performance) {
      AbstractDoubleTimeSource.call(this, DurationUnit$MILLISECONDS_getInstance());
      this.performance = performance;
    }
    PerformanceTimeSource.prototype.read = function () {
      return this.performance.now();
    };
    PerformanceTimeSource.prototype.toString = function () {
      return 'TimeSource(self.performance.now())';
    };
    PerformanceTimeSource.$metadata$ = {kind: Kind_CLASS, simpleName: 'PerformanceTimeSource', interfaces: [AbstractDoubleTimeSource]};
    function DateNowTimeSource() {
      DateNowTimeSource_instance = this;
      AbstractDoubleTimeSource.call(this, DurationUnit$MILLISECONDS_getInstance());
    }
    DateNowTimeSource.prototype.read = function () {
      return Date.now();
    };
    DateNowTimeSource.prototype.toString = function () {
      return 'TimeSource(Date.now())';
    };
    DateNowTimeSource.$metadata$ = {kind: Kind_OBJECT, simpleName: 'DateNowTimeSource', interfaces: [AbstractDoubleTimeSource]};
    var DateNowTimeSource_instance = null;
    function DateNowTimeSource_getInstance() {
      if (DateNowTimeSource_instance === null) {
        new DateNowTimeSource();
      }return DateNowTimeSource_instance;
    }
    function formatToExactDecimals(value, decimals) {
      var tmp$;
      if (decimals === 0) {
        tmp$ = value;
      } else {
        var pow = Math_0.pow(10.0, decimals);
        tmp$ = Math.round(Math_0.abs(value) * pow) / pow * Math_0.sign(value);
      }
      var rounded = tmp$;
      return rounded.toFixed(decimals);
    }
    function formatUpToDecimals(value, decimals) {
      return value.toLocaleString('en-us', json([to('maximumFractionDigits', decimals)]));
    }
    function formatScientific(value) {
      return value.toExponential(2);
    }
    function get_as_($receiver) {
      return $receiver.as;
    }
    function set_as_($receiver, value) {
      $receiver.as = value;
    }
    function get_is_($receiver) {
      return $receiver.is;
    }
    function set_is_($receiver, value) {
      $receiver.is = value;
    }
    var WebGLContextAttributes = defineInlineFunction('kotlin.org.khronos.webgl.WebGLContextAttributes_2tn698$', function (alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, preferLowPowerToHighPerformance, failIfMajorPerformanceCaveat) {
      if (alpha === void 0)
        alpha = true;
      if (depth === void 0)
        depth = true;
      if (stencil === void 0)
        stencil = false;
      if (antialias === void 0)
        antialias = true;
      if (premultipliedAlpha === void 0)
        premultipliedAlpha = true;
      if (preserveDrawingBuffer === void 0)
        preserveDrawingBuffer = false;
      if (preferLowPowerToHighPerformance === void 0)
        preferLowPowerToHighPerformance = false;
      if (failIfMajorPerformanceCaveat === void 0)
        failIfMajorPerformanceCaveat = false;
      var o = {};
      o['alpha'] = alpha;
      o['depth'] = depth;
      o['stencil'] = stencil;
      o['antialias'] = antialias;
      o['premultipliedAlpha'] = premultipliedAlpha;
      o['preserveDrawingBuffer'] = preserveDrawingBuffer;
      o['preferLowPowerToHighPerformance'] = preferLowPowerToHighPerformance;
      o['failIfMajorPerformanceCaveat'] = failIfMajorPerformanceCaveat;
      return o;
    });
    var WebGLContextEventInit = defineInlineFunction('kotlin.org.khronos.webgl.WebGLContextEventInit_cndsqx$', function (statusMessage, bubbles, cancelable, composed) {
      if (statusMessage === void 0)
        statusMessage = '';
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['statusMessage'] = statusMessage;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_1 = defineInlineFunction('kotlin.org.khronos.webgl.get_xri1zq$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_1 = defineInlineFunction('kotlin.org.khronos.webgl.set_wq71gh$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_2 = defineInlineFunction('kotlin.org.khronos.webgl.get_9zp3y9$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_2 = defineInlineFunction('kotlin.org.khronos.webgl.set_amemmi$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_3 = defineInlineFunction('kotlin.org.khronos.webgl.get_2joiyx$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_3 = defineInlineFunction('kotlin.org.khronos.webgl.set_ttcilq$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_4 = defineInlineFunction('kotlin.org.khronos.webgl.get_cwlqq1$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_4 = defineInlineFunction('kotlin.org.khronos.webgl.set_3szanw$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_5 = defineInlineFunction('kotlin.org.khronos.webgl.get_vhpjqk$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_5 = defineInlineFunction('kotlin.org.khronos.webgl.set_vhgf5b$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_6 = defineInlineFunction('kotlin.org.khronos.webgl.get_6ngfjl$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_6 = defineInlineFunction('kotlin.org.khronos.webgl.set_yyuw59$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_7 = defineInlineFunction('kotlin.org.khronos.webgl.get_jzcbyy$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_7 = defineInlineFunction('kotlin.org.khronos.webgl.set_7aci94$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_8 = defineInlineFunction('kotlin.org.khronos.webgl.get_vvlk2q$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_8 = defineInlineFunction('kotlin.org.khronos.webgl.set_rpd3xf$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var get_9 = defineInlineFunction('kotlin.org.khronos.webgl.get_yg2kxp$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_9 = defineInlineFunction('kotlin.org.khronos.webgl.set_ogqgs1$', function ($receiver, index, value) {
      $receiver[index] = value;
    });
    var ClipboardEventInit = defineInlineFunction('kotlin.org.w3c.dom.clipboard.ClipboardEventInit_s22cuj$', function (clipboardData, bubbles, cancelable, composed) {
      if (clipboardData === void 0)
        clipboardData = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['clipboardData'] = clipboardData;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ClipboardPermissionDescriptor = defineInlineFunction('kotlin.org.w3c.dom.clipboard.ClipboardPermissionDescriptor_1v8dbw$', function (allowWithoutGesture) {
      if (allowWithoutGesture === void 0)
        allowWithoutGesture = false;
      var o = {};
      o['allowWithoutGesture'] = allowWithoutGesture;
      return o;
    });
    var get_10 = defineInlineFunction('kotlin.org.w3c.dom.css.get_vcm0yf$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_11 = defineInlineFunction('kotlin.org.w3c.dom.css.get_yovegz$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_12 = defineInlineFunction('kotlin.org.w3c.dom.css.get_nb2c3o$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_13 = defineInlineFunction('kotlin.org.w3c.dom.css.get_hzg8kz$', function ($receiver, index) {
      return $receiver[index];
    });
    var UIEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.UIEventInit_b3va2d$', function (view, detail, bubbles, cancelable, composed) {
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var FocusEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.FocusEventInit_4fuajv$', function (relatedTarget, view, detail, bubbles, cancelable, composed) {
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['relatedTarget'] = relatedTarget;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var MouseEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.MouseEventInit_9obtc4$', function (screenX, screenY, clientX, clientY, button, buttons, relatedTarget, region, ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (screenX === void 0)
        screenX = 0;
      if (screenY === void 0)
        screenY = 0;
      if (clientX === void 0)
        clientX = 0;
      if (clientY === void 0)
        clientY = 0;
      if (button === void 0)
        button = 0;
      if (buttons === void 0)
        buttons = 0;
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (region === void 0)
        region = null;
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['screenX'] = screenX;
      o['screenY'] = screenY;
      o['clientX'] = clientX;
      o['clientY'] = clientY;
      o['button'] = button;
      o['buttons'] = buttons;
      o['relatedTarget'] = relatedTarget;
      o['region'] = region;
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var EventModifierInit = defineInlineFunction('kotlin.org.w3c.dom.events.EventModifierInit_d8w15x$', function (ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var WheelEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.WheelEventInit_s3o9pa$', function (deltaX, deltaY, deltaZ, deltaMode, screenX, screenY, clientX, clientY, button, buttons, relatedTarget, region, ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (deltaX === void 0)
        deltaX = 0.0;
      if (deltaY === void 0)
        deltaY = 0.0;
      if (deltaZ === void 0)
        deltaZ = 0.0;
      if (deltaMode === void 0)
        deltaMode = 0;
      if (screenX === void 0)
        screenX = 0;
      if (screenY === void 0)
        screenY = 0;
      if (clientX === void 0)
        clientX = 0;
      if (clientY === void 0)
        clientY = 0;
      if (button === void 0)
        button = 0;
      if (buttons === void 0)
        buttons = 0;
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (region === void 0)
        region = null;
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['deltaX'] = deltaX;
      o['deltaY'] = deltaY;
      o['deltaZ'] = deltaZ;
      o['deltaMode'] = deltaMode;
      o['screenX'] = screenX;
      o['screenY'] = screenY;
      o['clientX'] = clientX;
      o['clientY'] = clientY;
      o['button'] = button;
      o['buttons'] = buttons;
      o['relatedTarget'] = relatedTarget;
      o['region'] = region;
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var InputEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.InputEventInit_zb3n3s$', function (data, isComposing, view, detail, bubbles, cancelable, composed) {
      if (data === void 0)
        data = '';
      if (isComposing === void 0)
        isComposing = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['data'] = data;
      o['isComposing'] = isComposing;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var KeyboardEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.KeyboardEventInit_f1dyzo$', function (key, code, location, repeat, isComposing, ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (key === void 0)
        key = '';
      if (code === void 0)
        code = '';
      if (location === void 0)
        location = 0;
      if (repeat === void 0)
        repeat = false;
      if (isComposing === void 0)
        isComposing = false;
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['key'] = key;
      o['code'] = code;
      o['location'] = location;
      o['repeat'] = repeat;
      o['isComposing'] = isComposing;
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var CompositionEventInit = defineInlineFunction('kotlin.org.w3c.dom.events.CompositionEventInit_d8ew9s$', function (data, view, detail, bubbles, cancelable, composed) {
      if (data === void 0)
        data = '';
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['data'] = data;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_14 = defineInlineFunction('kotlin.org.w3c.dom.get_zbxcyi$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_15 = defineInlineFunction('kotlin.org.w3c.dom.get_ni19om$', function ($receiver, name) {
      return $receiver[name];
    });
    var set_10 = defineInlineFunction('kotlin.org.w3c.dom.set_hw3ic1$', function ($receiver, index, option) {
      $receiver[index] = option;
    });
    var get_16 = defineInlineFunction('kotlin.org.w3c.dom.get_82muyz$', function ($receiver, name) {
      return $receiver[name];
    });
    var set_11 = defineInlineFunction('kotlin.org.w3c.dom.set_itmgw7$', function ($receiver, name, value) {
      $receiver[name] = value;
    });
    var get_17 = defineInlineFunction('kotlin.org.w3c.dom.get_x9t80x$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_18 = defineInlineFunction('kotlin.org.w3c.dom.get_s80h6u$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_19 = defineInlineFunction('kotlin.org.w3c.dom.get_60td5e$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_20 = defineInlineFunction('kotlin.org.w3c.dom.get_5fk35t$', function ($receiver, index) {
      return $receiver[index];
    });
    var TrackEventInit = defineInlineFunction('kotlin.org.w3c.dom.TrackEventInit_mfyf40$', function (track, bubbles, cancelable, composed) {
      if (track === void 0)
        track = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['track'] = track;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_21 = defineInlineFunction('kotlin.org.w3c.dom.get_o5xz3$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_22 = defineInlineFunction('kotlin.org.w3c.dom.get_ws6i9t$', function ($receiver, name) {
      return $receiver[name];
    });
    var get_23 = defineInlineFunction('kotlin.org.w3c.dom.get_kaa3nr$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_12 = defineInlineFunction('kotlin.org.w3c.dom.set_9jj6cz$', function ($receiver, index, option) {
      $receiver[index] = option;
    });
    var RelatedEventInit = defineInlineFunction('kotlin.org.w3c.dom.RelatedEventInit_j4rtn8$', function (relatedTarget, bubbles, cancelable, composed) {
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['relatedTarget'] = relatedTarget;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var AssignedNodesOptions = defineInlineFunction('kotlin.org.w3c.dom.AssignedNodesOptions_1v8dbw$', function (flatten) {
      if (flatten === void 0)
        flatten = false;
      var o = {};
      o['flatten'] = flatten;
      return o;
    });
    var CanvasRenderingContext2DSettings = defineInlineFunction('kotlin.org.w3c.dom.CanvasRenderingContext2DSettings_1v8dbw$', function (alpha) {
      if (alpha === void 0)
        alpha = true;
      var o = {};
      o['alpha'] = alpha;
      return o;
    });
    var HitRegionOptions = defineInlineFunction('kotlin.org.w3c.dom.HitRegionOptions_6a0gjt$', function (path, fillRule, id, parentID, cursor, control, label, role) {
      if (path === void 0)
        path = null;
      if (fillRule === void 0) {
        fillRule = 'nonzero';
      }if (id === void 0)
        id = '';
      if (parentID === void 0)
        parentID = null;
      if (cursor === void 0)
        cursor = 'inherit';
      if (control === void 0)
        control = null;
      if (label === void 0)
        label = null;
      if (role === void 0)
        role = null;
      var o = {};
      o['path'] = path;
      o['fillRule'] = fillRule;
      o['id'] = id;
      o['parentID'] = parentID;
      o['cursor'] = cursor;
      o['control'] = control;
      o['label'] = label;
      o['role'] = role;
      return o;
    });
    var ImageBitmapRenderingContextSettings = defineInlineFunction('kotlin.org.w3c.dom.ImageBitmapRenderingContextSettings_1v8dbw$', function (alpha) {
      if (alpha === void 0)
        alpha = true;
      var o = {};
      o['alpha'] = alpha;
      return o;
    });
    var ElementDefinitionOptions = defineInlineFunction('kotlin.org.w3c.dom.ElementDefinitionOptions_pdl1vj$', function (extends_0) {
      if (extends_0 === void 0)
        extends_0 = undefined;
      var o = {};
      o['extends'] = extends_0;
      return o;
    });
    var get_24 = defineInlineFunction('kotlin.org.w3c.dom.get_c2gw6m$', function ($receiver, index) {
      return $receiver[index];
    });
    var DragEventInit = defineInlineFunction('kotlin.org.w3c.dom.DragEventInit_srvs6b$', function (dataTransfer, screenX, screenY, clientX, clientY, button, buttons, relatedTarget, region, ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (dataTransfer === void 0)
        dataTransfer = null;
      if (screenX === void 0)
        screenX = 0;
      if (screenY === void 0)
        screenY = 0;
      if (clientX === void 0)
        clientX = 0;
      if (clientY === void 0)
        clientY = 0;
      if (button === void 0)
        button = 0;
      if (buttons === void 0)
        buttons = 0;
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (region === void 0)
        region = null;
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['dataTransfer'] = dataTransfer;
      o['screenX'] = screenX;
      o['screenY'] = screenY;
      o['clientX'] = clientX;
      o['clientY'] = clientY;
      o['button'] = button;
      o['buttons'] = buttons;
      o['relatedTarget'] = relatedTarget;
      o['region'] = region;
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_25 = defineInlineFunction('kotlin.org.w3c.dom.get_ewayf0$', function ($receiver, name) {
      return $receiver[name];
    });
    var PopStateEventInit = defineInlineFunction('kotlin.org.w3c.dom.PopStateEventInit_m0in9k$', function (state, bubbles, cancelable, composed) {
      if (state === void 0)
        state = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['state'] = state;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var HashChangeEventInit = defineInlineFunction('kotlin.org.w3c.dom.HashChangeEventInit_pex3e4$', function (oldURL, newURL, bubbles, cancelable, composed) {
      if (oldURL === void 0)
        oldURL = '';
      if (newURL === void 0)
        newURL = '';
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['oldURL'] = oldURL;
      o['newURL'] = newURL;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var PageTransitionEventInit = defineInlineFunction('kotlin.org.w3c.dom.PageTransitionEventInit_bx6eq4$', function (persisted, bubbles, cancelable, composed) {
      if (persisted === void 0)
        persisted = false;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['persisted'] = persisted;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ErrorEventInit = defineInlineFunction('kotlin.org.w3c.dom.ErrorEventInit_k9ji8a$', function (message, filename, lineno, colno, error, bubbles, cancelable, composed) {
      if (message === void 0)
        message = '';
      if (filename === void 0)
        filename = '';
      if (lineno === void 0)
        lineno = 0;
      if (colno === void 0)
        colno = 0;
      if (error === void 0)
        error = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['message'] = message;
      o['filename'] = filename;
      o['lineno'] = lineno;
      o['colno'] = colno;
      o['error'] = error;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var PromiseRejectionEventInit = defineInlineFunction('kotlin.org.w3c.dom.PromiseRejectionEventInit_jhmgqd$', function (promise, reason, bubbles, cancelable, composed) {
      if (reason === void 0)
        reason = undefined;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['promise'] = promise;
      o['reason'] = reason;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_26 = defineInlineFunction('kotlin.org.w3c.dom.get_l671a0$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_27 = defineInlineFunction('kotlin.org.w3c.dom.get_ldwsk8$', function ($receiver, name) {
      return $receiver[name];
    });
    var get_28 = defineInlineFunction('kotlin.org.w3c.dom.get_iatcyr$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_29 = defineInlineFunction('kotlin.org.w3c.dom.get_usmy71$', function ($receiver, name) {
      return $receiver[name];
    });
    var get_30 = defineInlineFunction('kotlin.org.w3c.dom.get_t3yadb$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_31 = defineInlineFunction('kotlin.org.w3c.dom.get_bempxb$', function ($receiver, name) {
      return $receiver[name];
    });
    var ImageBitmapOptions = defineInlineFunction('kotlin.org.w3c.dom.ImageBitmapOptions_qp88pe$', function (imageOrientation, premultiplyAlpha, colorSpaceConversion, resizeWidth, resizeHeight, resizeQuality) {
      if (imageOrientation === void 0) {
        imageOrientation = 'none';
      }if (premultiplyAlpha === void 0) {
        premultiplyAlpha = 'default';
      }if (colorSpaceConversion === void 0) {
        colorSpaceConversion = 'default';
      }if (resizeWidth === void 0)
        resizeWidth = undefined;
      if (resizeHeight === void 0)
        resizeHeight = undefined;
      if (resizeQuality === void 0) {
        resizeQuality = 'low';
      }var o = {};
      o['imageOrientation'] = imageOrientation;
      o['premultiplyAlpha'] = premultiplyAlpha;
      o['colorSpaceConversion'] = colorSpaceConversion;
      o['resizeWidth'] = resizeWidth;
      o['resizeHeight'] = resizeHeight;
      o['resizeQuality'] = resizeQuality;
      return o;
    });
    var MessageEventInit = defineInlineFunction('kotlin.org.w3c.dom.MessageEventInit_2mzoiy$', function (data, origin, lastEventId, source, ports, bubbles, cancelable, composed) {
      if (data === void 0)
        data = null;
      if (origin === void 0)
        origin = '';
      if (lastEventId === void 0)
        lastEventId = '';
      if (source === void 0)
        source = null;
      if (ports === void 0)
        ports = [];
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['data'] = data;
      o['origin'] = origin;
      o['lastEventId'] = lastEventId;
      o['source'] = source;
      o['ports'] = ports;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var EventSourceInit = defineInlineFunction('kotlin.org.w3c.dom.EventSourceInit_1v8dbw$', function (withCredentials) {
      if (withCredentials === void 0)
        withCredentials = false;
      var o = {};
      o['withCredentials'] = withCredentials;
      return o;
    });
    var CloseEventInit = defineInlineFunction('kotlin.org.w3c.dom.CloseEventInit_wdtuj7$', function (wasClean, code, reason, bubbles, cancelable, composed) {
      if (wasClean === void 0)
        wasClean = false;
      if (code === void 0)
        code = 0;
      if (reason === void 0)
        reason = '';
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['wasClean'] = wasClean;
      o['code'] = code;
      o['reason'] = reason;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var WorkerOptions = defineInlineFunction('kotlin.org.w3c.dom.WorkerOptions_sllxcl$', function (type, credentials) {
      if (type === void 0) {
        type = 'classic';
      }if (credentials === void 0) {
        credentials = 'omit';
      }var o = {};
      o['type'] = type;
      o['credentials'] = credentials;
      return o;
    });
    var get_32 = defineInlineFunction('kotlin.org.w3c.dom.get_bsm031$', function ($receiver, key) {
      return $receiver[key];
    });
    var set_13 = defineInlineFunction('kotlin.org.w3c.dom.set_9wlwlb$', function ($receiver, key, value) {
      $receiver[key] = value;
    });
    var StorageEventInit = defineInlineFunction('kotlin.org.w3c.dom.StorageEventInit_asvzxz$', function (key, oldValue, newValue, url, storageArea, bubbles, cancelable, composed) {
      if (key === void 0)
        key = null;
      if (oldValue === void 0)
        oldValue = null;
      if (newValue === void 0)
        newValue = null;
      if (url === void 0)
        url = '';
      if (storageArea === void 0)
        storageArea = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['key'] = key;
      o['oldValue'] = oldValue;
      o['newValue'] = newValue;
      o['url'] = url;
      o['storageArea'] = storageArea;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var EventInit = defineInlineFunction('kotlin.org.w3c.dom.EventInit_uic7jo$', function (bubbles, cancelable, composed) {
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var CustomEventInit = defineInlineFunction('kotlin.org.w3c.dom.CustomEventInit_m0in9k$', function (detail, bubbles, cancelable, composed) {
      if (detail === void 0)
        detail = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var EventListenerOptions = defineInlineFunction('kotlin.org.w3c.dom.EventListenerOptions_1v8dbw$', function (capture) {
      if (capture === void 0)
        capture = false;
      var o = {};
      o['capture'] = capture;
      return o;
    });
    var AddEventListenerOptions = defineInlineFunction('kotlin.org.w3c.dom.AddEventListenerOptions_uic7jo$', function (passive, once, capture) {
      if (passive === void 0)
        passive = false;
      if (once === void 0)
        once = false;
      if (capture === void 0)
        capture = false;
      var o = {};
      o['passive'] = passive;
      o['once'] = once;
      o['capture'] = capture;
      return o;
    });
    var get_33 = defineInlineFunction('kotlin.org.w3c.dom.get_axj990$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_34 = defineInlineFunction('kotlin.org.w3c.dom.get_l6emzv$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_35 = defineInlineFunction('kotlin.org.w3c.dom.get_kzcjh1$', function ($receiver, name) {
      return $receiver[name];
    });
    var MutationObserverInit = defineInlineFunction('kotlin.org.w3c.dom.MutationObserverInit_c5um2n$', function (childList, attributes, characterData, subtree, attributeOldValue, characterDataOldValue, attributeFilter) {
      if (childList === void 0)
        childList = false;
      if (attributes === void 0)
        attributes = undefined;
      if (characterData === void 0)
        characterData = undefined;
      if (subtree === void 0)
        subtree = false;
      if (attributeOldValue === void 0)
        attributeOldValue = undefined;
      if (characterDataOldValue === void 0)
        characterDataOldValue = undefined;
      if (attributeFilter === void 0)
        attributeFilter = undefined;
      var o = {};
      o['childList'] = childList;
      o['attributes'] = attributes;
      o['characterData'] = characterData;
      o['subtree'] = subtree;
      o['attributeOldValue'] = attributeOldValue;
      o['characterDataOldValue'] = characterDataOldValue;
      o['attributeFilter'] = attributeFilter;
      return o;
    });
    var GetRootNodeOptions = defineInlineFunction('kotlin.org.w3c.dom.GetRootNodeOptions_1v8dbw$', function (composed) {
      if (composed === void 0)
        composed = false;
      var o = {};
      o['composed'] = composed;
      return o;
    });
    var get_36 = defineInlineFunction('kotlin.org.w3c.dom.get_faw09z$', function ($receiver, name) {
      return $receiver[name];
    });
    var ElementCreationOptions = defineInlineFunction('kotlin.org.w3c.dom.ElementCreationOptions_pdl1vj$', function (is) {
      if (is === void 0)
        is = undefined;
      var o = {};
      o['is'] = is;
      return o;
    });
    var ShadowRootInit = defineInlineFunction('kotlin.org.w3c.dom.ShadowRootInit_16lofx$', function (mode) {
      var o = {};
      o['mode'] = mode;
      return o;
    });
    var get_37 = defineInlineFunction('kotlin.org.w3c.dom.get_rjm7cj$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_38 = defineInlineFunction('kotlin.org.w3c.dom.get_oszak3$', function ($receiver, qualifiedName) {
      return $receiver[qualifiedName];
    });
    var get_39 = defineInlineFunction('kotlin.org.w3c.dom.get_o72cm9$', function ($receiver, index) {
      return $receiver[index];
    });
    var DOMPointInit = defineInlineFunction('kotlin.org.w3c.dom.DOMPointInit_rd1tgs$', function (x, y, z, w) {
      if (x === void 0)
        x = 0.0;
      if (y === void 0)
        y = 0.0;
      if (z === void 0)
        z = 0.0;
      if (w === void 0)
        w = 1.0;
      var o = {};
      o['x'] = x;
      o['y'] = y;
      o['z'] = z;
      o['w'] = w;
      return o;
    });
    var DOMRectInit = defineInlineFunction('kotlin.org.w3c.dom.DOMRectInit_rd1tgs$', function (x, y, width, height) {
      if (x === void 0)
        x = 0.0;
      if (y === void 0)
        y = 0.0;
      if (width === void 0)
        width = 0.0;
      if (height === void 0)
        height = 0.0;
      var o = {};
      o['x'] = x;
      o['y'] = y;
      o['width'] = width;
      o['height'] = height;
      return o;
    });
    var get_40 = defineInlineFunction('kotlin.org.w3c.dom.get_p225ue$', function ($receiver, index) {
      return $receiver[index];
    });
    var ScrollOptions = defineInlineFunction('kotlin.org.w3c.dom.ScrollOptions_pa3cpp$', function (behavior) {
      if (behavior === void 0) {
        behavior = 'auto';
      }var o = {};
      o['behavior'] = behavior;
      return o;
    });
    var ScrollToOptions = defineInlineFunction('kotlin.org.w3c.dom.ScrollToOptions_5ufhvn$', function (left, top, behavior) {
      if (left === void 0)
        left = undefined;
      if (top === void 0)
        top = undefined;
      if (behavior === void 0) {
        behavior = 'auto';
      }var o = {};
      o['left'] = left;
      o['top'] = top;
      o['behavior'] = behavior;
      return o;
    });
    var MediaQueryListEventInit = defineInlineFunction('kotlin.org.w3c.dom.MediaQueryListEventInit_vkedzz$', function (media, matches, bubbles, cancelable, composed) {
      if (media === void 0)
        media = '';
      if (matches === void 0)
        matches = false;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['media'] = media;
      o['matches'] = matches;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ScrollIntoViewOptions = defineInlineFunction('kotlin.org.w3c.dom.ScrollIntoViewOptions_2qltkz$', function (block, inline, behavior) {
      if (block === void 0) {
        block = 'center';
      }if (inline === void 0) {
        inline = 'center';
      }if (behavior === void 0) {
        behavior = 'auto';
      }var o = {};
      o['block'] = block;
      o['inline'] = inline;
      o['behavior'] = behavior;
      return o;
    });
    var BoxQuadOptions = defineInlineFunction('kotlin.org.w3c.dom.BoxQuadOptions_tnnyad$', function (box, relativeTo) {
      if (box === void 0) {
        box = 'border';
      }if (relativeTo === void 0)
        relativeTo = undefined;
      var o = {};
      o['box'] = box;
      o['relativeTo'] = relativeTo;
      return o;
    });
    var ConvertCoordinateOptions = defineInlineFunction('kotlin.org.w3c.dom.ConvertCoordinateOptions_8oj3e4$', function (fromBox, toBox) {
      if (fromBox === void 0) {
        fromBox = 'border';
      }if (toBox === void 0) {
        toBox = 'border';
      }var o = {};
      o['fromBox'] = fromBox;
      o['toBox'] = toBox;
      return o;
    });
    var get_41 = defineInlineFunction('kotlin.org.w3c.dom.get_nc7obz$', function ($receiver, index) {
      return $receiver[index];
    });
    var get_LOADING = defineInlineFunction('kotlin.org.w3c.dom.get_LOADING_cuyr1n$', function ($receiver) {
      return 'loading';
    });
    var get_INTERACTIVE = defineInlineFunction('kotlin.org.w3c.dom.get_INTERACTIVE_cuyr1n$', function ($receiver) {
      return 'interactive';
    });
    var get_COMPLETE = defineInlineFunction('kotlin.org.w3c.dom.get_COMPLETE_cuyr1n$', function ($receiver) {
      return 'complete';
    });
    var get_EMPTY = defineInlineFunction('kotlin.org.w3c.dom.get_EMPTY_k3kzzn$', function ($receiver) {
      return '';
    });
    var get_MAYBE = defineInlineFunction('kotlin.org.w3c.dom.get_MAYBE_k3kzzn$', function ($receiver) {
      return 'maybe';
    });
    var get_PROBABLY = defineInlineFunction('kotlin.org.w3c.dom.get_PROBABLY_k3kzzn$', function ($receiver) {
      return 'probably';
    });
    var get_DISABLED = defineInlineFunction('kotlin.org.w3c.dom.get_DISABLED_ygmcel$', function ($receiver) {
      return 'disabled';
    });
    var get_HIDDEN = defineInlineFunction('kotlin.org.w3c.dom.get_HIDDEN_ygmcel$', function ($receiver) {
      return 'hidden';
    });
    var get_SHOWING = defineInlineFunction('kotlin.org.w3c.dom.get_SHOWING_ygmcel$', function ($receiver) {
      return 'showing';
    });
    var get_SUBTITLES = defineInlineFunction('kotlin.org.w3c.dom.get_SUBTITLES_fw7o78$', function ($receiver) {
      return 'subtitles';
    });
    var get_CAPTIONS = defineInlineFunction('kotlin.org.w3c.dom.get_CAPTIONS_fw7o78$', function ($receiver) {
      return 'captions';
    });
    var get_DESCRIPTIONS = defineInlineFunction('kotlin.org.w3c.dom.get_DESCRIPTIONS_fw7o78$', function ($receiver) {
      return 'descriptions';
    });
    var get_CHAPTERS = defineInlineFunction('kotlin.org.w3c.dom.get_CHAPTERS_fw7o78$', function ($receiver) {
      return 'chapters';
    });
    var get_METADATA = defineInlineFunction('kotlin.org.w3c.dom.get_METADATA_fw7o78$', function ($receiver) {
      return 'metadata';
    });
    var get_SELECT = defineInlineFunction('kotlin.org.w3c.dom.get_SELECT_efic67$', function ($receiver) {
      return 'select';
    });
    var get_START = defineInlineFunction('kotlin.org.w3c.dom.get_START_efic67$', function ($receiver) {
      return 'start';
    });
    var get_END = defineInlineFunction('kotlin.org.w3c.dom.get_END_efic67$', function ($receiver) {
      return 'end';
    });
    var get_PRESERVE = defineInlineFunction('kotlin.org.w3c.dom.get_PRESERVE_efic67$', function ($receiver) {
      return 'preserve';
    });
    var get_NONZERO = defineInlineFunction('kotlin.org.w3c.dom.get_NONZERO_mhbikd$', function ($receiver) {
      return 'nonzero';
    });
    var get_EVENODD = defineInlineFunction('kotlin.org.w3c.dom.get_EVENODD_mhbikd$', function ($receiver) {
      return 'evenodd';
    });
    var get_LOW = defineInlineFunction('kotlin.org.w3c.dom.get_LOW_lt2gtk$', function ($receiver) {
      return 'low';
    });
    var get_MEDIUM = defineInlineFunction('kotlin.org.w3c.dom.get_MEDIUM_lt2gtk$', function ($receiver) {
      return 'medium';
    });
    var get_HIGH = defineInlineFunction('kotlin.org.w3c.dom.get_HIGH_lt2gtk$', function ($receiver) {
      return 'high';
    });
    var get_BUTT = defineInlineFunction('kotlin.org.w3c.dom.get_BUTT_w26v20$', function ($receiver) {
      return 'butt';
    });
    var get_ROUND = defineInlineFunction('kotlin.org.w3c.dom.get_ROUND_w26v20$', function ($receiver) {
      return 'round';
    });
    var get_SQUARE = defineInlineFunction('kotlin.org.w3c.dom.get_SQUARE_w26v20$', function ($receiver) {
      return 'square';
    });
    var get_ROUND_0 = defineInlineFunction('kotlin.org.w3c.dom.get_ROUND_1xtghu$', function ($receiver) {
      return 'round';
    });
    var get_BEVEL = defineInlineFunction('kotlin.org.w3c.dom.get_BEVEL_1xtghu$', function ($receiver) {
      return 'bevel';
    });
    var get_MITER = defineInlineFunction('kotlin.org.w3c.dom.get_MITER_1xtghu$', function ($receiver) {
      return 'miter';
    });
    var get_START_0 = defineInlineFunction('kotlin.org.w3c.dom.get_START_hbi5si$', function ($receiver) {
      return 'start';
    });
    var get_END_0 = defineInlineFunction('kotlin.org.w3c.dom.get_END_hbi5si$', function ($receiver) {
      return 'end';
    });
    var get_LEFT = defineInlineFunction('kotlin.org.w3c.dom.get_LEFT_hbi5si$', function ($receiver) {
      return 'left';
    });
    var get_RIGHT = defineInlineFunction('kotlin.org.w3c.dom.get_RIGHT_hbi5si$', function ($receiver) {
      return 'right';
    });
    var get_CENTER = defineInlineFunction('kotlin.org.w3c.dom.get_CENTER_hbi5si$', function ($receiver) {
      return 'center';
    });
    var get_TOP = defineInlineFunction('kotlin.org.w3c.dom.get_TOP_oz2y96$', function ($receiver) {
      return 'top';
    });
    var get_HANGING = defineInlineFunction('kotlin.org.w3c.dom.get_HANGING_oz2y96$', function ($receiver) {
      return 'hanging';
    });
    var get_MIDDLE = defineInlineFunction('kotlin.org.w3c.dom.get_MIDDLE_oz2y96$', function ($receiver) {
      return 'middle';
    });
    var get_ALPHABETIC = defineInlineFunction('kotlin.org.w3c.dom.get_ALPHABETIC_oz2y96$', function ($receiver) {
      return 'alphabetic';
    });
    var get_IDEOGRAPHIC = defineInlineFunction('kotlin.org.w3c.dom.get_IDEOGRAPHIC_oz2y96$', function ($receiver) {
      return 'ideographic';
    });
    var get_BOTTOM = defineInlineFunction('kotlin.org.w3c.dom.get_BOTTOM_oz2y96$', function ($receiver) {
      return 'bottom';
    });
    var get_LTR = defineInlineFunction('kotlin.org.w3c.dom.get_LTR_qxot9j$', function ($receiver) {
      return 'ltr';
    });
    var get_RTL = defineInlineFunction('kotlin.org.w3c.dom.get_RTL_qxot9j$', function ($receiver) {
      return 'rtl';
    });
    var get_INHERIT = defineInlineFunction('kotlin.org.w3c.dom.get_INHERIT_qxot9j$', function ($receiver) {
      return 'inherit';
    });
    var get_AUTO = defineInlineFunction('kotlin.org.w3c.dom.get_AUTO_huqvoj$', function ($receiver) {
      return 'auto';
    });
    var get_MANUAL = defineInlineFunction('kotlin.org.w3c.dom.get_MANUAL_huqvoj$', function ($receiver) {
      return 'manual';
    });
    var get_NONE = defineInlineFunction('kotlin.org.w3c.dom.get_NONE_xgljrz$', function ($receiver) {
      return 'none';
    });
    var get_FLIPY = defineInlineFunction('kotlin.org.w3c.dom.get_FLIPY_xgljrz$', function ($receiver) {
      return 'flipY';
    });
    var get_NONE_0 = defineInlineFunction('kotlin.org.w3c.dom.get_NONE_b5608t$', function ($receiver) {
      return 'none';
    });
    var get_PREMULTIPLY = defineInlineFunction('kotlin.org.w3c.dom.get_PREMULTIPLY_b5608t$', function ($receiver) {
      return 'premultiply';
    });
    var get_DEFAULT = defineInlineFunction('kotlin.org.w3c.dom.get_DEFAULT_b5608t$', function ($receiver) {
      return 'default';
    });
    var get_NONE_1 = defineInlineFunction('kotlin.org.w3c.dom.get_NONE_xqeuit$', function ($receiver) {
      return 'none';
    });
    var get_DEFAULT_0 = defineInlineFunction('kotlin.org.w3c.dom.get_DEFAULT_xqeuit$', function ($receiver) {
      return 'default';
    });
    var get_PIXELATED = defineInlineFunction('kotlin.org.w3c.dom.get_PIXELATED_32fsn1$', function ($receiver) {
      return 'pixelated';
    });
    var get_LOW_0 = defineInlineFunction('kotlin.org.w3c.dom.get_LOW_32fsn1$', function ($receiver) {
      return 'low';
    });
    var get_MEDIUM_0 = defineInlineFunction('kotlin.org.w3c.dom.get_MEDIUM_32fsn1$', function ($receiver) {
      return 'medium';
    });
    var get_HIGH_0 = defineInlineFunction('kotlin.org.w3c.dom.get_HIGH_32fsn1$', function ($receiver) {
      return 'high';
    });
    var get_BLOB = defineInlineFunction('kotlin.org.w3c.dom.get_BLOB_qxle9l$', function ($receiver) {
      return 'blob';
    });
    var get_ARRAYBUFFER = defineInlineFunction('kotlin.org.w3c.dom.get_ARRAYBUFFER_qxle9l$', function ($receiver) {
      return 'arraybuffer';
    });
    var get_CLASSIC = defineInlineFunction('kotlin.org.w3c.dom.get_CLASSIC_xc77to$', function ($receiver) {
      return 'classic';
    });
    var get_MODULE = defineInlineFunction('kotlin.org.w3c.dom.get_MODULE_xc77to$', function ($receiver) {
      return 'module';
    });
    var get_OPEN = defineInlineFunction('kotlin.org.w3c.dom.get_OPEN_knhupb$', function ($receiver) {
      return 'open';
    });
    var get_CLOSED = defineInlineFunction('kotlin.org.w3c.dom.get_CLOSED_knhupb$', function ($receiver) {
      return 'closed';
    });
    var get_AUTO_0 = defineInlineFunction('kotlin.org.w3c.dom.get_AUTO_gi1pud$', function ($receiver) {
      return 'auto';
    });
    var get_INSTANT = defineInlineFunction('kotlin.org.w3c.dom.get_INSTANT_gi1pud$', function ($receiver) {
      return 'instant';
    });
    var get_SMOOTH = defineInlineFunction('kotlin.org.w3c.dom.get_SMOOTH_gi1pud$', function ($receiver) {
      return 'smooth';
    });
    var get_START_1 = defineInlineFunction('kotlin.org.w3c.dom.get_START_ltkif$', function ($receiver) {
      return 'start';
    });
    var get_CENTER_0 = defineInlineFunction('kotlin.org.w3c.dom.get_CENTER_ltkif$', function ($receiver) {
      return 'center';
    });
    var get_END_1 = defineInlineFunction('kotlin.org.w3c.dom.get_END_ltkif$', function ($receiver) {
      return 'end';
    });
    var get_NEAREST = defineInlineFunction('kotlin.org.w3c.dom.get_NEAREST_ltkif$', function ($receiver) {
      return 'nearest';
    });
    var get_MARGIN = defineInlineFunction('kotlin.org.w3c.dom.get_MARGIN_eb1l8y$', function ($receiver) {
      return 'margin';
    });
    var get_BORDER = defineInlineFunction('kotlin.org.w3c.dom.get_BORDER_eb1l8y$', function ($receiver) {
      return 'border';
    });
    var get_PADDING = defineInlineFunction('kotlin.org.w3c.dom.get_PADDING_eb1l8y$', function ($receiver) {
      return 'padding';
    });
    var get_CONTENT = defineInlineFunction('kotlin.org.w3c.dom.get_CONTENT_eb1l8y$', function ($receiver) {
      return 'content';
    });
    var MediaTrackSupportedConstraints = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaTrackSupportedConstraints_ntfy24$', function (width, height, aspectRatio, frameRate, facingMode, resizeMode, volume, sampleRate, sampleSize, echoCancellation, autoGainControl, noiseSuppression, latency, channelCount, deviceId, groupId) {
      if (width === void 0)
        width = true;
      if (height === void 0)
        height = true;
      if (aspectRatio === void 0)
        aspectRatio = true;
      if (frameRate === void 0)
        frameRate = true;
      if (facingMode === void 0)
        facingMode = true;
      if (resizeMode === void 0)
        resizeMode = true;
      if (volume === void 0)
        volume = true;
      if (sampleRate === void 0)
        sampleRate = true;
      if (sampleSize === void 0)
        sampleSize = true;
      if (echoCancellation === void 0)
        echoCancellation = true;
      if (autoGainControl === void 0)
        autoGainControl = true;
      if (noiseSuppression === void 0)
        noiseSuppression = true;
      if (latency === void 0)
        latency = true;
      if (channelCount === void 0)
        channelCount = true;
      if (deviceId === void 0)
        deviceId = true;
      if (groupId === void 0)
        groupId = true;
      var o = {};
      o['width'] = width;
      o['height'] = height;
      o['aspectRatio'] = aspectRatio;
      o['frameRate'] = frameRate;
      o['facingMode'] = facingMode;
      o['resizeMode'] = resizeMode;
      o['volume'] = volume;
      o['sampleRate'] = sampleRate;
      o['sampleSize'] = sampleSize;
      o['echoCancellation'] = echoCancellation;
      o['autoGainControl'] = autoGainControl;
      o['noiseSuppression'] = noiseSuppression;
      o['latency'] = latency;
      o['channelCount'] = channelCount;
      o['deviceId'] = deviceId;
      o['groupId'] = groupId;
      return o;
    });
    var MediaTrackCapabilities = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaTrackCapabilities_61f3zg$', function (width, height, aspectRatio, frameRate, facingMode, resizeMode, volume, sampleRate, sampleSize, echoCancellation, autoGainControl, noiseSuppression, latency, channelCount, deviceId, groupId) {
      if (width === void 0)
        width = undefined;
      if (height === void 0)
        height = undefined;
      if (aspectRatio === void 0)
        aspectRatio = undefined;
      if (frameRate === void 0)
        frameRate = undefined;
      if (facingMode === void 0)
        facingMode = undefined;
      if (resizeMode === void 0)
        resizeMode = undefined;
      if (volume === void 0)
        volume = undefined;
      if (sampleRate === void 0)
        sampleRate = undefined;
      if (sampleSize === void 0)
        sampleSize = undefined;
      if (echoCancellation === void 0)
        echoCancellation = undefined;
      if (autoGainControl === void 0)
        autoGainControl = undefined;
      if (noiseSuppression === void 0)
        noiseSuppression = undefined;
      if (latency === void 0)
        latency = undefined;
      if (channelCount === void 0)
        channelCount = undefined;
      if (deviceId === void 0)
        deviceId = undefined;
      if (groupId === void 0)
        groupId = undefined;
      var o = {};
      o['width'] = width;
      o['height'] = height;
      o['aspectRatio'] = aspectRatio;
      o['frameRate'] = frameRate;
      o['facingMode'] = facingMode;
      o['resizeMode'] = resizeMode;
      o['volume'] = volume;
      o['sampleRate'] = sampleRate;
      o['sampleSize'] = sampleSize;
      o['echoCancellation'] = echoCancellation;
      o['autoGainControl'] = autoGainControl;
      o['noiseSuppression'] = noiseSuppression;
      o['latency'] = latency;
      o['channelCount'] = channelCount;
      o['deviceId'] = deviceId;
      o['groupId'] = groupId;
      return o;
    });
    var MediaTrackConstraints = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaTrackConstraints_hfkjcw$', function (advanced, width, height, aspectRatio, frameRate, facingMode, resizeMode, volume, sampleRate, sampleSize, echoCancellation, autoGainControl, noiseSuppression, latency, channelCount, deviceId, groupId) {
      if (advanced === void 0)
        advanced = undefined;
      if (width === void 0)
        width = undefined;
      if (height === void 0)
        height = undefined;
      if (aspectRatio === void 0)
        aspectRatio = undefined;
      if (frameRate === void 0)
        frameRate = undefined;
      if (facingMode === void 0)
        facingMode = undefined;
      if (resizeMode === void 0)
        resizeMode = undefined;
      if (volume === void 0)
        volume = undefined;
      if (sampleRate === void 0)
        sampleRate = undefined;
      if (sampleSize === void 0)
        sampleSize = undefined;
      if (echoCancellation === void 0)
        echoCancellation = undefined;
      if (autoGainControl === void 0)
        autoGainControl = undefined;
      if (noiseSuppression === void 0)
        noiseSuppression = undefined;
      if (latency === void 0)
        latency = undefined;
      if (channelCount === void 0)
        channelCount = undefined;
      if (deviceId === void 0)
        deviceId = undefined;
      if (groupId === void 0)
        groupId = undefined;
      var o = {};
      o['advanced'] = advanced;
      o['width'] = width;
      o['height'] = height;
      o['aspectRatio'] = aspectRatio;
      o['frameRate'] = frameRate;
      o['facingMode'] = facingMode;
      o['resizeMode'] = resizeMode;
      o['volume'] = volume;
      o['sampleRate'] = sampleRate;
      o['sampleSize'] = sampleSize;
      o['echoCancellation'] = echoCancellation;
      o['autoGainControl'] = autoGainControl;
      o['noiseSuppression'] = noiseSuppression;
      o['latency'] = latency;
      o['channelCount'] = channelCount;
      o['deviceId'] = deviceId;
      o['groupId'] = groupId;
      return o;
    });
    var MediaTrackConstraintSet = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaTrackConstraintSet_cbtu8k$', function (width, height, aspectRatio, frameRate, facingMode, resizeMode, volume, sampleRate, sampleSize, echoCancellation, autoGainControl, noiseSuppression, latency, channelCount, deviceId, groupId) {
      if (width === void 0)
        width = undefined;
      if (height === void 0)
        height = undefined;
      if (aspectRatio === void 0)
        aspectRatio = undefined;
      if (frameRate === void 0)
        frameRate = undefined;
      if (facingMode === void 0)
        facingMode = undefined;
      if (resizeMode === void 0)
        resizeMode = undefined;
      if (volume === void 0)
        volume = undefined;
      if (sampleRate === void 0)
        sampleRate = undefined;
      if (sampleSize === void 0)
        sampleSize = undefined;
      if (echoCancellation === void 0)
        echoCancellation = undefined;
      if (autoGainControl === void 0)
        autoGainControl = undefined;
      if (noiseSuppression === void 0)
        noiseSuppression = undefined;
      if (latency === void 0)
        latency = undefined;
      if (channelCount === void 0)
        channelCount = undefined;
      if (deviceId === void 0)
        deviceId = undefined;
      if (groupId === void 0)
        groupId = undefined;
      var o = {};
      o['width'] = width;
      o['height'] = height;
      o['aspectRatio'] = aspectRatio;
      o['frameRate'] = frameRate;
      o['facingMode'] = facingMode;
      o['resizeMode'] = resizeMode;
      o['volume'] = volume;
      o['sampleRate'] = sampleRate;
      o['sampleSize'] = sampleSize;
      o['echoCancellation'] = echoCancellation;
      o['autoGainControl'] = autoGainControl;
      o['noiseSuppression'] = noiseSuppression;
      o['latency'] = latency;
      o['channelCount'] = channelCount;
      o['deviceId'] = deviceId;
      o['groupId'] = groupId;
      return o;
    });
    var MediaTrackSettings = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaTrackSettings_uaqjjf$', function (width, height, aspectRatio, frameRate, facingMode, resizeMode, volume, sampleRate, sampleSize, echoCancellation, autoGainControl, noiseSuppression, latency, channelCount, deviceId, groupId) {
      if (width === void 0)
        width = undefined;
      if (height === void 0)
        height = undefined;
      if (aspectRatio === void 0)
        aspectRatio = undefined;
      if (frameRate === void 0)
        frameRate = undefined;
      if (facingMode === void 0)
        facingMode = undefined;
      if (resizeMode === void 0)
        resizeMode = undefined;
      if (volume === void 0)
        volume = undefined;
      if (sampleRate === void 0)
        sampleRate = undefined;
      if (sampleSize === void 0)
        sampleSize = undefined;
      if (echoCancellation === void 0)
        echoCancellation = undefined;
      if (autoGainControl === void 0)
        autoGainControl = undefined;
      if (noiseSuppression === void 0)
        noiseSuppression = undefined;
      if (latency === void 0)
        latency = undefined;
      if (channelCount === void 0)
        channelCount = undefined;
      if (deviceId === void 0)
        deviceId = undefined;
      if (groupId === void 0)
        groupId = undefined;
      var o = {};
      o['width'] = width;
      o['height'] = height;
      o['aspectRatio'] = aspectRatio;
      o['frameRate'] = frameRate;
      o['facingMode'] = facingMode;
      o['resizeMode'] = resizeMode;
      o['volume'] = volume;
      o['sampleRate'] = sampleRate;
      o['sampleSize'] = sampleSize;
      o['echoCancellation'] = echoCancellation;
      o['autoGainControl'] = autoGainControl;
      o['noiseSuppression'] = noiseSuppression;
      o['latency'] = latency;
      o['channelCount'] = channelCount;
      o['deviceId'] = deviceId;
      o['groupId'] = groupId;
      return o;
    });
    var MediaStreamTrackEventInit = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaStreamTrackEventInit_echihd$', function (track, bubbles, cancelable, composed) {
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['track'] = track;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var OverconstrainedErrorEventInit = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.OverconstrainedErrorEventInit_3wh255$', function (error, bubbles, cancelable, composed) {
      if (error === void 0)
        error = null;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['error'] = error;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var MediaStreamConstraints = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.MediaStreamConstraints_wn2jw4$', function (video, audio) {
      if (video === void 0)
        video = false;
      if (audio === void 0)
        audio = false;
      var o = {};
      o['video'] = video;
      o['audio'] = audio;
      return o;
    });
    var DoubleRange = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.DoubleRange_jma9l8$', function (max, min) {
      if (max === void 0)
        max = undefined;
      if (min === void 0)
        min = undefined;
      var o = {};
      o['max'] = max;
      o['min'] = min;
      return o;
    });
    var ConstrainDoubleRange = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ConstrainDoubleRange_rd1tgs$', function (exact, ideal, max, min) {
      if (exact === void 0)
        exact = undefined;
      if (ideal === void 0)
        ideal = undefined;
      if (max === void 0)
        max = undefined;
      if (min === void 0)
        min = undefined;
      var o = {};
      o['exact'] = exact;
      o['ideal'] = ideal;
      o['max'] = max;
      o['min'] = min;
      return o;
    });
    var ULongRange = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ULongRange_1g3ugi$', function (max, min) {
      if (max === void 0)
        max = undefined;
      if (min === void 0)
        min = undefined;
      var o = {};
      o['max'] = max;
      o['min'] = min;
      return o;
    });
    var ConstrainULongRange = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ConstrainULongRange_po2tg0$', function (exact, ideal, max, min) {
      if (exact === void 0)
        exact = undefined;
      if (ideal === void 0)
        ideal = undefined;
      if (max === void 0)
        max = undefined;
      if (min === void 0)
        min = undefined;
      var o = {};
      o['exact'] = exact;
      o['ideal'] = ideal;
      o['max'] = max;
      o['min'] = min;
      return o;
    });
    var ConstrainBooleanParameters = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ConstrainBooleanParameters_vhjpus$', function (exact, ideal) {
      if (exact === void 0)
        exact = undefined;
      if (ideal === void 0)
        ideal = undefined;
      var o = {};
      o['exact'] = exact;
      o['ideal'] = ideal;
      return o;
    });
    var ConstrainDOMStringParameters = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ConstrainDOMStringParameters_wn2jw4$', function (exact, ideal) {
      if (exact === void 0)
        exact = undefined;
      if (ideal === void 0)
        ideal = undefined;
      var o = {};
      o['exact'] = exact;
      o['ideal'] = ideal;
      return o;
    });
    var Capabilities = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.Capabilities', function () {
      var o = {};
      return o;
    });
    var Settings = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.Settings', function () {
      var o = {};
      return o;
    });
    var ConstraintSet = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.ConstraintSet', function () {
      var o = {};
      return o;
    });
    var Constraints = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.Constraints_v92fax$', function (advanced) {
      if (advanced === void 0)
        advanced = undefined;
      var o = {};
      o['advanced'] = advanced;
      return o;
    });
    var get_LIVE = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_LIVE_tsyfvu$', function ($receiver) {
      return 'live';
    });
    var get_ENDED = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_ENDED_tsyfvu$', function ($receiver) {
      return 'ended';
    });
    var get_USER = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_USER_ctcynt$', function ($receiver) {
      return 'user';
    });
    var get_ENVIRONMENT = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_ENVIRONMENT_ctcynt$', function ($receiver) {
      return 'environment';
    });
    var get_LEFT_0 = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_LEFT_ctcynt$', function ($receiver) {
      return 'left';
    });
    var get_RIGHT_0 = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_RIGHT_ctcynt$', function ($receiver) {
      return 'right';
    });
    var get_NONE_2 = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_NONE_qdzhpp$', function ($receiver) {
      return 'none';
    });
    var get_CROP_AND_SCALE = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_CROP_AND_SCALE_qdzhpp$', function ($receiver) {
      return 'crop-and-scale';
    });
    var get_AUDIOINPUT = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_AUDIOINPUT_bcgeby$', function ($receiver) {
      return 'audioinput';
    });
    var get_AUDIOOUTPUT = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_AUDIOOUTPUT_bcgeby$', function ($receiver) {
      return 'audiooutput';
    });
    var get_VIDEOINPUT = defineInlineFunction('kotlin.org.w3c.dom.mediacapture.get_VIDEOINPUT_bcgeby$', function ($receiver) {
      return 'videoinput';
    });
    var PointerEventInit = defineInlineFunction('kotlin.org.w3c.dom.pointerevents.PointerEventInit_as1dp9$', function (pointerId, width, height, pressure, tangentialPressure, tiltX, tiltY, twist, pointerType, isPrimary, screenX, screenY, clientX, clientY, button, buttons, relatedTarget, region, ctrlKey, shiftKey, altKey, metaKey, modifierAltGraph, modifierCapsLock, modifierFn, modifierFnLock, modifierHyper, modifierNumLock, modifierScrollLock, modifierSuper, modifierSymbol, modifierSymbolLock, view, detail, bubbles, cancelable, composed) {
      if (pointerId === void 0)
        pointerId = 0;
      if (width === void 0)
        width = 1.0;
      if (height === void 0)
        height = 1.0;
      if (pressure === void 0)
        pressure = 0.0;
      if (tangentialPressure === void 0)
        tangentialPressure = 0.0;
      if (tiltX === void 0)
        tiltX = 0;
      if (tiltY === void 0)
        tiltY = 0;
      if (twist === void 0)
        twist = 0;
      if (pointerType === void 0)
        pointerType = '';
      if (isPrimary === void 0)
        isPrimary = false;
      if (screenX === void 0)
        screenX = 0;
      if (screenY === void 0)
        screenY = 0;
      if (clientX === void 0)
        clientX = 0;
      if (clientY === void 0)
        clientY = 0;
      if (button === void 0)
        button = 0;
      if (buttons === void 0)
        buttons = 0;
      if (relatedTarget === void 0)
        relatedTarget = null;
      if (region === void 0)
        region = null;
      if (ctrlKey === void 0)
        ctrlKey = false;
      if (shiftKey === void 0)
        shiftKey = false;
      if (altKey === void 0)
        altKey = false;
      if (metaKey === void 0)
        metaKey = false;
      if (modifierAltGraph === void 0)
        modifierAltGraph = false;
      if (modifierCapsLock === void 0)
        modifierCapsLock = false;
      if (modifierFn === void 0)
        modifierFn = false;
      if (modifierFnLock === void 0)
        modifierFnLock = false;
      if (modifierHyper === void 0)
        modifierHyper = false;
      if (modifierNumLock === void 0)
        modifierNumLock = false;
      if (modifierScrollLock === void 0)
        modifierScrollLock = false;
      if (modifierSuper === void 0)
        modifierSuper = false;
      if (modifierSymbol === void 0)
        modifierSymbol = false;
      if (modifierSymbolLock === void 0)
        modifierSymbolLock = false;
      if (view === void 0)
        view = null;
      if (detail === void 0)
        detail = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['pointerId'] = pointerId;
      o['width'] = width;
      o['height'] = height;
      o['pressure'] = pressure;
      o['tangentialPressure'] = tangentialPressure;
      o['tiltX'] = tiltX;
      o['tiltY'] = tiltY;
      o['twist'] = twist;
      o['pointerType'] = pointerType;
      o['isPrimary'] = isPrimary;
      o['screenX'] = screenX;
      o['screenY'] = screenY;
      o['clientX'] = clientX;
      o['clientY'] = clientY;
      o['button'] = button;
      o['buttons'] = buttons;
      o['relatedTarget'] = relatedTarget;
      o['region'] = region;
      o['ctrlKey'] = ctrlKey;
      o['shiftKey'] = shiftKey;
      o['altKey'] = altKey;
      o['metaKey'] = metaKey;
      o['modifierAltGraph'] = modifierAltGraph;
      o['modifierCapsLock'] = modifierCapsLock;
      o['modifierFn'] = modifierFn;
      o['modifierFnLock'] = modifierFnLock;
      o['modifierHyper'] = modifierHyper;
      o['modifierNumLock'] = modifierNumLock;
      o['modifierScrollLock'] = modifierScrollLock;
      o['modifierSuper'] = modifierSuper;
      o['modifierSymbol'] = modifierSymbol;
      o['modifierSymbolLock'] = modifierSymbolLock;
      o['view'] = view;
      o['detail'] = detail;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var SVGBoundingBoxOptions = defineInlineFunction('kotlin.org.w3c.dom.svg.SVGBoundingBoxOptions_bx6eq4$', function (fill, stroke, markers, clipped) {
      if (fill === void 0)
        fill = true;
      if (stroke === void 0)
        stroke = false;
      if (markers === void 0)
        markers = false;
      if (clipped === void 0)
        clipped = false;
      var o = {};
      o['fill'] = fill;
      o['stroke'] = stroke;
      o['markers'] = markers;
      o['clipped'] = clipped;
      return o;
    });
    var get_42 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_2fgwj9$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_14 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_xg4o68$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var get_43 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_nujcb1$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_15 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_vul1sp$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var get_44 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_ml6vgw$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_16 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_tsl60p$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var get_45 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_f2nmth$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_17 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_nr97t$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var get_46 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_xcci3g$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_18 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_7s907r$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var get_47 = defineInlineFunction('kotlin.org.w3c.dom.svg.get_r7cbpc$', function ($receiver, index) {
      return $receiver[index];
    });
    var set_19 = defineInlineFunction('kotlin.org.w3c.dom.svg.set_8k1hvb$', function ($receiver, index, newItem) {
      $receiver[index] = newItem;
    });
    var RequestInit = defineInlineFunction('kotlin.org.w3c.fetch.RequestInit_302zsh$', function (method, headers, body, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, window_0) {
      if (method === void 0)
        method = undefined;
      if (headers === void 0)
        headers = undefined;
      if (body === void 0)
        body = undefined;
      if (referrer === void 0)
        referrer = undefined;
      if (referrerPolicy === void 0)
        referrerPolicy = undefined;
      if (mode === void 0)
        mode = undefined;
      if (credentials === void 0)
        credentials = undefined;
      if (cache === void 0)
        cache = undefined;
      if (redirect === void 0)
        redirect = undefined;
      if (integrity === void 0)
        integrity = undefined;
      if (keepalive === void 0)
        keepalive = undefined;
      if (window_0 === void 0)
        window_0 = undefined;
      var o = {};
      o['method'] = method;
      o['headers'] = headers;
      o['body'] = body;
      o['referrer'] = referrer;
      o['referrerPolicy'] = referrerPolicy;
      o['mode'] = mode;
      o['credentials'] = credentials;
      o['cache'] = cache;
      o['redirect'] = redirect;
      o['integrity'] = integrity;
      o['keepalive'] = keepalive;
      o['window'] = window_0;
      return o;
    });
    var ResponseInit = defineInlineFunction('kotlin.org.w3c.fetch.ResponseInit_gk6zn2$', function (status, statusText, headers) {
      if (status === void 0)
        status = 200;
      if (statusText === void 0)
        statusText = 'OK';
      if (headers === void 0)
        headers = undefined;
      var o = {};
      o['status'] = status;
      o['statusText'] = statusText;
      o['headers'] = headers;
      return o;
    });
    var get_EMPTY_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_EMPTY_ih0r03$', function ($receiver) {
      return '';
    });
    var get_AUDIO = defineInlineFunction('kotlin.org.w3c.fetch.get_AUDIO_ih0r03$', function ($receiver) {
      return 'audio';
    });
    var get_FONT = defineInlineFunction('kotlin.org.w3c.fetch.get_FONT_ih0r03$', function ($receiver) {
      return 'font';
    });
    var get_IMAGE = defineInlineFunction('kotlin.org.w3c.fetch.get_IMAGE_ih0r03$', function ($receiver) {
      return 'image';
    });
    var get_SCRIPT = defineInlineFunction('kotlin.org.w3c.fetch.get_SCRIPT_ih0r03$', function ($receiver) {
      return 'script';
    });
    var get_STYLE = defineInlineFunction('kotlin.org.w3c.fetch.get_STYLE_ih0r03$', function ($receiver) {
      return 'style';
    });
    var get_TRACK = defineInlineFunction('kotlin.org.w3c.fetch.get_TRACK_ih0r03$', function ($receiver) {
      return 'track';
    });
    var get_VIDEO = defineInlineFunction('kotlin.org.w3c.fetch.get_VIDEO_ih0r03$', function ($receiver) {
      return 'video';
    });
    var get_EMPTY_1 = defineInlineFunction('kotlin.org.w3c.fetch.get_EMPTY_dgizjn$', function ($receiver) {
      return '';
    });
    var get_DOCUMENT = defineInlineFunction('kotlin.org.w3c.fetch.get_DOCUMENT_dgizjn$', function ($receiver) {
      return 'document';
    });
    var get_EMBED = defineInlineFunction('kotlin.org.w3c.fetch.get_EMBED_dgizjn$', function ($receiver) {
      return 'embed';
    });
    var get_FONT_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_FONT_dgizjn$', function ($receiver) {
      return 'font';
    });
    var get_IMAGE_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_IMAGE_dgizjn$', function ($receiver) {
      return 'image';
    });
    var get_MANIFEST = defineInlineFunction('kotlin.org.w3c.fetch.get_MANIFEST_dgizjn$', function ($receiver) {
      return 'manifest';
    });
    var get_MEDIA = defineInlineFunction('kotlin.org.w3c.fetch.get_MEDIA_dgizjn$', function ($receiver) {
      return 'media';
    });
    var get_OBJECT = defineInlineFunction('kotlin.org.w3c.fetch.get_OBJECT_dgizjn$', function ($receiver) {
      return 'object';
    });
    var get_REPORT = defineInlineFunction('kotlin.org.w3c.fetch.get_REPORT_dgizjn$', function ($receiver) {
      return 'report';
    });
    var get_SCRIPT_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_SCRIPT_dgizjn$', function ($receiver) {
      return 'script';
    });
    var get_SERVICEWORKER = defineInlineFunction('kotlin.org.w3c.fetch.get_SERVICEWORKER_dgizjn$', function ($receiver) {
      return 'serviceworker';
    });
    var get_SHAREDWORKER = defineInlineFunction('kotlin.org.w3c.fetch.get_SHAREDWORKER_dgizjn$', function ($receiver) {
      return 'sharedworker';
    });
    var get_STYLE_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_STYLE_dgizjn$', function ($receiver) {
      return 'style';
    });
    var get_WORKER = defineInlineFunction('kotlin.org.w3c.fetch.get_WORKER_dgizjn$', function ($receiver) {
      return 'worker';
    });
    var get_XSLT = defineInlineFunction('kotlin.org.w3c.fetch.get_XSLT_dgizjn$', function ($receiver) {
      return 'xslt';
    });
    var get_NAVIGATE = defineInlineFunction('kotlin.org.w3c.fetch.get_NAVIGATE_jvdbus$', function ($receiver) {
      return 'navigate';
    });
    var get_SAME_ORIGIN = defineInlineFunction('kotlin.org.w3c.fetch.get_SAME_ORIGIN_jvdbus$', function ($receiver) {
      return 'same-origin';
    });
    var get_NO_CORS = defineInlineFunction('kotlin.org.w3c.fetch.get_NO_CORS_jvdbus$', function ($receiver) {
      return 'no-cors';
    });
    var get_CORS = defineInlineFunction('kotlin.org.w3c.fetch.get_CORS_jvdbus$', function ($receiver) {
      return 'cors';
    });
    var get_OMIT = defineInlineFunction('kotlin.org.w3c.fetch.get_OMIT_yuzaxt$', function ($receiver) {
      return 'omit';
    });
    var get_SAME_ORIGIN_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_SAME_ORIGIN_yuzaxt$', function ($receiver) {
      return 'same-origin';
    });
    var get_INCLUDE = defineInlineFunction('kotlin.org.w3c.fetch.get_INCLUDE_yuzaxt$', function ($receiver) {
      return 'include';
    });
    var get_DEFAULT_1 = defineInlineFunction('kotlin.org.w3c.fetch.get_DEFAULT_iyytcp$', function ($receiver) {
      return 'default';
    });
    var get_NO_STORE = defineInlineFunction('kotlin.org.w3c.fetch.get_NO_STORE_iyytcp$', function ($receiver) {
      return 'no-store';
    });
    var get_RELOAD = defineInlineFunction('kotlin.org.w3c.fetch.get_RELOAD_iyytcp$', function ($receiver) {
      return 'reload';
    });
    var get_NO_CACHE = defineInlineFunction('kotlin.org.w3c.fetch.get_NO_CACHE_iyytcp$', function ($receiver) {
      return 'no-cache';
    });
    var get_FORCE_CACHE = defineInlineFunction('kotlin.org.w3c.fetch.get_FORCE_CACHE_iyytcp$', function ($receiver) {
      return 'force-cache';
    });
    var get_ONLY_IF_CACHED = defineInlineFunction('kotlin.org.w3c.fetch.get_ONLY_IF_CACHED_iyytcp$', function ($receiver) {
      return 'only-if-cached';
    });
    var get_FOLLOW = defineInlineFunction('kotlin.org.w3c.fetch.get_FOLLOW_tow8et$', function ($receiver) {
      return 'follow';
    });
    var get_ERROR = defineInlineFunction('kotlin.org.w3c.fetch.get_ERROR_tow8et$', function ($receiver) {
      return 'error';
    });
    var get_MANUAL_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_MANUAL_tow8et$', function ($receiver) {
      return 'manual';
    });
    var get_BASIC = defineInlineFunction('kotlin.org.w3c.fetch.get_BASIC_1el1vz$', function ($receiver) {
      return 'basic';
    });
    var get_CORS_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_CORS_1el1vz$', function ($receiver) {
      return 'cors';
    });
    var get_DEFAULT_2 = defineInlineFunction('kotlin.org.w3c.fetch.get_DEFAULT_1el1vz$', function ($receiver) {
      return 'default';
    });
    var get_ERROR_0 = defineInlineFunction('kotlin.org.w3c.fetch.get_ERROR_1el1vz$', function ($receiver) {
      return 'error';
    });
    var get_OPAQUE = defineInlineFunction('kotlin.org.w3c.fetch.get_OPAQUE_1el1vz$', function ($receiver) {
      return 'opaque';
    });
    var get_OPAQUEREDIRECT = defineInlineFunction('kotlin.org.w3c.fetch.get_OPAQUEREDIRECT_1el1vz$', function ($receiver) {
      return 'opaqueredirect';
    });
    var BlobPropertyBag = defineInlineFunction('kotlin.org.w3c.files.BlobPropertyBag_pdl1vj$', function (type) {
      if (type === void 0)
        type = '';
      var o = {};
      o['type'] = type;
      return o;
    });
    var FilePropertyBag = defineInlineFunction('kotlin.org.w3c.files.FilePropertyBag_3gd7sg$', function (lastModified, type) {
      if (lastModified === void 0)
        lastModified = undefined;
      if (type === void 0)
        type = '';
      var o = {};
      o['lastModified'] = lastModified;
      o['type'] = type;
      return o;
    });
    var get_48 = defineInlineFunction('kotlin.org.w3c.files.get_frimup$', function ($receiver, index) {
      return $receiver[index];
    });
    var NotificationOptions = defineInlineFunction('kotlin.org.w3c.notifications.NotificationOptions_kxkl36$', function (dir, lang, body, tag, image, icon, badge, sound, vibrate, timestamp, renotify, silent, noscreen, requireInteraction, sticky, data, actions) {
      if (dir === void 0) {
        dir = 'auto';
      }if (lang === void 0)
        lang = '';
      if (body === void 0)
        body = '';
      if (tag === void 0)
        tag = '';
      if (image === void 0)
        image = undefined;
      if (icon === void 0)
        icon = undefined;
      if (badge === void 0)
        badge = undefined;
      if (sound === void 0)
        sound = undefined;
      if (vibrate === void 0)
        vibrate = undefined;
      if (timestamp === void 0)
        timestamp = undefined;
      if (renotify === void 0)
        renotify = false;
      if (silent === void 0)
        silent = false;
      if (noscreen === void 0)
        noscreen = false;
      if (requireInteraction === void 0)
        requireInteraction = false;
      if (sticky === void 0)
        sticky = false;
      if (data === void 0)
        data = null;
      if (actions === void 0)
        actions = [];
      var o = {};
      o['dir'] = dir;
      o['lang'] = lang;
      o['body'] = body;
      o['tag'] = tag;
      o['image'] = image;
      o['icon'] = icon;
      o['badge'] = badge;
      o['sound'] = sound;
      o['vibrate'] = vibrate;
      o['timestamp'] = timestamp;
      o['renotify'] = renotify;
      o['silent'] = silent;
      o['noscreen'] = noscreen;
      o['requireInteraction'] = requireInteraction;
      o['sticky'] = sticky;
      o['data'] = data;
      o['actions'] = actions;
      return o;
    });
    var NotificationAction = defineInlineFunction('kotlin.org.w3c.notifications.NotificationAction_eaqb6n$', function (action, title, icon) {
      if (icon === void 0)
        icon = undefined;
      var o = {};
      o['action'] = action;
      o['title'] = title;
      o['icon'] = icon;
      return o;
    });
    var GetNotificationOptions = defineInlineFunction('kotlin.org.w3c.notifications.GetNotificationOptions_pdl1vj$', function (tag) {
      if (tag === void 0)
        tag = '';
      var o = {};
      o['tag'] = tag;
      return o;
    });
    var NotificationEventInit = defineInlineFunction('kotlin.org.w3c.notifications.NotificationEventInit_wmlth4$', function (notification, action, bubbles, cancelable, composed) {
      if (action === void 0)
        action = '';
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['notification'] = notification;
      o['action'] = action;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_DEFAULT_3 = defineInlineFunction('kotlin.org.w3c.notifications.get_DEFAULT_4wcaio$', function ($receiver) {
      return 'default';
    });
    var get_DENIED = defineInlineFunction('kotlin.org.w3c.notifications.get_DENIED_4wcaio$', function ($receiver) {
      return 'denied';
    });
    var get_GRANTED = defineInlineFunction('kotlin.org.w3c.notifications.get_GRANTED_4wcaio$', function ($receiver) {
      return 'granted';
    });
    var get_AUTO_1 = defineInlineFunction('kotlin.org.w3c.notifications.get_AUTO_6wyje4$', function ($receiver) {
      return 'auto';
    });
    var get_LTR_0 = defineInlineFunction('kotlin.org.w3c.notifications.get_LTR_6wyje4$', function ($receiver) {
      return 'ltr';
    });
    var get_RTL_0 = defineInlineFunction('kotlin.org.w3c.notifications.get_RTL_6wyje4$', function ($receiver) {
      return 'rtl';
    });
    var RegistrationOptions = defineInlineFunction('kotlin.org.w3c.workers.RegistrationOptions_dbr88v$', function (scope, type) {
      if (scope === void 0)
        scope = undefined;
      if (type === void 0) {
        type = 'classic';
      }var o = {};
      o['scope'] = scope;
      o['type'] = type;
      return o;
    });
    var ServiceWorkerMessageEventInit = defineInlineFunction('kotlin.org.w3c.workers.ServiceWorkerMessageEventInit_m1i4wi$', function (data, origin, lastEventId, source, ports, bubbles, cancelable, composed) {
      if (data === void 0)
        data = undefined;
      if (origin === void 0)
        origin = undefined;
      if (lastEventId === void 0)
        lastEventId = undefined;
      if (source === void 0)
        source = undefined;
      if (ports === void 0)
        ports = undefined;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['data'] = data;
      o['origin'] = origin;
      o['lastEventId'] = lastEventId;
      o['source'] = source;
      o['ports'] = ports;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ClientQueryOptions = defineInlineFunction('kotlin.org.w3c.workers.ClientQueryOptions_d3lhiw$', function (includeUncontrolled, type) {
      if (includeUncontrolled === void 0)
        includeUncontrolled = false;
      if (type === void 0) {
        type = 'window';
      }var o = {};
      o['includeUncontrolled'] = includeUncontrolled;
      o['type'] = type;
      return o;
    });
    var ExtendableEventInit = defineInlineFunction('kotlin.org.w3c.workers.ExtendableEventInit_uic7jo$', function (bubbles, cancelable, composed) {
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ForeignFetchOptions = defineInlineFunction('kotlin.org.w3c.workers.ForeignFetchOptions_aye5cc$', function (scopes, origins) {
      var o = {};
      o['scopes'] = scopes;
      o['origins'] = origins;
      return o;
    });
    var FetchEventInit = defineInlineFunction('kotlin.org.w3c.workers.FetchEventInit_bfhkw8$', function (request, clientId, isReload, bubbles, cancelable, composed) {
      if (clientId === void 0)
        clientId = null;
      if (isReload === void 0)
        isReload = false;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['request'] = request;
      o['clientId'] = clientId;
      o['isReload'] = isReload;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ForeignFetchEventInit = defineInlineFunction('kotlin.org.w3c.workers.ForeignFetchEventInit_kdt7mo$', function (request, origin, bubbles, cancelable, composed) {
      if (origin === void 0)
        origin = 'null';
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['request'] = request;
      o['origin'] = origin;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var ForeignFetchResponse = defineInlineFunction('kotlin.org.w3c.workers.ForeignFetchResponse_ikkqih$', function (response, origin, headers) {
      if (origin === void 0)
        origin = undefined;
      if (headers === void 0)
        headers = undefined;
      var o = {};
      o['response'] = response;
      o['origin'] = origin;
      o['headers'] = headers;
      return o;
    });
    var ExtendableMessageEventInit = defineInlineFunction('kotlin.org.w3c.workers.ExtendableMessageEventInit_ud4veo$', function (data, origin, lastEventId, source, ports, bubbles, cancelable, composed) {
      if (data === void 0)
        data = undefined;
      if (origin === void 0)
        origin = undefined;
      if (lastEventId === void 0)
        lastEventId = undefined;
      if (source === void 0)
        source = undefined;
      if (ports === void 0)
        ports = undefined;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['data'] = data;
      o['origin'] = origin;
      o['lastEventId'] = lastEventId;
      o['source'] = source;
      o['ports'] = ports;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var CacheQueryOptions = defineInlineFunction('kotlin.org.w3c.workers.CacheQueryOptions_dh4ton$', function (ignoreSearch, ignoreMethod, ignoreVary, cacheName) {
      if (ignoreSearch === void 0)
        ignoreSearch = false;
      if (ignoreMethod === void 0)
        ignoreMethod = false;
      if (ignoreVary === void 0)
        ignoreVary = false;
      if (cacheName === void 0)
        cacheName = undefined;
      var o = {};
      o['ignoreSearch'] = ignoreSearch;
      o['ignoreMethod'] = ignoreMethod;
      o['ignoreVary'] = ignoreVary;
      o['cacheName'] = cacheName;
      return o;
    });
    var CacheBatchOperation = defineInlineFunction('kotlin.org.w3c.workers.CacheBatchOperation_e4hn3k$', function (type, request, response, options) {
      if (type === void 0)
        type = undefined;
      if (request === void 0)
        request = undefined;
      if (response === void 0)
        response = undefined;
      if (options === void 0)
        options = undefined;
      var o = {};
      o['type'] = type;
      o['request'] = request;
      o['response'] = response;
      o['options'] = options;
      return o;
    });
    var get_INSTALLING = defineInlineFunction('kotlin.org.w3c.workers.get_INSTALLING_7rndk9$', function ($receiver) {
      return 'installing';
    });
    var get_INSTALLED = defineInlineFunction('kotlin.org.w3c.workers.get_INSTALLED_7rndk9$', function ($receiver) {
      return 'installed';
    });
    var get_ACTIVATING = defineInlineFunction('kotlin.org.w3c.workers.get_ACTIVATING_7rndk9$', function ($receiver) {
      return 'activating';
    });
    var get_ACTIVATED = defineInlineFunction('kotlin.org.w3c.workers.get_ACTIVATED_7rndk9$', function ($receiver) {
      return 'activated';
    });
    var get_REDUNDANT = defineInlineFunction('kotlin.org.w3c.workers.get_REDUNDANT_7rndk9$', function ($receiver) {
      return 'redundant';
    });
    var get_AUXILIARY = defineInlineFunction('kotlin.org.w3c.workers.get_AUXILIARY_1foc4s$', function ($receiver) {
      return 'auxiliary';
    });
    var get_TOP_LEVEL = defineInlineFunction('kotlin.org.w3c.workers.get_TOP_LEVEL_1foc4s$', function ($receiver) {
      return 'top-level';
    });
    var get_NESTED = defineInlineFunction('kotlin.org.w3c.workers.get_NESTED_1foc4s$', function ($receiver) {
      return 'nested';
    });
    var get_NONE_3 = defineInlineFunction('kotlin.org.w3c.workers.get_NONE_1foc4s$', function ($receiver) {
      return 'none';
    });
    var get_WINDOW = defineInlineFunction('kotlin.org.w3c.workers.get_WINDOW_jpgnoe$', function ($receiver) {
      return 'window';
    });
    var get_WORKER_0 = defineInlineFunction('kotlin.org.w3c.workers.get_WORKER_jpgnoe$', function ($receiver) {
      return 'worker';
    });
    var get_SHAREDWORKER_0 = defineInlineFunction('kotlin.org.w3c.workers.get_SHAREDWORKER_jpgnoe$', function ($receiver) {
      return 'sharedworker';
    });
    var get_ALL = defineInlineFunction('kotlin.org.w3c.workers.get_ALL_jpgnoe$', function ($receiver) {
      return 'all';
    });
    var ProgressEventInit = defineInlineFunction('kotlin.org.w3c.xhr.ProgressEventInit_yosdck$', function (lengthComputable, loaded, total, bubbles, cancelable, composed) {
      if (lengthComputable === void 0)
        lengthComputable = false;
      if (loaded === void 0)
        loaded = 0;
      if (total === void 0)
        total = 0;
      if (bubbles === void 0)
        bubbles = false;
      if (cancelable === void 0)
        cancelable = false;
      if (composed === void 0)
        composed = false;
      var o = {};
      o['lengthComputable'] = lengthComputable;
      o['loaded'] = loaded;
      o['total'] = total;
      o['bubbles'] = bubbles;
      o['cancelable'] = cancelable;
      o['composed'] = composed;
      return o;
    });
    var get_EMPTY_2 = defineInlineFunction('kotlin.org.w3c.xhr.get_EMPTY_8edqmh$', function ($receiver) {
      return '';
    });
    var get_ARRAYBUFFER_0 = defineInlineFunction('kotlin.org.w3c.xhr.get_ARRAYBUFFER_8edqmh$', function ($receiver) {
      return 'arraybuffer';
    });
    var get_BLOB_0 = defineInlineFunction('kotlin.org.w3c.xhr.get_BLOB_8edqmh$', function ($receiver) {
      return 'blob';
    });
    var get_DOCUMENT_0 = defineInlineFunction('kotlin.org.w3c.xhr.get_DOCUMENT_8edqmh$', function ($receiver) {
      return 'document';
    });
    var get_JSON = defineInlineFunction('kotlin.org.w3c.xhr.get_JSON_8edqmh$', function ($receiver) {
      return 'json';
    });
    var get_TEXT = defineInlineFunction('kotlin.org.w3c.xhr.get_TEXT_8edqmh$', function ($receiver) {
      return 'text';
    });
    function Experimental(level) {
      if (level === void 0)
        level = Experimental$Level$ERROR_getInstance();
      this.level = level;
    }
    function Experimental$Level(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function Experimental$Level_initFields() {
      Experimental$Level_initFields = function () {
      };
      Experimental$Level$WARNING_instance = new Experimental$Level('WARNING', 0);
      Experimental$Level$ERROR_instance = new Experimental$Level('ERROR', 1);
    }
    var Experimental$Level$WARNING_instance;
    function Experimental$Level$WARNING_getInstance() {
      Experimental$Level_initFields();
      return Experimental$Level$WARNING_instance;
    }
    var Experimental$Level$ERROR_instance;
    function Experimental$Level$ERROR_getInstance() {
      Experimental$Level_initFields();
      return Experimental$Level$ERROR_instance;
    }
    Experimental$Level.$metadata$ = {kind: Kind_CLASS, simpleName: 'Level', interfaces: [Enum]};
    function Experimental$Level$values() {
      return [Experimental$Level$WARNING_getInstance(), Experimental$Level$ERROR_getInstance()];
    }
    Experimental$Level.values = Experimental$Level$values;
    function Experimental$Level$valueOf(name) {
      switch (name) {
        case 'WARNING':
          return Experimental$Level$WARNING_getInstance();
        case 'ERROR':
          return Experimental$Level$ERROR_getInstance();
        default:throwISE('No enum constant kotlin.Experimental.Level.' + name);
      }
    }
    Experimental$Level.valueOf_61zpoe$ = Experimental$Level$valueOf;
    Experimental.$metadata$ = {kind: Kind_CLASS, simpleName: 'Experimental', interfaces: [Annotation]};
    function UseExperimental(markerClass) {
      this.markerClass = markerClass;
    }
    UseExperimental.$metadata$ = {kind: Kind_CLASS, simpleName: 'UseExperimental', interfaces: [Annotation]};
    function WasExperimental(markerClass) {
      this.markerClass = markerClass;
    }
    WasExperimental.$metadata$ = {kind: Kind_CLASS, simpleName: 'WasExperimental', interfaces: [Annotation]};
    function ExperimentalStdlibApi() {
    }
    ExperimentalStdlibApi.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalStdlibApi', interfaces: [Annotation]};
    function BuilderInference() {
    }
    BuilderInference.$metadata$ = {kind: Kind_CLASS, simpleName: 'BuilderInference', interfaces: [Annotation]};
    function ExperimentalMultiplatform() {
    }
    ExperimentalMultiplatform.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalMultiplatform', interfaces: [Annotation]};
    function OptionalExpectation() {
    }
    OptionalExpectation.$metadata$ = {kind: Kind_CLASS, simpleName: 'OptionalExpectation', interfaces: [Annotation]};
    function RequiresOptIn(message, level) {
      if (message === void 0)
        message = '';
      if (level === void 0)
        level = RequiresOptIn$Level$ERROR_getInstance();
      this.message = message;
      this.level = level;
    }
    function RequiresOptIn$Level(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function RequiresOptIn$Level_initFields() {
      RequiresOptIn$Level_initFields = function () {
      };
      RequiresOptIn$Level$WARNING_instance = new RequiresOptIn$Level('WARNING', 0);
      RequiresOptIn$Level$ERROR_instance = new RequiresOptIn$Level('ERROR', 1);
    }
    var RequiresOptIn$Level$WARNING_instance;
    function RequiresOptIn$Level$WARNING_getInstance() {
      RequiresOptIn$Level_initFields();
      return RequiresOptIn$Level$WARNING_instance;
    }
    var RequiresOptIn$Level$ERROR_instance;
    function RequiresOptIn$Level$ERROR_getInstance() {
      RequiresOptIn$Level_initFields();
      return RequiresOptIn$Level$ERROR_instance;
    }
    RequiresOptIn$Level.$metadata$ = {kind: Kind_CLASS, simpleName: 'Level', interfaces: [Enum]};
    function RequiresOptIn$Level$values() {
      return [RequiresOptIn$Level$WARNING_getInstance(), RequiresOptIn$Level$ERROR_getInstance()];
    }
    RequiresOptIn$Level.values = RequiresOptIn$Level$values;
    function RequiresOptIn$Level$valueOf(name) {
      switch (name) {
        case 'WARNING':
          return RequiresOptIn$Level$WARNING_getInstance();
        case 'ERROR':
          return RequiresOptIn$Level$ERROR_getInstance();
        default:throwISE('No enum constant kotlin.RequiresOptIn.Level.' + name);
      }
    }
    RequiresOptIn$Level.valueOf_61zpoe$ = RequiresOptIn$Level$valueOf;
    RequiresOptIn.$metadata$ = {kind: Kind_CLASS, simpleName: 'RequiresOptIn', interfaces: [Annotation]};
    function OptIn(markerClass) {
      this.markerClass = markerClass;
    }
    OptIn.$metadata$ = {kind: Kind_CLASS, simpleName: 'OptIn', interfaces: [Annotation]};
    function AbstractCollection() {
    }
    AbstractCollection.prototype.contains_11rb$ = function (element) {
      var any$result;
      any$break: do {
        var tmp$;
        if (Kotlin.isType(this, Collection) && this.isEmpty()) {
          any$result = false;
          break any$break;
        }tmp$ = this.iterator();
        while (tmp$.hasNext()) {
          var element_0 = tmp$.next();
          if (equals(element_0, element)) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      return any$result;
    };
    AbstractCollection.prototype.containsAll_brywnq$ = function (elements) {
      var all$result;
      all$break: do {
        var tmp$;
        if (Kotlin.isType(elements, Collection) && elements.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$ = elements.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!this.contains_11rb$(element)) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    AbstractCollection.prototype.isEmpty = function () {
      return this.size === 0;
    };
    function AbstractCollection$toString$lambda(this$AbstractCollection) {
      return function (it) {
        return it === this$AbstractCollection ? '(this Collection)' : toString(it);
      };
    }
    AbstractCollection.prototype.toString = function () {
      return joinToString_8(this, ', ', '[', ']', void 0, void 0, AbstractCollection$toString$lambda(this));
    };
    AbstractCollection.prototype.toArray = function () {
      return copyToArrayImpl(this);
    };
    AbstractCollection.prototype.toArray_ro6dgy$ = function (array) {
      return copyToArrayImpl_0(this, array);
    };
    AbstractCollection.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractCollection', interfaces: [Collection]};
    function State(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function State_initFields() {
      State_initFields = function () {
      };
      State$Ready_instance = new State('Ready', 0);
      State$NotReady_instance = new State('NotReady', 1);
      State$Done_instance = new State('Done', 2);
      State$Failed_instance = new State('Failed', 3);
    }
    var State$Ready_instance;
    function State$Ready_getInstance() {
      State_initFields();
      return State$Ready_instance;
    }
    var State$NotReady_instance;
    function State$NotReady_getInstance() {
      State_initFields();
      return State$NotReady_instance;
    }
    var State$Done_instance;
    function State$Done_getInstance() {
      State_initFields();
      return State$Done_instance;
    }
    var State$Failed_instance;
    function State$Failed_getInstance() {
      State_initFields();
      return State$Failed_instance;
    }
    State.$metadata$ = {kind: Kind_CLASS, simpleName: 'State', interfaces: [Enum]};
    function State$values() {
      return [State$Ready_getInstance(), State$NotReady_getInstance(), State$Done_getInstance(), State$Failed_getInstance()];
    }
    State.values = State$values;
    function State$valueOf(name) {
      switch (name) {
        case 'Ready':
          return State$Ready_getInstance();
        case 'NotReady':
          return State$NotReady_getInstance();
        case 'Done':
          return State$Done_getInstance();
        case 'Failed':
          return State$Failed_getInstance();
        default:throwISE('No enum constant kotlin.collections.State.' + name);
      }
    }
    State.valueOf_61zpoe$ = State$valueOf;
    function AbstractIterator() {
      this.state_smy23j$_0 = State$NotReady_getInstance();
      this.nextValue_phdh64$_0 = null;
    }
    AbstractIterator.prototype.hasNext = function () {
      var tmp$;
      if (!(this.state_smy23j$_0 !== State$Failed_getInstance())) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }switch (this.state_smy23j$_0.name) {
        case 'Done':
          tmp$ = false;
          break;
        case 'Ready':
          tmp$ = true;
          break;
        default:tmp$ = this.tryToComputeNext_ser32m$_0();
          break;
      }
      return tmp$;
    };
    AbstractIterator.prototype.next = function () {
      var tmp$;
      if (!this.hasNext())
        throw NoSuchElementException_init();
      this.state_smy23j$_0 = State$NotReady_getInstance();
      return (tmp$ = this.nextValue_phdh64$_0) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    AbstractIterator.prototype.tryToComputeNext_ser32m$_0 = function () {
      this.state_smy23j$_0 = State$Failed_getInstance();
      this.computeNext();
      return this.state_smy23j$_0 === State$Ready_getInstance();
    };
    AbstractIterator.prototype.setNext_11rb$ = function (value) {
      this.nextValue_phdh64$_0 = value;
      this.state_smy23j$_0 = State$Ready_getInstance();
    };
    AbstractIterator.prototype.done = function () {
      this.state_smy23j$_0 = State$Done_getInstance();
    };
    AbstractIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractIterator', interfaces: [Iterator]};
    function AbstractList() {
      AbstractList$Companion_getInstance();
      AbstractCollection.call(this);
    }
    AbstractList.prototype.iterator = function () {
      return new AbstractList$IteratorImpl(this);
    };
    AbstractList.prototype.indexOf_11rb$ = function (element) {
      var indexOfFirst$result;
      indexOfFirst$break: do {
        var tmp$;
        var index = 0;
        tmp$ = this.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if (equals(item, element)) {
            indexOfFirst$result = index;
            break indexOfFirst$break;
          }index = index + 1 | 0;
        }
        indexOfFirst$result = -1;
      }
       while (false);
      return indexOfFirst$result;
    };
    AbstractList.prototype.lastIndexOf_11rb$ = function (element) {
      var indexOfLast$result;
      indexOfLast$break: do {
        var iterator = this.listIterator_za3lpa$(this.size);
        while (iterator.hasPrevious()) {
          if (equals(iterator.previous(), element)) {
            indexOfLast$result = iterator.nextIndex();
            break indexOfLast$break;
          }}
        indexOfLast$result = -1;
      }
       while (false);
      return indexOfLast$result;
    };
    AbstractList.prototype.listIterator = function () {
      return new AbstractList$ListIteratorImpl(this, 0);
    };
    AbstractList.prototype.listIterator_za3lpa$ = function (index) {
      return new AbstractList$ListIteratorImpl(this, index);
    };
    AbstractList.prototype.subList_vux9f0$ = function (fromIndex, toIndex) {
      return new AbstractList$SubList(this, fromIndex, toIndex);
    };
    function AbstractList$SubList(list, fromIndex, toIndex) {
      AbstractList.call(this);
      this.list_0 = list;
      this.fromIndex_0 = fromIndex;
      this._size_0 = 0;
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(this.fromIndex_0, toIndex, this.list_0.size);
      this._size_0 = toIndex - this.fromIndex_0 | 0;
    }
    AbstractList$SubList.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this._size_0);
      return this.list_0.get_za3lpa$(this.fromIndex_0 + index | 0);
    };
    Object.defineProperty(AbstractList$SubList.prototype, 'size', {get: function () {
      return this._size_0;
    }});
    AbstractList$SubList.$metadata$ = {kind: Kind_CLASS, simpleName: 'SubList', interfaces: [RandomAccess, AbstractList]};
    AbstractList.prototype.equals = function (other) {
      if (other === this)
        return true;
      if (!Kotlin.isType(other, List))
        return false;
      return AbstractList$Companion_getInstance().orderedEquals_e92ka7$(this, other);
    };
    AbstractList.prototype.hashCode = function () {
      return AbstractList$Companion_getInstance().orderedHashCode_nykoif$(this);
    };
    function AbstractList$IteratorImpl($outer) {
      this.$outer = $outer;
      this.index_0 = 0;
    }
    AbstractList$IteratorImpl.prototype.hasNext = function () {
      return this.index_0 < this.$outer.size;
    };
    AbstractList$IteratorImpl.prototype.next = function () {
      var tmp$, tmp$_0;
      if (!this.hasNext())
        throw NoSuchElementException_init();
      tmp$_0 = (tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$);
      return this.$outer.get_za3lpa$(tmp$_0);
    };
    AbstractList$IteratorImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'IteratorImpl', interfaces: [Iterator]};
    function AbstractList$ListIteratorImpl($outer, index) {
      this.$outer = $outer;
      AbstractList$IteratorImpl.call(this, this.$outer);
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.$outer.size);
      this.index_0 = index;
    }
    AbstractList$ListIteratorImpl.prototype.hasPrevious = function () {
      return this.index_0 > 0;
    };
    AbstractList$ListIteratorImpl.prototype.nextIndex = function () {
      return this.index_0;
    };
    AbstractList$ListIteratorImpl.prototype.previous = function () {
      if (!this.hasPrevious())
        throw NoSuchElementException_init();
      return this.$outer.get_za3lpa$((this.index_0 = this.index_0 - 1 | 0, this.index_0));
    };
    AbstractList$ListIteratorImpl.prototype.previousIndex = function () {
      return this.index_0 - 1 | 0;
    };
    AbstractList$ListIteratorImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'ListIteratorImpl', interfaces: [ListIterator, AbstractList$IteratorImpl]};
    function AbstractList$Companion() {
      AbstractList$Companion_instance = this;
    }
    AbstractList$Companion.prototype.checkElementIndex_6xvm5r$ = function (index, size) {
      if (index < 0 || index >= size) {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + size);
      }};
    AbstractList$Companion.prototype.checkPositionIndex_6xvm5r$ = function (index, size) {
      if (index < 0 || index > size) {
        throw new IndexOutOfBoundsException('index: ' + index + ', size: ' + size);
      }};
    AbstractList$Companion.prototype.checkRangeIndexes_cub51b$ = function (fromIndex, toIndex, size) {
      if (fromIndex < 0 || toIndex > size) {
        throw new IndexOutOfBoundsException('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
      }if (fromIndex > toIndex) {
        throw IllegalArgumentException_init_0('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
      }};
    AbstractList$Companion.prototype.checkBoundsIndexes_cub51b$ = function (startIndex, endIndex, size) {
      if (startIndex < 0 || endIndex > size) {
        throw new IndexOutOfBoundsException('startIndex: ' + startIndex + ', endIndex: ' + endIndex + ', size: ' + size);
      }if (startIndex > endIndex) {
        throw IllegalArgumentException_init_0('startIndex: ' + startIndex + ' > endIndex: ' + endIndex);
      }};
    AbstractList$Companion.prototype.orderedHashCode_nykoif$ = function (c) {
      var tmp$, tmp$_0;
      var hashCode_0 = 1;
      tmp$ = c.iterator();
      while (tmp$.hasNext()) {
        var e = tmp$.next();
        hashCode_0 = (31 * hashCode_0 | 0) + ((tmp$_0 = e != null ? hashCode(e) : null) != null ? tmp$_0 : 0) | 0;
      }
      return hashCode_0;
    };
    AbstractList$Companion.prototype.orderedEquals_e92ka7$ = function (c, other) {
      var tmp$;
      if (c.size !== other.size)
        return false;
      var otherIterator = other.iterator();
      tmp$ = c.iterator();
      while (tmp$.hasNext()) {
        var elem = tmp$.next();
        var elemOther = otherIterator.next();
        if (!equals(elem, elemOther)) {
          return false;
        }}
      return true;
    };
    AbstractList$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var AbstractList$Companion_instance = null;
    function AbstractList$Companion_getInstance() {
      if (AbstractList$Companion_instance === null) {
        new AbstractList$Companion();
      }return AbstractList$Companion_instance;
    }
    AbstractList.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractList', interfaces: [List, AbstractCollection]};
    function AbstractMap() {
      AbstractMap$Companion_getInstance();
      this._keys_up5z3z$_0 = null;
      this._values_6nw1f1$_0 = null;
    }
    AbstractMap.prototype.containsKey_11rb$ = function (key) {
      return this.implFindEntry_8k1i24$_0(key) != null;
    };
    AbstractMap.prototype.containsValue_11rc$ = function (value) {
      var $receiver = this.entries;
      var any$result;
      any$break: do {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          any$result = false;
          break any$break;
        }tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (equals(element.value, value)) {
            any$result = true;
            break any$break;
          }}
        any$result = false;
      }
       while (false);
      return any$result;
    };
    AbstractMap.prototype.containsEntry_8hxqw4$ = function (entry) {
      if (!Kotlin.isType(entry, Map$Entry))
        return false;
      var key = entry.key;
      var value = entry.value;
      var tmp$;
      var ourValue = (Kotlin.isType(tmp$ = this, Map) ? tmp$ : throwCCE()).get_11rb$(key);
      if (!equals(value, ourValue)) {
        return false;
      }var tmp$_0 = ourValue == null;
      if (tmp$_0) {
        var tmp$_1;
        tmp$_0 = !(Kotlin.isType(tmp$_1 = this, Map) ? tmp$_1 : throwCCE()).containsKey_11rb$(key);
      }if (tmp$_0) {
        return false;
      }return true;
    };
    AbstractMap.prototype.equals = function (other) {
      if (other === this)
        return true;
      if (!Kotlin.isType(other, Map))
        return false;
      if (this.size !== other.size)
        return false;
      var $receiver = other.entries;
      var all$result;
      all$break: do {
        var tmp$;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!this.containsEntry_8hxqw4$(element)) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    AbstractMap.prototype.get_11rb$ = function (key) {
      var tmp$;
      return (tmp$ = this.implFindEntry_8k1i24$_0(key)) != null ? tmp$.value : null;
    };
    AbstractMap.prototype.hashCode = function () {
      return hashCode(this.entries);
    };
    AbstractMap.prototype.isEmpty = function () {
      return this.size === 0;
    };
    Object.defineProperty(AbstractMap.prototype, 'size', {get: function () {
      return this.entries.size;
    }});
    function AbstractMap$get_AbstractMap$keys$ObjectLiteral(this$AbstractMap) {
      this.this$AbstractMap = this$AbstractMap;
      AbstractSet.call(this);
    }
    AbstractMap$get_AbstractMap$keys$ObjectLiteral.prototype.contains_11rb$ = function (element) {
      return this.this$AbstractMap.containsKey_11rb$(element);
    };
    function AbstractMap$get_AbstractMap$keys$ObjectLiteral$iterator$ObjectLiteral(closure$entryIterator) {
      this.closure$entryIterator = closure$entryIterator;
    }
    AbstractMap$get_AbstractMap$keys$ObjectLiteral$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.closure$entryIterator.hasNext();
    };
    AbstractMap$get_AbstractMap$keys$ObjectLiteral$iterator$ObjectLiteral.prototype.next = function () {
      return this.closure$entryIterator.next().key;
    };
    AbstractMap$get_AbstractMap$keys$ObjectLiteral$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    AbstractMap$get_AbstractMap$keys$ObjectLiteral.prototype.iterator = function () {
      var entryIterator = this.this$AbstractMap.entries.iterator();
      return new AbstractMap$get_AbstractMap$keys$ObjectLiteral$iterator$ObjectLiteral(entryIterator);
    };
    Object.defineProperty(AbstractMap$get_AbstractMap$keys$ObjectLiteral.prototype, 'size', {get: function () {
      return this.this$AbstractMap.size;
    }});
    AbstractMap$get_AbstractMap$keys$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractSet]};
    Object.defineProperty(AbstractMap.prototype, 'keys', {get: function () {
      if (this._keys_up5z3z$_0 == null) {
        this._keys_up5z3z$_0 = new AbstractMap$get_AbstractMap$keys$ObjectLiteral(this);
      }return ensureNotNull(this._keys_up5z3z$_0);
    }});
    function AbstractMap$toString$lambda(this$AbstractMap) {
      return function (it) {
        return this$AbstractMap.toString_55he67$_0(it);
      };
    }
    AbstractMap.prototype.toString = function () {
      return joinToString_8(this.entries, ', ', '{', '}', void 0, void 0, AbstractMap$toString$lambda(this));
    };
    AbstractMap.prototype.toString_55he67$_0 = function (entry) {
      return this.toString_kthv8s$_0(entry.key) + '=' + this.toString_kthv8s$_0(entry.value);
    };
    AbstractMap.prototype.toString_kthv8s$_0 = function (o) {
      return o === this ? '(this Map)' : toString(o);
    };
    function AbstractMap$get_AbstractMap$values$ObjectLiteral(this$AbstractMap) {
      this.this$AbstractMap = this$AbstractMap;
      AbstractCollection.call(this);
    }
    AbstractMap$get_AbstractMap$values$ObjectLiteral.prototype.contains_11rb$ = function (element) {
      return this.this$AbstractMap.containsValue_11rc$(element);
    };
    function AbstractMap$get_AbstractMap$values$ObjectLiteral$iterator$ObjectLiteral(closure$entryIterator) {
      this.closure$entryIterator = closure$entryIterator;
    }
    AbstractMap$get_AbstractMap$values$ObjectLiteral$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.closure$entryIterator.hasNext();
    };
    AbstractMap$get_AbstractMap$values$ObjectLiteral$iterator$ObjectLiteral.prototype.next = function () {
      return this.closure$entryIterator.next().value;
    };
    AbstractMap$get_AbstractMap$values$ObjectLiteral$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    AbstractMap$get_AbstractMap$values$ObjectLiteral.prototype.iterator = function () {
      var entryIterator = this.this$AbstractMap.entries.iterator();
      return new AbstractMap$get_AbstractMap$values$ObjectLiteral$iterator$ObjectLiteral(entryIterator);
    };
    Object.defineProperty(AbstractMap$get_AbstractMap$values$ObjectLiteral.prototype, 'size', {get: function () {
      return this.this$AbstractMap.size;
    }});
    AbstractMap$get_AbstractMap$values$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractCollection]};
    Object.defineProperty(AbstractMap.prototype, 'values', {get: function () {
      if (this._values_6nw1f1$_0 == null) {
        this._values_6nw1f1$_0 = new AbstractMap$get_AbstractMap$values$ObjectLiteral(this);
      }return ensureNotNull(this._values_6nw1f1$_0);
    }});
    AbstractMap.prototype.implFindEntry_8k1i24$_0 = function (key) {
      var $receiver = this.entries;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (equals(element.key, key)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return firstOrNull$result;
    };
    function AbstractMap$Companion() {
      AbstractMap$Companion_instance = this;
    }
    AbstractMap$Companion.prototype.entryHashCode_9fthdn$ = function (e) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      return ((tmp$_0 = (tmp$ = e.key) != null ? hashCode(tmp$) : null) != null ? tmp$_0 : 0) ^ ((tmp$_2 = (tmp$_1 = e.value) != null ? hashCode(tmp$_1) : null) != null ? tmp$_2 : 0);
    };
    AbstractMap$Companion.prototype.entryToString_9fthdn$ = function (e) {
      return toString(e.key) + '=' + toString(e.value);
    };
    AbstractMap$Companion.prototype.entryEquals_js7fox$ = function (e, other) {
      if (!Kotlin.isType(other, Map$Entry))
        return false;
      return equals(e.key, other.key) && equals(e.value, other.value);
    };
    AbstractMap$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var AbstractMap$Companion_instance = null;
    function AbstractMap$Companion_getInstance() {
      if (AbstractMap$Companion_instance === null) {
        new AbstractMap$Companion();
      }return AbstractMap$Companion_instance;
    }
    AbstractMap.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractMap', interfaces: [Map]};
    function AbstractSet() {
      AbstractSet$Companion_getInstance();
      AbstractCollection.call(this);
    }
    AbstractSet.prototype.equals = function (other) {
      if (other === this)
        return true;
      if (!Kotlin.isType(other, Set))
        return false;
      return AbstractSet$Companion_getInstance().setEquals_y8f7en$(this, other);
    };
    AbstractSet.prototype.hashCode = function () {
      return AbstractSet$Companion_getInstance().unorderedHashCode_nykoif$(this);
    };
    function AbstractSet$Companion() {
      AbstractSet$Companion_instance = this;
    }
    AbstractSet$Companion.prototype.unorderedHashCode_nykoif$ = function (c) {
      var tmp$;
      var hashCode_0 = 0;
      tmp$ = c.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var tmp$_0;
        hashCode_0 = hashCode_0 + ((tmp$_0 = element != null ? hashCode(element) : null) != null ? tmp$_0 : 0) | 0;
      }
      return hashCode_0;
    };
    AbstractSet$Companion.prototype.setEquals_y8f7en$ = function (c, other) {
      if (c.size !== other.size)
        return false;
      return c.containsAll_brywnq$(other);
    };
    AbstractSet$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var AbstractSet$Companion_instance = null;
    function AbstractSet$Companion_getInstance() {
      if (AbstractSet$Companion_instance === null) {
        new AbstractSet$Companion();
      }return AbstractSet$Companion_instance;
    }
    AbstractSet.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractSet', interfaces: [Set, AbstractCollection]};
    var emptyElementData;
    var maxArraySize;
    var defaultMinCapacity;
    function ArrayDeque() {
      this.head_0 = 0;
      this.elementData_0 = null;
      this.size_vddieg$_0 = 0;
    }
    Object.defineProperty(ArrayDeque.prototype, 'size', {get: function () {
      return this.size_vddieg$_0;
    }, set: function (size) {
      this.size_vddieg$_0 = size;
    }});
    ArrayDeque.prototype.ensureCapacity_0 = function (minCapacity) {
      if (minCapacity < 0)
        throw IllegalStateException_init_0('Deque is too big.');
      if (minCapacity <= this.elementData_0.length)
        return;
      if (this.elementData_0 === emptyElementData) {
        this.elementData_0 = Kotlin.newArray(coerceAtLeast_2(minCapacity, 10), null);
        return;
      }var newCapacity = this.newCapacity_6xvm5r$(this.elementData_0.length, minCapacity);
      this.copyElements_0(newCapacity);
    };
    ArrayDeque.prototype.newCapacity_6xvm5r$ = function (oldCapacity, minCapacity) {
      var newCapacity = oldCapacity + (oldCapacity >> 1) | 0;
      if ((newCapacity - minCapacity | 0) < 0)
        newCapacity = minCapacity;
      if ((newCapacity - 2147483639 | 0) > 0)
        newCapacity = minCapacity > 2147483639 ? 2147483647 : 2147483639;
      return newCapacity;
    };
    ArrayDeque.prototype.copyElements_0 = function (newCapacity) {
      var newElements = Kotlin.newArray(newCapacity, null);
      arrayCopy(this.elementData_0, newElements, 0, this.head_0, this.elementData_0.length);
      arrayCopy(this.elementData_0, newElements, this.elementData_0.length - this.head_0 | 0, 0, this.head_0);
      this.head_0 = 0;
      this.elementData_0 = newElements;
    };
    ArrayDeque.prototype.internalGet_0 = function (internalIndex) {
      var tmp$;
      return (tmp$ = this.elementData_0[internalIndex]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    ArrayDeque.prototype.positiveMod_0 = function (index) {
      return index >= this.elementData_0.length ? index - this.elementData_0.length | 0 : index;
    };
    ArrayDeque.prototype.negativeMod_0 = function (index) {
      return index < 0 ? index + this.elementData_0.length | 0 : index;
    };
    ArrayDeque.prototype.internalIndex_0 = function (index) {
      return this.positiveMod_0(this.head_0 + index | 0);
    };
    ArrayDeque.prototype.incremented_0 = function (index) {
      return index === get_lastIndex(this.elementData_0) ? 0 : index + 1 | 0;
    };
    ArrayDeque.prototype.decremented_0 = function (index) {
      return index === 0 ? get_lastIndex(this.elementData_0) : index - 1 | 0;
    };
    ArrayDeque.prototype.isEmpty = function () {
      return this.size === 0;
    };
    ArrayDeque.prototype.first = function () {
      if (this.isEmpty())
        throw new NoSuchElementException('ArrayDeque is empty.');
      else {
        var tmp$;
        return (tmp$ = this.elementData_0[this.head_0]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      }
    };
    ArrayDeque.prototype.firstOrNull = function () {
      var tmp$;
      if (this.isEmpty())
        tmp$ = null;
      else {
        var tmp$_0;
        tmp$ = (tmp$_0 = this.elementData_0[this.head_0]) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE_0();
      }
      return tmp$;
    };
    ArrayDeque.prototype.last = function () {
      if (this.isEmpty())
        throw new NoSuchElementException('ArrayDeque is empty.');
      else {
        var tmp$;
        return (tmp$ = this.elementData_0[this.positiveMod_0(this.head_0 + get_lastIndex_12(this) | 0)]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      }
    };
    ArrayDeque.prototype.lastOrNull = function () {
      var tmp$;
      if (this.isEmpty())
        tmp$ = null;
      else {
        var tmp$_0;
        tmp$ = (tmp$_0 = this.elementData_0[this.positiveMod_0(this.head_0 + get_lastIndex_12(this) | 0)]) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE_0();
      }
      return tmp$;
    };
    ArrayDeque.prototype.addFirst_11rb$ = function (element) {
      this.ensureCapacity_0(this.size + 1 | 0);
      this.head_0 = this.decremented_0(this.head_0);
      this.elementData_0[this.head_0] = element;
      this.size = this.size + 1 | 0;
    };
    ArrayDeque.prototype.addLast_11rb$ = function (element) {
      this.ensureCapacity_0(this.size + 1 | 0);
      this.elementData_0[this.positiveMod_0(this.head_0 + this.size | 0)] = element;
      this.size = this.size + 1 | 0;
    };
    ArrayDeque.prototype.removeFirst = function () {
      if (this.isEmpty())
        throw new NoSuchElementException('ArrayDeque is empty.');
      var tmp$;
      var element = (tmp$ = this.elementData_0[this.head_0]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      this.elementData_0[this.head_0] = null;
      this.head_0 = this.incremented_0(this.head_0);
      this.size = this.size - 1 | 0;
      return element;
    };
    ArrayDeque.prototype.removeFirstOrNull = function () {
      return this.isEmpty() ? null : this.removeFirst();
    };
    ArrayDeque.prototype.removeLast = function () {
      if (this.isEmpty())
        throw new NoSuchElementException('ArrayDeque is empty.');
      var internalLastIndex = this.positiveMod_0(this.head_0 + get_lastIndex_12(this) | 0);
      var tmp$;
      var element = (tmp$ = this.elementData_0[internalLastIndex]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      this.elementData_0[internalLastIndex] = null;
      this.size = this.size - 1 | 0;
      return element;
    };
    ArrayDeque.prototype.removeLastOrNull = function () {
      return this.isEmpty() ? null : this.removeLast();
    };
    ArrayDeque.prototype.add_11rb$ = function (element) {
      this.addLast_11rb$(element);
      return true;
    };
    ArrayDeque.prototype.add_wxm5ur$ = function (index, element) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.size);
      if (index === this.size) {
        this.addLast_11rb$(element);
        return;
      } else if (index === 0) {
        this.addFirst_11rb$(element);
        return;
      }this.ensureCapacity_0(this.size + 1 | 0);
      var internalIndex = this.positiveMod_0(this.head_0 + index | 0);
      if (index < this.size + 1 >> 1) {
        var decrementedInternalIndex = this.decremented_0(internalIndex);
        var decrementedHead = this.decremented_0(this.head_0);
        if (decrementedInternalIndex >= this.head_0) {
          this.elementData_0[decrementedHead] = this.elementData_0[this.head_0];
          arrayCopy(this.elementData_0, this.elementData_0, this.head_0, this.head_0 + 1 | 0, decrementedInternalIndex + 1 | 0);
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, this.head_0 - 1 | 0, this.head_0, this.elementData_0.length);
          this.elementData_0[this.elementData_0.length - 1 | 0] = this.elementData_0[0];
          arrayCopy(this.elementData_0, this.elementData_0, 0, 1, decrementedInternalIndex + 1 | 0);
        }
        this.elementData_0[decrementedInternalIndex] = element;
        this.head_0 = decrementedHead;
      } else {
        var tail = this.positiveMod_0(this.head_0 + this.size | 0);
        if (internalIndex < tail) {
          arrayCopy(this.elementData_0, this.elementData_0, internalIndex + 1 | 0, internalIndex, tail);
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, 1, 0, tail);
          this.elementData_0[0] = this.elementData_0[this.elementData_0.length - 1 | 0];
          arrayCopy(this.elementData_0, this.elementData_0, internalIndex + 1 | 0, internalIndex, this.elementData_0.length - 1 | 0);
        }
        this.elementData_0[internalIndex] = element;
      }
      this.size = this.size + 1 | 0;
    };
    ArrayDeque.prototype.copyCollectionElements_0 = function (internalIndex, elements) {
      var tmp$, tmp$_0;
      var iterator = elements.iterator();
      tmp$ = this.elementData_0.length;
      for (var index = internalIndex; index < tmp$; index++) {
        if (!iterator.hasNext())
          break;
        this.elementData_0[index] = iterator.next();
      }
      tmp$_0 = this.head_0;
      for (var index_0 = 0; index_0 < tmp$_0; index_0++) {
        if (!iterator.hasNext())
          break;
        this.elementData_0[index_0] = iterator.next();
      }
      this.size = this.size + elements.size | 0;
    };
    ArrayDeque.prototype.addAll_brywnq$ = function (elements) {
      if (elements.isEmpty())
        return false;
      this.ensureCapacity_0(this.size + elements.size | 0);
      this.copyCollectionElements_0(this.positiveMod_0(this.head_0 + this.size | 0), elements);
      return true;
    };
    ArrayDeque.prototype.addAll_u57x28$ = function (index, elements) {
      AbstractList$Companion_getInstance().checkPositionIndex_6xvm5r$(index, this.size);
      if (elements.isEmpty()) {
        return false;
      } else if (index === this.size) {
        return this.addAll_brywnq$(elements);
      }this.ensureCapacity_0(this.size + elements.size | 0);
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      var internalIndex = this.positiveMod_0(this.head_0 + index | 0);
      var elementsSize = elements.size;
      if (index < this.size + 1 >> 1) {
        var shiftedHead = this.head_0 - elementsSize | 0;
        if (internalIndex >= this.head_0) {
          if (shiftedHead >= 0) {
            arrayCopy(this.elementData_0, this.elementData_0, shiftedHead, this.head_0, internalIndex);
          } else {
            shiftedHead = shiftedHead + this.elementData_0.length | 0;
            var elementsToShift = internalIndex - this.head_0 | 0;
            var shiftToBack = this.elementData_0.length - shiftedHead | 0;
            if (shiftToBack >= elementsToShift) {
              arrayCopy(this.elementData_0, this.elementData_0, shiftedHead, this.head_0, internalIndex);
            } else {
              arrayCopy(this.elementData_0, this.elementData_0, shiftedHead, this.head_0, this.head_0 + shiftToBack | 0);
              arrayCopy(this.elementData_0, this.elementData_0, 0, this.head_0 + shiftToBack | 0, internalIndex);
            }
          }
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, shiftedHead, this.head_0, this.elementData_0.length);
          if (elementsSize >= internalIndex) {
            arrayCopy(this.elementData_0, this.elementData_0, this.elementData_0.length - elementsSize | 0, 0, internalIndex);
          } else {
            arrayCopy(this.elementData_0, this.elementData_0, this.elementData_0.length - elementsSize | 0, 0, elementsSize);
            arrayCopy(this.elementData_0, this.elementData_0, 0, elementsSize, internalIndex);
          }
        }
        this.head_0 = shiftedHead;
        this.copyCollectionElements_0(this.negativeMod_0(internalIndex - elementsSize | 0), elements);
      } else {
        var shiftedInternalIndex = internalIndex + elementsSize | 0;
        if (internalIndex < tail) {
          if ((tail + elementsSize | 0) <= this.elementData_0.length) {
            arrayCopy(this.elementData_0, this.elementData_0, shiftedInternalIndex, internalIndex, tail);
          } else {
            if (shiftedInternalIndex >= this.elementData_0.length) {
              arrayCopy(this.elementData_0, this.elementData_0, shiftedInternalIndex - this.elementData_0.length | 0, internalIndex, tail);
            } else {
              var shiftToFront = tail + elementsSize - this.elementData_0.length | 0;
              arrayCopy(this.elementData_0, this.elementData_0, 0, tail - shiftToFront | 0, tail);
              arrayCopy(this.elementData_0, this.elementData_0, shiftedInternalIndex, internalIndex, tail - shiftToFront | 0);
            }
          }
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, elementsSize, 0, tail);
          if (shiftedInternalIndex >= this.elementData_0.length) {
            arrayCopy(this.elementData_0, this.elementData_0, shiftedInternalIndex - this.elementData_0.length | 0, internalIndex, this.elementData_0.length);
          } else {
            arrayCopy(this.elementData_0, this.elementData_0, 0, this.elementData_0.length - elementsSize | 0, this.elementData_0.length);
            arrayCopy(this.elementData_0, this.elementData_0, shiftedInternalIndex, internalIndex, this.elementData_0.length - elementsSize | 0);
          }
        }
        this.copyCollectionElements_0(internalIndex, elements);
      }
      return true;
    };
    ArrayDeque.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      var tmp$;
      return (tmp$ = this.elementData_0[this.positiveMod_0(this.head_0 + index | 0)]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    ArrayDeque.prototype.set_wxm5ur$ = function (index, element) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      var internalIndex = this.positiveMod_0(this.head_0 + index | 0);
      var tmp$;
      var oldElement = (tmp$ = this.elementData_0[internalIndex]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      this.elementData_0[internalIndex] = element;
      return oldElement;
    };
    ArrayDeque.prototype.contains_11rb$ = function (element) {
      return this.indexOf_11rb$(element) !== -1;
    };
    ArrayDeque.prototype.indexOf_11rb$ = function (element) {
      var tmp$, tmp$_0;
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      if (this.head_0 < tail) {
        for (var index = this.head_0; index < tail; index++) {
          if (equals(element, this.elementData_0[index]))
            return index - this.head_0 | 0;
        }
      } else if (this.head_0 >= tail) {
        tmp$ = this.head_0;
        tmp$_0 = this.elementData_0.length;
        for (var index_0 = tmp$; index_0 < tmp$_0; index_0++) {
          if (equals(element, this.elementData_0[index_0]))
            return index_0 - this.head_0 | 0;
        }
        for (var index_1 = 0; index_1 < tail; index_1++) {
          if (equals(element, this.elementData_0[index_1]))
            return index_1 + this.elementData_0.length - this.head_0 | 0;
        }
      }return -1;
    };
    ArrayDeque.prototype.lastIndexOf_11rb$ = function (element) {
      var tmp$, tmp$_0, tmp$_1;
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      if (this.head_0 < tail) {
        tmp$ = this.head_0;
        for (var index = tail - 1 | 0; index >= tmp$; index--) {
          if (equals(element, this.elementData_0[index]))
            return index - this.head_0 | 0;
        }
      } else if (this.head_0 > tail) {
        for (var index_0 = tail - 1 | 0; index_0 >= 0; index_0--) {
          if (equals(element, this.elementData_0[index_0]))
            return index_0 + this.elementData_0.length - this.head_0 | 0;
        }
        tmp$_0 = get_lastIndex(this.elementData_0);
        tmp$_1 = this.head_0;
        for (var index_1 = tmp$_0; index_1 >= tmp$_1; index_1--) {
          if (equals(element, this.elementData_0[index_1]))
            return index_1 - this.head_0 | 0;
        }
      }return -1;
    };
    ArrayDeque.prototype.remove_11rb$ = function (element) {
      var index = this.indexOf_11rb$(element);
      if (index === -1)
        return false;
      this.removeAt_za3lpa$(index);
      return true;
    };
    ArrayDeque.prototype.removeAt_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      if (index === get_lastIndex_12(this)) {
        return this.removeLast();
      } else if (index === 0) {
        return this.removeFirst();
      }var internalIndex = this.positiveMod_0(this.head_0 + index | 0);
      var tmp$;
      var element = (tmp$ = this.elementData_0[internalIndex]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      if (index < this.size >> 1) {
        if (internalIndex >= this.head_0) {
          arrayCopy(this.elementData_0, this.elementData_0, this.head_0 + 1 | 0, this.head_0, internalIndex);
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, 1, 0, internalIndex);
          this.elementData_0[0] = this.elementData_0[this.elementData_0.length - 1 | 0];
          arrayCopy(this.elementData_0, this.elementData_0, this.head_0 + 1 | 0, this.head_0, this.elementData_0.length - 1 | 0);
        }
        this.elementData_0[this.head_0] = null;
        this.head_0 = this.incremented_0(this.head_0);
      } else {
        var internalLastIndex = this.positiveMod_0(this.head_0 + get_lastIndex_12(this) | 0);
        if (internalIndex <= internalLastIndex) {
          arrayCopy(this.elementData_0, this.elementData_0, internalIndex, internalIndex + 1 | 0, internalLastIndex + 1 | 0);
        } else {
          arrayCopy(this.elementData_0, this.elementData_0, internalIndex, internalIndex + 1 | 0, this.elementData_0.length);
          this.elementData_0[this.elementData_0.length - 1 | 0] = this.elementData_0[0];
          arrayCopy(this.elementData_0, this.elementData_0, 0, 1, internalLastIndex + 1 | 0);
        }
        this.elementData_0[internalLastIndex] = null;
      }
      this.size = this.size - 1 | 0;
      return element;
    };
    ArrayDeque.prototype.removeAll_brywnq$ = function (elements) {
      var filterInPlace_0$result;
      filterInPlace_0$break: do {
        var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
        var tmp$_6 = this.isEmpty();
        if (!tmp$_6) {
          tmp$_6 = this.elementData_0.length === 0;
        }if (tmp$_6) {
          filterInPlace_0$result = false;
          break filterInPlace_0$break;
        }var tail = this.positiveMod_0(this.head_0 + this.size | 0);
        var newTail = this.head_0;
        var modified = false;
        if (this.head_0 < tail) {
          for (var index = this.head_0; index < tail; index++) {
            var element = this.elementData_0[index];
            if (!elements.contains_11rb$((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0())) {
              this.elementData_0[tmp$_0 = newTail, newTail = tmp$_0 + 1 | 0, tmp$_0] = element;
            } else
              modified = true;
          }
          fill_3(this.elementData_0, null, newTail, tail);
        } else {
          tmp$_1 = this.head_0;
          tmp$_2 = this.elementData_0.length;
          for (var index_0 = tmp$_1; index_0 < tmp$_2; index_0++) {
            var element_0 = this.elementData_0[index_0];
            this.elementData_0[index_0] = null;
            if (!elements.contains_11rb$((tmp$_3 = element_0) == null || Kotlin.isType(tmp$_3, Any) ? tmp$_3 : throwCCE_0())) {
              this.elementData_0[tmp$_4 = newTail, newTail = tmp$_4 + 1 | 0, tmp$_4] = element_0;
            } else
              modified = true;
          }
          newTail = this.positiveMod_0(newTail);
          for (var index_1 = 0; index_1 < tail; index_1++) {
            var element_1 = this.elementData_0[index_1];
            this.elementData_0[index_1] = null;
            if (!elements.contains_11rb$((tmp$_5 = element_1) == null || Kotlin.isType(tmp$_5, Any) ? tmp$_5 : throwCCE_0())) {
              this.elementData_0[newTail] = element_1;
              newTail = this.incremented_0(newTail);
            } else {
              modified = true;
            }
          }
        }
        if (modified)
          this.size = this.negativeMod_0(newTail - this.head_0 | 0);
        filterInPlace_0$result = modified;
      }
       while (false);
      return filterInPlace_0$result;
    };
    ArrayDeque.prototype.retainAll_brywnq$ = function (elements) {
      var filterInPlace_0$result;
      filterInPlace_0$break: do {
        var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
        var tmp$_6 = this.isEmpty();
        if (!tmp$_6) {
          tmp$_6 = this.elementData_0.length === 0;
        }if (tmp$_6) {
          filterInPlace_0$result = false;
          break filterInPlace_0$break;
        }var tail = this.positiveMod_0(this.head_0 + this.size | 0);
        var newTail = this.head_0;
        var modified = false;
        if (this.head_0 < tail) {
          for (var index = this.head_0; index < tail; index++) {
            var element = this.elementData_0[index];
            if (elements.contains_11rb$((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0())) {
              this.elementData_0[tmp$_0 = newTail, newTail = tmp$_0 + 1 | 0, tmp$_0] = element;
            } else
              modified = true;
          }
          fill_3(this.elementData_0, null, newTail, tail);
        } else {
          tmp$_1 = this.head_0;
          tmp$_2 = this.elementData_0.length;
          for (var index_0 = tmp$_1; index_0 < tmp$_2; index_0++) {
            var element_0 = this.elementData_0[index_0];
            this.elementData_0[index_0] = null;
            if (elements.contains_11rb$((tmp$_3 = element_0) == null || Kotlin.isType(tmp$_3, Any) ? tmp$_3 : throwCCE_0())) {
              this.elementData_0[tmp$_4 = newTail, newTail = tmp$_4 + 1 | 0, tmp$_4] = element_0;
            } else
              modified = true;
          }
          newTail = this.positiveMod_0(newTail);
          for (var index_1 = 0; index_1 < tail; index_1++) {
            var element_1 = this.elementData_0[index_1];
            this.elementData_0[index_1] = null;
            if (elements.contains_11rb$((tmp$_5 = element_1) == null || Kotlin.isType(tmp$_5, Any) ? tmp$_5 : throwCCE_0())) {
              this.elementData_0[newTail] = element_1;
              newTail = this.incremented_0(newTail);
            } else {
              modified = true;
            }
          }
        }
        if (modified)
          this.size = this.negativeMod_0(newTail - this.head_0 | 0);
        filterInPlace_0$result = modified;
      }
       while (false);
      return filterInPlace_0$result;
    };
    ArrayDeque.prototype.filterInPlace_0 = function (predicate) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
      var tmp$_6 = this.isEmpty();
      if (!tmp$_6) {
        tmp$_6 = this.elementData_0.length === 0;
      }if (tmp$_6)
        return false;
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      var newTail = this.head_0;
      var modified = false;
      if (this.head_0 < tail) {
        for (var index = this.head_0; index < tail; index++) {
          var element = this.elementData_0[index];
          if (predicate((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0())) {
            this.elementData_0[tmp$_0 = newTail, newTail = tmp$_0 + 1 | 0, tmp$_0] = element;
          } else
            modified = true;
        }
        fill_3(this.elementData_0, null, newTail, tail);
      } else {
        tmp$_1 = this.head_0;
        tmp$_2 = this.elementData_0.length;
        for (var index_0 = tmp$_1; index_0 < tmp$_2; index_0++) {
          var element_0 = this.elementData_0[index_0];
          this.elementData_0[index_0] = null;
          if (predicate((tmp$_3 = element_0) == null || Kotlin.isType(tmp$_3, Any) ? tmp$_3 : throwCCE_0())) {
            this.elementData_0[tmp$_4 = newTail, newTail = tmp$_4 + 1 | 0, tmp$_4] = element_0;
          } else
            modified = true;
        }
        newTail = this.positiveMod_0(newTail);
        for (var index_1 = 0; index_1 < tail; index_1++) {
          var element_1 = this.elementData_0[index_1];
          this.elementData_0[index_1] = null;
          if (predicate((tmp$_5 = element_1) == null || Kotlin.isType(tmp$_5, Any) ? tmp$_5 : throwCCE_0())) {
            this.elementData_0[newTail] = element_1;
            newTail = this.incremented_0(newTail);
          } else {
            modified = true;
          }
        }
      }
      if (modified)
        this.size = this.negativeMod_0(newTail - this.head_0 | 0);
      return modified;
    };
    ArrayDeque.prototype.clear = function () {
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      if (this.head_0 < tail) {
        fill_3(this.elementData_0, null, this.head_0, tail);
      } else {
        if (!this.isEmpty()) {
          fill_3(this.elementData_0, null, this.head_0, this.elementData_0.length);
          fill_3(this.elementData_0, null, 0, tail);
        }}
      this.head_0 = 0;
      this.size = 0;
    };
    ArrayDeque.prototype.internalStructure_zgjqsc$ = function (structure) {
      var tail = this.positiveMod_0(this.head_0 + this.size | 0);
      if (this.isEmpty()) {
        structure(this.head_0, []);
        return;
      }var elements = Kotlin.newArray(this.size, null);
      if (this.head_0 < tail) {
        arrayCopy(this.elementData_0, elements, 0, this.head_0, tail);
        structure(this.head_0, elements);
      } else {
        var $receiver = this.elementData_0;
        arrayCopy($receiver, elements, 0, this.head_0, $receiver.length);
        arrayCopy(this.elementData_0, elements, this.elementData_0.length - this.head_0 | 0, 0, tail);
        structure(this.head_0 - this.elementData_0.length | 0, elements);
      }
    };
    ArrayDeque.$metadata$ = {kind: Kind_CLASS, simpleName: 'ArrayDeque', interfaces: [AbstractMutableList]};
    function ArrayDeque_init(initialCapacity, $this) {
      $this = $this || Object.create(ArrayDeque.prototype);
      AbstractMutableList.call($this);
      ArrayDeque.call($this);
      var tmp$;
      if (initialCapacity === 0)
        tmp$ = emptyElementData;
      else if (initialCapacity > 0)
        tmp$ = Kotlin.newArray(initialCapacity, null);
      else
        throw IllegalArgumentException_init_0('Illegal Capacity: ' + initialCapacity);
      $this.elementData_0 = tmp$;
      return $this;
    }
    function ArrayDeque_init_0($this) {
      $this = $this || Object.create(ArrayDeque.prototype);
      AbstractMutableList.call($this);
      ArrayDeque.call($this);
      $this.elementData_0 = emptyElementData;
      return $this;
    }
    function ArrayDeque_init_1(elements, $this) {
      $this = $this || Object.create(ArrayDeque.prototype);
      AbstractMutableList.call($this);
      ArrayDeque.call($this);
      $this.elementData_0 = copyToArray(elements);
      $this.size = $this.elementData_0.length;
      if ($this.elementData_0.length === 0)
        $this.elementData_0 = emptyElementData;
      return $this;
    }
    function flatten($receiver) {
      var tmp$;
      var tmp$_0;
      var sum = 0;
      for (tmp$_0 = 0; tmp$_0 !== $receiver.length; ++tmp$_0) {
        var element = $receiver[tmp$_0];
        sum = sum + element.length | 0;
      }
      var result = ArrayList_init_0(sum);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element_0 = $receiver[tmp$];
        addAll_1(result, element_0);
      }
      return result;
    }
    function unzip($receiver) {
      var tmp$;
      var listT = ArrayList_init_0($receiver.length);
      var listR = ArrayList_init_0($receiver.length);
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var pair = $receiver[tmp$];
        listT.add_11rb$(pair.first);
        listR.add_11rb$(pair.second);
      }
      return to(listT, listR);
    }
    var isNullOrEmpty = defineInlineFunction('kotlin.kotlin.collections.isNullOrEmpty_tfvi98$', function ($receiver) {
      var tmp$ = $receiver == null;
      if (!tmp$) {
        tmp$ = $receiver.length === 0;
      }return tmp$;
    });
    var ifEmpty = defineInlineFunction('kotlin.kotlin.collections.ifEmpty_wfsi02$', function ($receiver, defaultValue) {
      return $receiver.length === 0 ? defaultValue() : $receiver;
    });
    function contentDeepEqualsImpl($receiver, other) {
      if ($receiver === other)
        return true;
      if ($receiver.length !== other.length)
        return false;
      for (var i = 0; i !== $receiver.length; ++i) {
        var v1 = $receiver[i];
        var v2 = other[i];
        if (v1 === v2) {
          continue;
        } else if (v1 == null || v2 == null) {
          return false;
        }if (Kotlin.isArray(v1) && Kotlin.isArray(v2)) {
          if (!contentDeepEquals(v1, v2))
            return false;
        } else if (Kotlin.isByteArray(v1) && Kotlin.isByteArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isShortArray(v1) && Kotlin.isShortArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isIntArray(v1) && Kotlin.isIntArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isLongArray(v1) && Kotlin.isLongArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isFloatArray(v1) && Kotlin.isFloatArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isDoubleArray(v1) && Kotlin.isDoubleArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isCharArray(v1) && Kotlin.isCharArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isBooleanArray(v1) && Kotlin.isBooleanArray(v2)) {
          if (!contentEquals(v1, v2))
            return false;
        } else if (Kotlin.isType(v1, UByteArray) && Kotlin.isType(v2, UByteArray)) {
          if (!contentEquals_2(v1, v2))
            return false;
        } else if (Kotlin.isType(v1, UShortArray) && Kotlin.isType(v2, UShortArray)) {
          if (!contentEquals_3(v1, v2))
            return false;
        } else if (Kotlin.isType(v1, UIntArray) && Kotlin.isType(v2, UIntArray)) {
          if (!contentEquals_0(v1, v2))
            return false;
        } else if (Kotlin.isType(v1, ULongArray) && Kotlin.isType(v2, ULongArray)) {
          if (!contentEquals_1(v1, v2))
            return false;
        } else if (!equals(v1, v2))
          return false;
      }
      return true;
    }
    function contentDeepToStringImpl($receiver) {
      var length = (coerceAtMost_2($receiver.length, 429496729) * 5 | 0) + 2 | 0;
      var $receiver_0 = StringBuilder_init(length);
      contentDeepToStringInternal($receiver, $receiver_0, ArrayList_init());
      return $receiver_0.toString();
    }
    function contentDeepToStringInternal($receiver, result, processed) {
      if (processed.contains_11rb$($receiver)) {
        result.append_61zpoe$('[...]');
        return;
      }processed.add_11rb$($receiver);
      result.append_s8itvh$(91);
      for (var i = 0; i !== $receiver.length; ++i) {
        if (i !== 0) {
          result.append_61zpoe$(', ');
        }var element = $receiver[i];
        if (element == null)
          result.append_61zpoe$('null');
        else if (Kotlin.isArray(element))
          contentDeepToStringInternal(element, result, processed);
        else if (Kotlin.isByteArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isShortArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isIntArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isLongArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isFloatArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isDoubleArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isCharArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isBooleanArray(element))
          result.append_61zpoe$(arrayToString(element));
        else if (Kotlin.isType(element, UByteArray))
          result.append_61zpoe$(contentToString_1(element));
        else if (Kotlin.isType(element, UShortArray))
          result.append_61zpoe$(contentToString_2(element));
        else if (Kotlin.isType(element, UIntArray))
          result.append_61zpoe$(contentToString(element));
        else if (Kotlin.isType(element, ULongArray))
          result.append_61zpoe$(contentToString_0(element));
        else
          result.append_61zpoe$(element.toString());
      }
      result.append_s8itvh$(93);
      processed.removeAt_za3lpa$(get_lastIndex_12(processed));
    }
    function EmptyIterator() {
      EmptyIterator_instance = this;
    }
    EmptyIterator.prototype.hasNext = function () {
      return false;
    };
    EmptyIterator.prototype.hasPrevious = function () {
      return false;
    };
    EmptyIterator.prototype.nextIndex = function () {
      return 0;
    };
    EmptyIterator.prototype.previousIndex = function () {
      return -1;
    };
    EmptyIterator.prototype.next = function () {
      throw NoSuchElementException_init();
    };
    EmptyIterator.prototype.previous = function () {
      throw NoSuchElementException_init();
    };
    EmptyIterator.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptyIterator', interfaces: [ListIterator]};
    var EmptyIterator_instance = null;
    function EmptyIterator_getInstance() {
      if (EmptyIterator_instance === null) {
        new EmptyIterator();
      }return EmptyIterator_instance;
    }
    function EmptyList() {
      EmptyList_instance = this;
      this.serialVersionUID_0 = L_7390468764508069838;
    }
    EmptyList.prototype.equals = function (other) {
      return Kotlin.isType(other, List) && other.isEmpty();
    };
    EmptyList.prototype.hashCode = function () {
      return 1;
    };
    EmptyList.prototype.toString = function () {
      return '[]';
    };
    Object.defineProperty(EmptyList.prototype, 'size', {get: function () {
      return 0;
    }});
    EmptyList.prototype.isEmpty = function () {
      return true;
    };
    EmptyList.prototype.contains_11rb$ = function (element) {
      return false;
    };
    EmptyList.prototype.containsAll_brywnq$ = function (elements) {
      return elements.isEmpty();
    };
    EmptyList.prototype.get_za3lpa$ = function (index) {
      throw new IndexOutOfBoundsException("Empty list doesn't contain element at index " + index + '.');
    };
    EmptyList.prototype.indexOf_11rb$ = function (element) {
      return -1;
    };
    EmptyList.prototype.lastIndexOf_11rb$ = function (element) {
      return -1;
    };
    EmptyList.prototype.iterator = function () {
      return EmptyIterator_getInstance();
    };
    EmptyList.prototype.listIterator = function () {
      return EmptyIterator_getInstance();
    };
    EmptyList.prototype.listIterator_za3lpa$ = function (index) {
      if (index !== 0)
        throw new IndexOutOfBoundsException('Index: ' + index);
      return EmptyIterator_getInstance();
    };
    EmptyList.prototype.subList_vux9f0$ = function (fromIndex, toIndex) {
      if (fromIndex === 0 && toIndex === 0)
        return this;
      throw new IndexOutOfBoundsException('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex);
    };
    EmptyList.prototype.readResolve_0 = function () {
      return EmptyList_getInstance();
    };
    EmptyList.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptyList', interfaces: [RandomAccess, Serializable, List]};
    var EmptyList_instance = null;
    function EmptyList_getInstance() {
      if (EmptyList_instance === null) {
        new EmptyList();
      }return EmptyList_instance;
    }
    function asCollection($receiver) {
      return new ArrayAsCollection($receiver, false);
    }
    function ArrayAsCollection(values, isVarargs) {
      this.values = values;
      this.isVarargs = isVarargs;
    }
    Object.defineProperty(ArrayAsCollection.prototype, 'size', {get: function () {
      return this.values.length;
    }});
    ArrayAsCollection.prototype.isEmpty = function () {
      return this.values.length === 0;
    };
    ArrayAsCollection.prototype.contains_11rb$ = function (element) {
      return contains(this.values, element);
    };
    ArrayAsCollection.prototype.containsAll_brywnq$ = function (elements) {
      var all$result;
      all$break: do {
        var tmp$;
        if (Kotlin.isType(elements, Collection) && elements.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$ = elements.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!this.contains_11rb$(element)) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    ArrayAsCollection.prototype.iterator = function () {
      return Kotlin.arrayIterator(this.values);
    };
    ArrayAsCollection.prototype.toArray = function () {
      var $receiver = this.values;
      return this.isVarargs ? $receiver : $receiver.slice();
    };
    ArrayAsCollection.$metadata$ = {kind: Kind_CLASS, simpleName: 'ArrayAsCollection', interfaces: [Collection]};
    function emptyList() {
      return EmptyList_getInstance();
    }
    function listOf_0(elements) {
      return elements.length > 0 ? asList(elements) : emptyList();
    }
    var listOf_1 = defineInlineFunction('kotlin.kotlin.collections.listOf_287e2$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function () {
        return emptyList();
      };
    }));
    var mutableListOf = defineInlineFunction('kotlin.kotlin.collections.mutableListOf_287e2$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function () {
        return ArrayList_init();
      };
    }));
    var arrayListOf = defineInlineFunction('kotlin.kotlin.collections.arrayListOf_287e2$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function () {
        return ArrayList_init();
      };
    }));
    function mutableListOf_0(elements) {
      return elements.length === 0 ? ArrayList_init() : ArrayList_init_1(new ArrayAsCollection(elements, true));
    }
    function arrayListOf_0(elements) {
      return elements.length === 0 ? ArrayList_init() : ArrayList_init_1(new ArrayAsCollection(elements, true));
    }
    function listOfNotNull(element) {
      return element != null ? listOf(element) : emptyList();
    }
    function listOfNotNull_0(elements) {
      return filterNotNull(elements);
    }
    var List_0 = defineInlineFunction('kotlin.kotlin.collections.List_rz0iom$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function (size, init) {
        var list = ArrayList_init(size);
        for (var index = 0; index < size; index++) {
          list.add_11rb$(init(index));
        }
        return list;
      };
    }));
    var MutableList_0 = defineInlineFunction('kotlin.kotlin.collections.MutableList_rz0iom$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function (size, init) {
        var list = ArrayList_init(size);
        for (var index = 0; index < size; index++) {
          list.add_11rb$(init(index));
        }
        return list;
      };
    }));
    var buildList = defineInlineFunction('kotlin.kotlin.collections.buildList_spr6vj$', wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      return function (builderAction) {
        var $receiver = ArrayList_init();
        builderAction($receiver);
        return $receiver;
      };
    }));
    var buildList_0 = defineInlineFunction('kotlin.kotlin.collections.buildList_go5l1$', wrapFunction(function () {
      var checkBuilderCapacity = _.kotlin.collections.checkBuilderCapacity_za3lpa$;
      var ArrayList_init = _.kotlin.collections.ArrayList_init_ww73n8$;
      return function (capacity, builderAction) {
        checkBuilderCapacity(capacity);
        var $receiver = ArrayList_init(capacity);
        builderAction($receiver);
        return $receiver;
      };
    }));
    function get_indices_12($receiver) {
      return new IntRange(0, $receiver.size - 1 | 0);
    }
    function get_lastIndex_12($receiver) {
      return $receiver.size - 1 | 0;
    }
    var isNotEmpty_8 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_4c7yge$', function ($receiver) {
      return !$receiver.isEmpty();
    });
    var isNullOrEmpty_0 = defineInlineFunction('kotlin.kotlin.collections.isNullOrEmpty_13nbcr$', function ($receiver) {
      return $receiver == null || $receiver.isEmpty();
    });
    var orEmpty_0 = defineInlineFunction('kotlin.kotlin.collections.orEmpty_13nbcr$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver) {
        return $receiver != null ? $receiver : emptyList();
      };
    }));
    var orEmpty_1 = defineInlineFunction('kotlin.kotlin.collections.orEmpty_63d8zf$', wrapFunction(function () {
      var emptyList = _.kotlin.collections.emptyList_287e2$;
      return function ($receiver) {
        return $receiver != null ? $receiver : emptyList();
      };
    }));
    var ifEmpty_0 = defineInlineFunction('kotlin.kotlin.collections.ifEmpty_tc13va$', function ($receiver, defaultValue) {
      return $receiver.isEmpty() ? defaultValue() : $receiver;
    });
    var containsAll = defineInlineFunction('kotlin.kotlin.collections.containsAll_4mi8vl$', function ($receiver, elements) {
      return $receiver.containsAll_brywnq$(elements);
    });
    function optimizeReadOnlyList($receiver) {
      switch ($receiver.size) {
        case 0:
          return emptyList();
        case 1:
          return listOf($receiver.get_za3lpa$(0));
        default:return $receiver;
      }
    }
    function binarySearch($receiver, element, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      rangeCheck($receiver.size, fromIndex, toIndex);
      var low = fromIndex;
      var high = toIndex - 1 | 0;
      while (low <= high) {
        var mid = low + high >>> 1;
        var midVal = $receiver.get_za3lpa$(mid);
        var cmp = compareValues(midVal, element);
        if (cmp < 0)
          low = mid + 1 | 0;
        else if (cmp > 0)
          high = mid - 1 | 0;
        else
          return mid;
      }
      return -(low + 1 | 0) | 0;
    }
    function binarySearch_0($receiver, element, comparator, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      rangeCheck($receiver.size, fromIndex, toIndex);
      var low = fromIndex;
      var high = toIndex - 1 | 0;
      while (low <= high) {
        var mid = low + high >>> 1;
        var midVal = $receiver.get_za3lpa$(mid);
        var cmp = comparator.compare(midVal, element);
        if (cmp < 0)
          low = mid + 1 | 0;
        else if (cmp > 0)
          high = mid - 1 | 0;
        else
          return mid;
      }
      return -(low + 1 | 0) | 0;
    }
    var binarySearchBy = defineInlineFunction('kotlin.kotlin.collections.binarySearchBy_7gj2ve$', wrapFunction(function () {
      var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
      var binarySearch = _.kotlin.collections.binarySearch_sr7qim$;
      function binarySearchBy$lambda(closure$selector, closure$key) {
        return function (it) {
          return compareValues(closure$selector(it), closure$key);
        };
      }
      return function ($receiver, key, fromIndex, toIndex, selector) {
        if (fromIndex === void 0)
          fromIndex = 0;
        if (toIndex === void 0)
          toIndex = $receiver.size;
        return binarySearch($receiver, fromIndex, toIndex, binarySearchBy$lambda(selector, key));
      };
    }));
    function binarySearch_1($receiver, fromIndex, toIndex, comparison) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = $receiver.size;
      rangeCheck($receiver.size, fromIndex, toIndex);
      var low = fromIndex;
      var high = toIndex - 1 | 0;
      while (low <= high) {
        var mid = low + high >>> 1;
        var midVal = $receiver.get_za3lpa$(mid);
        var cmp = comparison(midVal);
        if (cmp < 0)
          low = mid + 1 | 0;
        else if (cmp > 0)
          high = mid - 1 | 0;
        else
          return mid;
      }
      return -(low + 1 | 0) | 0;
    }
    function rangeCheck(size, fromIndex, toIndex) {
      if (fromIndex > toIndex)
        throw IllegalArgumentException_init_0('fromIndex (' + fromIndex + ') is greater than toIndex (' + toIndex + ').');
      else if (fromIndex < 0)
        throw new IndexOutOfBoundsException('fromIndex (' + fromIndex + ') is less than zero.');
      else if (toIndex > size)
        throw new IndexOutOfBoundsException('toIndex (' + toIndex + ') is greater than size (' + size + ').');
    }
    function throwIndexOverflow() {
      throw new ArithmeticException('Index overflow has happened.');
    }
    function throwCountOverflow() {
      throw new ArithmeticException('Count overflow has happened.');
    }
    function Grouping() {
    }
    Grouping.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Grouping', interfaces: []};
    var aggregate = defineInlineFunction('kotlin.kotlin.collections.aggregate_kz95qp$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, operation) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          destination.put_xwzc9p$(key, operation(key, accumulator, e, accumulator == null && !destination.containsKey_11rb$(key)));
        }
        return destination;
      };
    }));
    var aggregateTo = defineInlineFunction('kotlin.kotlin.collections.aggregateTo_qtifb3$', function ($receiver, destination, operation) {
      var tmp$;
      tmp$ = $receiver.sourceIterator();
      while (tmp$.hasNext()) {
        var e = tmp$.next();
        var key = $receiver.keyOf_11rb$(e);
        var accumulator = destination.get_11rb$(key);
        destination.put_xwzc9p$(key, operation(key, accumulator, e, accumulator == null && !destination.containsKey_11rb$(key)));
      }
      return destination;
    });
    var fold_15 = defineInlineFunction('kotlin.kotlin.collections.fold_2g9ybd$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, initialValueSelector, operation) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var tmp$_0;
          destination.put_xwzc9p$(key, operation(key, accumulator == null && !destination.containsKey_11rb$(key) ? initialValueSelector(key, e) : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e));
        }
        return destination;
      };
    }));
    var foldTo = defineInlineFunction('kotlin.kotlin.collections.foldTo_ldb57n$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, destination, initialValueSelector, operation) {
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var tmp$_0;
          destination.put_xwzc9p$(key, operation(key, accumulator == null && !destination.containsKey_11rb$(key) ? initialValueSelector(key, e) : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e));
        }
        return destination;
      };
    }));
    var fold_16 = defineInlineFunction('kotlin.kotlin.collections.fold_id3q3f$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, initialValue, operation) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var tmp$_0;
          destination.put_xwzc9p$(key, operation(accumulator == null && !destination.containsKey_11rb$(key) ? initialValue : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e));
        }
        return destination;
      };
    }));
    var foldTo_0 = defineInlineFunction('kotlin.kotlin.collections.foldTo_1dwgsv$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, destination, initialValue, operation) {
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var tmp$_0;
          destination.put_xwzc9p$(key, operation(accumulator == null && !destination.containsKey_11rb$(key) ? initialValue : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e));
        }
        return destination;
      };
    }));
    var reduce_15 = defineInlineFunction('kotlin.kotlin.collections.reduce_hy0spo$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, operation) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var operation$result;
          var tmp$_0;
          if (accumulator == null && !destination.containsKey_11rb$(key)) {
            operation$result = e;
          } else {
            operation$result = operation(key, (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e);
          }
          destination.put_xwzc9p$(key, operation$result);
        }
        return destination;
      };
    }));
    var reduceTo = defineInlineFunction('kotlin.kotlin.collections.reduceTo_vpctix$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, destination, operation) {
        var tmp$;
        tmp$ = $receiver.sourceIterator();
        while (tmp$.hasNext()) {
          var e = tmp$.next();
          var key = $receiver.keyOf_11rb$(e);
          var accumulator = destination.get_11rb$(key);
          var operation$result;
          var tmp$_0;
          if (accumulator == null && !destination.containsKey_11rb$(key)) {
            operation$result = e;
          } else {
            operation$result = operation(key, (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE(), e);
          }
          destination.put_xwzc9p$(key, operation$result);
        }
        return destination;
      };
    }));
    function eachCountTo($receiver, destination) {
      var tmp$;
      tmp$ = $receiver.sourceIterator();
      while (tmp$.hasNext()) {
        var e = tmp$.next();
        var key = $receiver.keyOf_11rb$(e);
        var accumulator = destination.get_11rb$(key);
        var tmp$_0;
        destination.put_xwzc9p$(key, (accumulator == null && !destination.containsKey_11rb$(key) ? 0 : (tmp$_0 = accumulator) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE()) + 1 | 0);
      }
      return destination;
    }
    function IndexedValue(index, value) {
      this.index = index;
      this.value = value;
    }
    IndexedValue.$metadata$ = {kind: Kind_CLASS, simpleName: 'IndexedValue', interfaces: []};
    IndexedValue.prototype.component1 = function () {
      return this.index;
    };
    IndexedValue.prototype.component2 = function () {
      return this.value;
    };
    IndexedValue.prototype.copy_wxm5ur$ = function (index, value) {
      return new IndexedValue(index === void 0 ? this.index : index, value === void 0 ? this.value : value);
    };
    IndexedValue.prototype.toString = function () {
      return 'IndexedValue(index=' + Kotlin.toString(this.index) + (', value=' + Kotlin.toString(this.value)) + ')';
    };
    IndexedValue.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.index) | 0;
      result = result * 31 + Kotlin.hashCode(this.value) | 0;
      return result;
    };
    IndexedValue.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.index, other.index) && Kotlin.equals(this.value, other.value)))));
    };
    var Iterable_0 = defineInlineFunction('kotlin.kotlin.collections.Iterable_ms0qmx$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Iterable = _.kotlin.collections.Iterable;
      function Iterable$ObjectLiteral(closure$iterator) {
        this.closure$iterator = closure$iterator;
      }
      Iterable$ObjectLiteral.prototype.iterator = function () {
        return this.closure$iterator();
      };
      Iterable$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterable]};
      return function (iterator) {
        return new Iterable$ObjectLiteral(iterator);
      };
    }));
    function IndexingIterable(iteratorFactory) {
      this.iteratorFactory_0 = iteratorFactory;
    }
    IndexingIterable.prototype.iterator = function () {
      return new IndexingIterator(this.iteratorFactory_0());
    };
    IndexingIterable.$metadata$ = {kind: Kind_CLASS, simpleName: 'IndexingIterable', interfaces: [Iterable]};
    function collectionSizeOrNull($receiver) {
      return Kotlin.isType($receiver, Collection) ? $receiver.size : null;
    }
    function collectionSizeOrDefault($receiver, default_0) {
      return Kotlin.isType($receiver, Collection) ? $receiver.size : default_0;
    }
    function safeToConvertToSet($receiver) {
      return $receiver.size > 2 && Kotlin.isType($receiver, ArrayList);
    }
    function convertToSetForSetOperationWith($receiver, source) {
      if (Kotlin.isType($receiver, Set))
        return $receiver;
      else if (Kotlin.isType($receiver, Collection))
        if (Kotlin.isType(source, Collection) && source.size < 2)
          return $receiver;
        else
          return safeToConvertToSet($receiver) ? toHashSet_8($receiver) : $receiver;
      else
        return toHashSet_8($receiver);
    }
    function convertToSetForSetOperation($receiver) {
      if (Kotlin.isType($receiver, Set))
        return $receiver;
      else if (Kotlin.isType($receiver, Collection))
        return safeToConvertToSet($receiver) ? toHashSet_8($receiver) : $receiver;
      else
        return toHashSet_8($receiver);
    }
    function flatten_0($receiver) {
      var tmp$;
      var result = ArrayList_init();
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        addAll(result, element);
      }
      return result;
    }
    function unzip_0($receiver) {
      var tmp$;
      var expectedSize = collectionSizeOrDefault($receiver, 10);
      var listT = ArrayList_init_0(expectedSize);
      var listR = ArrayList_init_0(expectedSize);
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var pair = tmp$.next();
        listT.add_11rb$(pair.first);
        listR.add_11rb$(pair.second);
      }
      return to(listT, listR);
    }
    var iterator_0 = defineInlineFunction('kotlin.kotlin.collections.iterator_35ci02$', function ($receiver) {
      return $receiver;
    });
    function withIndex_15($receiver) {
      return new IndexingIterator($receiver);
    }
    var forEach_16 = defineInlineFunction('kotlin.kotlin.collections.forEach_p594rv$', function ($receiver, operation) {
      while ($receiver.hasNext()) {
        var element = $receiver.next();
        operation(element);
      }
    });
    function IndexingIterator(iterator) {
      this.iterator_0 = iterator;
      this.index_0 = 0;
    }
    IndexingIterator.prototype.hasNext = function () {
      return this.iterator_0.hasNext();
    };
    IndexingIterator.prototype.next = function () {
      var tmp$;
      return new IndexedValue(checkIndexOverflow((tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$)), this.iterator_0.next());
    };
    IndexingIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'IndexingIterator', interfaces: [Iterator]};
    var getValue = defineInlineFunction('kotlin.kotlin.collections.getValue_u8h43m$', wrapFunction(function () {
      var getOrImplicitDefault = _.kotlin.collections.getOrImplicitDefault_t9ocha$;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, thisRef, property) {
        var tmp$;
        return (tmp$ = getOrImplicitDefault($receiver, property.callableName)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    var getValue_0 = defineInlineFunction('kotlin.kotlin.collections.getValue_th1e6g$', wrapFunction(function () {
      var getOrImplicitDefault = _.kotlin.collections.getOrImplicitDefault_t9ocha$;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, thisRef, property) {
        var tmp$;
        return (tmp$ = getOrImplicitDefault($receiver, property.callableName)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    var getValue_1 = defineInlineFunction('kotlin.kotlin.collections.getValue_ag2o6f$', wrapFunction(function () {
      var getOrImplicitDefault = _.kotlin.collections.getOrImplicitDefault_t9ocha$;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, thisRef, property) {
        var tmp$;
        return (tmp$ = getOrImplicitDefault($receiver, property.callableName)) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    var setValue = defineInlineFunction('kotlin.kotlin.collections.setValue_p0hbkv$', function ($receiver, thisRef, property, value) {
      $receiver.put_xwzc9p$(property.callableName, value);
    });
    function getOrImplicitDefault($receiver, key) {
      if (Kotlin.isType($receiver, MapWithDefault))
        return $receiver.getOrImplicitDefault_11rb$(key);
      var getOrElseNullable$result;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null && !$receiver.containsKey_11rb$(key)) {
        throw new NoSuchElementException('Key ' + key + ' is missing in the map.');
      } else {
        getOrElseNullable$result = (tmp$ = value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      }
      return getOrElseNullable$result;
    }
    function withDefault($receiver, defaultValue) {
      if (Kotlin.isType($receiver, MapWithDefault))
        return withDefault($receiver.map, defaultValue);
      else
        return new MapWithDefaultImpl($receiver, defaultValue);
    }
    function withDefault_0($receiver, defaultValue) {
      if (Kotlin.isType($receiver, MutableMapWithDefault))
        return withDefault_0($receiver.map, defaultValue);
      else
        return new MutableMapWithDefaultImpl($receiver, defaultValue);
    }
    function MapWithDefault() {
    }
    MapWithDefault.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MapWithDefault', interfaces: [Map]};
    function MutableMapWithDefault() {
    }
    MutableMapWithDefault.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MutableMapWithDefault', interfaces: [MapWithDefault, MutableMap]};
    function MapWithDefaultImpl(map, default_0) {
      this.map_tyjeqh$_0 = map;
      this.default_0 = default_0;
    }
    Object.defineProperty(MapWithDefaultImpl.prototype, 'map', {get: function () {
      return this.map_tyjeqh$_0;
    }});
    MapWithDefaultImpl.prototype.equals = function (other) {
      return equals(this.map, other);
    };
    MapWithDefaultImpl.prototype.hashCode = function () {
      return hashCode(this.map);
    };
    MapWithDefaultImpl.prototype.toString = function () {
      return this.map.toString();
    };
    Object.defineProperty(MapWithDefaultImpl.prototype, 'size', {get: function () {
      return this.map.size;
    }});
    MapWithDefaultImpl.prototype.isEmpty = function () {
      return this.map.isEmpty();
    };
    MapWithDefaultImpl.prototype.containsKey_11rb$ = function (key) {
      return this.map.containsKey_11rb$(key);
    };
    MapWithDefaultImpl.prototype.containsValue_11rc$ = function (value) {
      return this.map.containsValue_11rc$(value);
    };
    MapWithDefaultImpl.prototype.get_11rb$ = function (key) {
      return this.map.get_11rb$(key);
    };
    Object.defineProperty(MapWithDefaultImpl.prototype, 'keys', {get: function () {
      return this.map.keys;
    }});
    Object.defineProperty(MapWithDefaultImpl.prototype, 'values', {get: function () {
      return this.map.values;
    }});
    Object.defineProperty(MapWithDefaultImpl.prototype, 'entries', {get: function () {
      return this.map.entries;
    }});
    MapWithDefaultImpl.prototype.getOrImplicitDefault_11rb$ = function (key) {
      var $receiver = this.map;
      var getOrElseNullable$result;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null && !$receiver.containsKey_11rb$(key)) {
        getOrElseNullable$result = this.default_0(key);
      } else {
        getOrElseNullable$result = (tmp$ = value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      }
      return getOrElseNullable$result;
    };
    MapWithDefaultImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'MapWithDefaultImpl', interfaces: [MapWithDefault]};
    function MutableMapWithDefaultImpl(map, default_0) {
      this.map_a09uzx$_0 = map;
      this.default_0 = default_0;
    }
    Object.defineProperty(MutableMapWithDefaultImpl.prototype, 'map', {get: function () {
      return this.map_a09uzx$_0;
    }});
    MutableMapWithDefaultImpl.prototype.equals = function (other) {
      return equals(this.map, other);
    };
    MutableMapWithDefaultImpl.prototype.hashCode = function () {
      return hashCode(this.map);
    };
    MutableMapWithDefaultImpl.prototype.toString = function () {
      return this.map.toString();
    };
    Object.defineProperty(MutableMapWithDefaultImpl.prototype, 'size', {get: function () {
      return this.map.size;
    }});
    MutableMapWithDefaultImpl.prototype.isEmpty = function () {
      return this.map.isEmpty();
    };
    MutableMapWithDefaultImpl.prototype.containsKey_11rb$ = function (key) {
      return this.map.containsKey_11rb$(key);
    };
    MutableMapWithDefaultImpl.prototype.containsValue_11rc$ = function (value) {
      return this.map.containsValue_11rc$(value);
    };
    MutableMapWithDefaultImpl.prototype.get_11rb$ = function (key) {
      return this.map.get_11rb$(key);
    };
    Object.defineProperty(MutableMapWithDefaultImpl.prototype, 'keys', {get: function () {
      return this.map.keys;
    }});
    Object.defineProperty(MutableMapWithDefaultImpl.prototype, 'values', {get: function () {
      return this.map.values;
    }});
    Object.defineProperty(MutableMapWithDefaultImpl.prototype, 'entries', {get: function () {
      return this.map.entries;
    }});
    MutableMapWithDefaultImpl.prototype.put_xwzc9p$ = function (key, value) {
      return this.map.put_xwzc9p$(key, value);
    };
    MutableMapWithDefaultImpl.prototype.remove_11rb$ = function (key) {
      return this.map.remove_11rb$(key);
    };
    MutableMapWithDefaultImpl.prototype.putAll_a2k3zr$ = function (from) {
      this.map.putAll_a2k3zr$(from);
    };
    MutableMapWithDefaultImpl.prototype.clear = function () {
      this.map.clear();
    };
    MutableMapWithDefaultImpl.prototype.getOrImplicitDefault_11rb$ = function (key) {
      var $receiver = this.map;
      var getOrElseNullable$result;
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null && !$receiver.containsKey_11rb$(key)) {
        getOrElseNullable$result = this.default_0(key);
      } else {
        getOrElseNullable$result = (tmp$ = value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      }
      return getOrElseNullable$result;
    };
    MutableMapWithDefaultImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'MutableMapWithDefaultImpl', interfaces: [MutableMapWithDefault]};
    function EmptyMap() {
      EmptyMap_instance = this;
      this.serialVersionUID_0 = L8246714829545688274;
    }
    EmptyMap.prototype.equals = function (other) {
      return Kotlin.isType(other, Map) && other.isEmpty();
    };
    EmptyMap.prototype.hashCode = function () {
      return 0;
    };
    EmptyMap.prototype.toString = function () {
      return '{}';
    };
    Object.defineProperty(EmptyMap.prototype, 'size', {get: function () {
      return 0;
    }});
    EmptyMap.prototype.isEmpty = function () {
      return true;
    };
    EmptyMap.prototype.containsKey_11rb$ = function (key) {
      return false;
    };
    EmptyMap.prototype.containsValue_11rc$ = function (value) {
      return false;
    };
    EmptyMap.prototype.get_11rb$ = function (key) {
      return null;
    };
    Object.defineProperty(EmptyMap.prototype, 'entries', {get: function () {
      return EmptySet_getInstance();
    }});
    Object.defineProperty(EmptyMap.prototype, 'keys', {get: function () {
      return EmptySet_getInstance();
    }});
    Object.defineProperty(EmptyMap.prototype, 'values', {get: function () {
      return EmptyList_getInstance();
    }});
    EmptyMap.prototype.readResolve_0 = function () {
      return EmptyMap_getInstance();
    };
    EmptyMap.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptyMap', interfaces: [Serializable, Map]};
    var EmptyMap_instance = null;
    function EmptyMap_getInstance() {
      if (EmptyMap_instance === null) {
        new EmptyMap();
      }return EmptyMap_instance;
    }
    function emptyMap() {
      var tmp$;
      return Kotlin.isType(tmp$ = EmptyMap_getInstance(), Map) ? tmp$ : throwCCE_0();
    }
    function mapOf_0(pairs) {
      return pairs.length > 0 ? toMap_2(pairs, LinkedHashMap_init_2(mapCapacity(pairs.length))) : emptyMap();
    }
    var mapOf_1 = defineInlineFunction('kotlin.kotlin.collections.mapOf_q3lmfv$', wrapFunction(function () {
      var emptyMap = _.kotlin.collections.emptyMap_q3lmfv$;
      return function () {
        return emptyMap();
      };
    }));
    var mutableMapOf = defineInlineFunction('kotlin.kotlin.collections.mutableMapOf_q3lmfv$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function () {
        return LinkedHashMap_init();
      };
    }));
    function mutableMapOf_0(pairs) {
      var $receiver = LinkedHashMap_init_2(mapCapacity(pairs.length));
      putAll($receiver, pairs);
      return $receiver;
    }
    var hashMapOf = defineInlineFunction('kotlin.kotlin.collections.hashMapOf_q3lmfv$', wrapFunction(function () {
      var HashMap_init = _.kotlin.collections.HashMap_init_q3lmfv$;
      return function () {
        return HashMap_init();
      };
    }));
    function hashMapOf_0(pairs) {
      var $receiver = HashMap_init_2(mapCapacity(pairs.length));
      putAll($receiver, pairs);
      return $receiver;
    }
    var linkedMapOf = defineInlineFunction('kotlin.kotlin.collections.linkedMapOf_q3lmfv$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function () {
        return LinkedHashMap_init();
      };
    }));
    function linkedMapOf_0(pairs) {
      return toMap_2(pairs, LinkedHashMap_init_2(mapCapacity(pairs.length)));
    }
    var buildMap = defineInlineFunction('kotlin.kotlin.collections.buildMap_wi666j$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function (builderAction) {
        var $receiver = LinkedHashMap_init();
        builderAction($receiver);
        return $receiver;
      };
    }));
    var buildMap_0 = defineInlineFunction('kotlin.kotlin.collections.buildMap_19avp$', wrapFunction(function () {
      var checkBuilderCapacity = _.kotlin.collections.checkBuilderCapacity_za3lpa$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function (capacity, builderAction) {
        checkBuilderCapacity(capacity);
        var $receiver = LinkedHashMap_init(mapCapacity(capacity));
        builderAction($receiver);
        return $receiver;
      };
    }));
    var isNotEmpty_9 = defineInlineFunction('kotlin.kotlin.collections.isNotEmpty_abgq59$', function ($receiver) {
      return !$receiver.isEmpty();
    });
    var isNullOrEmpty_1 = defineInlineFunction('kotlin.kotlin.collections.isNullOrEmpty_13qzv0$', function ($receiver) {
      return $receiver == null || $receiver.isEmpty();
    });
    var orEmpty_2 = defineInlineFunction('kotlin.kotlin.collections.orEmpty_f3wkhh$', wrapFunction(function () {
      var emptyMap = _.kotlin.collections.emptyMap_q3lmfv$;
      return function ($receiver) {
        return $receiver != null ? $receiver : emptyMap();
      };
    }));
    var ifEmpty_1 = defineInlineFunction('kotlin.kotlin.collections.ifEmpty_geskui$', function ($receiver, defaultValue) {
      return $receiver.isEmpty() ? defaultValue() : $receiver;
    });
    var contains_51 = defineInlineFunction('kotlin.kotlin.collections.contains_4pa84t$', wrapFunction(function () {
      var Map = _.kotlin.collections.Map;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, key) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(key);
      };
    }));
    var get_49 = defineInlineFunction('kotlin.kotlin.collections.get_4pa84t$', wrapFunction(function () {
      var Map = _.kotlin.collections.Map;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, key) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).get_11rb$(key);
      };
    }));
    var set_20 = defineInlineFunction('kotlin.kotlin.collections.set_6y9eq4$', function ($receiver, key, value) {
      $receiver.put_xwzc9p$(key, value);
    });
    var containsKey = defineInlineFunction('kotlin.kotlin.collections.containsKey_ysgkzk$', wrapFunction(function () {
      var Map = _.kotlin.collections.Map;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, key) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).containsKey_11rb$(key);
      };
    }));
    var containsValue = defineInlineFunction('kotlin.kotlin.collections.containsValue_bvbopf$', function ($receiver, value) {
      return $receiver.containsValue_11rc$(value);
    });
    var remove = defineInlineFunction('kotlin.kotlin.collections.remove_vbdv38$', wrapFunction(function () {
      var MutableMap = _.kotlin.collections.MutableMap;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, key) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, MutableMap) ? tmp$ : throwCCE()).remove_11rb$(key);
      };
    }));
    var component1_13 = defineInlineFunction('kotlin.kotlin.collections.component1_gzf0zl$', function ($receiver) {
      return $receiver.key;
    });
    var component2_13 = defineInlineFunction('kotlin.kotlin.collections.component2_gzf0zl$', function ($receiver) {
      return $receiver.value;
    });
    var toPair = defineInlineFunction('kotlin.kotlin.collections.toPair_gzf0zl$', wrapFunction(function () {
      var Pair_init = _.kotlin.Pair;
      return function ($receiver) {
        return new Pair_init($receiver.key, $receiver.value);
      };
    }));
    var getOrElse_14 = defineInlineFunction('kotlin.kotlin.collections.getOrElse_illxjf$', function ($receiver, key, defaultValue) {
      var tmp$;
      return (tmp$ = $receiver.get_11rb$(key)) != null ? tmp$ : defaultValue();
    });
    var getOrElseNullable = defineInlineFunction('kotlin.kotlin.collections.getOrElseNullable_e54js$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, key, defaultValue) {
        var tmp$;
        var value = $receiver.get_11rb$(key);
        if (value == null && !$receiver.containsKey_11rb$(key)) {
          return defaultValue();
        } else {
          return (tmp$ = value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
        }
      };
    }));
    function getValue_2($receiver, key) {
      return getOrImplicitDefault($receiver, key);
    }
    var getOrPut = defineInlineFunction('kotlin.kotlin.collections.getOrPut_9wl75a$', function ($receiver, key, defaultValue) {
      var tmp$;
      var value = $receiver.get_11rb$(key);
      if (value == null) {
        var answer = defaultValue();
        $receiver.put_xwzc9p$(key, answer);
        tmp$ = answer;
      } else {
        tmp$ = value;
      }
      return tmp$;
    });
    var iterator_1 = defineInlineFunction('kotlin.kotlin.collections.iterator_abgq59$', function ($receiver) {
      return $receiver.entries.iterator();
    });
    var iterator_2 = defineInlineFunction('kotlin.kotlin.collections.iterator_5rvit3$', function ($receiver) {
      return $receiver.entries.iterator();
    });
    var mapValuesTo = defineInlineFunction('kotlin.kotlin.collections.mapValuesTo_8auxj8$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(element.key, transform(element));
      }
      return destination;
    });
    var mapKeysTo = defineInlineFunction('kotlin.kotlin.collections.mapKeysTo_l1xmvz$', function ($receiver, destination, transform) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        destination.put_xwzc9p$(transform(element), element.value);
      }
      return destination;
    });
    function putAll($receiver, pairs) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== pairs.length; ++tmp$) {
        var tmp$_0 = pairs[tmp$];
        var key = tmp$_0.component1(), value = tmp$_0.component2();
        $receiver.put_xwzc9p$(key, value);
      }
    }
    function putAll_0($receiver, pairs) {
      var tmp$;
      tmp$ = pairs.iterator();
      while (tmp$.hasNext()) {
        var tmp$_0 = tmp$.next();
        var key = tmp$_0.component1(), value = tmp$_0.component2();
        $receiver.put_xwzc9p$(key, value);
      }
    }
    function putAll_1($receiver, pairs) {
      var tmp$;
      tmp$ = pairs.iterator();
      while (tmp$.hasNext()) {
        var tmp$_0 = tmp$.next();
        var key = tmp$_0.component1(), value = tmp$_0.component2();
        $receiver.put_xwzc9p$(key, value);
      }
    }
    var mapValues = defineInlineFunction('kotlin.kotlin.collections.mapValues_8169ik$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var destination = LinkedHashMap_init(mapCapacity($receiver.size));
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(element.key, transform(element));
        }
        return destination;
      };
    }));
    var mapKeys = defineInlineFunction('kotlin.kotlin.collections.mapKeys_8169ik$', wrapFunction(function () {
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_bwtc7$;
      return function ($receiver, transform) {
        var destination = LinkedHashMap_init(mapCapacity($receiver.size));
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          destination.put_xwzc9p$(transform(element), element.value);
        }
        return destination;
      };
    }));
    var filterKeys = defineInlineFunction('kotlin.kotlin.collections.filterKeys_bbcyu0$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, predicate) {
        var tmp$;
        var result = LinkedHashMap_init();
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var entry = tmp$.next();
          if (predicate(entry.key)) {
            result.put_xwzc9p$(entry.key, entry.value);
          }}
        return result;
      };
    }));
    var filterValues = defineInlineFunction('kotlin.kotlin.collections.filterValues_btttvb$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, predicate) {
        var tmp$;
        var result = LinkedHashMap_init();
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var entry = tmp$.next();
          if (predicate(entry.value)) {
            result.put_xwzc9p$(entry.key, entry.value);
          }}
        return result;
      };
    }));
    var filterTo_15 = defineInlineFunction('kotlin.kotlin.collections.filterTo_6i6lq2$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (predicate(element)) {
          destination.put_xwzc9p$(element.key, element.value);
        }}
      return destination;
    });
    var filter_16 = defineInlineFunction('kotlin.kotlin.collections.filter_9peqz9$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, predicate) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (predicate(element)) {
            destination.put_xwzc9p$(element.key, element.value);
          }}
        return destination;
      };
    }));
    var filterNotTo_15 = defineInlineFunction('kotlin.kotlin.collections.filterNotTo_6i6lq2$', function ($receiver, destination, predicate) {
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!predicate(element)) {
          destination.put_xwzc9p$(element.key, element.value);
        }}
      return destination;
    });
    var filterNot_16 = defineInlineFunction('kotlin.kotlin.collections.filterNot_9peqz9$', wrapFunction(function () {
      var LinkedHashMap_init = _.kotlin.collections.LinkedHashMap_init_q3lmfv$;
      return function ($receiver, predicate) {
        var destination = LinkedHashMap_init();
        var tmp$;
        tmp$ = $receiver.entries.iterator();
        while (tmp$.hasNext()) {
          var element = tmp$.next();
          if (!predicate(element)) {
            destination.put_xwzc9p$(element.key, element.value);
          }}
        return destination;
      };
    }));
    function toMap($receiver) {
      var tmp$;
      if (Kotlin.isType($receiver, Collection)) {
        switch ($receiver.size) {
          case 0:
            tmp$ = emptyMap();
            break;
          case 1:
            tmp$ = mapOf(Kotlin.isType($receiver, List) ? $receiver.get_za3lpa$(0) : $receiver.iterator().next());
            break;
          default:tmp$ = toMap_0($receiver, LinkedHashMap_init_2(mapCapacity($receiver.size)));
            break;
        }
        return tmp$;
      }return optimizeReadOnlyMap(toMap_0($receiver, LinkedHashMap_init()));
    }
    function toMap_0($receiver, destination) {
      putAll_0(destination, $receiver);
      return destination;
    }
    function toMap_1($receiver) {
      switch ($receiver.length) {
        case 0:
          return emptyMap();
        case 1:
          return mapOf($receiver[0]);
        default:return toMap_2($receiver, LinkedHashMap_init_2(mapCapacity($receiver.length)));
      }
    }
    function toMap_2($receiver, destination) {
      putAll(destination, $receiver);
      return destination;
    }
    function toMap_3($receiver) {
      return optimizeReadOnlyMap(toMap_4($receiver, LinkedHashMap_init()));
    }
    function toMap_4($receiver, destination) {
      putAll_1(destination, $receiver);
      return destination;
    }
    function toMap_5($receiver) {
      switch ($receiver.size) {
        case 0:
          return emptyMap();
        case 1:
          return toMutableMap($receiver);
        default:return toMutableMap($receiver);
      }
    }
    function toMutableMap($receiver) {
      return LinkedHashMap_init_3($receiver);
    }
    function toMap_6($receiver, destination) {
      destination.putAll_a2k3zr$($receiver);
      return destination;
    }
    function plus_54($receiver, pair) {
      var tmp$;
      if ($receiver.isEmpty())
        tmp$ = mapOf(pair);
      else {
        var $receiver_0 = LinkedHashMap_init_3($receiver);
        $receiver_0.put_xwzc9p$(pair.first, pair.second);
        tmp$ = $receiver_0;
      }
      return tmp$;
    }
    function plus_55($receiver, pairs) {
      var tmp$;
      if ($receiver.isEmpty())
        tmp$ = toMap(pairs);
      else {
        var $receiver_0 = LinkedHashMap_init_3($receiver);
        putAll_0($receiver_0, pairs);
        tmp$ = $receiver_0;
      }
      return tmp$;
    }
    function plus_56($receiver, pairs) {
      var tmp$;
      if ($receiver.isEmpty())
        tmp$ = toMap_1(pairs);
      else {
        var $receiver_0 = LinkedHashMap_init_3($receiver);
        putAll($receiver_0, pairs);
        tmp$ = $receiver_0;
      }
      return tmp$;
    }
    function plus_57($receiver, pairs) {
      var $receiver_0 = LinkedHashMap_init_3($receiver);
      putAll_1($receiver_0, pairs);
      return optimizeReadOnlyMap($receiver_0);
    }
    function plus_58($receiver, map) {
      var $receiver_0 = LinkedHashMap_init_3($receiver);
      $receiver_0.putAll_a2k3zr$(map);
      return $receiver_0;
    }
    var plusAssign = defineInlineFunction('kotlin.kotlin.collections.plusAssign_iu53pl$', function ($receiver, pair) {
      $receiver.put_xwzc9p$(pair.first, pair.second);
    });
    var plusAssign_0 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_cweazw$', wrapFunction(function () {
      var putAll = _.kotlin.collections.putAll_cweazw$;
      return function ($receiver, pairs) {
        putAll($receiver, pairs);
      };
    }));
    var plusAssign_1 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_5gv49o$', wrapFunction(function () {
      var putAll = _.kotlin.collections.putAll_5gv49o$;
      return function ($receiver, pairs) {
        putAll($receiver, pairs);
      };
    }));
    var plusAssign_2 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_2ud8ki$', wrapFunction(function () {
      var putAll = _.kotlin.collections.putAll_2ud8ki$;
      return function ($receiver, pairs) {
        putAll($receiver, pairs);
      };
    }));
    var plusAssign_3 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_i7ax6h$', function ($receiver, map) {
      $receiver.putAll_a2k3zr$(map);
    });
    function minus_11($receiver, key) {
      var $receiver_0 = toMutableMap($receiver);
      $receiver_0.remove_11rb$(key);
      return optimizeReadOnlyMap($receiver_0);
    }
    function minus_12($receiver, keys) {
      var $receiver_0 = toMutableMap($receiver);
      removeAll_0($receiver_0.keys, keys);
      return optimizeReadOnlyMap($receiver_0);
    }
    function minus_13($receiver, keys) {
      var $receiver_0 = toMutableMap($receiver);
      removeAll_2($receiver_0.keys, keys);
      return optimizeReadOnlyMap($receiver_0);
    }
    function minus_14($receiver, keys) {
      var $receiver_0 = toMutableMap($receiver);
      removeAll_1($receiver_0.keys, keys);
      return optimizeReadOnlyMap($receiver_0);
    }
    var minusAssign = defineInlineFunction('kotlin.kotlin.collections.minusAssign_5rmzjt$', function ($receiver, key) {
      $receiver.remove_11rb$(key);
    });
    var minusAssign_0 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_zgveeq$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_ipc267$;
      return function ($receiver, keys) {
        removeAll($receiver.keys, keys);
      };
    }));
    var minusAssign_1 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_kom96y$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_ye1y7v$;
      return function ($receiver, keys) {
        removeAll($receiver.keys, keys);
      };
    }));
    var minusAssign_2 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_1zq34s$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_tj7pfx$;
      return function ($receiver, keys) {
        removeAll($receiver.keys, keys);
      };
    }));
    function optimizeReadOnlyMap($receiver) {
      switch ($receiver.size) {
        case 0:
          return emptyMap();
        case 1:
          return $receiver;
        default:return $receiver;
      }
    }
    var remove_0 = defineInlineFunction('kotlin.kotlin.collections.remove_cz4ny2$', wrapFunction(function () {
      var MutableCollection = _.kotlin.collections.MutableCollection;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, element) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).remove_11rb$(element);
      };
    }));
    var removeAll = defineInlineFunction('kotlin.kotlin.collections.removeAll_qrknmz$', wrapFunction(function () {
      var MutableCollection = _.kotlin.collections.MutableCollection;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, elements) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).removeAll_brywnq$(elements);
      };
    }));
    var retainAll = defineInlineFunction('kotlin.kotlin.collections.retainAll_qrknmz$', wrapFunction(function () {
      var MutableCollection = _.kotlin.collections.MutableCollection;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, elements) {
        var tmp$;
        return (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).retainAll_brywnq$(elements);
      };
    }));
    var plusAssign_4 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_mohyd4$', function ($receiver, element) {
      $receiver.add_11rb$(element);
    });
    var plusAssign_5 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_ipc267$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ipc267$;
      return function ($receiver, elements) {
        addAll($receiver, elements);
      };
    }));
    var plusAssign_6 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_x8tvoq$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_ye1y7v$;
      return function ($receiver, elements) {
        addAll($receiver, elements);
      };
    }));
    var plusAssign_7 = defineInlineFunction('kotlin.kotlin.collections.plusAssign_tj7pfx$', wrapFunction(function () {
      var addAll = _.kotlin.collections.addAll_tj7pfx$;
      return function ($receiver, elements) {
        addAll($receiver, elements);
      };
    }));
    var minusAssign_3 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_mohyd4$', function ($receiver, element) {
      $receiver.remove_11rb$(element);
    });
    var minusAssign_4 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_ipc267$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_ipc267$;
      return function ($receiver, elements) {
        removeAll($receiver, elements);
      };
    }));
    var minusAssign_5 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_x8tvoq$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_ye1y7v$;
      return function ($receiver, elements) {
        removeAll($receiver, elements);
      };
    }));
    var minusAssign_6 = defineInlineFunction('kotlin.kotlin.collections.minusAssign_tj7pfx$', wrapFunction(function () {
      var removeAll = _.kotlin.collections.removeAll_tj7pfx$;
      return function ($receiver, elements) {
        removeAll($receiver, elements);
      };
    }));
    function addAll($receiver, elements) {
      var tmp$;
      if (Kotlin.isType(elements, Collection))
        return $receiver.addAll_brywnq$(elements);
      else {
        var result = false;
        tmp$ = elements.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          if ($receiver.add_11rb$(item))
            result = true;
        }
        return result;
      }
    }
    function addAll_0($receiver, elements) {
      var tmp$;
      var result = false;
      tmp$ = elements.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        if ($receiver.add_11rb$(item))
          result = true;
      }
      return result;
    }
    function addAll_1($receiver, elements) {
      return $receiver.addAll_brywnq$(asList(elements));
    }
    function removeAll_0($receiver, elements) {
      var elements_0 = convertToSetForSetOperationWith(elements, $receiver);
      var tmp$;
      return (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).removeAll_brywnq$(elements_0);
    }
    function removeAll_1($receiver, elements) {
      var set = toHashSet_9(elements);
      return !set.isEmpty() && $receiver.removeAll_brywnq$(set);
    }
    function removeAll_2($receiver, elements) {
      return !(elements.length === 0) && $receiver.removeAll_brywnq$(toHashSet(elements));
    }
    function retainAll_0($receiver, elements) {
      var elements_0 = convertToSetForSetOperationWith(elements, $receiver);
      var tmp$;
      return (Kotlin.isType(tmp$ = $receiver, MutableCollection) ? tmp$ : throwCCE()).retainAll_brywnq$(elements_0);
    }
    function retainAll_1($receiver, elements) {
      if (!(elements.length === 0))
        return $receiver.retainAll_brywnq$(toHashSet(elements));
      else
        return retainNothing($receiver);
    }
    function retainAll_2($receiver, elements) {
      var set = toHashSet_9(elements);
      if (!set.isEmpty())
        return $receiver.retainAll_brywnq$(set);
      else
        return retainNothing($receiver);
    }
    function retainNothing($receiver) {
      var result = !$receiver.isEmpty();
      $receiver.clear();
      return result;
    }
    function removeAll_3($receiver, predicate) {
      return filterInPlace($receiver, predicate, true);
    }
    function retainAll_3($receiver, predicate) {
      return filterInPlace($receiver, predicate, false);
    }
    function filterInPlace($receiver, predicate, predicateResultToRemove) {
      var result = {v: false};
      var $receiver_0 = $receiver.iterator();
      while ($receiver_0.hasNext())
        if (predicate($receiver_0.next()) === predicateResultToRemove) {
          $receiver_0.remove();
          result.v = true;
        }return result.v;
    }
    function shuffled_0($receiver, random) {
      var $receiver_0 = toMutableList_8($receiver);
      shuffle_0($receiver_0, random);
      return $receiver_0;
    }
    var remove_1 = defineInlineFunction('kotlin.kotlin.collections.remove_tkbrz9$', function ($receiver, index) {
      return $receiver.removeAt_za3lpa$(index);
    });
    function removeFirst($receiver) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('List is empty.');
      else
        return $receiver.removeAt_za3lpa$(0);
    }
    function removeFirstOrNull($receiver) {
      return $receiver.isEmpty() ? null : $receiver.removeAt_za3lpa$(0);
    }
    function removeLast($receiver) {
      if ($receiver.isEmpty())
        throw new NoSuchElementException('List is empty.');
      else
        return $receiver.removeAt_za3lpa$(get_lastIndex_12($receiver));
    }
    function removeLastOrNull($receiver) {
      return $receiver.isEmpty() ? null : $receiver.removeAt_za3lpa$(get_lastIndex_12($receiver));
    }
    function removeAll_4($receiver, predicate) {
      return filterInPlace_0($receiver, predicate, true);
    }
    function retainAll_4($receiver, predicate) {
      return filterInPlace_0($receiver, predicate, false);
    }
    function filterInPlace_0($receiver, predicate, predicateResultToRemove) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (!Kotlin.isType($receiver, RandomAccess))
        return filterInPlace(Kotlin.isType(tmp$ = $receiver, MutableIterable) ? tmp$ : throwCCE_0(), predicate, predicateResultToRemove);
      var writeIndex = 0;
      tmp$_0 = get_lastIndex_12($receiver);
      for (var readIndex = 0; readIndex <= tmp$_0; readIndex++) {
        var element = $receiver.get_za3lpa$(readIndex);
        if (predicate(element) === predicateResultToRemove)
          continue;
        if (writeIndex !== readIndex)
          $receiver.set_wxm5ur$(writeIndex, element);
        writeIndex = writeIndex + 1 | 0;
      }
      if (writeIndex < $receiver.size) {
        tmp$_1 = get_lastIndex_12($receiver);
        tmp$_2 = writeIndex;
        for (var removeIndex = tmp$_1; removeIndex >= tmp$_2; removeIndex--)
          $receiver.removeAt_za3lpa$(removeIndex);
        return true;
      } else {
        return false;
      }
    }
    function shuffle_0($receiver, random) {
      for (var i = get_lastIndex_12($receiver); i >= 1; i--) {
        var j = random.nextInt_za3lpa$(i + 1 | 0);
        var copy = $receiver.get_za3lpa$(i);
        $receiver.set_wxm5ur$(i, $receiver.get_za3lpa$(j));
        $receiver.set_wxm5ur$(j, copy);
      }
    }
    function ReversedListReadOnly(delegate) {
      AbstractList.call(this);
      this.delegate_0 = delegate;
    }
    Object.defineProperty(ReversedListReadOnly.prototype, 'size', {get: function () {
      return this.delegate_0.size;
    }});
    ReversedListReadOnly.prototype.get_za3lpa$ = function (index) {
      return this.delegate_0.get_za3lpa$(reverseElementIndex(this, index));
    };
    ReversedListReadOnly.$metadata$ = {kind: Kind_CLASS, simpleName: 'ReversedListReadOnly', interfaces: [AbstractList]};
    function ReversedList(delegate) {
      AbstractMutableList.call(this);
      this.delegate_0 = delegate;
    }
    Object.defineProperty(ReversedList.prototype, 'size', {get: function () {
      return this.delegate_0.size;
    }});
    ReversedList.prototype.get_za3lpa$ = function (index) {
      return this.delegate_0.get_za3lpa$(reverseElementIndex(this, index));
    };
    ReversedList.prototype.clear = function () {
      this.delegate_0.clear();
    };
    ReversedList.prototype.removeAt_za3lpa$ = function (index) {
      return this.delegate_0.removeAt_za3lpa$(reverseElementIndex(this, index));
    };
    ReversedList.prototype.set_wxm5ur$ = function (index, element) {
      return this.delegate_0.set_wxm5ur$(reverseElementIndex(this, index), element);
    };
    ReversedList.prototype.add_wxm5ur$ = function (index, element) {
      this.delegate_0.add_wxm5ur$(reversePositionIndex(this, index), element);
    };
    ReversedList.$metadata$ = {kind: Kind_CLASS, simpleName: 'ReversedList', interfaces: [AbstractMutableList]};
    function reverseElementIndex($receiver, index) {
      var tmp$;
      tmp$ = get_lastIndex_12($receiver);
      if (0 <= index && index <= tmp$)
        return get_lastIndex_12($receiver) - index | 0;
      else
        throw new IndexOutOfBoundsException('Element index ' + index + ' must be in range [' + new IntRange(0, get_lastIndex_12($receiver)) + '].');
    }
    function reversePositionIndex($receiver, index) {
      var tmp$;
      tmp$ = $receiver.size;
      if (0 <= index && index <= tmp$)
        return $receiver.size - index | 0;
      else
        throw new IndexOutOfBoundsException('Position index ' + index + ' must be in range [' + new IntRange(0, $receiver.size) + '].');
    }
    function asReversed($receiver) {
      return new ReversedListReadOnly($receiver);
    }
    function asReversed_0($receiver) {
      return new ReversedList($receiver);
    }
    function Sequence() {
    }
    Sequence.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Sequence', interfaces: []};
    function Sequence$ObjectLiteral_2(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral_2.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral_2.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function sequence$lambda(closure$block) {
      return function () {
        return iterator_3(closure$block);
      };
    }
    function sequence(block) {
      return new Sequence$ObjectLiteral_2(sequence$lambda(block));
    }
    var buildSequence = defineInlineFunction('kotlin.kotlin.sequences.buildSequence_o0x0bg$', wrapFunction(function () {
      var iterator = _.kotlin.sequences.iterator_o0x0bg$;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Sequence = _.kotlin.sequences.Sequence;
      function Sequence$ObjectLiteral(closure$iterator) {
        this.closure$iterator = closure$iterator;
      }
      Sequence$ObjectLiteral.prototype.iterator = function () {
        return this.closure$iterator();
      };
      Sequence$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
      function buildSequence$lambda(closure$builderAction) {
        return function () {
          return iterator(closure$builderAction);
        };
      }
      return function (builderAction) {
        return new Sequence$ObjectLiteral(buildSequence$lambda(builderAction));
      };
    }));
    function iterator_3(block) {
      var iterator = new SequenceBuilderIterator();
      iterator.nextStep = createCoroutineUnintercepted_0(block, iterator, iterator);
      return iterator;
    }
    var buildIterator = defineInlineFunction('kotlin.kotlin.sequences.buildIterator_o0x0bg$', wrapFunction(function () {
      var iterator = _.kotlin.sequences.iterator_o0x0bg$;
      return function (builderAction) {
        return iterator(builderAction);
      };
    }));
    function SequenceScope() {
    }
    SequenceScope.prototype.yieldAll_p1ys8y$ = function (elements, continuation) {
      if (Kotlin.isType(elements, Collection) && elements.isEmpty())
        return;
      return this.yieldAll_1phuh2$(elements.iterator(), continuation);
    };
    SequenceScope.prototype.yieldAll_swo9gw$ = function (sequence, continuation) {
      return this.yieldAll_1phuh2$(sequence.iterator(), continuation);
    };
    SequenceScope.$metadata$ = {kind: Kind_CLASS, simpleName: 'SequenceScope', interfaces: []};
    var State_NotReady;
    var State_ManyNotReady;
    var State_ManyReady;
    var State_Ready;
    var State_Done;
    var State_Failed;
    function SequenceBuilderIterator() {
      SequenceScope.call(this);
      this.state_0 = 0;
      this.nextValue_0 = null;
      this.nextIterator_0 = null;
      this.nextStep = null;
    }
    SequenceBuilderIterator.prototype.hasNext = function () {
      while (true) {
        switch (this.state_0) {
          case 0:
            break;
          case 1:
            if (ensureNotNull(this.nextIterator_0).hasNext()) {
              this.state_0 = 2;
              return true;
            } else {
              this.nextIterator_0 = null;
            }

            break;
          case 4:
            return false;
          case 3:
          case 2:
            return true;
          default:throw this.exceptionalState_0();
        }
        this.state_0 = 5;
        var step = ensureNotNull(this.nextStep);
        this.nextStep = null;
        step.resumeWith_tl1gpc$(new Result(Unit_getInstance()));
      }
    };
    SequenceBuilderIterator.prototype.next = function () {
      var tmp$;
      switch (this.state_0) {
        case 0:
        case 1:
          return this.nextNotReady_0();
        case 2:
          this.state_0 = 1;
          return ensureNotNull(this.nextIterator_0).next();
        case 3:
          this.state_0 = 0;
          var result = (tmp$ = this.nextValue_0) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
          this.nextValue_0 = null;
          return result;
        default:throw this.exceptionalState_0();
      }
    };
    SequenceBuilderIterator.prototype.nextNotReady_0 = function () {
      if (!this.hasNext())
        throw NoSuchElementException_init();
      else
        return this.next();
    };
    SequenceBuilderIterator.prototype.exceptionalState_0 = function () {
      switch (this.state_0) {
        case 4:
          return NoSuchElementException_init();
        case 5:
          return IllegalStateException_init_0('Iterator has failed.');
        default:return IllegalStateException_init_0('Unexpected state of the iterator: ' + this.state_0);
      }
    };
    function SequenceBuilderIterator$yield$lambda(this$SequenceBuilderIterator) {
      return function (c) {
        this$SequenceBuilderIterator.nextStep = c;
        return get_COROUTINE_SUSPENDED();
      };
    }
    SequenceBuilderIterator.prototype.yield_11rb$ = function (value, continuation) {
      this.nextValue_0 = value;
      this.state_0 = 3;
      return SequenceBuilderIterator$yield$lambda(this)(continuation);
    };
    function SequenceBuilderIterator$yieldAll$lambda(this$SequenceBuilderIterator) {
      return function (c) {
        this$SequenceBuilderIterator.nextStep = c;
        return get_COROUTINE_SUSPENDED();
      };
    }
    SequenceBuilderIterator.prototype.yieldAll_1phuh2$ = function (iterator, continuation) {
      if (!iterator.hasNext())
        return;
      this.nextIterator_0 = iterator;
      this.state_0 = 2;
      return SequenceBuilderIterator$yieldAll$lambda(this)(continuation);
    };
    SequenceBuilderIterator.prototype.resumeWith_tl1gpc$ = function (result) {
      var tmp$;
      throwOnFailure(result);
      (tmp$ = result.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      this.state_0 = 4;
    };
    Object.defineProperty(SequenceBuilderIterator.prototype, 'context', {get: function () {
      return EmptyCoroutineContext_getInstance();
    }});
    SequenceBuilderIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'SequenceBuilderIterator', interfaces: [Continuation, Iterator, SequenceScope]};
    function Sequence$ObjectLiteral_3(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral_3.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral_3.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    var Sequence_0 = defineInlineFunction('kotlin.kotlin.sequences.Sequence_ms0qmx$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Sequence = _.kotlin.sequences.Sequence;
      function Sequence$ObjectLiteral(closure$iterator) {
        this.closure$iterator = closure$iterator;
      }
      Sequence$ObjectLiteral.prototype.iterator = function () {
        return this.closure$iterator();
      };
      Sequence$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
      return function (iterator) {
        return new Sequence$ObjectLiteral(iterator);
      };
    }));
    function asSequence$lambda_10(this$asSequence) {
      return function () {
        return this$asSequence;
      };
    }
    function asSequence_12($receiver) {
      return constrainOnce(new Sequence$ObjectLiteral_3(asSequence$lambda_10($receiver)));
    }
    function sequenceOf(elements) {
      return elements.length === 0 ? emptySequence() : asSequence(elements);
    }
    function emptySequence() {
      return EmptySequence_getInstance();
    }
    function EmptySequence() {
      EmptySequence_instance = this;
    }
    EmptySequence.prototype.iterator = function () {
      return EmptyIterator_getInstance();
    };
    EmptySequence.prototype.drop_za3lpa$ = function (n) {
      return EmptySequence_getInstance();
    };
    EmptySequence.prototype.take_za3lpa$ = function (n) {
      return EmptySequence_getInstance();
    };
    EmptySequence.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptySequence', interfaces: [DropTakeSequence, Sequence]};
    var EmptySequence_instance = null;
    function EmptySequence_getInstance() {
      if (EmptySequence_instance === null) {
        new EmptySequence();
      }return EmptySequence_instance;
    }
    var orEmpty_3 = defineInlineFunction('kotlin.kotlin.sequences.orEmpty_eamxo5$', wrapFunction(function () {
      var emptySequence = _.kotlin.sequences.emptySequence_287e2$;
      return function ($receiver) {
        return $receiver != null ? $receiver : emptySequence();
      };
    }));
    function Coroutine$ifEmpty$lambda(this$ifEmpty_0, closure$defaultValue_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$this$ifEmpty = this$ifEmpty_0;
      this.local$closure$defaultValue = closure$defaultValue_0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$ifEmpty$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$ifEmpty$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$ifEmpty$lambda.prototype.constructor = Coroutine$ifEmpty$lambda;
    Coroutine$ifEmpty$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              var iterator = this.local$this$ifEmpty.iterator();
              if (iterator.hasNext()) {
                this.state_0 = 3;
                this.result_0 = this.local$$receiver.yieldAll_1phuh2$(iterator, this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              } else {
                this.state_0 = 2;
                this.result_0 = this.local$$receiver.yieldAll_swo9gw$(this.local$closure$defaultValue(), this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              }

            case 1:
              throw this.exception_0;
            case 2:
              return Unit;
            case 3:
              return Unit;
            case 4:
              return;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function ifEmpty$lambda(this$ifEmpty_0, closure$defaultValue_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$ifEmpty$lambda(this$ifEmpty_0, closure$defaultValue_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function ifEmpty_2($receiver, defaultValue) {
      return sequence(ifEmpty$lambda($receiver, defaultValue));
    }
    function flatten$lambda(it) {
      return it.iterator();
    }
    function flatten_1($receiver) {
      return flatten_3($receiver, flatten$lambda);
    }
    function flatten$lambda_0(it) {
      return it.iterator();
    }
    function flatten_2($receiver) {
      return flatten_3($receiver, flatten$lambda_0);
    }
    function flatten$lambda_1(it) {
      return it;
    }
    function flatten_3($receiver, iterator) {
      var tmp$;
      if (Kotlin.isType($receiver, TransformingSequence)) {
        return (Kotlin.isType(tmp$ = $receiver, TransformingSequence) ? tmp$ : throwCCE_0()).flatten_1tglza$(iterator);
      }return new FlatteningSequence($receiver, flatten$lambda_1, iterator);
    }
    function unzip_1($receiver) {
      var tmp$;
      var listT = ArrayList_init();
      var listR = ArrayList_init();
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var pair = tmp$.next();
        listT.add_11rb$(pair.first);
        listR.add_11rb$(pair.second);
      }
      return to(listT, listR);
    }
    function FilteringSequence(sequence, sendWhen, predicate) {
      if (sendWhen === void 0)
        sendWhen = true;
      this.sequence_0 = sequence;
      this.sendWhen_0 = sendWhen;
      this.predicate_0 = predicate;
    }
    function FilteringSequence$iterator$ObjectLiteral(this$FilteringSequence) {
      this.this$FilteringSequence = this$FilteringSequence;
      this.iterator = this$FilteringSequence.sequence_0.iterator();
      this.nextState = -1;
      this.nextItem = null;
    }
    FilteringSequence$iterator$ObjectLiteral.prototype.calcNext_0 = function () {
      while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (this.this$FilteringSequence.predicate_0(item) === this.this$FilteringSequence.sendWhen_0) {
          this.nextItem = item;
          this.nextState = 1;
          return;
        }}
      this.nextState = 0;
    };
    FilteringSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.nextState === -1)
        this.calcNext_0();
      if (this.nextState === 0)
        throw NoSuchElementException_init();
      var result = this.nextItem;
      this.nextItem = null;
      this.nextState = -1;
      return (tmp$ = result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    FilteringSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.nextState === -1)
        this.calcNext_0();
      return this.nextState === 1;
    };
    FilteringSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    FilteringSequence.prototype.iterator = function () {
      return new FilteringSequence$iterator$ObjectLiteral(this);
    };
    FilteringSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'FilteringSequence', interfaces: [Sequence]};
    function TransformingSequence(sequence, transformer) {
      this.sequence_0 = sequence;
      this.transformer_0 = transformer;
    }
    function TransformingSequence$iterator$ObjectLiteral(this$TransformingSequence) {
      this.this$TransformingSequence = this$TransformingSequence;
      this.iterator = this$TransformingSequence.sequence_0.iterator();
    }
    TransformingSequence$iterator$ObjectLiteral.prototype.next = function () {
      return this.this$TransformingSequence.transformer_0(this.iterator.next());
    };
    TransformingSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.iterator.hasNext();
    };
    TransformingSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    TransformingSequence.prototype.iterator = function () {
      return new TransformingSequence$iterator$ObjectLiteral(this);
    };
    TransformingSequence.prototype.flatten_1tglza$ = function (iterator) {
      return new FlatteningSequence(this.sequence_0, this.transformer_0, iterator);
    };
    TransformingSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'TransformingSequence', interfaces: [Sequence]};
    function TransformingIndexedSequence(sequence, transformer) {
      this.sequence_0 = sequence;
      this.transformer_0 = transformer;
    }
    function TransformingIndexedSequence$iterator$ObjectLiteral(this$TransformingIndexedSequence) {
      this.this$TransformingIndexedSequence = this$TransformingIndexedSequence;
      this.iterator = this$TransformingIndexedSequence.sequence_0.iterator();
      this.index = 0;
    }
    TransformingIndexedSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      return this.this$TransformingIndexedSequence.transformer_0(checkIndexOverflow((tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$)), this.iterator.next());
    };
    TransformingIndexedSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.iterator.hasNext();
    };
    TransformingIndexedSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    TransformingIndexedSequence.prototype.iterator = function () {
      return new TransformingIndexedSequence$iterator$ObjectLiteral(this);
    };
    TransformingIndexedSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'TransformingIndexedSequence', interfaces: [Sequence]};
    function IndexingSequence(sequence) {
      this.sequence_0 = sequence;
    }
    function IndexingSequence$iterator$ObjectLiteral(this$IndexingSequence) {
      this.iterator = this$IndexingSequence.sequence_0.iterator();
      this.index = 0;
    }
    IndexingSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      return new IndexedValue(checkIndexOverflow((tmp$ = this.index, this.index = tmp$ + 1 | 0, tmp$)), this.iterator.next());
    };
    IndexingSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.iterator.hasNext();
    };
    IndexingSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    IndexingSequence.prototype.iterator = function () {
      return new IndexingSequence$iterator$ObjectLiteral(this);
    };
    IndexingSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'IndexingSequence', interfaces: [Sequence]};
    function MergingSequence(sequence1, sequence2, transform) {
      this.sequence1_0 = sequence1;
      this.sequence2_0 = sequence2;
      this.transform_0 = transform;
    }
    function MergingSequence$iterator$ObjectLiteral(this$MergingSequence) {
      this.this$MergingSequence = this$MergingSequence;
      this.iterator1 = this$MergingSequence.sequence1_0.iterator();
      this.iterator2 = this$MergingSequence.sequence2_0.iterator();
    }
    MergingSequence$iterator$ObjectLiteral.prototype.next = function () {
      return this.this$MergingSequence.transform_0(this.iterator1.next(), this.iterator2.next());
    };
    MergingSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.iterator1.hasNext() && this.iterator2.hasNext();
    };
    MergingSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    MergingSequence.prototype.iterator = function () {
      return new MergingSequence$iterator$ObjectLiteral(this);
    };
    MergingSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'MergingSequence', interfaces: [Sequence]};
    function FlatteningSequence(sequence, transformer, iterator) {
      this.sequence_0 = sequence;
      this.transformer_0 = transformer;
      this.iterator_0 = iterator;
    }
    function FlatteningSequence$iterator$ObjectLiteral(this$FlatteningSequence) {
      this.this$FlatteningSequence = this$FlatteningSequence;
      this.iterator = this$FlatteningSequence.sequence_0.iterator();
      this.itemIterator = null;
    }
    FlatteningSequence$iterator$ObjectLiteral.prototype.next = function () {
      if (!this.ensureItemIterator_0())
        throw NoSuchElementException_init();
      return ensureNotNull(this.itemIterator).next();
    };
    FlatteningSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.ensureItemIterator_0();
    };
    FlatteningSequence$iterator$ObjectLiteral.prototype.ensureItemIterator_0 = function () {
      var tmp$;
      if (((tmp$ = this.itemIterator) != null ? tmp$.hasNext() : null) === false)
        this.itemIterator = null;
      while (this.itemIterator == null) {
        if (!this.iterator.hasNext()) {
          return false;
        } else {
          var element = this.iterator.next();
          var nextItemIterator = this.this$FlatteningSequence.iterator_0(this.this$FlatteningSequence.transformer_0(element));
          if (nextItemIterator.hasNext()) {
            this.itemIterator = nextItemIterator;
            return true;
          }}
      }
      return true;
    };
    FlatteningSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    FlatteningSequence.prototype.iterator = function () {
      return new FlatteningSequence$iterator$ObjectLiteral(this);
    };
    FlatteningSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'FlatteningSequence', interfaces: [Sequence]};
    function DropTakeSequence() {
    }
    DropTakeSequence.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'DropTakeSequence', interfaces: [Sequence]};
    function SubSequence(sequence, startIndex, endIndex) {
      this.sequence_0 = sequence;
      this.startIndex_0 = startIndex;
      this.endIndex_0 = endIndex;
      if (!(this.startIndex_0 >= 0)) {
        var message = 'startIndex should be non-negative, but is ' + this.startIndex_0;
        throw IllegalArgumentException_init_0(message.toString());
      }if (!(this.endIndex_0 >= 0)) {
        var message_0 = 'endIndex should be non-negative, but is ' + this.endIndex_0;
        throw IllegalArgumentException_init_0(message_0.toString());
      }if (!(this.endIndex_0 >= this.startIndex_0)) {
        var message_1 = 'endIndex should be not less than startIndex, but was ' + this.endIndex_0 + ' < ' + this.startIndex_0;
        throw IllegalArgumentException_init_0(message_1.toString());
      }}
    Object.defineProperty(SubSequence.prototype, 'count_0', {get: function () {
      return this.endIndex_0 - this.startIndex_0 | 0;
    }});
    SubSequence.prototype.drop_za3lpa$ = function (n) {
      return n >= this.count_0 ? emptySequence() : new SubSequence(this.sequence_0, this.startIndex_0 + n | 0, this.endIndex_0);
    };
    SubSequence.prototype.take_za3lpa$ = function (n) {
      return n >= this.count_0 ? this : new SubSequence(this.sequence_0, this.startIndex_0, this.startIndex_0 + n | 0);
    };
    function SubSequence$iterator$ObjectLiteral(this$SubSequence) {
      this.this$SubSequence = this$SubSequence;
      this.iterator = this$SubSequence.sequence_0.iterator();
      this.position = 0;
    }
    SubSequence$iterator$ObjectLiteral.prototype.drop_0 = function () {
      while (this.position < this.this$SubSequence.startIndex_0 && this.iterator.hasNext()) {
        this.iterator.next();
        this.position = this.position + 1 | 0;
      }
    };
    SubSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      this.drop_0();
      return this.position < this.this$SubSequence.endIndex_0 && this.iterator.hasNext();
    };
    SubSequence$iterator$ObjectLiteral.prototype.next = function () {
      this.drop_0();
      if (this.position >= this.this$SubSequence.endIndex_0)
        throw NoSuchElementException_init();
      this.position = this.position + 1 | 0;
      return this.iterator.next();
    };
    SubSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    SubSequence.prototype.iterator = function () {
      return new SubSequence$iterator$ObjectLiteral(this);
    };
    SubSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'SubSequence', interfaces: [DropTakeSequence, Sequence]};
    function TakeSequence(sequence, count) {
      this.sequence_0 = sequence;
      this.count_0 = count;
      if (!(this.count_0 >= 0)) {
        var message = 'count must be non-negative, but was ' + this.count_0 + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }}
    TakeSequence.prototype.drop_za3lpa$ = function (n) {
      return n >= this.count_0 ? emptySequence() : new SubSequence(this.sequence_0, n, this.count_0);
    };
    TakeSequence.prototype.take_za3lpa$ = function (n) {
      return n >= this.count_0 ? this : new TakeSequence(this.sequence_0, n);
    };
    function TakeSequence$iterator$ObjectLiteral(this$TakeSequence) {
      this.left = this$TakeSequence.count_0;
      this.iterator = this$TakeSequence.sequence_0.iterator();
    }
    TakeSequence$iterator$ObjectLiteral.prototype.next = function () {
      if (this.left === 0)
        throw NoSuchElementException_init();
      this.left = this.left - 1 | 0;
      return this.iterator.next();
    };
    TakeSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.left > 0 && this.iterator.hasNext();
    };
    TakeSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    TakeSequence.prototype.iterator = function () {
      return new TakeSequence$iterator$ObjectLiteral(this);
    };
    TakeSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'TakeSequence', interfaces: [DropTakeSequence, Sequence]};
    function TakeWhileSequence(sequence, predicate) {
      this.sequence_0 = sequence;
      this.predicate_0 = predicate;
    }
    function TakeWhileSequence$iterator$ObjectLiteral(this$TakeWhileSequence) {
      this.this$TakeWhileSequence = this$TakeWhileSequence;
      this.iterator = this$TakeWhileSequence.sequence_0.iterator();
      this.nextState = -1;
      this.nextItem = null;
    }
    TakeWhileSequence$iterator$ObjectLiteral.prototype.calcNext_0 = function () {
      if (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (this.this$TakeWhileSequence.predicate_0(item)) {
          this.nextState = 1;
          this.nextItem = item;
          return;
        }}this.nextState = 0;
    };
    TakeWhileSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.nextState === -1)
        this.calcNext_0();
      if (this.nextState === 0)
        throw NoSuchElementException_init();
      var result = (tmp$ = this.nextItem) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
      this.nextItem = null;
      this.nextState = -1;
      return result;
    };
    TakeWhileSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.nextState === -1)
        this.calcNext_0();
      return this.nextState === 1;
    };
    TakeWhileSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    TakeWhileSequence.prototype.iterator = function () {
      return new TakeWhileSequence$iterator$ObjectLiteral(this);
    };
    TakeWhileSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'TakeWhileSequence', interfaces: [Sequence]};
    function DropSequence(sequence, count) {
      this.sequence_0 = sequence;
      this.count_0 = count;
      if (!(this.count_0 >= 0)) {
        var message = 'count must be non-negative, but was ' + this.count_0 + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }}
    DropSequence.prototype.drop_za3lpa$ = function (n) {
      var n1 = this.count_0 + n | 0;
      return n1 < 0 ? new DropSequence(this, n) : new DropSequence(this.sequence_0, n1);
    };
    DropSequence.prototype.take_za3lpa$ = function (n) {
      var n1 = this.count_0 + n | 0;
      return n1 < 0 ? new TakeSequence(this, n) : new SubSequence(this.sequence_0, this.count_0, n1);
    };
    function DropSequence$iterator$ObjectLiteral(this$DropSequence) {
      this.iterator = this$DropSequence.sequence_0.iterator();
      this.left = this$DropSequence.count_0;
    }
    DropSequence$iterator$ObjectLiteral.prototype.drop_0 = function () {
      while (this.left > 0 && this.iterator.hasNext()) {
        this.iterator.next();
        this.left = this.left - 1 | 0;
      }
    };
    DropSequence$iterator$ObjectLiteral.prototype.next = function () {
      this.drop_0();
      return this.iterator.next();
    };
    DropSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      this.drop_0();
      return this.iterator.hasNext();
    };
    DropSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    DropSequence.prototype.iterator = function () {
      return new DropSequence$iterator$ObjectLiteral(this);
    };
    DropSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'DropSequence', interfaces: [DropTakeSequence, Sequence]};
    function DropWhileSequence(sequence, predicate) {
      this.sequence_0 = sequence;
      this.predicate_0 = predicate;
    }
    function DropWhileSequence$iterator$ObjectLiteral(this$DropWhileSequence) {
      this.this$DropWhileSequence = this$DropWhileSequence;
      this.iterator = this$DropWhileSequence.sequence_0.iterator();
      this.dropState = -1;
      this.nextItem = null;
    }
    DropWhileSequence$iterator$ObjectLiteral.prototype.drop_0 = function () {
      while (this.iterator.hasNext()) {
        var item = this.iterator.next();
        if (!this.this$DropWhileSequence.predicate_0(item)) {
          this.nextItem = item;
          this.dropState = 1;
          return;
        }}
      this.dropState = 0;
    };
    DropWhileSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.dropState === -1)
        this.drop_0();
      if (this.dropState === 1) {
        var result = (tmp$ = this.nextItem) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
        this.nextItem = null;
        this.dropState = 0;
        return result;
      }return this.iterator.next();
    };
    DropWhileSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.dropState === -1)
        this.drop_0();
      return this.dropState === 1 || this.iterator.hasNext();
    };
    DropWhileSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    DropWhileSequence.prototype.iterator = function () {
      return new DropWhileSequence$iterator$ObjectLiteral(this);
    };
    DropWhileSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'DropWhileSequence', interfaces: [Sequence]};
    function DistinctSequence(source, keySelector) {
      this.source_0 = source;
      this.keySelector_0 = keySelector;
    }
    DistinctSequence.prototype.iterator = function () {
      return new DistinctIterator(this.source_0.iterator(), this.keySelector_0);
    };
    DistinctSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'DistinctSequence', interfaces: [Sequence]};
    function DistinctIterator(source, keySelector) {
      AbstractIterator.call(this);
      this.source_0 = source;
      this.keySelector_0 = keySelector;
      this.observed_0 = HashSet_init();
    }
    DistinctIterator.prototype.computeNext = function () {
      while (this.source_0.hasNext()) {
        var next = this.source_0.next();
        var key = this.keySelector_0(next);
        if (this.observed_0.add_11rb$(key)) {
          this.setNext_11rb$(next);
          return;
        }}
      this.done();
    };
    DistinctIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'DistinctIterator', interfaces: [AbstractIterator]};
    function GeneratorSequence(getInitialValue, getNextValue) {
      this.getInitialValue_0 = getInitialValue;
      this.getNextValue_0 = getNextValue;
    }
    function GeneratorSequence$iterator$ObjectLiteral(this$GeneratorSequence) {
      this.this$GeneratorSequence = this$GeneratorSequence;
      this.nextItem = null;
      this.nextState = -2;
    }
    GeneratorSequence$iterator$ObjectLiteral.prototype.calcNext_0 = function () {
      this.nextItem = this.nextState === -2 ? this.this$GeneratorSequence.getInitialValue_0() : this.this$GeneratorSequence.getNextValue_0(ensureNotNull(this.nextItem));
      this.nextState = this.nextItem == null ? 0 : 1;
    };
    GeneratorSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.nextState < 0)
        this.calcNext_0();
      if (this.nextState === 0)
        throw NoSuchElementException_init();
      var result = Kotlin.isType(tmp$ = this.nextItem, Any) ? tmp$ : throwCCE_0();
      this.nextState = -1;
      return result;
    };
    GeneratorSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.nextState < 0)
        this.calcNext_0();
      return this.nextState === 1;
    };
    GeneratorSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    GeneratorSequence.prototype.iterator = function () {
      return new GeneratorSequence$iterator$ObjectLiteral(this);
    };
    GeneratorSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'GeneratorSequence', interfaces: [Sequence]};
    function constrainOnce($receiver) {
      return Kotlin.isType($receiver, ConstrainedOnceSequence) ? $receiver : new ConstrainedOnceSequence($receiver);
    }
    function generateSequence$lambda(closure$nextFunction) {
      return function (it) {
        return closure$nextFunction();
      };
    }
    function generateSequence(nextFunction) {
      return constrainOnce(new GeneratorSequence(nextFunction, generateSequence$lambda(nextFunction)));
    }
    function generateSequence$lambda_0(closure$seed) {
      return function () {
        return closure$seed;
      };
    }
    function generateSequence_0(seed, nextFunction) {
      return seed == null ? EmptySequence_getInstance() : new GeneratorSequence(generateSequence$lambda_0(seed), nextFunction);
    }
    function generateSequence_1(seedFunction, nextFunction) {
      return new GeneratorSequence(seedFunction, nextFunction);
    }
    function EmptySet() {
      EmptySet_instance = this;
      this.serialVersionUID_0 = L3406603774387020532;
    }
    EmptySet.prototype.equals = function (other) {
      return Kotlin.isType(other, Set) && other.isEmpty();
    };
    EmptySet.prototype.hashCode = function () {
      return 0;
    };
    EmptySet.prototype.toString = function () {
      return '[]';
    };
    Object.defineProperty(EmptySet.prototype, 'size', {get: function () {
      return 0;
    }});
    EmptySet.prototype.isEmpty = function () {
      return true;
    };
    EmptySet.prototype.contains_11rb$ = function (element) {
      return false;
    };
    EmptySet.prototype.containsAll_brywnq$ = function (elements) {
      return elements.isEmpty();
    };
    EmptySet.prototype.iterator = function () {
      return EmptyIterator_getInstance();
    };
    EmptySet.prototype.readResolve_0 = function () {
      return EmptySet_getInstance();
    };
    EmptySet.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptySet', interfaces: [Serializable, Set]};
    var EmptySet_instance = null;
    function EmptySet_getInstance() {
      if (EmptySet_instance === null) {
        new EmptySet();
      }return EmptySet_instance;
    }
    function emptySet() {
      return EmptySet_getInstance();
    }
    function setOf_0(elements) {
      return elements.length > 0 ? toSet(elements) : emptySet();
    }
    var setOf_1 = defineInlineFunction('kotlin.kotlin.collections.setOf_287e2$', wrapFunction(function () {
      var emptySet = _.kotlin.collections.emptySet_287e2$;
      return function () {
        return emptySet();
      };
    }));
    var mutableSetOf = defineInlineFunction('kotlin.kotlin.collections.mutableSetOf_287e2$', wrapFunction(function () {
      var LinkedHashSet_init = _.kotlin.collections.LinkedHashSet_init_287e2$;
      return function () {
        return LinkedHashSet_init();
      };
    }));
    function mutableSetOf_0(elements) {
      return toCollection(elements, LinkedHashSet_init_3(mapCapacity(elements.length)));
    }
    var hashSetOf = defineInlineFunction('kotlin.kotlin.collections.hashSetOf_287e2$', wrapFunction(function () {
      var HashSet_init = _.kotlin.collections.HashSet_init_287e2$;
      return function () {
        return HashSet_init();
      };
    }));
    function hashSetOf_0(elements) {
      return toCollection(elements, HashSet_init_2(mapCapacity(elements.length)));
    }
    var linkedSetOf = defineInlineFunction('kotlin.kotlin.collections.linkedSetOf_287e2$', wrapFunction(function () {
      var LinkedHashSet_init = _.kotlin.collections.LinkedHashSet_init_287e2$;
      return function () {
        return LinkedHashSet_init();
      };
    }));
    function linkedSetOf_0(elements) {
      return toCollection(elements, LinkedHashSet_init_3(mapCapacity(elements.length)));
    }
    var buildSet = defineInlineFunction('kotlin.kotlin.collections.buildSet_bu7k9x$', wrapFunction(function () {
      var LinkedHashSet_init = _.kotlin.collections.LinkedHashSet_init_287e2$;
      return function (builderAction) {
        var $receiver = LinkedHashSet_init();
        builderAction($receiver);
        return $receiver;
      };
    }));
    var buildSet_0 = defineInlineFunction('kotlin.kotlin.collections.buildSet_d7vze7$', wrapFunction(function () {
      var checkBuilderCapacity = _.kotlin.collections.checkBuilderCapacity_za3lpa$;
      var mapCapacity = _.kotlin.collections.mapCapacity_za3lpa$;
      var LinkedHashSet_init = _.kotlin.collections.LinkedHashSet_init_ww73n8$;
      return function (capacity, builderAction) {
        checkBuilderCapacity(capacity);
        var $receiver = LinkedHashSet_init(mapCapacity(capacity));
        builderAction($receiver);
        return $receiver;
      };
    }));
    var orEmpty_4 = defineInlineFunction('kotlin.kotlin.collections.orEmpty_og2qkj$', wrapFunction(function () {
      var emptySet = _.kotlin.collections.emptySet_287e2$;
      return function ($receiver) {
        return $receiver != null ? $receiver : emptySet();
      };
    }));
    function optimizeReadOnlySet($receiver) {
      switch ($receiver.size) {
        case 0:
          return emptySet();
        case 1:
          return setOf($receiver.iterator().next());
        default:return $receiver;
      }
    }
    function Sequence$ObjectLiteral_4(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral_4.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral_4.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function checkWindowSizeStep(size, step) {
      if (!(size > 0 && step > 0)) {
        var message = size !== step ? 'Both size ' + size + ' and step ' + step + ' must be greater than zero.' : 'size ' + size + ' must be greater than zero.';
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function windowedSequence$lambda_1(this$windowedSequence, closure$size, closure$step, closure$partialWindows, closure$reuseBuffer) {
      return function () {
        return windowedIterator(this$windowedSequence.iterator(), closure$size, closure$step, closure$partialWindows, closure$reuseBuffer);
      };
    }
    function windowedSequence_1($receiver, size, step, partialWindows, reuseBuffer) {
      checkWindowSizeStep(size, step);
      return new Sequence$ObjectLiteral_4(windowedSequence$lambda_1($receiver, size, step, partialWindows, reuseBuffer));
    }
    function Coroutine$windowedIterator$lambda(closure$size_0, closure$step_0, closure$iterator_0, closure$reuseBuffer_0, closure$partialWindows_0, $receiver_0, controller, continuation_0) {
      CoroutineImpl.call(this, continuation_0);
      this.$controller = controller;
      this.exceptionState_0 = 1;
      this.local$closure$size = closure$size_0;
      this.local$closure$step = closure$step_0;
      this.local$closure$iterator = closure$iterator_0;
      this.local$closure$reuseBuffer = closure$reuseBuffer_0;
      this.local$closure$partialWindows = closure$partialWindows_0;
      this.local$tmp$ = void 0;
      this.local$tmp$_0 = void 0;
      this.local$gap = void 0;
      this.local$buffer = void 0;
      this.local$skip = void 0;
      this.local$e = void 0;
      this.local$buffer_0 = void 0;
      this.local$$receiver = $receiver_0;
    }
    Coroutine$windowedIterator$lambda.$metadata$ = {kind: Kotlin.Kind.CLASS, simpleName: null, interfaces: [CoroutineImpl]};
    Coroutine$windowedIterator$lambda.prototype = Object.create(CoroutineImpl.prototype);
    Coroutine$windowedIterator$lambda.prototype.constructor = Coroutine$windowedIterator$lambda;
    Coroutine$windowedIterator$lambda.prototype.doResume = function () {
      do
        try {
          switch (this.state_0) {
            case 0:
              var bufferInitialCapacity = coerceAtMost_2(this.local$closure$size, 1024);
              this.local$gap = this.local$closure$step - this.local$closure$size | 0;
              if (this.local$gap >= 0) {
                this.local$buffer = ArrayList_init_0(bufferInitialCapacity);
                this.local$skip = 0;
                this.local$tmp$ = this.local$closure$iterator;
                this.state_0 = 13;
                continue;
              } else {
                this.local$buffer_0 = RingBuffer_init(bufferInitialCapacity);
                this.local$tmp$_0 = this.local$closure$iterator;
                this.state_0 = 2;
                continue;
              }

            case 1:
              throw this.exception_0;
            case 2:
              if (!this.local$tmp$_0.hasNext()) {
                this.state_0 = 6;
                continue;
              }
              var e_0 = this.local$tmp$_0.next();
              this.local$buffer_0.add_11rb$(e_0);
              if (this.local$buffer_0.isFull()) {
                if (this.local$buffer_0.size < this.local$closure$size) {
                  this.local$buffer_0 = this.local$buffer_0.expanded_za3lpa$(this.local$closure$size);
                  this.state_0 = 2;
                  continue;
                } else {
                  this.state_0 = 3;
                  continue;
                }
              } else {
                this.state_0 = 5;
                continue;
              }

            case 3:
              this.state_0 = 4;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$closure$reuseBuffer ? this.local$buffer_0 : ArrayList_init_1(this.local$buffer_0), this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 4:
              this.local$buffer_0.removeFirst_za3lpa$(this.local$closure$step);
              this.state_0 = 5;
              continue;
            case 5:
              this.state_0 = 2;
              continue;
            case 6:
              if (this.local$closure$partialWindows) {
                this.state_0 = 7;
                continue;
              } else {
                this.state_0 = 12;
                continue;
              }

            case 7:
              if (this.local$buffer_0.size <= this.local$closure$step) {
                this.state_0 = 9;
                continue;
              }
              this.state_0 = 8;
              this.result_0 = this.local$$receiver.yield_11rb$(this.local$closure$reuseBuffer ? this.local$buffer_0 : ArrayList_init_1(this.local$buffer_0), this);
              if (this.result_0 === get_COROUTINE_SUSPENDED())
                return get_COROUTINE_SUSPENDED();
              continue;
            case 8:
              this.local$buffer_0.removeFirst_za3lpa$(this.local$closure$step);
              this.state_0 = 7;
              continue;
            case 9:
              if (!this.local$buffer_0.isEmpty()) {
                this.state_0 = 10;
                this.result_0 = this.local$$receiver.yield_11rb$(this.local$buffer_0, this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              } else {
                this.state_0 = 11;
                continue;
              }

            case 10:
              return Unit;
            case 11:
              this.state_0 = 12;
              continue;
            case 12:
              this.state_0 = 21;
              continue;
            case 13:
              if (!this.local$tmp$.hasNext()) {
                this.state_0 = 17;
                continue;
              }
              this.local$e = this.local$tmp$.next();
              if (this.local$skip > 0) {
                this.local$skip = this.local$skip - 1 | 0;
                this.state_0 = 13;
                continue;
              } else {
                this.state_0 = 14;
                continue;
              }

            case 14:
              this.local$buffer.add_11rb$(this.local$e);
              if (this.local$buffer.size === this.local$closure$size) {
                this.state_0 = 15;
                this.result_0 = this.local$$receiver.yield_11rb$(this.local$buffer, this);
                if (this.result_0 === get_COROUTINE_SUSPENDED())
                  return get_COROUTINE_SUSPENDED();
                continue;
              } else {
                this.state_0 = 16;
                continue;
              }

            case 15:
              if (this.local$closure$reuseBuffer)
                this.local$buffer.clear();
              else
                this.local$buffer = ArrayList_init_0(this.local$closure$size);
              this.local$skip = this.local$gap;
              this.state_0 = 16;
              continue;
            case 16:
              this.state_0 = 13;
              continue;
            case 17:
              if (!this.local$buffer.isEmpty()) {
                if (this.local$closure$partialWindows || this.local$buffer.size === this.local$closure$size) {
                  this.state_0 = 18;
                  this.result_0 = this.local$$receiver.yield_11rb$(this.local$buffer, this);
                  if (this.result_0 === get_COROUTINE_SUSPENDED())
                    return get_COROUTINE_SUSPENDED();
                  continue;
                } else {
                  this.state_0 = 19;
                  continue;
                }
              } else {
                this.state_0 = 20;
                continue;
              }

            case 18:
              return Unit;
            case 19:
              this.state_0 = 20;
              continue;
            case 20:
              this.state_0 = 21;
              continue;
            case 21:
              return Unit;
            default:this.state_0 = 1;
              throw new Error('State Machine Unreachable execution');
          }
        } catch (e) {
          if (this.state_0 === 1) {
            this.exceptionState_0 = this.state_0;
            throw e;
          } else {
            this.state_0 = this.exceptionState_0;
            this.exception_0 = e;
          }
        }
       while (true);
    };
    function windowedIterator$lambda(closure$size_0, closure$step_0, closure$iterator_0, closure$reuseBuffer_0, closure$partialWindows_0) {
      return function ($receiver_0, continuation_0, suspended) {
        var instance = new Coroutine$windowedIterator$lambda(closure$size_0, closure$step_0, closure$iterator_0, closure$reuseBuffer_0, closure$partialWindows_0, $receiver_0, this, continuation_0);
        if (suspended)
          return instance;
        else
          return instance.doResume(null);
      };
    }
    function windowedIterator(iterator, size, step, partialWindows, reuseBuffer) {
      if (!iterator.hasNext())
        return EmptyIterator_getInstance();
      return iterator_3(windowedIterator$lambda(size, step, iterator, reuseBuffer, partialWindows));
    }
    function MovingSubList(list) {
      AbstractList.call(this);
      this.list_0 = list;
      this.fromIndex_0 = 0;
      this._size_0 = 0;
    }
    MovingSubList.prototype.move_vux9f0$ = function (fromIndex, toIndex) {
      AbstractList$Companion_getInstance().checkRangeIndexes_cub51b$(fromIndex, toIndex, this.list_0.size);
      this.fromIndex_0 = fromIndex;
      this._size_0 = toIndex - fromIndex | 0;
    };
    MovingSubList.prototype.get_za3lpa$ = function (index) {
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this._size_0);
      return this.list_0.get_za3lpa$(this.fromIndex_0 + index | 0);
    };
    Object.defineProperty(MovingSubList.prototype, 'size', {get: function () {
      return this._size_0;
    }});
    MovingSubList.$metadata$ = {kind: Kind_CLASS, simpleName: 'MovingSubList', interfaces: [RandomAccess, AbstractList]};
    function RingBuffer(buffer, filledSize) {
      AbstractList.call(this);
      this.buffer_0 = buffer;
      if (!(filledSize >= 0)) {
        var message = 'ring buffer filled size should not be negative but it is ' + filledSize;
        throw IllegalArgumentException_init_0(message.toString());
      }if (!(filledSize <= this.buffer_0.length)) {
        var message_0 = 'ring buffer filled size: ' + filledSize + ' cannot be larger than the buffer size: ' + this.buffer_0.length;
        throw IllegalArgumentException_init_0(message_0.toString());
      }this.capacity_0 = this.buffer_0.length;
      this.startIndex_0 = 0;
      this.size_4goa01$_0 = filledSize;
    }
    Object.defineProperty(RingBuffer.prototype, 'size', {get: function () {
      return this.size_4goa01$_0;
    }, set: function (size) {
      this.size_4goa01$_0 = size;
    }});
    RingBuffer.prototype.get_za3lpa$ = function (index) {
      var tmp$;
      AbstractList$Companion_getInstance().checkElementIndex_6xvm5r$(index, this.size);
      return (tmp$ = this.buffer_0[(this.startIndex_0 + index | 0) % this.capacity_0]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    };
    RingBuffer.prototype.isFull = function () {
      return this.size === this.capacity_0;
    };
    function RingBuffer$iterator$ObjectLiteral(this$RingBuffer) {
      this.this$RingBuffer = this$RingBuffer;
      AbstractIterator.call(this);
      this.count_0 = this$RingBuffer.size;
      this.index_0 = this$RingBuffer.startIndex_0;
    }
    RingBuffer$iterator$ObjectLiteral.prototype.computeNext = function () {
      var tmp$;
      if (this.count_0 === 0) {
        this.done();
      } else {
        this.setNext_11rb$((tmp$ = this.this$RingBuffer.buffer_0[this.index_0]) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0());
        this.index_0 = (this.index_0 + 1 | 0) % this.this$RingBuffer.capacity_0;
        this.count_0 = this.count_0 - 1 | 0;
      }
    };
    RingBuffer$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [AbstractIterator]};
    RingBuffer.prototype.iterator = function () {
      return new RingBuffer$iterator$ObjectLiteral(this);
    };
    RingBuffer.prototype.toArray_ro6dgy$ = function (array) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      var result = array.length < this.size ? copyOf_24(array, this.size) : Kotlin.isArray(tmp$ = array) ? tmp$ : throwCCE_0();
      var size = this.size;
      var widx = 0;
      var idx = this.startIndex_0;
      while (widx < size && idx < this.capacity_0) {
        result[widx] = (tmp$_0 = this.buffer_0[idx]) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE_0();
        widx = widx + 1 | 0;
        idx = idx + 1 | 0;
      }
      idx = 0;
      while (widx < size) {
        result[widx] = (tmp$_1 = this.buffer_0[idx]) == null || Kotlin.isType(tmp$_1, Any) ? tmp$_1 : throwCCE_0();
        widx = widx + 1 | 0;
        idx = idx + 1 | 0;
      }
      if (result.length > this.size)
        result[this.size] = null;
      return Kotlin.isArray(tmp$_2 = result) ? tmp$_2 : throwCCE_0();
    };
    RingBuffer.prototype.toArray = function () {
      return this.toArray_ro6dgy$(Kotlin.newArray(this.size, null));
    };
    RingBuffer.prototype.expanded_za3lpa$ = function (maxCapacity) {
      var newCapacity = coerceAtMost_2(this.capacity_0 + (this.capacity_0 >> 1) + 1 | 0, maxCapacity);
      var newBuffer = this.startIndex_0 === 0 ? copyOf_24(this.buffer_0, newCapacity) : this.toArray_ro6dgy$(Kotlin.newArray(newCapacity, null));
      return new RingBuffer(newBuffer, this.size);
    };
    RingBuffer.prototype.add_11rb$ = function (element) {
      if (this.isFull()) {
        throw IllegalStateException_init_0('ring buffer is full');
      }this.buffer_0[(this.startIndex_0 + this.size | 0) % this.capacity_0] = element;
      this.size = this.size + 1 | 0;
    };
    RingBuffer.prototype.removeFirst_za3lpa$ = function (n) {
      if (!(n >= 0)) {
        var message = "n shouldn't be negative but it is " + n;
        throw IllegalArgumentException_init_0(message.toString());
      }if (!(n <= this.size)) {
        var message_0 = "n shouldn't be greater than the buffer size: n = " + n + ', size = ' + this.size;
        throw IllegalArgumentException_init_0(message_0.toString());
      }if (n > 0) {
        var start = this.startIndex_0;
        var end = (start + n | 0) % this.capacity_0;
        if (start > end) {
          fill_3(this.buffer_0, null, start, this.capacity_0);
          fill_3(this.buffer_0, null, 0, end);
        } else {
          fill_3(this.buffer_0, null, start, end);
        }
        this.startIndex_0 = end;
        this.size = this.size - n | 0;
      }};
    RingBuffer.prototype.forward_0 = function ($receiver, n) {
      return ($receiver + n | 0) % this.capacity_0;
    };
    RingBuffer.$metadata$ = {kind: Kind_CLASS, simpleName: 'RingBuffer', interfaces: [RandomAccess, AbstractList]};
    function RingBuffer_init(capacity, $this) {
      $this = $this || Object.create(RingBuffer.prototype);
      RingBuffer.call($this, Kotlin.newArray(capacity, null), 0);
      return $this;
    }
    function partition_12(array, left, right) {
      var i = left;
      var j = right;
      var pivot = array.get_za3lpa$((left + right | 0) / 2 | 0);
      while (i <= j) {
        while (Kotlin.primitiveCompareTo(array.get_za3lpa$(i).data & 255, pivot.data & 255) < 0) {
          i = i + 1 | 0;
        }
        while (Kotlin.primitiveCompareTo(array.get_za3lpa$(j).data & 255, pivot.data & 255) > 0) {
          j = j - 1 | 0;
        }
        if (i <= j) {
          var tmp = array.get_za3lpa$(i);
          array.set_2c6cbe$(i, array.get_za3lpa$(j));
          array.set_2c6cbe$(j, tmp);
          i = i + 1 | 0;
          j = j - 1 | 0;
        }}
      return i;
    }
    function quickSort(array, left, right) {
      var index = partition_12(array, left, right);
      if (left < (index - 1 | 0))
        quickSort(array, left, index - 1 | 0);
      if (index < right)
        quickSort(array, index, right);
    }
    function partition_13(array, left, right) {
      var i = left;
      var j = right;
      var pivot = array.get_za3lpa$((left + right | 0) / 2 | 0);
      while (i <= j) {
        while (Kotlin.primitiveCompareTo(array.get_za3lpa$(i).data & 65535, pivot.data & 65535) < 0) {
          i = i + 1 | 0;
        }
        while (Kotlin.primitiveCompareTo(array.get_za3lpa$(j).data & 65535, pivot.data & 65535) > 0) {
          j = j - 1 | 0;
        }
        if (i <= j) {
          var tmp = array.get_za3lpa$(i);
          array.set_1pe3u2$(i, array.get_za3lpa$(j));
          array.set_1pe3u2$(j, tmp);
          i = i + 1 | 0;
          j = j - 1 | 0;
        }}
      return i;
    }
    function quickSort_0(array, left, right) {
      var index = partition_13(array, left, right);
      if (left < (index - 1 | 0))
        quickSort_0(array, left, index - 1 | 0);
      if (index < right)
        quickSort_0(array, index, right);
    }
    function partition_14(array, left, right) {
      var i = left;
      var j = right;
      var pivot = array.get_za3lpa$((left + right | 0) / 2 | 0);
      while (i <= j) {
        while (uintCompare(array.get_za3lpa$(i).data, pivot.data) < 0) {
          i = i + 1 | 0;
        }
        while (uintCompare(array.get_za3lpa$(j).data, pivot.data) > 0) {
          j = j - 1 | 0;
        }
        if (i <= j) {
          var tmp = array.get_za3lpa$(i);
          array.set_6sqrdv$(i, array.get_za3lpa$(j));
          array.set_6sqrdv$(j, tmp);
          i = i + 1 | 0;
          j = j - 1 | 0;
        }}
      return i;
    }
    function quickSort_1(array, left, right) {
      var index = partition_14(array, left, right);
      if (left < (index - 1 | 0))
        quickSort_1(array, left, index - 1 | 0);
      if (index < right)
        quickSort_1(array, index, right);
    }
    function partition_15(array, left, right) {
      var i = left;
      var j = right;
      var pivot = array.get_za3lpa$((left + right | 0) / 2 | 0);
      while (i <= j) {
        while (ulongCompare(array.get_za3lpa$(i).data, pivot.data) < 0) {
          i = i + 1 | 0;
        }
        while (ulongCompare(array.get_za3lpa$(j).data, pivot.data) > 0) {
          j = j - 1 | 0;
        }
        if (i <= j) {
          var tmp = array.get_za3lpa$(i);
          array.set_2ccimm$(i, array.get_za3lpa$(j));
          array.set_2ccimm$(j, tmp);
          i = i + 1 | 0;
          j = j - 1 | 0;
        }}
      return i;
    }
    function quickSort_2(array, left, right) {
      var index = partition_15(array, left, right);
      if (left < (index - 1 | 0))
        quickSort_2(array, left, index - 1 | 0);
      if (index < right)
        quickSort_2(array, index, right);
    }
    function sortArray_0(array) {
      quickSort(array, 0, array.size - 1 | 0);
    }
    function sortArray_1(array) {
      quickSort_0(array, 0, array.size - 1 | 0);
    }
    function sortArray_2(array) {
      quickSort_1(array, 0, array.size - 1 | 0);
    }
    function sortArray_3(array) {
      quickSort_2(array, 0, array.size - 1 | 0);
    }
    function Comparator$ObjectLiteral_1(closure$comparison) {
      this.closure$comparison = closure$comparison;
    }
    Comparator$ObjectLiteral_1.prototype.compare = function (a, b) {
      return this.closure$comparison(a, b);
    };
    Comparator$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
    function compareValuesBy(a, b, selectors) {
      if (!(selectors.length > 0)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }return compareValuesByImpl(a, b, selectors);
    }
    function compareValuesByImpl(a, b, selectors) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== selectors.length; ++tmp$) {
        var fn = selectors[tmp$];
        var v1 = fn(a);
        var v2 = fn(b);
        var diff = compareValues(v1, v2);
        if (diff !== 0)
          return diff;
      }
      return 0;
    }
    var compareValuesBy_0 = defineInlineFunction('kotlin.kotlin.comparisons.compareValuesBy_tsaocy$', wrapFunction(function () {
      var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
      return function (a, b, selector) {
        return compareValues(selector(a), selector(b));
      };
    }));
    var compareValuesBy_1 = defineInlineFunction('kotlin.kotlin.comparisons.compareValuesBy_5evai1$', function (a, b, comparator, selector) {
      return comparator.compare(selector(a), selector(b));
    });
    function compareValues(a, b) {
      var tmp$;
      if (a === b)
        return 0;
      if (a == null)
        return -1;
      if (b == null)
        return 1;
      return Kotlin.compareTo(Kotlin.isComparable(tmp$ = a) ? tmp$ : throwCCE_0(), b);
    }
    function compareBy$lambda(closure$selectors) {
      return function (a, b) {
        return compareValuesByImpl(a, b, closure$selectors);
      };
    }
    function compareBy(selectors) {
      if (!(selectors.length > 0)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init_0(message.toString());
      }return new Comparator$ObjectLiteral_1(compareBy$lambda(selectors));
    }
    var compareBy_0 = defineInlineFunction('kotlin.kotlin.comparisons.compareBy_34mekm$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(a), selector(b));
          };
        };
      });
      return function (selector) {
        return new Comparator$ObjectLiteral(compareBy$lambda(selector));
      };
    }));
    var compareBy_1 = defineInlineFunction('kotlin.kotlin.comparisons.compareBy_82qo4j$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      function compareBy$lambda(closure$comparator, closure$selector) {
        return function (a, b) {
          var comparator = closure$comparator;
          var selector = closure$selector;
          return comparator.compare(selector(a), selector(b));
        };
      }
      return function (comparator, selector) {
        return new Comparator$ObjectLiteral(compareBy$lambda(comparator, selector));
      };
    }));
    var compareByDescending = defineInlineFunction('kotlin.kotlin.comparisons.compareByDescending_34mekm$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var compareByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (closure$selector) {
          return function (a, b) {
            var selector = closure$selector;
            return compareValues(selector(b), selector(a));
          };
        };
      });
      return function (selector) {
        return new Comparator$ObjectLiteral(compareByDescending$lambda(selector));
      };
    }));
    var compareByDescending_0 = defineInlineFunction('kotlin.kotlin.comparisons.compareByDescending_82qo4j$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      function compareByDescending$lambda(closure$comparator, closure$selector) {
        return function (a, b) {
          var comparator = closure$comparator;
          var selector = closure$selector;
          return comparator.compare(selector(b), selector(a));
        };
      }
      return function (comparator, selector) {
        return new Comparator$ObjectLiteral(compareByDescending$lambda(comparator, selector));
      };
    }));
    var thenBy = defineInlineFunction('kotlin.kotlin.comparisons.thenBy_8bk9gc$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var thenBy$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (this$thenBy, closure$selector) {
          return function (a, b) {
            var previousCompare = this$thenBy.compare(a, b);
            var tmp$;
            if (previousCompare !== 0)
              tmp$ = previousCompare;
            else {
              var selector = closure$selector;
              tmp$ = compareValues(selector(a), selector(b));
            }
            return tmp$;
          };
        };
      });
      return function ($receiver, selector) {
        return new Comparator$ObjectLiteral(thenBy$lambda($receiver, selector));
      };
    }));
    var thenBy_0 = defineInlineFunction('kotlin.kotlin.comparisons.thenBy_g2gg1x$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      function thenBy$lambda(this$thenBy, closure$comparator, closure$selector) {
        return function (a, b) {
          var previousCompare = this$thenBy.compare(a, b);
          var tmp$;
          if (previousCompare !== 0)
            tmp$ = previousCompare;
          else {
            var comparator = closure$comparator;
            var selector = closure$selector;
            tmp$ = comparator.compare(selector(a), selector(b));
          }
          return tmp$;
        };
      }
      return function ($receiver, comparator, selector) {
        return new Comparator$ObjectLiteral(thenBy$lambda($receiver, comparator, selector));
      };
    }));
    var thenByDescending = defineInlineFunction('kotlin.kotlin.comparisons.thenByDescending_8bk9gc$', wrapFunction(function () {
      var wrapFunction = Kotlin.wrapFunction;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      var thenByDescending$lambda = wrapFunction(function () {
        var compareValues = _.kotlin.comparisons.compareValues_s00gnj$;
        return function (this$thenByDescending, closure$selector) {
          return function (a, b) {
            var previousCompare = this$thenByDescending.compare(a, b);
            var tmp$;
            if (previousCompare !== 0)
              tmp$ = previousCompare;
            else {
              var selector = closure$selector;
              tmp$ = compareValues(selector(b), selector(a));
            }
            return tmp$;
          };
        };
      });
      return function ($receiver, selector) {
        return new Comparator$ObjectLiteral(thenByDescending$lambda($receiver, selector));
      };
    }));
    var thenByDescending_0 = defineInlineFunction('kotlin.kotlin.comparisons.thenByDescending_g2gg1x$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      function thenByDescending$lambda(this$thenByDescending, closure$comparator, closure$selector) {
        return function (a, b) {
          var previousCompare = this$thenByDescending.compare(a, b);
          var tmp$;
          if (previousCompare !== 0)
            tmp$ = previousCompare;
          else {
            var comparator = closure$comparator;
            var selector = closure$selector;
            tmp$ = comparator.compare(selector(b), selector(a));
          }
          return tmp$;
        };
      }
      return function ($receiver, comparator, selector) {
        return new Comparator$ObjectLiteral(thenByDescending$lambda($receiver, comparator, selector));
      };
    }));
    var thenComparator = defineInlineFunction('kotlin.kotlin.comparisons.thenComparator_yg42ks$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Comparator = _.kotlin.Comparator;
      function Comparator$ObjectLiteral(closure$comparison) {
        this.closure$comparison = closure$comparison;
      }
      Comparator$ObjectLiteral.prototype.compare = function (a, b) {
        return this.closure$comparison(a, b);
      };
      Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
      function thenComparator$lambda(this$thenComparator, closure$comparison) {
        return function (a, b) {
          var previousCompare = this$thenComparator.compare(a, b);
          return previousCompare !== 0 ? previousCompare : closure$comparison(a, b);
        };
      }
      return function ($receiver, comparison) {
        return new Comparator$ObjectLiteral(thenComparator$lambda($receiver, comparison));
      };
    }));
    function then$lambda(this$then, closure$comparator) {
      return function (a, b) {
        var previousCompare = this$then.compare(a, b);
        return previousCompare !== 0 ? previousCompare : closure$comparator.compare(a, b);
      };
    }
    function then_1($receiver, comparator) {
      return new Comparator$ObjectLiteral_1(then$lambda($receiver, comparator));
    }
    function thenDescending$lambda(this$thenDescending, closure$comparator) {
      return function (a, b) {
        var previousCompare = this$thenDescending.compare(a, b);
        return previousCompare !== 0 ? previousCompare : closure$comparator.compare(b, a);
      };
    }
    function thenDescending($receiver, comparator) {
      return new Comparator$ObjectLiteral_1(thenDescending$lambda($receiver, comparator));
    }
    function nullsFirst$lambda(closure$comparator) {
      return function (a, b) {
        if (a === b)
          return 0;
        else if (a == null)
          return -1;
        else if (b == null)
          return 1;
        else
          return closure$comparator.compare(a, b);
      };
    }
    function nullsFirst(comparator) {
      return new Comparator$ObjectLiteral_1(nullsFirst$lambda(comparator));
    }
    var nullsFirst_0 = defineInlineFunction('kotlin.kotlin.comparisons.nullsFirst_dahdeg$', wrapFunction(function () {
      var naturalOrder = _.kotlin.comparisons.naturalOrder_dahdeg$;
      var nullsFirst = _.kotlin.comparisons.nullsFirst_c94i6r$;
      return function () {
        return nullsFirst(naturalOrder());
      };
    }));
    function nullsLast$lambda(closure$comparator) {
      return function (a, b) {
        if (a === b)
          return 0;
        else if (a == null)
          return 1;
        else if (b == null)
          return -1;
        else
          return closure$comparator.compare(a, b);
      };
    }
    function nullsLast(comparator) {
      return new Comparator$ObjectLiteral_1(nullsLast$lambda(comparator));
    }
    var nullsLast_0 = defineInlineFunction('kotlin.kotlin.comparisons.nullsLast_dahdeg$', wrapFunction(function () {
      var naturalOrder = _.kotlin.comparisons.naturalOrder_dahdeg$;
      var nullsLast = _.kotlin.comparisons.nullsLast_c94i6r$;
      return function () {
        return nullsLast(naturalOrder());
      };
    }));
    function naturalOrder() {
      var tmp$;
      return Kotlin.isType(tmp$ = NaturalOrderComparator_getInstance(), Comparator) ? tmp$ : throwCCE_0();
    }
    function reverseOrder() {
      var tmp$;
      return Kotlin.isType(tmp$ = ReverseOrderComparator_getInstance(), Comparator) ? tmp$ : throwCCE_0();
    }
    function reversed_20($receiver) {
      var tmp$, tmp$_0;
      if (Kotlin.isType($receiver, ReversedComparator))
        return $receiver.comparator;
      else if (equals($receiver, NaturalOrderComparator_getInstance()))
        return Kotlin.isType(tmp$ = ReverseOrderComparator_getInstance(), Comparator) ? tmp$ : throwCCE_0();
      else if (equals($receiver, ReverseOrderComparator_getInstance()))
        return Kotlin.isType(tmp$_0 = NaturalOrderComparator_getInstance(), Comparator) ? tmp$_0 : throwCCE_0();
      else
        return new ReversedComparator($receiver);
    }
    function ReversedComparator(comparator) {
      this.comparator = comparator;
    }
    ReversedComparator.prototype.compare = function (a, b) {
      return this.comparator.compare(b, a);
    };
    ReversedComparator.prototype.reversed = function () {
      return this.comparator;
    };
    ReversedComparator.$metadata$ = {kind: Kind_CLASS, simpleName: 'ReversedComparator', interfaces: [Comparator]};
    function NaturalOrderComparator() {
      NaturalOrderComparator_instance = this;
    }
    NaturalOrderComparator.prototype.compare = function (a, b) {
      return Kotlin.compareTo(a, b);
    };
    NaturalOrderComparator.prototype.reversed = function () {
      return ReverseOrderComparator_getInstance();
    };
    NaturalOrderComparator.$metadata$ = {kind: Kind_OBJECT, simpleName: 'NaturalOrderComparator', interfaces: [Comparator]};
    var NaturalOrderComparator_instance = null;
    function NaturalOrderComparator_getInstance() {
      if (NaturalOrderComparator_instance === null) {
        new NaturalOrderComparator();
      }return NaturalOrderComparator_instance;
    }
    function ReverseOrderComparator() {
      ReverseOrderComparator_instance = this;
    }
    ReverseOrderComparator.prototype.compare = function (a, b) {
      return Kotlin.compareTo(b, a);
    };
    ReverseOrderComparator.prototype.reversed = function () {
      return NaturalOrderComparator_getInstance();
    };
    ReverseOrderComparator.$metadata$ = {kind: Kind_OBJECT, simpleName: 'ReverseOrderComparator', interfaces: [Comparator]};
    var ReverseOrderComparator_instance = null;
    function ReverseOrderComparator_getInstance() {
      if (ReverseOrderComparator_instance === null) {
        new ReverseOrderComparator();
      }return ReverseOrderComparator_instance;
    }
    function ExperimentalContracts() {
    }
    ExperimentalContracts.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalContracts', interfaces: [Annotation]};
    function ContractBuilder() {
    }
    ContractBuilder.prototype.callsInPlace_yys88$ = function (lambda, kind, callback$default) {
      if (kind === void 0)
        kind = InvocationKind$UNKNOWN_getInstance();
      return callback$default ? callback$default(lambda, kind) : this.callsInPlace_yys88$$default(lambda, kind);
    };
    ContractBuilder.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ContractBuilder', interfaces: []};
    function InvocationKind(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function InvocationKind_initFields() {
      InvocationKind_initFields = function () {
      };
      InvocationKind$AT_MOST_ONCE_instance = new InvocationKind('AT_MOST_ONCE', 0);
      InvocationKind$AT_LEAST_ONCE_instance = new InvocationKind('AT_LEAST_ONCE', 1);
      InvocationKind$EXACTLY_ONCE_instance = new InvocationKind('EXACTLY_ONCE', 2);
      InvocationKind$UNKNOWN_instance = new InvocationKind('UNKNOWN', 3);
    }
    var InvocationKind$AT_MOST_ONCE_instance;
    function InvocationKind$AT_MOST_ONCE_getInstance() {
      InvocationKind_initFields();
      return InvocationKind$AT_MOST_ONCE_instance;
    }
    var InvocationKind$AT_LEAST_ONCE_instance;
    function InvocationKind$AT_LEAST_ONCE_getInstance() {
      InvocationKind_initFields();
      return InvocationKind$AT_LEAST_ONCE_instance;
    }
    var InvocationKind$EXACTLY_ONCE_instance;
    function InvocationKind$EXACTLY_ONCE_getInstance() {
      InvocationKind_initFields();
      return InvocationKind$EXACTLY_ONCE_instance;
    }
    var InvocationKind$UNKNOWN_instance;
    function InvocationKind$UNKNOWN_getInstance() {
      InvocationKind_initFields();
      return InvocationKind$UNKNOWN_instance;
    }
    InvocationKind.$metadata$ = {kind: Kind_CLASS, simpleName: 'InvocationKind', interfaces: [Enum]};
    function InvocationKind$values() {
      return [InvocationKind$AT_MOST_ONCE_getInstance(), InvocationKind$AT_LEAST_ONCE_getInstance(), InvocationKind$EXACTLY_ONCE_getInstance(), InvocationKind$UNKNOWN_getInstance()];
    }
    InvocationKind.values = InvocationKind$values;
    function InvocationKind$valueOf(name) {
      switch (name) {
        case 'AT_MOST_ONCE':
          return InvocationKind$AT_MOST_ONCE_getInstance();
        case 'AT_LEAST_ONCE':
          return InvocationKind$AT_LEAST_ONCE_getInstance();
        case 'EXACTLY_ONCE':
          return InvocationKind$EXACTLY_ONCE_getInstance();
        case 'UNKNOWN':
          return InvocationKind$UNKNOWN_getInstance();
        default:throwISE('No enum constant kotlin.contracts.InvocationKind.' + name);
      }
    }
    InvocationKind.valueOf_61zpoe$ = InvocationKind$valueOf;
    var contract = defineInlineFunction('kotlin.kotlin.contracts.contract_ijyxoo$', function (builder) {
    });
    function Effect() {
    }
    Effect.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Effect', interfaces: []};
    function ConditionalEffect() {
    }
    ConditionalEffect.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ConditionalEffect', interfaces: [Effect]};
    function SimpleEffect() {
    }
    SimpleEffect.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'SimpleEffect', interfaces: [Effect]};
    function Returns() {
    }
    Returns.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Returns', interfaces: [SimpleEffect]};
    function ReturnsNotNull() {
    }
    ReturnsNotNull.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ReturnsNotNull', interfaces: [SimpleEffect]};
    function CallsInPlace() {
    }
    CallsInPlace.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'CallsInPlace', interfaces: [Effect]};
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(intercepted(c));
        closure$block(safe);
        return safe.getOrThrow();
      };
    }
    function Continuation() {
    }
    Continuation.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Continuation', interfaces: []};
    function RestrictsSuspension() {
    }
    RestrictsSuspension.$metadata$ = {kind: Kind_CLASS, simpleName: 'RestrictsSuspension', interfaces: [Annotation]};
    var resume = defineInlineFunction('kotlin.kotlin.coroutines.resume_7seulj$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      return function ($receiver, value) {
        $receiver.resumeWith_tl1gpc$(new Result(value));
      };
    }));
    var resumeWithException = defineInlineFunction('kotlin.kotlin.coroutines.resumeWithException_wltuli$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      return function ($receiver, exception) {
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      };
    }));
    var Continuation_0 = defineInlineFunction('kotlin.kotlin.coroutines.Continuation_tj26d7$', wrapFunction(function () {
      var Kind_CLASS = Kotlin.Kind.CLASS;
      var Continuation = _.kotlin.coroutines.Continuation;
      function Continuation$ObjectLiteral(closure$context, closure$resumeWith) {
        this.closure$context = closure$context;
        this.closure$resumeWith = closure$resumeWith;
      }
      Object.defineProperty(Continuation$ObjectLiteral.prototype, 'context', {get: function () {
        return this.closure$context;
      }});
      Continuation$ObjectLiteral.prototype.resumeWith_tl1gpc$ = function (result) {
        this.closure$resumeWith(result);
      };
      Continuation$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Continuation]};
      return function (context, resumeWith) {
        return new Continuation$ObjectLiteral(context, resumeWith);
      };
    }));
    function createCoroutine($receiver, completion) {
      return new SafeContinuation(intercepted(createCoroutineUnintercepted($receiver, completion)), get_COROUTINE_SUSPENDED());
    }
    function createCoroutine_0($receiver, receiver, completion) {
      return new SafeContinuation(intercepted(createCoroutineUnintercepted_0($receiver, receiver, completion)), get_COROUTINE_SUSPENDED());
    }
    function startCoroutine($receiver, completion) {
      intercepted(createCoroutineUnintercepted($receiver, completion)).resumeWith_tl1gpc$(new Result(Unit_getInstance()));
    }
    function startCoroutine_0($receiver, receiver, completion) {
      intercepted(createCoroutineUnintercepted_0($receiver, receiver, completion)).resumeWith_tl1gpc$(new Result(Unit_getInstance()));
    }
    function suspendCoroutine(block, continuation) {
      return suspendCoroutine$lambda(block)(continuation);
    }
    defineInlineFunction('kotlin.kotlin.coroutines.suspendCoroutine_922awp$', wrapFunction(function () {
      var intercepted = _.kotlin.coroutines.intrinsics.intercepted_f9mg25$;
      var SafeContinuation_init = _.kotlin.coroutines.SafeContinuation_init_wj8d80$;
      function suspendCoroutine$lambda(closure$block) {
        return function (c) {
          var safe = SafeContinuation_init(intercepted(c));
          closure$block(safe);
          return safe.getOrThrow();
        };
      }
      return function (block, continuation) {
        Kotlin.suspendCall(suspendCoroutine$lambda(block)(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      };
    }));
    var get_coroutineContext = defineInlineFunction('kotlin.kotlin.coroutines.get_coroutineContext', wrapFunction(function () {
      var NotImplementedError_init = _.kotlin.NotImplementedError;
      return function () {
        throw new NotImplementedError_init('Implemented as intrinsic');
      };
    }));
    function ContinuationInterceptor() {
      ContinuationInterceptor$Key_getInstance();
    }
    function ContinuationInterceptor$Key() {
      ContinuationInterceptor$Key_instance = this;
    }
    ContinuationInterceptor$Key.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Key', interfaces: [CoroutineContext$Key]};
    var ContinuationInterceptor$Key_instance = null;
    function ContinuationInterceptor$Key_getInstance() {
      if (ContinuationInterceptor$Key_instance === null) {
        new ContinuationInterceptor$Key();
      }return ContinuationInterceptor$Key_instance;
    }
    ContinuationInterceptor.prototype.releaseInterceptedContinuation_k98bjh$ = function (continuation) {
    };
    ContinuationInterceptor.prototype.get_j3r2sn$ = function (key) {
      var tmp$, tmp$_0;
      if (Kotlin.isType(key, AbstractCoroutineContextKey)) {
        return key.isSubKey_i2ksv9$(this.key) ? Kotlin.isType(tmp$ = key.tryCast_m1180o$(this), CoroutineContext$Element) ? tmp$ : null : null;
      }return ContinuationInterceptor$Key_getInstance() === key ? Kotlin.isType(tmp$_0 = this, CoroutineContext$Element) ? tmp$_0 : throwCCE_0() : null;
    };
    ContinuationInterceptor.prototype.minusKey_yeqjby$ = function (key) {
      if (Kotlin.isType(key, AbstractCoroutineContextKey)) {
        return key.isSubKey_i2ksv9$(this.key) && key.tryCast_m1180o$(this) != null ? EmptyCoroutineContext_getInstance() : this;
      }return ContinuationInterceptor$Key_getInstance() === key ? EmptyCoroutineContext_getInstance() : this;
    };
    ContinuationInterceptor.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ContinuationInterceptor', interfaces: [CoroutineContext$Element]};
    function CoroutineContext() {
    }
    function CoroutineContext$plus$lambda(acc, element) {
      var removed = acc.minusKey_yeqjby$(element.key);
      if (removed === EmptyCoroutineContext_getInstance())
        return element;
      else {
        var interceptor = removed.get_j3r2sn$(ContinuationInterceptor$Key_getInstance());
        if (interceptor == null)
          return new CombinedContext(removed, element);
        else {
          var left = removed.minusKey_yeqjby$(ContinuationInterceptor$Key_getInstance());
          return left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
        }
      }
    }
    CoroutineContext.prototype.plus_1fupul$ = function (context) {
      return context === EmptyCoroutineContext_getInstance() ? this : context.fold_3cc69b$(this, CoroutineContext$plus$lambda);
    };
    function CoroutineContext$Key() {
    }
    CoroutineContext$Key.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Key', interfaces: []};
    function CoroutineContext$Element() {
    }
    CoroutineContext$Element.prototype.get_j3r2sn$ = function (key) {
      var tmp$;
      return equals(this.key, key) ? Kotlin.isType(tmp$ = this, CoroutineContext$Element) ? tmp$ : throwCCE_0() : null;
    };
    CoroutineContext$Element.prototype.fold_3cc69b$ = function (initial, operation) {
      return operation(initial, this);
    };
    CoroutineContext$Element.prototype.minusKey_yeqjby$ = function (key) {
      return equals(this.key, key) ? EmptyCoroutineContext_getInstance() : this;
    };
    CoroutineContext$Element.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Element', interfaces: [CoroutineContext]};
    CoroutineContext.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'CoroutineContext', interfaces: []};
    function AbstractCoroutineContextElement(key) {
      this.key_no4tas$_0 = key;
    }
    Object.defineProperty(AbstractCoroutineContextElement.prototype, 'key', {get: function () {
      return this.key_no4tas$_0;
    }});
    AbstractCoroutineContextElement.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractCoroutineContextElement', interfaces: [CoroutineContext$Element]};
    function AbstractCoroutineContextKey(baseKey, safeCast) {
      this.safeCast_9rw4bk$_0 = safeCast;
      this.topmostKey_3x72pn$_0 = Kotlin.isType(baseKey, AbstractCoroutineContextKey) ? baseKey.topmostKey_3x72pn$_0 : baseKey;
    }
    AbstractCoroutineContextKey.prototype.tryCast_m1180o$ = function (element) {
      return this.safeCast_9rw4bk$_0(element);
    };
    AbstractCoroutineContextKey.prototype.isSubKey_i2ksv9$ = function (key) {
      return key === this || this.topmostKey_3x72pn$_0 === key;
    };
    AbstractCoroutineContextKey.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractCoroutineContextKey', interfaces: [CoroutineContext$Key]};
    function getPolymorphicElement($receiver, key) {
      var tmp$, tmp$_0;
      if (Kotlin.isType(key, AbstractCoroutineContextKey)) {
        return key.isSubKey_i2ksv9$($receiver.key) ? Kotlin.isType(tmp$ = key.tryCast_m1180o$($receiver), CoroutineContext$Element) ? tmp$ : null : null;
      }return $receiver.key === key ? Kotlin.isType(tmp$_0 = $receiver, CoroutineContext$Element) ? tmp$_0 : throwCCE_0() : null;
    }
    function minusPolymorphicKey($receiver, key) {
      if (Kotlin.isType(key, AbstractCoroutineContextKey)) {
        return key.isSubKey_i2ksv9$($receiver.key) && key.tryCast_m1180o$($receiver) != null ? EmptyCoroutineContext_getInstance() : $receiver;
      }return $receiver.key === key ? EmptyCoroutineContext_getInstance() : $receiver;
    }
    function EmptyCoroutineContext() {
      EmptyCoroutineContext_instance = this;
      this.serialVersionUID_0 = L0;
    }
    EmptyCoroutineContext.prototype.readResolve_0 = function () {
      return EmptyCoroutineContext_getInstance();
    };
    EmptyCoroutineContext.prototype.get_j3r2sn$ = function (key) {
      return null;
    };
    EmptyCoroutineContext.prototype.fold_3cc69b$ = function (initial, operation) {
      return initial;
    };
    EmptyCoroutineContext.prototype.plus_1fupul$ = function (context) {
      return context;
    };
    EmptyCoroutineContext.prototype.minusKey_yeqjby$ = function (key) {
      return this;
    };
    EmptyCoroutineContext.prototype.hashCode = function () {
      return 0;
    };
    EmptyCoroutineContext.prototype.toString = function () {
      return 'EmptyCoroutineContext';
    };
    EmptyCoroutineContext.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptyCoroutineContext', interfaces: [Serializable, CoroutineContext]};
    var EmptyCoroutineContext_instance = null;
    function EmptyCoroutineContext_getInstance() {
      if (EmptyCoroutineContext_instance === null) {
        new EmptyCoroutineContext();
      }return EmptyCoroutineContext_instance;
    }
    function CombinedContext(left, element) {
      this.left_0 = left;
      this.element_0 = element;
    }
    CombinedContext.prototype.get_j3r2sn$ = function (key) {
      var tmp$;
      var cur = this;
      while (true) {
        if ((tmp$ = cur.element_0.get_j3r2sn$(key)) != null) {
          return tmp$;
        }var next = cur.left_0;
        if (Kotlin.isType(next, CombinedContext)) {
          cur = next;
        } else {
          return next.get_j3r2sn$(key);
        }
      }
    };
    CombinedContext.prototype.fold_3cc69b$ = function (initial, operation) {
      return operation(this.left_0.fold_3cc69b$(initial, operation), this.element_0);
    };
    CombinedContext.prototype.minusKey_yeqjby$ = function (key) {
      var tmp$;
      if (this.element_0.get_j3r2sn$(key) != null) {
        return this.left_0;
      }var newLeft = this.left_0.minusKey_yeqjby$(key);
      if (newLeft === this.left_0)
        tmp$ = this;
      else if (newLeft === EmptyCoroutineContext_getInstance())
        tmp$ = this.element_0;
      else
        tmp$ = new CombinedContext(newLeft, this.element_0);
      return tmp$;
    };
    CombinedContext.prototype.size_0 = function () {
      var tmp$, tmp$_0;
      var cur = this;
      var size = 2;
      while (true) {
        tmp$_0 = Kotlin.isType(tmp$ = cur.left_0, CombinedContext) ? tmp$ : null;
        if (tmp$_0 == null) {
          return size;
        }cur = tmp$_0;
        size = size + 1 | 0;
      }
    };
    CombinedContext.prototype.contains_0 = function (element) {
      return equals(this.get_j3r2sn$(element.key), element);
    };
    CombinedContext.prototype.containsAll_0 = function (context) {
      var tmp$;
      var cur = context;
      while (true) {
        if (!this.contains_0(cur.element_0))
          return false;
        var next = cur.left_0;
        if (Kotlin.isType(next, CombinedContext)) {
          cur = next;
        } else {
          return this.contains_0(Kotlin.isType(tmp$ = next, CoroutineContext$Element) ? tmp$ : throwCCE_0());
        }
      }
    };
    CombinedContext.prototype.equals = function (other) {
      return this === other || (Kotlin.isType(other, CombinedContext) && other.size_0() === this.size_0() && other.containsAll_0(this));
    };
    CombinedContext.prototype.hashCode = function () {
      return hashCode(this.left_0) + hashCode(this.element_0) | 0;
    };
    function CombinedContext$toString$lambda(acc, element) {
      return acc.length === 0 ? element.toString() : acc + ', ' + element;
    }
    CombinedContext.prototype.toString = function () {
      return '[' + this.fold_3cc69b$('', CombinedContext$toString$lambda) + ']';
    };
    function CombinedContext$writeReplace$lambda(closure$elements, closure$index) {
      return function (f, element) {
        var tmp$;
        closure$elements[tmp$ = closure$index.v, closure$index.v = tmp$ + 1 | 0, tmp$] = element;
        return Unit;
      };
    }
    CombinedContext.prototype.writeReplace_0 = function () {
      var tmp$;
      var n = this.size_0();
      var elements = Kotlin.newArray(n, null);
      var index = {v: 0};
      this.fold_3cc69b$(Unit_getInstance(), CombinedContext$writeReplace$lambda(elements, index));
      if (!(index.v === n)) {
        var message = 'Check failed.';
        throw IllegalStateException_init_0(message.toString());
      }return new CombinedContext$Serialized(Kotlin.isArray(tmp$ = elements) ? tmp$ : throwCCE_0());
    };
    function CombinedContext$Serialized(elements) {
      CombinedContext$Serialized$Companion_getInstance();
      this.elements = elements;
    }
    function CombinedContext$Serialized$Companion() {
      CombinedContext$Serialized$Companion_instance = this;
      this.serialVersionUID_0 = L0;
    }
    CombinedContext$Serialized$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var CombinedContext$Serialized$Companion_instance = null;
    function CombinedContext$Serialized$Companion_getInstance() {
      if (CombinedContext$Serialized$Companion_instance === null) {
        new CombinedContext$Serialized$Companion();
      }return CombinedContext$Serialized$Companion_instance;
    }
    CombinedContext$Serialized.prototype.readResolve_0 = function () {
      var $receiver = this.elements;
      var tmp$;
      var accumulator = EmptyCoroutineContext_getInstance();
      for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
        var element = $receiver[tmp$];
        accumulator = accumulator.plus_1fupul$(element);
      }
      return accumulator;
    };
    CombinedContext$Serialized.$metadata$ = {kind: Kind_CLASS, simpleName: 'Serialized', interfaces: [Serializable]};
    CombinedContext.$metadata$ = {kind: Kind_CLASS, simpleName: 'CombinedContext', interfaces: [Serializable, CoroutineContext]};
    function suspendCoroutineUninterceptedOrReturn(block, continuation) {
      throw new NotImplementedError('Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic');
    }
    defineInlineFunction('kotlin.kotlin.coroutines.intrinsics.suspendCoroutineUninterceptedOrReturn_zb0pmy$', wrapFunction(function () {
      var NotImplementedError_init = _.kotlin.NotImplementedError;
      return function (block, continuation) {
        throw new NotImplementedError_init('Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic');
      };
    }));
    function get_COROUTINE_SUSPENDED() {
      return CoroutineSingletons$COROUTINE_SUSPENDED_getInstance();
    }
    function CoroutineSingletons(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function CoroutineSingletons_initFields() {
      CoroutineSingletons_initFields = function () {
      };
      CoroutineSingletons$COROUTINE_SUSPENDED_instance = new CoroutineSingletons('COROUTINE_SUSPENDED', 0);
      CoroutineSingletons$UNDECIDED_instance = new CoroutineSingletons('UNDECIDED', 1);
      CoroutineSingletons$RESUMED_instance = new CoroutineSingletons('RESUMED', 2);
    }
    var CoroutineSingletons$COROUTINE_SUSPENDED_instance;
    function CoroutineSingletons$COROUTINE_SUSPENDED_getInstance() {
      CoroutineSingletons_initFields();
      return CoroutineSingletons$COROUTINE_SUSPENDED_instance;
    }
    var CoroutineSingletons$UNDECIDED_instance;
    function CoroutineSingletons$UNDECIDED_getInstance() {
      CoroutineSingletons_initFields();
      return CoroutineSingletons$UNDECIDED_instance;
    }
    var CoroutineSingletons$RESUMED_instance;
    function CoroutineSingletons$RESUMED_getInstance() {
      CoroutineSingletons_initFields();
      return CoroutineSingletons$RESUMED_instance;
    }
    CoroutineSingletons.$metadata$ = {kind: Kind_CLASS, simpleName: 'CoroutineSingletons', interfaces: [Enum]};
    function CoroutineSingletons$values() {
      return [CoroutineSingletons$COROUTINE_SUSPENDED_getInstance(), CoroutineSingletons$UNDECIDED_getInstance(), CoroutineSingletons$RESUMED_getInstance()];
    }
    CoroutineSingletons.values = CoroutineSingletons$values;
    function CoroutineSingletons$valueOf(name) {
      switch (name) {
        case 'COROUTINE_SUSPENDED':
          return CoroutineSingletons$COROUTINE_SUSPENDED_getInstance();
        case 'UNDECIDED':
          return CoroutineSingletons$UNDECIDED_getInstance();
        case 'RESUMED':
          return CoroutineSingletons$RESUMED_getInstance();
        default:throwISE('No enum constant kotlin.coroutines.intrinsics.CoroutineSingletons.' + name);
      }
    }
    CoroutineSingletons.valueOf_61zpoe$ = CoroutineSingletons$valueOf;
    var and = defineInlineFunction('kotlin.kotlin.experimental.and_buxqzf$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function ($receiver, other) {
        return toByte($receiver & other);
      };
    }));
    var or = defineInlineFunction('kotlin.kotlin.experimental.or_buxqzf$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function ($receiver, other) {
        return toByte($receiver | other);
      };
    }));
    var xor = defineInlineFunction('kotlin.kotlin.experimental.xor_buxqzf$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function ($receiver, other) {
        return toByte($receiver ^ other);
      };
    }));
    var inv = defineInlineFunction('kotlin.kotlin.experimental.inv_mz3mee$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function ($receiver) {
        return toByte(~$receiver);
      };
    }));
    var and_0 = defineInlineFunction('kotlin.kotlin.experimental.and_mvfjzl$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function ($receiver, other) {
        return toShort($receiver & other);
      };
    }));
    var or_0 = defineInlineFunction('kotlin.kotlin.experimental.or_mvfjzl$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function ($receiver, other) {
        return toShort($receiver | other);
      };
    }));
    var xor_0 = defineInlineFunction('kotlin.kotlin.experimental.xor_mvfjzl$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function ($receiver, other) {
        return toShort($receiver ^ other);
      };
    }));
    var inv_0 = defineInlineFunction('kotlin.kotlin.experimental.inv_5vcgdc$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function ($receiver) {
        return toShort(~$receiver);
      };
    }));
    function ExperimentalTypeInference() {
    }
    ExperimentalTypeInference.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalTypeInference', interfaces: [Annotation]};
    function NoInfer() {
    }
    NoInfer.$metadata$ = {kind: Kind_CLASS, simpleName: 'NoInfer', interfaces: [Annotation]};
    function Exact() {
    }
    Exact.$metadata$ = {kind: Kind_CLASS, simpleName: 'Exact', interfaces: [Annotation]};
    function LowPriorityInOverloadResolution() {
    }
    LowPriorityInOverloadResolution.$metadata$ = {kind: Kind_CLASS, simpleName: 'LowPriorityInOverloadResolution', interfaces: [Annotation]};
    function HidesMembers() {
    }
    HidesMembers.$metadata$ = {kind: Kind_CLASS, simpleName: 'HidesMembers', interfaces: [Annotation]};
    function OnlyInputTypes() {
    }
    OnlyInputTypes.$metadata$ = {kind: Kind_CLASS, simpleName: 'OnlyInputTypes', interfaces: [Annotation]};
    function InlineOnly() {
    }
    InlineOnly.$metadata$ = {kind: Kind_CLASS, simpleName: 'InlineOnly', interfaces: [Annotation]};
    function DynamicExtension() {
    }
    DynamicExtension.$metadata$ = {kind: Kind_CLASS, simpleName: 'DynamicExtension', interfaces: [Annotation]};
    function AccessibleLateinitPropertyLiteral() {
    }
    AccessibleLateinitPropertyLiteral.$metadata$ = {kind: Kind_CLASS, simpleName: 'AccessibleLateinitPropertyLiteral', interfaces: [Annotation]};
    function RequireKotlin(version, message, level, versionKind, errorCode) {
      if (message === void 0)
        message = '';
      if (level === void 0)
        level = DeprecationLevel.ERROR;
      if (versionKind === void 0)
        versionKind = RequireKotlinVersionKind$LANGUAGE_VERSION_getInstance();
      if (errorCode === void 0)
        errorCode = -1;
      this.version = version;
      this.message = message;
      this.level = level;
      this.versionKind = versionKind;
      this.errorCode = errorCode;
    }
    RequireKotlin.$metadata$ = {kind: Kind_CLASS, simpleName: 'RequireKotlin', interfaces: [Annotation]};
    function RequireKotlinVersionKind(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function RequireKotlinVersionKind_initFields() {
      RequireKotlinVersionKind_initFields = function () {
      };
      RequireKotlinVersionKind$LANGUAGE_VERSION_instance = new RequireKotlinVersionKind('LANGUAGE_VERSION', 0);
      RequireKotlinVersionKind$COMPILER_VERSION_instance = new RequireKotlinVersionKind('COMPILER_VERSION', 1);
      RequireKotlinVersionKind$API_VERSION_instance = new RequireKotlinVersionKind('API_VERSION', 2);
    }
    var RequireKotlinVersionKind$LANGUAGE_VERSION_instance;
    function RequireKotlinVersionKind$LANGUAGE_VERSION_getInstance() {
      RequireKotlinVersionKind_initFields();
      return RequireKotlinVersionKind$LANGUAGE_VERSION_instance;
    }
    var RequireKotlinVersionKind$COMPILER_VERSION_instance;
    function RequireKotlinVersionKind$COMPILER_VERSION_getInstance() {
      RequireKotlinVersionKind_initFields();
      return RequireKotlinVersionKind$COMPILER_VERSION_instance;
    }
    var RequireKotlinVersionKind$API_VERSION_instance;
    function RequireKotlinVersionKind$API_VERSION_getInstance() {
      RequireKotlinVersionKind_initFields();
      return RequireKotlinVersionKind$API_VERSION_instance;
    }
    RequireKotlinVersionKind.$metadata$ = {kind: Kind_CLASS, simpleName: 'RequireKotlinVersionKind', interfaces: [Enum]};
    function RequireKotlinVersionKind$values() {
      return [RequireKotlinVersionKind$LANGUAGE_VERSION_getInstance(), RequireKotlinVersionKind$COMPILER_VERSION_getInstance(), RequireKotlinVersionKind$API_VERSION_getInstance()];
    }
    RequireKotlinVersionKind.values = RequireKotlinVersionKind$values;
    function RequireKotlinVersionKind$valueOf(name) {
      switch (name) {
        case 'LANGUAGE_VERSION':
          return RequireKotlinVersionKind$LANGUAGE_VERSION_getInstance();
        case 'COMPILER_VERSION':
          return RequireKotlinVersionKind$COMPILER_VERSION_getInstance();
        case 'API_VERSION':
          return RequireKotlinVersionKind$API_VERSION_getInstance();
        default:throwISE('No enum constant kotlin.internal.RequireKotlinVersionKind.' + name);
      }
    }
    RequireKotlinVersionKind.valueOf_61zpoe$ = RequireKotlinVersionKind$valueOf;
    function ContractsDsl() {
    }
    ContractsDsl.$metadata$ = {kind: Kind_CLASS, simpleName: 'ContractsDsl', interfaces: [Annotation]};
    function Delegates() {
      Delegates_instance = this;
    }
    Delegates.prototype.notNull_30y1fr$ = function () {
      return new NotNullVar();
    };
    Delegates.prototype.observable_2ulm9r$ = defineInlineFunction('kotlin.kotlin.properties.Delegates.observable_2ulm9r$', wrapFunction(function () {
      var ObservableProperty = _.kotlin.properties.ObservableProperty;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      Delegates$observable$ObjectLiteral.prototype = Object.create(ObservableProperty.prototype);
      Delegates$observable$ObjectLiteral.prototype.constructor = Delegates$observable$ObjectLiteral;
      function Delegates$observable$ObjectLiteral(closure$onChange, initialValue_0) {
        this.closure$onChange = closure$onChange;
        ObservableProperty.call(this, initialValue_0);
      }
      Delegates$observable$ObjectLiteral.prototype.afterChange_jxtfl0$ = function (property, oldValue, newValue) {
        this.closure$onChange(property, oldValue, newValue);
      };
      Delegates$observable$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [ObservableProperty]};
      return function (initialValue, onChange) {
        return new Delegates$observable$ObjectLiteral(onChange, initialValue);
      };
    }));
    Delegates.prototype.vetoable_61sx1h$ = defineInlineFunction('kotlin.kotlin.properties.Delegates.vetoable_61sx1h$', wrapFunction(function () {
      var ObservableProperty = _.kotlin.properties.ObservableProperty;
      var Kind_CLASS = Kotlin.Kind.CLASS;
      Delegates$vetoable$ObjectLiteral.prototype = Object.create(ObservableProperty.prototype);
      Delegates$vetoable$ObjectLiteral.prototype.constructor = Delegates$vetoable$ObjectLiteral;
      function Delegates$vetoable$ObjectLiteral(closure$onChange, initialValue_0) {
        this.closure$onChange = closure$onChange;
        ObservableProperty.call(this, initialValue_0);
      }
      Delegates$vetoable$ObjectLiteral.prototype.beforeChange_jxtfl0$ = function (property, oldValue, newValue) {
        return this.closure$onChange(property, oldValue, newValue);
      };
      Delegates$vetoable$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [ObservableProperty]};
      return function (initialValue, onChange) {
        return new Delegates$vetoable$ObjectLiteral(onChange, initialValue);
      };
    }));
    Delegates.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Delegates', interfaces: []};
    var Delegates_instance = null;
    function Delegates_getInstance() {
      if (Delegates_instance === null) {
        new Delegates();
      }return Delegates_instance;
    }
    function NotNullVar() {
      this.value_0 = null;
    }
    NotNullVar.prototype.getValue_lrcp0p$ = function (thisRef, property) {
      var tmp$;
      tmp$ = this.value_0;
      if (tmp$ == null) {
        throw IllegalStateException_init_0('Property ' + property.callableName + ' should be initialized before get.');
      }return tmp$;
    };
    NotNullVar.prototype.setValue_9rddgb$ = function (thisRef, property, value) {
      this.value_0 = value;
    };
    NotNullVar.$metadata$ = {kind: Kind_CLASS, simpleName: 'NotNullVar', interfaces: [ReadWriteProperty]};
    function ReadOnlyProperty() {
    }
    ReadOnlyProperty.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ReadOnlyProperty', interfaces: []};
    function ReadWriteProperty() {
    }
    ReadWriteProperty.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ReadWriteProperty', interfaces: []};
    function ObservableProperty(initialValue) {
      this.value_kuqkmn$_0 = initialValue;
    }
    ObservableProperty.prototype.beforeChange_jxtfl0$ = function (property, oldValue, newValue) {
      return true;
    };
    ObservableProperty.prototype.afterChange_jxtfl0$ = function (property, oldValue, newValue) {
    };
    ObservableProperty.prototype.getValue_lrcp0p$ = function (thisRef, property) {
      return this.value_kuqkmn$_0;
    };
    ObservableProperty.prototype.setValue_9rddgb$ = function (thisRef, property, value) {
      var oldValue = this.value_kuqkmn$_0;
      if (!this.beforeChange_jxtfl0$(property, oldValue, value)) {
        return;
      }this.value_kuqkmn$_0 = value;
      this.afterChange_jxtfl0$(property, oldValue, value);
    };
    ObservableProperty.$metadata$ = {kind: Kind_CLASS, simpleName: 'ObservableProperty', interfaces: [ReadWriteProperty]};
    function Random() {
      Random$Default_getInstance();
    }
    Random.prototype.nextInt = function () {
      return this.nextBits_za3lpa$(32);
    };
    Random.prototype.nextInt_za3lpa$ = function (until) {
      return this.nextInt_vux9f0$(0, until);
    };
    Random.prototype.nextInt_vux9f0$ = function (from, until) {
      var tmp$;
      checkRangeBounds(from, until);
      var n = until - from | 0;
      if (n > 0 || n === -2147483648) {
        if ((n & (-n | 0)) === n) {
          var bitCount = fastLog2(n);
          tmp$ = this.nextBits_za3lpa$(bitCount);
        } else {
          var v;
          do {
            var bits = this.nextInt() >>> 1;
            v = bits % n;
          }
           while ((bits - v + (n - 1) | 0) < 0);
          tmp$ = v;
        }
        var rnd = tmp$;
        return from + rnd | 0;
      } else {
        while (true) {
          var rnd_0 = this.nextInt();
          if (from <= rnd_0 && rnd_0 < until)
            return rnd_0;
        }
      }
    };
    Random.prototype.nextLong = function () {
      return Kotlin.Long.fromInt(this.nextInt()).shiftLeft(32).add(Kotlin.Long.fromInt(this.nextInt()));
    };
    Random.prototype.nextLong_s8cxhz$ = function (until) {
      return this.nextLong_3pjtqy$(L0, until);
    };
    Random.prototype.nextLong_3pjtqy$ = function (from, until) {
      var tmp$;
      checkRangeBounds_0(from, until);
      var n = until.subtract(from);
      if (n.toNumber() > 0) {
        var rnd;
        if (equals(n.and(n.unaryMinus()), n)) {
          var nLow = n.toInt();
          var nHigh = n.shiftRightUnsigned(32).toInt();
          if (nLow !== 0) {
            var bitCount = fastLog2(nLow);
            tmp$ = Kotlin.Long.fromInt(this.nextBits_za3lpa$(bitCount)).and(L4294967295);
          } else if (nHigh === 1)
            tmp$ = Kotlin.Long.fromInt(this.nextInt()).and(L4294967295);
          else {
            var bitCount_0 = fastLog2(nHigh);
            tmp$ = Kotlin.Long.fromInt(this.nextBits_za3lpa$(bitCount_0)).shiftLeft(32).add(Kotlin.Long.fromInt(this.nextInt()));
          }
          rnd = tmp$;
        } else {
          var v;
          do {
            var bits = this.nextLong().shiftRightUnsigned(1);
            v = bits.modulo(n);
          }
           while (bits.subtract(v).add(n.subtract(Kotlin.Long.fromInt(1))).toNumber() < 0);
          rnd = v;
        }
        return from.add(rnd);
      } else {
        while (true) {
          var rnd_0 = this.nextLong();
          if (from.lessThanOrEqual(rnd_0) && rnd_0.lessThan(until))
            return rnd_0;
        }
      }
    };
    Random.prototype.nextBoolean = function () {
      return this.nextBits_za3lpa$(1) !== 0;
    };
    Random.prototype.nextDouble = function () {
      return doubleFromParts(this.nextBits_za3lpa$(26), this.nextBits_za3lpa$(27));
    };
    Random.prototype.nextDouble_14dthe$ = function (until) {
      return this.nextDouble_lu1900$(0.0, until);
    };
    Random.prototype.nextDouble_lu1900$ = function (from, until) {
      var tmp$;
      checkRangeBounds_1(from, until);
      var size = until - from;
      if (isInfinite(size) && isFinite(from) && isFinite(until)) {
        var r1 = this.nextDouble() * (until / 2 - from / 2);
        tmp$ = from + r1 + r1;
      } else {
        tmp$ = from + this.nextDouble() * size;
      }
      var r = tmp$;
      return r >= until ? nextDown(until) : r;
    };
    Random.prototype.nextFloat = function () {
      return this.nextBits_za3lpa$(24) / 16777216;
    };
    function Random$nextBytes$lambda(closure$fromIndex, closure$toIndex, closure$array) {
      return function () {
        return 'fromIndex (' + closure$fromIndex + ') or toIndex (' + closure$toIndex + ') are out of range: 0..' + closure$array.length + '.';
      };
    }
    Random.prototype.nextBytes_mj6st8$$default = function (array, fromIndex, toIndex) {
      if (!(0 <= fromIndex && fromIndex <= array.length ? 0 <= toIndex && toIndex <= array.length : false)) {
        var message = Random$nextBytes$lambda(fromIndex, toIndex, array)();
        throw IllegalArgumentException_init_0(message.toString());
      }if (!(fromIndex <= toIndex)) {
        var message_0 = 'fromIndex (' + fromIndex + ') must be not greater than toIndex (' + toIndex + ').';
        throw IllegalArgumentException_init_0(message_0.toString());
      }var steps = (toIndex - fromIndex | 0) / 4 | 0;
      var position = {v: fromIndex};
      for (var index = 0; index < steps; index++) {
        var v = this.nextInt();
        array[position.v] = toByte(v);
        array[position.v + 1 | 0] = toByte(v >>> 8);
        array[position.v + 2 | 0] = toByte(v >>> 16);
        array[position.v + 3 | 0] = toByte(v >>> 24);
        position.v = position.v + 4 | 0;
      }
      var remainder = toIndex - position.v | 0;
      var vr = this.nextBits_za3lpa$(remainder * 8 | 0);
      for (var i = 0; i < remainder; i++) {
        array[position.v + i | 0] = toByte(vr >>> (i * 8 | 0));
      }
      return array;
    };
    Random.prototype.nextBytes_mj6st8$ = function (array, fromIndex, toIndex, callback$default) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = array.length;
      return callback$default ? callback$default(array, fromIndex, toIndex) : this.nextBytes_mj6st8$$default(array, fromIndex, toIndex);
    };
    Random.prototype.nextBytes_fqrh44$ = function (array) {
      return this.nextBytes_mj6st8$(array, 0, array.length);
    };
    Random.prototype.nextBytes_za3lpa$ = function (size) {
      return this.nextBytes_fqrh44$(new Int8Array(size));
    };
    function Random$Default() {
      Random$Default_instance = this;
      Random.call(this);
      this.defaultRandom_0 = defaultPlatformRandom();
      this.Companion = Random$Companion_getInstance();
    }
    Random$Default.prototype.nextBits_za3lpa$ = function (bitCount) {
      return this.defaultRandom_0.nextBits_za3lpa$(bitCount);
    };
    Random$Default.prototype.nextInt = function () {
      return this.defaultRandom_0.nextInt();
    };
    Random$Default.prototype.nextInt_za3lpa$ = function (until) {
      return this.defaultRandom_0.nextInt_za3lpa$(until);
    };
    Random$Default.prototype.nextInt_vux9f0$ = function (from, until) {
      return this.defaultRandom_0.nextInt_vux9f0$(from, until);
    };
    Random$Default.prototype.nextLong = function () {
      return this.defaultRandom_0.nextLong();
    };
    Random$Default.prototype.nextLong_s8cxhz$ = function (until) {
      return this.defaultRandom_0.nextLong_s8cxhz$(until);
    };
    Random$Default.prototype.nextLong_3pjtqy$ = function (from, until) {
      return this.defaultRandom_0.nextLong_3pjtqy$(from, until);
    };
    Random$Default.prototype.nextBoolean = function () {
      return this.defaultRandom_0.nextBoolean();
    };
    Random$Default.prototype.nextDouble = function () {
      return this.defaultRandom_0.nextDouble();
    };
    Random$Default.prototype.nextDouble_14dthe$ = function (until) {
      return this.defaultRandom_0.nextDouble_14dthe$(until);
    };
    Random$Default.prototype.nextDouble_lu1900$ = function (from, until) {
      return this.defaultRandom_0.nextDouble_lu1900$(from, until);
    };
    Random$Default.prototype.nextFloat = function () {
      return this.defaultRandom_0.nextFloat();
    };
    Random$Default.prototype.nextBytes_fqrh44$ = function (array) {
      return this.defaultRandom_0.nextBytes_fqrh44$(array);
    };
    Random$Default.prototype.nextBytes_za3lpa$ = function (size) {
      return this.defaultRandom_0.nextBytes_za3lpa$(size);
    };
    Random$Default.prototype.nextBytes_mj6st8$$default = function (array, fromIndex, toIndex) {
      return this.defaultRandom_0.nextBytes_mj6st8$(array, fromIndex, toIndex);
    };
    Random$Default.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Default', interfaces: [Random]};
    var Random$Default_instance = null;
    function Random$Default_getInstance() {
      if (Random$Default_instance === null) {
        new Random$Default();
      }return Random$Default_instance;
    }
    function Random$Companion() {
      Random$Companion_instance = this;
      Random.call(this);
    }
    Random$Companion.prototype.nextBits_za3lpa$ = function (bitCount) {
      return Random$Default_getInstance().nextBits_za3lpa$(bitCount);
    };
    Random$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: [Random]};
    var Random$Companion_instance = null;
    function Random$Companion_getInstance() {
      if (Random$Companion_instance === null) {
        new Random$Companion();
      }return Random$Companion_instance;
    }
    Random.$metadata$ = {kind: Kind_CLASS, simpleName: 'Random', interfaces: []};
    function Random_0(seed) {
      return XorWowRandom_init(seed, seed >> 31);
    }
    function Random_1(seed) {
      return XorWowRandom_init(seed.toInt(), seed.shiftRight(32).toInt());
    }
    function nextInt($receiver, range) {
      if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot get random in empty range: ' + range);
      else if (range.last < 2147483647)
        return $receiver.nextInt_vux9f0$(range.first, range.last + 1 | 0);
      else if (range.first > -2147483648)
        return $receiver.nextInt_vux9f0$(range.first - 1 | 0, range.last) + 1 | 0;
      else
        return $receiver.nextInt();
    }
    function nextLong($receiver, range) {
      if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot get random in empty range: ' + range);
      else if (range.last.compareTo_11rb$(Long$Companion$MAX_VALUE) < 0)
        return $receiver.nextLong_3pjtqy$(range.first, range.last.add(Kotlin.Long.fromInt(1)));
      else if (range.first.compareTo_11rb$(Long$Companion$MIN_VALUE) > 0)
        return $receiver.nextLong_3pjtqy$(range.first.subtract(Kotlin.Long.fromInt(1)), range.last).add(Kotlin.Long.fromInt(1));
      else
        return $receiver.nextLong();
    }
    function fastLog2(value) {
      return 31 - Math_0.clz32(value) | 0;
    }
    function takeUpperBits($receiver, bitCount) {
      return $receiver >>> 32 - bitCount & (-bitCount | 0) >> 31;
    }
    function checkRangeBounds(from, until) {
      if (!(until > from)) {
        var message = boundsErrorMessage(from, until);
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function checkRangeBounds_0(from, until) {
      if (!(until.compareTo_11rb$(from) > 0)) {
        var message = boundsErrorMessage(from, until);
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function checkRangeBounds_1(from, until) {
      if (!(until > from)) {
        var message = boundsErrorMessage(from, until);
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function boundsErrorMessage(from, until) {
      return 'Random range is empty: [' + from.toString() + ', ' + until.toString() + ').';
    }
    function nextUInt($receiver) {
      return new UInt($receiver.nextInt());
    }
    function nextUInt_0($receiver, until) {
      return nextUInt_1($receiver, new UInt(0), until);
    }
    function nextUInt_1($receiver, from, until) {
      checkUIntRangeBounds(from, until);
      var signedFrom = from.data ^ -2147483648;
      var signedUntil = until.data ^ -2147483648;
      var signedResult = $receiver.nextInt_vux9f0$(signedFrom, signedUntil) ^ -2147483648;
      return new UInt(signedResult);
    }
    function nextUInt_2($receiver, range) {
      if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot get random in empty range: ' + range);
      else {
        if (uintCompare(range.last.data, UInt$Companion_getInstance().MAX_VALUE.data) < 0) {
          return nextUInt_1($receiver, range.first, new UInt(range.last.data + (new UInt(1)).data | 0));
        } else {
          if (uintCompare(range.first.data, UInt$Companion_getInstance().MIN_VALUE.data) > 0) {
            return new UInt(nextUInt_1($receiver, new UInt(range.first.data - (new UInt(1)).data | 0), range.last).data + (new UInt(1)).data | 0);
          } else
            return nextUInt($receiver);
        }
      }
    }
    function nextULong($receiver) {
      return new ULong($receiver.nextLong());
    }
    function nextULong_0($receiver, until) {
      return nextULong_1($receiver, new ULong(Kotlin.Long.ZERO), until);
    }
    function nextULong_1($receiver, from, until) {
      checkULongRangeBounds(from, until);
      var signedFrom = from.data.xor(Long$Companion$MIN_VALUE);
      var signedUntil = until.data.xor(Long$Companion$MIN_VALUE);
      var signedResult = $receiver.nextLong_3pjtqy$(signedFrom, signedUntil).xor(Long$Companion$MIN_VALUE);
      return new ULong(signedResult);
    }
    function nextULong_2($receiver, range) {
      if (range.isEmpty())
        throw IllegalArgumentException_init_0('Cannot get random in empty range: ' + range);
      else {
        if (ulongCompare(range.last.data, ULong$Companion_getInstance().MAX_VALUE.data) < 0) {
          return nextULong_1($receiver, range.first, new ULong(range.last.data.add((new ULong(Kotlin.Long.fromInt((new UInt(1)).data).and(L4294967295))).data)));
        } else {
          if (ulongCompare(range.first.data, ULong$Companion_getInstance().MIN_VALUE.data) > 0) {
            return new ULong(nextULong_1($receiver, new ULong(range.first.data.subtract((new ULong(Kotlin.Long.fromInt((new UInt(1)).data).and(L4294967295))).data)), range.last).data.add((new ULong(Kotlin.Long.fromInt((new UInt(1)).data).and(L4294967295))).data));
          } else
            return nextULong($receiver);
        }
      }
    }
    function nextUBytes($receiver, array) {
      $receiver.nextBytes_fqrh44$(array.storage);
      return array;
    }
    function nextUBytes_0($receiver, size) {
      return new UByteArray($receiver.nextBytes_za3lpa$(size));
    }
    function nextUBytes_1($receiver, array, fromIndex, toIndex) {
      if (fromIndex === void 0)
        fromIndex = 0;
      if (toIndex === void 0)
        toIndex = array.size;
      $receiver.nextBytes_mj6st8$(array.storage, fromIndex, toIndex);
      return array;
    }
    function checkUIntRangeBounds(from, until) {
      if (!(uintCompare(until.data, from.data) > 0)) {
        var message = boundsErrorMessage(from, until);
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function checkULongRangeBounds(from, until) {
      if (!(ulongCompare(until.data, from.data) > 0)) {
        var message = boundsErrorMessage(from, until);
        throw IllegalArgumentException_init_0(message.toString());
      }}
    function XorWowRandom(x, y, z, w, v, addend) {
      Random.call(this);
      this.x_0 = x;
      this.y_0 = y;
      this.z_0 = z;
      this.w_0 = w;
      this.v_0 = v;
      this.addend_0 = addend;
      if (!((this.x_0 | this.y_0 | this.z_0 | this.w_0 | this.v_0) !== 0)) {
        var message = 'Initial state must have at least one non-zero element.';
        throw IllegalArgumentException_init_0(message.toString());
      }for (var index = 0; index < 64; index++) {
        this.nextInt();
      }
    }
    XorWowRandom.prototype.nextInt = function () {
      var t = this.x_0;
      t = t ^ t >>> 2;
      this.x_0 = this.y_0;
      this.y_0 = this.z_0;
      this.z_0 = this.w_0;
      var v0 = this.v_0;
      this.w_0 = v0;
      t = t ^ t << 1 ^ v0 ^ v0 << 4;
      this.v_0 = t;
      this.addend_0 = this.addend_0 + 362437 | 0;
      return t + this.addend_0 | 0;
    };
    XorWowRandom.prototype.nextBits_za3lpa$ = function (bitCount) {
      return takeUpperBits(this.nextInt(), bitCount);
    };
    XorWowRandom.$metadata$ = {kind: Kind_CLASS, simpleName: 'XorWowRandom', interfaces: [Random]};
    function XorWowRandom_init(seed1, seed2, $this) {
      $this = $this || Object.create(XorWowRandom.prototype);
      XorWowRandom.call($this, seed1, seed2, 0, 0, ~seed1, seed1 << 10 ^ seed2 >>> 4);
      return $this;
    }
    function ComparableRange(start, endInclusive) {
      this.start_p1gsmm$_0 = start;
      this.endInclusive_jj4lf7$_0 = endInclusive;
    }
    Object.defineProperty(ComparableRange.prototype, 'start', {get: function () {
      return this.start_p1gsmm$_0;
    }});
    Object.defineProperty(ComparableRange.prototype, 'endInclusive', {get: function () {
      return this.endInclusive_jj4lf7$_0;
    }});
    ComparableRange.prototype.equals = function (other) {
      return Kotlin.isType(other, ComparableRange) && (this.isEmpty() && other.isEmpty() || (equals(this.start, other.start) && equals(this.endInclusive, other.endInclusive)));
    };
    ComparableRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * hashCode(this.start) | 0) + hashCode(this.endInclusive) | 0;
    };
    ComparableRange.prototype.toString = function () {
      return this.start.toString() + '..' + this.endInclusive;
    };
    ComparableRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'ComparableRange', interfaces: [ClosedRange]};
    function rangeTo($receiver, that) {
      return new ComparableRange($receiver, that);
    }
    function ClosedFloatingPointRange() {
    }
    ClosedFloatingPointRange.prototype.contains_mef7kx$ = function (value) {
      return this.lessThanOrEquals_n65qkk$(this.start, value) && this.lessThanOrEquals_n65qkk$(value, this.endInclusive);
    };
    ClosedFloatingPointRange.prototype.isEmpty = function () {
      return !this.lessThanOrEquals_n65qkk$(this.start, this.endInclusive);
    };
    ClosedFloatingPointRange.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ClosedFloatingPointRange', interfaces: [ClosedRange]};
    function ClosedDoubleRange(start, endInclusive) {
      this._start_0 = start;
      this._endInclusive_0 = endInclusive;
    }
    Object.defineProperty(ClosedDoubleRange.prototype, 'start', {get: function () {
      return this._start_0;
    }});
    Object.defineProperty(ClosedDoubleRange.prototype, 'endInclusive', {get: function () {
      return this._endInclusive_0;
    }});
    ClosedDoubleRange.prototype.lessThanOrEquals_n65qkk$ = function (a, b) {
      return a <= b;
    };
    ClosedDoubleRange.prototype.contains_mef7kx$ = function (value) {
      return value >= this._start_0 && value <= this._endInclusive_0;
    };
    ClosedDoubleRange.prototype.isEmpty = function () {
      return !(this._start_0 <= this._endInclusive_0);
    };
    ClosedDoubleRange.prototype.equals = function (other) {
      return Kotlin.isType(other, ClosedDoubleRange) && (this.isEmpty() && other.isEmpty() || (this._start_0 === other._start_0 && this._endInclusive_0 === other._endInclusive_0));
    };
    ClosedDoubleRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * hashCode(this._start_0) | 0) + hashCode(this._endInclusive_0) | 0;
    };
    ClosedDoubleRange.prototype.toString = function () {
      return this._start_0.toString() + '..' + this._endInclusive_0;
    };
    ClosedDoubleRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'ClosedDoubleRange', interfaces: [ClosedFloatingPointRange]};
    function rangeTo_0($receiver, that) {
      return new ClosedDoubleRange($receiver, that);
    }
    function ClosedFloatRange(start, endInclusive) {
      this._start_0 = start;
      this._endInclusive_0 = endInclusive;
    }
    Object.defineProperty(ClosedFloatRange.prototype, 'start', {get: function () {
      return this._start_0;
    }});
    Object.defineProperty(ClosedFloatRange.prototype, 'endInclusive', {get: function () {
      return this._endInclusive_0;
    }});
    ClosedFloatRange.prototype.lessThanOrEquals_n65qkk$ = function (a, b) {
      return a <= b;
    };
    ClosedFloatRange.prototype.contains_mef7kx$ = function (value) {
      return value >= this._start_0 && value <= this._endInclusive_0;
    };
    ClosedFloatRange.prototype.isEmpty = function () {
      return !(this._start_0 <= this._endInclusive_0);
    };
    ClosedFloatRange.prototype.equals = function (other) {
      return Kotlin.isType(other, ClosedFloatRange) && (this.isEmpty() && other.isEmpty() || (this._start_0 === other._start_0 && this._endInclusive_0 === other._endInclusive_0));
    };
    ClosedFloatRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * hashCode(this._start_0) | 0) + hashCode(this._endInclusive_0) | 0;
    };
    ClosedFloatRange.prototype.toString = function () {
      return this._start_0.toString() + '..' + this._endInclusive_0;
    };
    ClosedFloatRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'ClosedFloatRange', interfaces: [ClosedFloatingPointRange]};
    function rangeTo_1($receiver, that) {
      return new ClosedFloatRange($receiver, that);
    }
    var contains_52 = defineInlineFunction('kotlin.kotlin.ranges.contains_gpq3rh$', function ($receiver, element) {
      return element != null && $receiver.contains_mef7kx$(element);
    });
    function checkStepIsPositive(isPositive, step) {
      if (!isPositive)
        throw IllegalArgumentException_init_0('Step must be positive, was: ' + step.toString() + '.');
    }
    function cast($receiver, value) {
      var tmp$;
      if (!$receiver.isInstance_s8jyv4$(value))
        throw new ClassCastException('Value cannot be cast to ' + toString($receiver.qualifiedName));
      return Kotlin.isType(tmp$ = value, Any) ? tmp$ : throwCCE_0();
    }
    function safeCast($receiver, value) {
      var tmp$;
      return $receiver.isInstance_s8jyv4$(value) ? Kotlin.isType(tmp$ = value, Any) ? tmp$ : throwCCE_0() : null;
    }
    var typeOf = defineInlineFunction('kotlin.kotlin.reflect.typeOf_287e2$', wrapFunction(function () {
      var UnsupportedOperationException_init = _.kotlin.UnsupportedOperationException_init_pdl1vj$;
      return function (T_0, isT) {
        throw UnsupportedOperationException_init('This function is implemented as an intrinsic on all supported platforms.');
      };
    }));
    function appendRange_1($receiver, value, startIndex, endIndex) {
      var tmp$;
      return Kotlin.isType(tmp$ = $receiver.append_ezbsdh$(value, startIndex, endIndex), Appendable) ? tmp$ : throwCCE_0();
    }
    function append($receiver, value) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== value.length; ++tmp$) {
        var item = value[tmp$];
        $receiver.append_gw00v9$(item);
      }
      return $receiver;
    }
    function appendElement_0($receiver, element, transform) {
      if (transform != null)
        $receiver.append_gw00v9$(transform(element));
      else if (element == null || Kotlin.isCharSequence(element))
        $receiver.append_gw00v9$(element);
      else if (Kotlin.isChar(element))
        $receiver.append_s8itvh$(unboxChar(element));
      else
        $receiver.append_gw00v9$(toString(element));
    }
    var plus_59 = defineInlineFunction('kotlin.kotlin.text.plus_elu61a$', function ($receiver, other) {
      return String.fromCharCode($receiver) + other;
    });
    function equals_1($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if ($receiver === other)
        return true;
      if (!ignoreCase)
        return false;
      if (toChar(String.fromCharCode($receiver | 0).toUpperCase().charCodeAt(0)) === toChar(String.fromCharCode(other | 0).toUpperCase().charCodeAt(0)))
        return true;
      if (toChar(String.fromCharCode($receiver | 0).toLowerCase().charCodeAt(0)) === toChar(String.fromCharCode(other | 0).toLowerCase().charCodeAt(0)))
        return true;
      return false;
    }
    function isSurrogate($receiver) {
      return (new CharRange(kotlin_js_internal_CharCompanionObject.MIN_SURROGATE, kotlin_js_internal_CharCompanionObject.MAX_SURROGATE)).contains_mef7kx$($receiver);
    }
    function trimMargin($receiver, marginPrefix) {
      if (marginPrefix === void 0)
        marginPrefix = '|';
      return replaceIndentByMargin($receiver, '', marginPrefix);
    }
    function replaceIndentByMargin($receiver, newIndent, marginPrefix) {
      if (newIndent === void 0)
        newIndent = '';
      if (marginPrefix === void 0)
        marginPrefix = '|';
      if (!!isBlank(marginPrefix)) {
        var message = 'marginPrefix must be non-blank string.';
        throw IllegalArgumentException_init_0(message.toString());
      }var lines_0 = lines($receiver);
      var resultSizeEstimate = $receiver.length + Kotlin.imul(newIndent.length, lines_0.size) | 0;
      var indentAddFunction = getIndentFunction(newIndent);
      var lastIndex = get_lastIndex_12(lines_0);
      var destination = ArrayList_init();
      var tmp$, tmp$_0;
      var index = 0;
      tmp$ = lines_0.iterator();
      loop_label: while (tmp$.hasNext()) {
        var item = tmp$.next();
        var tmp$_1;
        var index_0 = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
        var tmp$_2, tmp$_3;
        var tmp$_4;
        if ((index_0 === 0 || index_0 === lastIndex) && isBlank(item))
          tmp$_4 = null;
        else {
          var indentCutFunction$result;
          var indexOfFirst$result;
          indexOfFirst$break: do {
            var tmp$_5, tmp$_6, tmp$_7, tmp$_8;
            tmp$_5 = get_indices_13(item);
            tmp$_6 = tmp$_5.first;
            tmp$_7 = tmp$_5.last;
            tmp$_8 = tmp$_5.step;
            for (var index_1 = tmp$_6; index_1 <= tmp$_7; index_1 += tmp$_8) {
              if (!isWhitespace(unboxChar(toBoxedChar(item.charCodeAt(index_1))))) {
                indexOfFirst$result = index_1;
                break indexOfFirst$break;
              }}
            indexOfFirst$result = -1;
          }
           while (false);
          var firstNonWhitespaceIndex = indexOfFirst$result;
          if (firstNonWhitespaceIndex === -1) {
            indentCutFunction$result = null;
          } else if (startsWith_0(item, marginPrefix, firstNonWhitespaceIndex)) {
            indentCutFunction$result = item.substring(firstNonWhitespaceIndex + marginPrefix.length | 0);
          } else {
            indentCutFunction$result = null;
          }
          tmp$_4 = (tmp$_3 = (tmp$_2 = indentCutFunction$result) != null ? indentAddFunction(tmp$_2) : null) != null ? tmp$_3 : item;
        }
        if ((tmp$_1 = tmp$_4) != null) {
          destination.add_11rb$(tmp$_1);
        }}
      return joinTo_8(destination, StringBuilder_init(resultSizeEstimate), '\n').toString();
    }
    function trimIndent($receiver) {
      return replaceIndent($receiver, '');
    }
    function replaceIndent($receiver, newIndent) {
      if (newIndent === void 0)
        newIndent = '';
      var tmp$;
      var lines_0 = lines($receiver);
      var destination = ArrayList_init();
      var tmp$_0;
      tmp$_0 = lines_0.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (!isBlank(element))
          destination.add_11rb$(element);
      }
      var $receiver_0 = destination;
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_1;
      tmp$_1 = $receiver_0.iterator();
      while (tmp$_1.hasNext()) {
        var item = tmp$_1.next();
        destination_0.add_11rb$(indentWidth(item));
      }
      var minCommonIndent = (tmp$ = min_11(destination_0)) != null ? tmp$ : 0;
      var resultSizeEstimate = $receiver.length + Kotlin.imul(newIndent.length, lines_0.size) | 0;
      var indentAddFunction = getIndentFunction(newIndent);
      var lastIndex = get_lastIndex_12(lines_0);
      var destination_1 = ArrayList_init();
      var tmp$_2, tmp$_3;
      var index = 0;
      tmp$_2 = lines_0.iterator();
      while (tmp$_2.hasNext()) {
        var item_0 = tmp$_2.next();
        var tmp$_4;
        var index_0 = checkIndexOverflow((tmp$_3 = index, index = tmp$_3 + 1 | 0, tmp$_3));
        var tmp$_5, tmp$_6;
        if ((tmp$_4 = (index_0 === 0 || index_0 === lastIndex) && isBlank(item_0) ? null : (tmp$_6 = (tmp$_5 = drop_11(item_0, minCommonIndent)) != null ? indentAddFunction(tmp$_5) : null) != null ? tmp$_6 : item_0) != null) {
          destination_1.add_11rb$(tmp$_4);
        }}
      return joinTo_8(destination_1, StringBuilder_init(resultSizeEstimate), '\n').toString();
    }
    function prependIndent$lambda(closure$indent) {
      return function (it) {
        if (isBlank(it))
          if (it.length < closure$indent.length)
            return closure$indent;
          else
            return it;
        else
          return closure$indent + it;
      };
    }
    function prependIndent($receiver, indent) {
      if (indent === void 0)
        indent = '    ';
      return joinToString_9(map_10(lineSequence($receiver), prependIndent$lambda(indent)), '\n');
    }
    function indentWidth($receiver) {
      var indexOfFirst$result;
      indexOfFirst$break: do {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices_13($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          if (!isWhitespace(unboxChar(toBoxedChar($receiver.charCodeAt(index))))) {
            indexOfFirst$result = index;
            break indexOfFirst$break;
          }}
        indexOfFirst$result = -1;
      }
       while (false);
      var it = indexOfFirst$result;
      return it === -1 ? $receiver.length : it;
    }
    function getIndentFunction$lambda(line) {
      return line;
    }
    function getIndentFunction$lambda_0(closure$indent) {
      return function (line) {
        return closure$indent + line;
      };
    }
    function getIndentFunction(indent) {
      if (indent.length === 0)
        return getIndentFunction$lambda;
      else
        return getIndentFunction$lambda_0(indent);
    }
    var reindent = wrapFunction(function () {
      var ArrayList_init = _.kotlin.collections.ArrayList_init_287e2$;
      var checkIndexOverflow = _.kotlin.collections.checkIndexOverflow_za3lpa$;
      return function ($receiver, resultSizeEstimate, indentAddFunction, indentCutFunction) {
        var lastIndex = get_lastIndex_12($receiver);
        var destination = ArrayList_init();
        var tmp$, tmp$_0;
        var index = 0;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          var tmp$_1;
          var index_0 = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
          var tmp$_2, tmp$_3;
          if ((tmp$_1 = (index_0 === 0 || index_0 === lastIndex) && isBlank(item) ? null : (tmp$_3 = (tmp$_2 = indentCutFunction(item)) != null ? indentAddFunction(tmp$_2) : null) != null ? tmp$_3 : item) != null) {
            destination.add_11rb$(tmp$_1);
          }}
        return joinTo_8(destination, StringBuilder_init(resultSizeEstimate), '\n').toString();
      };
    });
    var append_0 = defineInlineFunction('kotlin.kotlin.text.append_7soew7$', function ($receiver, obj) {
      return $receiver.append_s8jyv4$(obj);
    });
    var buildString = defineInlineFunction('kotlin.kotlin.text.buildString_obkquz$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init;
      return function (builderAction) {
        var $receiver = StringBuilder_init();
        builderAction($receiver);
        return $receiver.toString();
      };
    }));
    var buildString_0 = defineInlineFunction('kotlin.kotlin.text.buildString_5yrlj9$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init_za3lpa$;
      return function (capacity, builderAction) {
        var $receiver = StringBuilder_init(capacity);
        builderAction($receiver);
        return $receiver.toString();
      };
    }));
    function append_1($receiver, value) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== value.length; ++tmp$) {
        var item = value[tmp$];
        $receiver.append_gw00v9$(item);
      }
      return $receiver;
    }
    function append_2($receiver, value) {
      var tmp$;
      for (tmp$ = 0; tmp$ !== value.length; ++tmp$) {
        var item = value[tmp$];
        $receiver.append_s8jyv4$(item);
      }
      return $receiver;
    }
    function toByteOrNull($receiver) {
      return toByteOrNull_0($receiver, 10);
    }
    function toByteOrNull_0($receiver, radix) {
      var tmp$;
      tmp$ = toIntOrNull_0($receiver, radix);
      if (tmp$ == null) {
        return null;
      }var int = tmp$;
      if (int < kotlin_js_internal_ByteCompanionObject.MIN_VALUE || int > kotlin_js_internal_ByteCompanionObject.MAX_VALUE)
        return null;
      return toByte(int);
    }
    function toShortOrNull($receiver) {
      return toShortOrNull_0($receiver, 10);
    }
    function toShortOrNull_0($receiver, radix) {
      var tmp$;
      tmp$ = toIntOrNull_0($receiver, radix);
      if (tmp$ == null) {
        return null;
      }var int = tmp$;
      if (int < kotlin_js_internal_ShortCompanionObject.MIN_VALUE || int > kotlin_js_internal_ShortCompanionObject.MAX_VALUE)
        return null;
      return toShort(int);
    }
    function toIntOrNull($receiver) {
      return toIntOrNull_0($receiver, 10);
    }
    function toIntOrNull_0($receiver, radix) {
      checkRadix(radix);
      var length = $receiver.length;
      if (length === 0)
        return null;
      var start;
      var isNegative;
      var limit;
      var firstChar = $receiver.charCodeAt(0);
      if (firstChar < 48) {
        if (length === 1)
          return null;
        start = 1;
        if (firstChar === 45) {
          isNegative = true;
          limit = -2147483648;
        } else if (firstChar === 43) {
          isNegative = false;
          limit = -2147483647;
        } else
          return null;
      } else {
        start = 0;
        isNegative = false;
        limit = -2147483647;
      }
      var limitForMaxRadix = -59652323;
      var limitBeforeMul = limitForMaxRadix;
      var result = 0;
      for (var i = start; i < length; i++) {
        var digit = digitOf($receiver.charCodeAt(i), radix);
        if (digit < 0)
          return null;
        if (result < limitBeforeMul) {
          if (limitBeforeMul === limitForMaxRadix) {
            limitBeforeMul = limit / radix | 0;
            if (result < limitBeforeMul) {
              return null;
            }} else {
            return null;
          }
        }result = Kotlin.imul(result, radix);
        if (result < (limit + digit | 0))
          return null;
        result = result - digit | 0;
      }
      return isNegative ? result : -result | 0;
    }
    function toLongOrNull($receiver) {
      return toLongOrNull_0($receiver, 10);
    }
    function toLongOrNull_0($receiver, radix) {
      checkRadix(radix);
      var length = $receiver.length;
      if (length === 0)
        return null;
      var start;
      var isNegative;
      var limit;
      var firstChar = $receiver.charCodeAt(0);
      if (firstChar < 48) {
        if (length === 1)
          return null;
        start = 1;
        if (firstChar === 45) {
          isNegative = true;
          limit = Long$Companion$MIN_VALUE;
        } else if (firstChar === 43) {
          isNegative = false;
          limit = L_9223372036854775807;
        } else
          return null;
      } else {
        start = 0;
        isNegative = false;
        limit = L_9223372036854775807;
      }
      var limitForMaxRadix = L_256204778801521550;
      var limitBeforeMul = limitForMaxRadix;
      var result = L0;
      for (var i = start; i < length; i++) {
        var digit = digitOf($receiver.charCodeAt(i), radix);
        if (digit < 0)
          return null;
        if (result.compareTo_11rb$(limitBeforeMul) < 0) {
          if (equals(limitBeforeMul, limitForMaxRadix)) {
            limitBeforeMul = limit.div(Kotlin.Long.fromInt(radix));
            if (result.compareTo_11rb$(limitBeforeMul) < 0) {
              return null;
            }} else {
            return null;
          }
        }result = result.multiply(Kotlin.Long.fromInt(radix));
        if (result.compareTo_11rb$(limit.add(Kotlin.Long.fromInt(digit))) < 0)
          return null;
        result = result.subtract(Kotlin.Long.fromInt(digit));
      }
      return isNegative ? result : result.unaryMinus();
    }
    function numberFormatError(input) {
      throw new NumberFormatException("Invalid number format: '" + input + "'");
    }
    var trim = defineInlineFunction('kotlin.kotlin.text.trim_2pivbd$', wrapFunction(function () {
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var startIndex = 0;
        var endIndex = $receiver.length - 1 | 0;
        var startFound = false;
        while (startIndex <= endIndex) {
          var index = !startFound ? startIndex : endIndex;
          var match = predicate(toBoxedChar($receiver.charCodeAt(index)));
          if (!startFound) {
            if (!match)
              startFound = true;
            else
              startIndex = startIndex + 1 | 0;
          } else {
            if (!match)
              break;
            else
              endIndex = endIndex - 1 | 0;
          }
        }
        return Kotlin.subSequence($receiver, startIndex, endIndex + 1 | 0);
      };
    }));
    var trim_0 = defineInlineFunction('kotlin.kotlin.text.trim_ouje1d$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
        var startIndex = 0;
        var endIndex = $receiver_0.length - 1 | 0;
        var startFound = false;
        while (startIndex <= endIndex) {
          var index = !startFound ? startIndex : endIndex;
          var match = predicate(toBoxedChar($receiver_0.charCodeAt(index)));
          if (!startFound) {
            if (!match)
              startFound = true;
            else
              startIndex = startIndex + 1 | 0;
          } else {
            if (!match)
              break;
            else
              endIndex = endIndex - 1 | 0;
          }
        }
        return Kotlin.subSequence($receiver_0, startIndex, endIndex + 1 | 0).toString();
      };
    }));
    var trimStart = defineInlineFunction('kotlin.kotlin.text.trimStart_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2)
          if (!predicate(toBoxedChar($receiver.charCodeAt(index))))
            return Kotlin.subSequence($receiver, index, $receiver.length);
        return '';
      };
    }));
    var trimStart_0 = defineInlineFunction('kotlin.kotlin.text.trimStart_ouje1d$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
        var trimStart$result;
        trimStart$break: do {
          var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
          tmp$_0 = get_indices($receiver_0);
          tmp$_1 = tmp$_0.first;
          tmp$_2 = tmp$_0.last;
          tmp$_3 = tmp$_0.step;
          for (var index = tmp$_1; index <= tmp$_2; index += tmp$_3)
            if (!predicate(toBoxedChar($receiver_0.charCodeAt(index)))) {
              trimStart$result = Kotlin.subSequence($receiver_0, index, $receiver_0.length);
              break trimStart$break;
            }trimStart$result = '';
        }
         while (false);
        return trimStart$result.toString();
      };
    }));
    var trimEnd = defineInlineFunction('kotlin.kotlin.text.trimEnd_2pivbd$', wrapFunction(function () {
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        tmp$ = reversed(get_indices($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (!predicate(toBoxedChar($receiver.charCodeAt(index))))
            return Kotlin.subSequence($receiver, 0, index + 1 | 0);
        }
        return '';
      };
    }));
    var trimEnd_0 = defineInlineFunction('kotlin.kotlin.text.trimEnd_ouje1d$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var get_indices = _.kotlin.text.get_indices_gw00vp$;
      var reversed = _.kotlin.ranges.reversed_zf1xzc$;
      var toBoxedChar = Kotlin.toBoxedChar;
      return function ($receiver, predicate) {
        var tmp$;
        var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
        var trimEnd$result;
        trimEnd$break: do {
          var tmp$_0;
          tmp$_0 = reversed(get_indices($receiver_0)).iterator();
          while (tmp$_0.hasNext()) {
            var index = tmp$_0.next();
            if (!predicate(toBoxedChar($receiver_0.charCodeAt(index)))) {
              trimEnd$result = Kotlin.subSequence($receiver_0, 0, index + 1 | 0);
              break trimEnd$break;
            }}
          trimEnd$result = '';
        }
         while (false);
        return trimEnd$result.toString();
      };
    }));
    function trim_1($receiver, chars) {
      var startIndex = 0;
      var endIndex = $receiver.length - 1 | 0;
      var startFound = false;
      while (startIndex <= endIndex) {
        var index = !startFound ? startIndex : endIndex;
        var match = contains_7(chars, unboxChar(toBoxedChar($receiver.charCodeAt(index))));
        if (!startFound) {
          if (!match)
            startFound = true;
          else
            startIndex = startIndex + 1 | 0;
        } else {
          if (!match)
            break;
          else
            endIndex = endIndex - 1 | 0;
        }
      }
      return Kotlin.subSequence($receiver, startIndex, endIndex + 1 | 0);
    }
    function trim_2($receiver, chars) {
      var tmp$;
      var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
      var startIndex = 0;
      var endIndex = $receiver_0.length - 1 | 0;
      var startFound = false;
      while (startIndex <= endIndex) {
        var index = !startFound ? startIndex : endIndex;
        var match = contains_7(chars, unboxChar(toBoxedChar($receiver_0.charCodeAt(index))));
        if (!startFound) {
          if (!match)
            startFound = true;
          else
            startIndex = startIndex + 1 | 0;
        } else {
          if (!match)
            break;
          else
            endIndex = endIndex - 1 | 0;
        }
      }
      return Kotlin.subSequence($receiver_0, startIndex, endIndex + 1 | 0).toString();
    }
    function trimStart_1($receiver, chars) {
      var trimStart$result;
      trimStart$break: do {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices_13($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          if (!contains_7(chars, unboxChar(toBoxedChar($receiver.charCodeAt(index))))) {
            trimStart$result = Kotlin.subSequence($receiver, index, $receiver.length);
            break trimStart$break;
          }}
        trimStart$result = '';
      }
       while (false);
      return trimStart$result;
    }
    function trimStart_2($receiver, chars) {
      var tmp$;
      var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
      var trimStart$result;
      trimStart$break: do {
        var tmp$_0, tmp$_1, tmp$_2, tmp$_3;
        tmp$_0 = get_indices_13($receiver_0);
        tmp$_1 = tmp$_0.first;
        tmp$_2 = tmp$_0.last;
        tmp$_3 = tmp$_0.step;
        for (var index = tmp$_1; index <= tmp$_2; index += tmp$_3) {
          if (!contains_7(chars, unboxChar(toBoxedChar($receiver_0.charCodeAt(index))))) {
            trimStart$result = Kotlin.subSequence($receiver_0, index, $receiver_0.length);
            break trimStart$break;
          }}
        trimStart$result = '';
      }
       while (false);
      return trimStart$result.toString();
    }
    function trimEnd_1($receiver, chars) {
      var trimEnd$result;
      trimEnd$break: do {
        var tmp$;
        tmp$ = reversed_9(get_indices_13($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (!contains_7(chars, unboxChar(toBoxedChar($receiver.charCodeAt(index))))) {
            trimEnd$result = Kotlin.subSequence($receiver, 0, index + 1 | 0);
            break trimEnd$break;
          }}
        trimEnd$result = '';
      }
       while (false);
      return trimEnd$result;
    }
    function trimEnd_2($receiver, chars) {
      var tmp$;
      var $receiver_0 = Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE();
      var trimEnd$result;
      trimEnd$break: do {
        var tmp$_0;
        tmp$_0 = reversed_9(get_indices_13($receiver_0)).iterator();
        while (tmp$_0.hasNext()) {
          var index = tmp$_0.next();
          if (!contains_7(chars, unboxChar(toBoxedChar($receiver_0.charCodeAt(index))))) {
            trimEnd$result = Kotlin.subSequence($receiver_0, 0, index + 1 | 0);
            break trimEnd$break;
          }}
        trimEnd$result = '';
      }
       while (false);
      return trimEnd$result.toString();
    }
    function trim_3($receiver) {
      var startIndex = 0;
      var endIndex = $receiver.length - 1 | 0;
      var startFound = false;
      while (startIndex <= endIndex) {
        var index = !startFound ? startIndex : endIndex;
        var match = isWhitespace(unboxChar(toBoxedChar($receiver.charCodeAt(index))));
        if (!startFound) {
          if (!match)
            startFound = true;
          else
            startIndex = startIndex + 1 | 0;
        } else {
          if (!match)
            break;
          else
            endIndex = endIndex - 1 | 0;
        }
      }
      return Kotlin.subSequence($receiver, startIndex, endIndex + 1 | 0);
    }
    var trim_4 = defineInlineFunction('kotlin.kotlin.text.trim_pdl1vz$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var trim = _.kotlin.text.trim_gw00vp$;
      return function ($receiver) {
        var tmp$;
        return trim(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
      };
    }));
    function trimStart_3($receiver) {
      var trimStart$result;
      trimStart$break: do {
        var tmp$, tmp$_0, tmp$_1, tmp$_2;
        tmp$ = get_indices_13($receiver);
        tmp$_0 = tmp$.first;
        tmp$_1 = tmp$.last;
        tmp$_2 = tmp$.step;
        for (var index = tmp$_0; index <= tmp$_1; index += tmp$_2) {
          if (!isWhitespace(unboxChar(toBoxedChar($receiver.charCodeAt(index))))) {
            trimStart$result = Kotlin.subSequence($receiver, index, $receiver.length);
            break trimStart$break;
          }}
        trimStart$result = '';
      }
       while (false);
      return trimStart$result;
    }
    var trimStart_4 = defineInlineFunction('kotlin.kotlin.text.trimStart_pdl1vz$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var trimStart = _.kotlin.text.trimStart_gw00vp$;
      return function ($receiver) {
        var tmp$;
        return trimStart(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
      };
    }));
    function trimEnd_3($receiver) {
      var trimEnd$result;
      trimEnd$break: do {
        var tmp$;
        tmp$ = reversed_9(get_indices_13($receiver)).iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (!isWhitespace(unboxChar(toBoxedChar($receiver.charCodeAt(index))))) {
            trimEnd$result = Kotlin.subSequence($receiver, 0, index + 1 | 0);
            break trimEnd$break;
          }}
        trimEnd$result = '';
      }
       while (false);
      return trimEnd$result;
    }
    var trimEnd_4 = defineInlineFunction('kotlin.kotlin.text.trimEnd_pdl1vz$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var trimEnd = _.kotlin.text.trimEnd_gw00vp$;
      return function ($receiver) {
        var tmp$;
        return trimEnd(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
      };
    }));
    function padStart($receiver, length, padChar) {
      if (padChar === void 0)
        padChar = 32;
      var tmp$;
      if (length < 0)
        throw IllegalArgumentException_init_0('Desired length ' + length + ' is less than zero.');
      if (length <= $receiver.length)
        return Kotlin.subSequence($receiver, 0, $receiver.length);
      var sb = StringBuilder_init(length);
      tmp$ = length - $receiver.length | 0;
      for (var i = 1; i <= tmp$; i++)
        sb.append_s8itvh$(padChar);
      sb.append_gw00v9$($receiver);
      return sb;
    }
    function padStart_0($receiver, length, padChar) {
      if (padChar === void 0)
        padChar = 32;
      var tmp$;
      return padStart(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE_0(), length, padChar).toString();
    }
    function padEnd($receiver, length, padChar) {
      if (padChar === void 0)
        padChar = 32;
      var tmp$;
      if (length < 0)
        throw IllegalArgumentException_init_0('Desired length ' + length + ' is less than zero.');
      if (length <= $receiver.length)
        return Kotlin.subSequence($receiver, 0, $receiver.length);
      var sb = StringBuilder_init(length);
      sb.append_gw00v9$($receiver);
      tmp$ = length - $receiver.length | 0;
      for (var i = 1; i <= tmp$; i++)
        sb.append_s8itvh$(padChar);
      return sb;
    }
    function padEnd_0($receiver, length, padChar) {
      if (padChar === void 0)
        padChar = 32;
      var tmp$;
      return padEnd(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE_0(), length, padChar).toString();
    }
    var isNullOrEmpty_2 = defineInlineFunction('kotlin.kotlin.text.isNullOrEmpty_qc8d1o$', function ($receiver) {
      return $receiver == null || $receiver.length === 0;
    });
    var isEmpty_8 = defineInlineFunction('kotlin.kotlin.text.isEmpty_gw00vp$', function ($receiver) {
      return $receiver.length === 0;
    });
    var isNotEmpty_10 = defineInlineFunction('kotlin.kotlin.text.isNotEmpty_gw00vp$', function ($receiver) {
      return $receiver.length > 0;
    });
    var isNotBlank = defineInlineFunction('kotlin.kotlin.text.isNotBlank_gw00vp$', wrapFunction(function () {
      var isBlank = _.kotlin.text.isBlank_gw00vp$;
      return function ($receiver) {
        return !isBlank($receiver);
      };
    }));
    var isNullOrBlank = defineInlineFunction('kotlin.kotlin.text.isNullOrBlank_qc8d1o$', wrapFunction(function () {
      var isBlank = _.kotlin.text.isBlank_gw00vp$;
      return function ($receiver) {
        return $receiver == null || isBlank($receiver);
      };
    }));
    function iterator$ObjectLiteral(this$iterator) {
      this.this$iterator = this$iterator;
      CharIterator.call(this);
      this.index_0 = 0;
    }
    iterator$ObjectLiteral.prototype.nextChar = function () {
      var tmp$, tmp$_0;
      tmp$_0 = (tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$);
      return this.this$iterator.charCodeAt(tmp$_0);
    };
    iterator$ObjectLiteral.prototype.hasNext = function () {
      return this.index_0 < this.this$iterator.length;
    };
    iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [CharIterator]};
    function iterator_4($receiver) {
      return new iterator$ObjectLiteral($receiver);
    }
    var orEmpty_5 = defineInlineFunction('kotlin.kotlin.text.orEmpty_5cw0du$', function ($receiver) {
      return $receiver != null ? $receiver : '';
    });
    var ifEmpty_3 = defineInlineFunction('kotlin.kotlin.text.ifEmpty_pevw8y$', function ($receiver, defaultValue) {
      return $receiver.length === 0 ? defaultValue() : $receiver;
    });
    var ifBlank = defineInlineFunction('kotlin.kotlin.text.ifBlank_pevw8y$', wrapFunction(function () {
      var isBlank = _.kotlin.text.isBlank_gw00vp$;
      return function ($receiver, defaultValue) {
        return isBlank($receiver) ? defaultValue() : $receiver;
      };
    }));
    function get_indices_13($receiver) {
      return new IntRange(0, $receiver.length - 1 | 0);
    }
    function get_lastIndex_13($receiver) {
      return $receiver.length - 1 | 0;
    }
    function hasSurrogatePairAt($receiver, index) {
      var tmp$;
      tmp$ = $receiver.length - 2 | 0;
      return 0 <= index && index <= tmp$ && isHighSurrogate($receiver.charCodeAt(index)) && isLowSurrogate($receiver.charCodeAt(index + 1 | 0));
    }
    function substring_1($receiver, range) {
      return $receiver.substring(range.start, range.endInclusive + 1 | 0);
    }
    function subSequence_0($receiver, range) {
      return Kotlin.subSequence($receiver, range.start, range.endInclusive + 1 | 0);
    }
    var subSequence_1 = defineInlineFunction('kotlin.kotlin.text.subSequence_qgyqat$', function ($receiver, start, end) {
      return $receiver.substring(start, end);
    });
    var substring_2 = defineInlineFunction('kotlin.kotlin.text.substring_qdpigv$', function ($receiver, startIndex, endIndex) {
      if (endIndex === void 0)
        endIndex = $receiver.length;
      return Kotlin.subSequence($receiver, startIndex, endIndex).toString();
    });
    function substring_3($receiver, range) {
      return Kotlin.subSequence($receiver, range.start, range.endInclusive + 1 | 0).toString();
    }
    function substringBefore($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_16($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(0, index);
    }
    function substringBefore_0($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_17($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(0, index);
    }
    function substringAfter($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_16($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(index + 1 | 0, $receiver.length);
    }
    function substringAfter_0($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_17($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(index + delimiter.length | 0, $receiver.length);
    }
    function substringBeforeLast($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_15($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(0, index);
    }
    function substringBeforeLast_0($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_16($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(0, index);
    }
    function substringAfterLast($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_15($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(index + 1 | 0, $receiver.length);
    }
    function substringAfterLast_0($receiver, delimiter, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_16($receiver, delimiter);
      return index === -1 ? missingDelimiterValue : $receiver.substring(index + delimiter.length | 0, $receiver.length);
    }
    function replaceRange($receiver, startIndex, endIndex, replacement) {
      if (endIndex < startIndex)
        throw new IndexOutOfBoundsException('End index (' + endIndex + ') is less than start index (' + startIndex + ').');
      var sb = StringBuilder_init_1();
      sb.appendRange_ezbsdh$($receiver, 0, startIndex);
      sb.append_gw00v9$(replacement);
      sb.appendRange_ezbsdh$($receiver, endIndex, $receiver.length);
      return sb;
    }
    var replaceRange_0 = defineInlineFunction('kotlin.kotlin.text.replaceRange_r96sod$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var replaceRange = _.kotlin.text.replaceRange_p5j4qv$;
      return function ($receiver, startIndex, endIndex, replacement) {
        var tmp$;
        return replaceRange(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE(), startIndex, endIndex, replacement).toString();
      };
    }));
    function replaceRange_1($receiver, range, replacement) {
      return replaceRange($receiver, range.start, range.endInclusive + 1 | 0, replacement);
    }
    var replaceRange_2 = defineInlineFunction('kotlin.kotlin.text.replaceRange_laqjpa$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var replaceRange = _.kotlin.text.replaceRange_r6gztw$;
      return function ($receiver, range, replacement) {
        var tmp$;
        return replaceRange(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE(), range, replacement).toString();
      };
    }));
    function removeRange($receiver, startIndex, endIndex) {
      if (endIndex < startIndex)
        throw new IndexOutOfBoundsException('End index (' + endIndex + ') is less than start index (' + startIndex + ').');
      if (endIndex === startIndex)
        return Kotlin.subSequence($receiver, 0, $receiver.length);
      var sb = StringBuilder_init($receiver.length - (endIndex - startIndex) | 0);
      sb.appendRange_ezbsdh$($receiver, 0, startIndex);
      sb.appendRange_ezbsdh$($receiver, endIndex, $receiver.length);
      return sb;
    }
    var removeRange_0 = defineInlineFunction('kotlin.kotlin.text.removeRange_qgyqat$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var removeRange = _.kotlin.text.removeRange_qdpigv$;
      return function ($receiver, startIndex, endIndex) {
        var tmp$;
        return removeRange(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE(), startIndex, endIndex).toString();
      };
    }));
    function removeRange_1($receiver, range) {
      return removeRange($receiver, range.start, range.endInclusive + 1 | 0);
    }
    var removeRange_2 = defineInlineFunction('kotlin.kotlin.text.removeRange_fc3b62$', wrapFunction(function () {
      var throwCCE = Kotlin.throwCCE;
      var removeRange = _.kotlin.text.removeRange_i511yc$;
      return function ($receiver, range) {
        var tmp$;
        return removeRange(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE(), range).toString();
      };
    }));
    function removePrefix($receiver, prefix) {
      if (startsWith_2($receiver, prefix)) {
        return Kotlin.subSequence($receiver, prefix.length, $receiver.length);
      }return Kotlin.subSequence($receiver, 0, $receiver.length);
    }
    function removePrefix_0($receiver, prefix) {
      if (startsWith_2($receiver, prefix)) {
        return $receiver.substring(prefix.length);
      }return $receiver;
    }
    function removeSuffix($receiver, suffix) {
      if (endsWith_1($receiver, suffix)) {
        return Kotlin.subSequence($receiver, 0, $receiver.length - suffix.length | 0);
      }return Kotlin.subSequence($receiver, 0, $receiver.length);
    }
    function removeSuffix_0($receiver, suffix) {
      if (endsWith_1($receiver, suffix)) {
        return $receiver.substring(0, $receiver.length - suffix.length | 0);
      }return $receiver;
    }
    function removeSurrounding($receiver, prefix, suffix) {
      if ($receiver.length >= (prefix.length + suffix.length | 0) && startsWith_2($receiver, prefix) && endsWith_1($receiver, suffix)) {
        return Kotlin.subSequence($receiver, prefix.length, $receiver.length - suffix.length | 0);
      }return Kotlin.subSequence($receiver, 0, $receiver.length);
    }
    function removeSurrounding_0($receiver, prefix, suffix) {
      if ($receiver.length >= (prefix.length + suffix.length | 0) && startsWith_2($receiver, prefix) && endsWith_1($receiver, suffix)) {
        return $receiver.substring(prefix.length, $receiver.length - suffix.length | 0);
      }return $receiver;
    }
    function removeSurrounding_1($receiver, delimiter) {
      return removeSurrounding($receiver, delimiter, delimiter);
    }
    function removeSurrounding_2($receiver, delimiter) {
      return removeSurrounding_0($receiver, delimiter, delimiter);
    }
    function replaceBefore($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_16($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), 0, index, replacement).toString();
      }
      return tmp$;
    }
    function replaceBefore_0($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_17($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), 0, index, replacement).toString();
      }
      return tmp$;
    }
    function replaceAfter($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_16($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var startIndex = index + 1 | 0;
        var endIndex = $receiver.length;
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), startIndex, endIndex, replacement).toString();
      }
      return tmp$;
    }
    function replaceAfter_0($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = indexOf_17($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var startIndex = index + delimiter.length | 0;
        var endIndex = $receiver.length;
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), startIndex, endIndex, replacement).toString();
      }
      return tmp$;
    }
    function replaceAfterLast($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_16($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var startIndex = index + delimiter.length | 0;
        var endIndex = $receiver.length;
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), startIndex, endIndex, replacement).toString();
      }
      return tmp$;
    }
    function replaceAfterLast_0($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_15($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var startIndex = index + 1 | 0;
        var endIndex = $receiver.length;
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), startIndex, endIndex, replacement).toString();
      }
      return tmp$;
    }
    function replaceBeforeLast($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_15($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), 0, index, replacement).toString();
      }
      return tmp$;
    }
    function replaceBeforeLast_0($receiver, delimiter, replacement, missingDelimiterValue) {
      if (missingDelimiterValue === void 0)
        missingDelimiterValue = $receiver;
      var index = lastIndexOf_16($receiver, delimiter);
      var tmp$;
      if (index === -1)
        tmp$ = missingDelimiterValue;
      else {
        var tmp$_0;
        tmp$ = replaceRange(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE(), 0, index, replacement).toString();
      }
      return tmp$;
    }
    var replace_1 = defineInlineFunction('kotlin.kotlin.text.replace_tb98gq$', function ($receiver, regex, replacement) {
      return regex.replace_x2uqeu$($receiver, replacement);
    });
    var replace_2 = defineInlineFunction('kotlin.kotlin.text.replace_3avfay$', wrapFunction(function () {
      var StringBuilder_init = _.kotlin.text.StringBuilder_init_za3lpa$;
      var ensureNotNull = Kotlin.ensureNotNull;
      return function ($receiver, regex, transform) {
        var replace_20wsma$result;
        replace_20wsma$break: do {
          var match = regex.find_905azu$($receiver);
          if (match == null) {
            replace_20wsma$result = $receiver.toString();
            break replace_20wsma$break;
          }var lastStart = 0;
          var length = $receiver.length;
          var sb = StringBuilder_init(length);
          do {
            var foundMatch = ensureNotNull(match);
            sb.append_ezbsdh$($receiver, lastStart, foundMatch.range.start);
            sb.append_gw00v9$(transform(foundMatch));
            lastStart = foundMatch.range.endInclusive + 1 | 0;
            match = foundMatch.next();
          }
           while (lastStart < length && match != null);
          if (lastStart < length) {
            sb.append_ezbsdh$($receiver, lastStart, length);
          }replace_20wsma$result = sb.toString();
        }
         while (false);
        return replace_20wsma$result;
      };
    }));
    var replaceFirst_1 = defineInlineFunction('kotlin.kotlin.text.replaceFirst_tb98gq$', function ($receiver, regex, replacement) {
      return regex.replaceFirst_x2uqeu$($receiver, replacement);
    });
    var matches_0 = defineInlineFunction('kotlin.kotlin.text.matches_t3gu14$', function ($receiver, regex) {
      return regex.matches_6bul2c$($receiver);
    });
    function regionMatchesImpl($receiver, thisOffset, other, otherOffset, length, ignoreCase) {
      if (otherOffset < 0 || thisOffset < 0 || thisOffset > ($receiver.length - length | 0) || otherOffset > (other.length - length | 0)) {
        return false;
      }for (var index = 0; index < length; index++) {
        if (!equals_1($receiver.charCodeAt(thisOffset + index | 0), other.charCodeAt(otherOffset + index | 0), ignoreCase))
          return false;
      }
      return true;
    }
    function startsWith_1($receiver, char, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.length > 0 && equals_1($receiver.charCodeAt(0), char, ignoreCase);
    }
    function endsWith_0($receiver, char, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return $receiver.length > 0 && equals_1($receiver.charCodeAt(get_lastIndex_13($receiver)), char, ignoreCase);
    }
    function startsWith_2($receiver, prefix, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase && typeof $receiver === 'string' && typeof prefix === 'string')
        return startsWith($receiver, prefix);
      else
        return regionMatchesImpl($receiver, 0, prefix, 0, prefix.length, ignoreCase);
    }
    function startsWith_3($receiver, prefix, startIndex, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase && typeof $receiver === 'string' && typeof prefix === 'string')
        return startsWith_0($receiver, prefix, startIndex);
      else
        return regionMatchesImpl($receiver, startIndex, prefix, 0, prefix.length, ignoreCase);
    }
    function endsWith_1($receiver, suffix, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase && typeof $receiver === 'string' && typeof suffix === 'string')
        return endsWith($receiver, suffix);
      else
        return regionMatchesImpl($receiver, $receiver.length - suffix.length | 0, suffix, 0, suffix.length, ignoreCase);
    }
    function commonPrefixWith($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      var shortestLength = Math_0.min($receiver.length, other.length);
      var i = 0;
      while (i < shortestLength && equals_1($receiver.charCodeAt(i), other.charCodeAt(i), ignoreCase)) {
        i = i + 1 | 0;
      }
      if (hasSurrogatePairAt($receiver, i - 1 | 0) || hasSurrogatePairAt(other, i - 1 | 0)) {
        i = i - 1 | 0;
      }return Kotlin.subSequence($receiver, 0, i).toString();
    }
    function commonSuffixWith($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      var thisLength = $receiver.length;
      var otherLength = other.length;
      var shortestLength = Math_0.min(thisLength, otherLength);
      var i = 0;
      while (i < shortestLength && equals_1($receiver.charCodeAt(thisLength - i - 1 | 0), other.charCodeAt(otherLength - i - 1 | 0), ignoreCase)) {
        i = i + 1 | 0;
      }
      if (hasSurrogatePairAt($receiver, thisLength - i - 1 | 0) || hasSurrogatePairAt(other, otherLength - i - 1 | 0)) {
        i = i - 1 | 0;
      }return Kotlin.subSequence($receiver, thisLength - i | 0, thisLength).toString();
    }
    function indexOfAny($receiver, chars, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      var tmp$, tmp$_0;
      if (!ignoreCase && chars.length === 1 && typeof $receiver === 'string') {
        var char = single_7(chars);
        return $receiver.indexOf(String.fromCharCode(char), startIndex);
      }tmp$ = coerceAtLeast_2(startIndex, 0);
      tmp$_0 = get_lastIndex_13($receiver);
      loop_label: for (var index = tmp$; index <= tmp$_0; index++) {
        var charAtIndex = $receiver.charCodeAt(index);
        var any$result;
        any$break: do {
          var tmp$_1;
          for (tmp$_1 = 0; tmp$_1 !== chars.length; ++tmp$_1) {
            var element = unboxChar(chars[tmp$_1]);
            if (equals_1(unboxChar(toBoxedChar(element)), charAtIndex, ignoreCase)) {
              any$result = true;
              break any$break;
            }}
          any$result = false;
        }
         while (false);
        if (any$result)
          return index;
      }
      return -1;
    }
    function lastIndexOfAny($receiver, chars, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = get_lastIndex_13($receiver);
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (!ignoreCase && chars.length === 1 && typeof $receiver === 'string') {
        var char = single_7(chars);
        return $receiver.lastIndexOf(String.fromCharCode(char), startIndex);
      }loop_label: for (var index = coerceAtMost_2(startIndex, get_lastIndex_13($receiver)); index >= 0; index--) {
        var charAtIndex = $receiver.charCodeAt(index);
        var any$result;
        any$break: do {
          var tmp$;
          for (tmp$ = 0; tmp$ !== chars.length; ++tmp$) {
            var element = unboxChar(chars[tmp$]);
            if (equals_1(unboxChar(toBoxedChar(element)), charAtIndex, ignoreCase)) {
              any$result = true;
              break any$break;
            }}
          any$result = false;
        }
         while (false);
        if (any$result)
          return index;
      }
      return -1;
    }
    function indexOf_15($receiver, other, startIndex, endIndex, ignoreCase, last) {
      if (last === void 0)
        last = false;
      var tmp$, tmp$_0;
      var indices = !last ? new IntRange(coerceAtLeast_2(startIndex, 0), coerceAtMost_2(endIndex, $receiver.length)) : downTo_4(coerceAtMost_2(startIndex, get_lastIndex_13($receiver)), coerceAtLeast_2(endIndex, 0));
      if (typeof $receiver === 'string' && typeof other === 'string') {
        tmp$ = indices.iterator();
        while (tmp$.hasNext()) {
          var index = tmp$.next();
          if (regionMatches(other, 0, $receiver, index, other.length, ignoreCase))
            return index;
        }
      } else {
        tmp$_0 = indices.iterator();
        while (tmp$_0.hasNext()) {
          var index_0 = tmp$_0.next();
          if (regionMatchesImpl(other, 0, $receiver, index_0, other.length, ignoreCase))
            return index_0;
        }
      }
      return -1;
    }
    function findAnyOf($receiver, strings, startIndex, ignoreCase, last) {
      var tmp$, tmp$_0;
      if (!ignoreCase && strings.size === 1) {
        var string = single_17(strings);
        var index = !last ? indexOf_17($receiver, string, startIndex) : lastIndexOf_16($receiver, string, startIndex);
        return index < 0 ? null : to(index, string);
      }var indices = !last ? new IntRange(coerceAtLeast_2(startIndex, 0), $receiver.length) : downTo_4(coerceAtMost_2(startIndex, get_lastIndex_13($receiver)), 0);
      if (typeof $receiver === 'string') {
        tmp$ = indices.iterator();
        loop_label: while (tmp$.hasNext()) {
          var index_0 = tmp$.next();
          var firstOrNull$result;
          firstOrNull$break: do {
            var tmp$_1;
            tmp$_1 = strings.iterator();
            while (tmp$_1.hasNext()) {
              var element = tmp$_1.next();
              if (regionMatches(element, 0, $receiver, index_0, element.length, ignoreCase)) {
                firstOrNull$result = element;
                break firstOrNull$break;
              }}
            firstOrNull$result = null;
          }
           while (false);
          var matchingString = firstOrNull$result;
          if (matchingString != null)
            return to(index_0, matchingString);
        }
      } else {
        tmp$_0 = indices.iterator();
        loop_label: while (tmp$_0.hasNext()) {
          var index_1 = tmp$_0.next();
          var firstOrNull$result_0;
          firstOrNull$break: do {
            var tmp$_2;
            tmp$_2 = strings.iterator();
            while (tmp$_2.hasNext()) {
              var element_0 = tmp$_2.next();
              if (regionMatchesImpl(element_0, 0, $receiver, index_1, element_0.length, ignoreCase)) {
                firstOrNull$result_0 = element_0;
                break firstOrNull$break;
              }}
            firstOrNull$result_0 = null;
          }
           while (false);
          var matchingString_0 = firstOrNull$result_0;
          if (matchingString_0 != null)
            return to(index_1, matchingString_0);
        }
      }
      return null;
    }
    function findAnyOf_0($receiver, strings, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      return findAnyOf($receiver, strings, startIndex, ignoreCase, false);
    }
    function findLastAnyOf($receiver, strings, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = get_lastIndex_13($receiver);
      if (ignoreCase === void 0)
        ignoreCase = false;
      return findAnyOf($receiver, strings, startIndex, ignoreCase, true);
    }
    function indexOfAny_0($receiver, strings, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = findAnyOf($receiver, strings, startIndex, ignoreCase, false)) != null ? tmp$.first : null) != null ? tmp$_0 : -1;
    }
    function lastIndexOfAny_0($receiver, strings, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = get_lastIndex_13($receiver);
      if (ignoreCase === void 0)
        ignoreCase = false;
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = findAnyOf($receiver, strings, startIndex, ignoreCase, true)) != null ? tmp$.first : null) != null ? tmp$_0 : -1;
    }
    function indexOf_16($receiver, char, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      return ignoreCase || !(typeof $receiver === 'string') ? indexOfAny($receiver, Kotlin.charArrayOf(char), startIndex, ignoreCase) : $receiver.indexOf(String.fromCharCode(char), startIndex);
    }
    function indexOf_17($receiver, string, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      return ignoreCase || !(typeof $receiver === 'string') ? indexOf_15($receiver, string, startIndex, $receiver.length, ignoreCase) : $receiver.indexOf(string, startIndex);
    }
    function lastIndexOf_15($receiver, char, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = get_lastIndex_13($receiver);
      if (ignoreCase === void 0)
        ignoreCase = false;
      return ignoreCase || !(typeof $receiver === 'string') ? lastIndexOfAny($receiver, Kotlin.charArrayOf(char), startIndex, ignoreCase) : $receiver.lastIndexOf(String.fromCharCode(char), startIndex);
    }
    function lastIndexOf_16($receiver, string, startIndex, ignoreCase) {
      if (startIndex === void 0)
        startIndex = get_lastIndex_13($receiver);
      if (ignoreCase === void 0)
        ignoreCase = false;
      return ignoreCase || !(typeof $receiver === 'string') ? indexOf_15($receiver, string, startIndex, 0, ignoreCase, true) : $receiver.lastIndexOf(string, startIndex);
    }
    function contains_53($receiver, other, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return typeof other === 'string' ? indexOf_17($receiver, other, void 0, ignoreCase) >= 0 : indexOf_15($receiver, other, 0, $receiver.length, ignoreCase) >= 0;
    }
    function contains_54($receiver, char, ignoreCase) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      return indexOf_16($receiver, char, void 0, ignoreCase) >= 0;
    }
    var contains_55 = defineInlineFunction('kotlin.kotlin.text.contains_t3gu14$', function ($receiver, regex) {
      return regex.containsMatchIn_6bul2c$($receiver);
    });
    function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
      this.input_0 = input;
      this.startIndex_0 = startIndex;
      this.limit_0 = limit;
      this.getNextMatch_0 = getNextMatch;
    }
    function DelimitedRangesSequence$iterator$ObjectLiteral(this$DelimitedRangesSequence) {
      this.this$DelimitedRangesSequence = this$DelimitedRangesSequence;
      this.nextState = -1;
      this.currentStartIndex = coerceIn_2(this$DelimitedRangesSequence.startIndex_0, 0, this$DelimitedRangesSequence.input_0.length);
      this.nextSearchIndex = this.currentStartIndex;
      this.nextItem = null;
      this.counter = 0;
    }
    DelimitedRangesSequence$iterator$ObjectLiteral.prototype.calcNext_0 = function () {
      if (this.nextSearchIndex < 0) {
        this.nextState = 0;
        this.nextItem = null;
      } else {
        if (this.this$DelimitedRangesSequence.limit_0 > 0 && (this.counter = this.counter + 1 | 0, this.counter) >= this.this$DelimitedRangesSequence.limit_0 || this.nextSearchIndex > this.this$DelimitedRangesSequence.input_0.length) {
          this.nextItem = new IntRange(this.currentStartIndex, get_lastIndex_13(this.this$DelimitedRangesSequence.input_0));
          this.nextSearchIndex = -1;
        } else {
          var match = this.this$DelimitedRangesSequence.getNextMatch_0(this.this$DelimitedRangesSequence.input_0, this.nextSearchIndex);
          if (match == null) {
            this.nextItem = new IntRange(this.currentStartIndex, get_lastIndex_13(this.this$DelimitedRangesSequence.input_0));
            this.nextSearchIndex = -1;
          } else {
            var index = match.component1(), length = match.component2();
            this.nextItem = until_4(this.currentStartIndex, index);
            this.currentStartIndex = index + length | 0;
            this.nextSearchIndex = this.currentStartIndex + (length === 0 ? 1 : 0) | 0;
          }
        }
        this.nextState = 1;
      }
    };
    DelimitedRangesSequence$iterator$ObjectLiteral.prototype.next = function () {
      var tmp$;
      if (this.nextState === -1)
        this.calcNext_0();
      if (this.nextState === 0)
        throw NoSuchElementException_init();
      var result = Kotlin.isType(tmp$ = this.nextItem, IntRange) ? tmp$ : throwCCE_0();
      this.nextItem = null;
      this.nextState = -1;
      return result;
    };
    DelimitedRangesSequence$iterator$ObjectLiteral.prototype.hasNext = function () {
      if (this.nextState === -1)
        this.calcNext_0();
      return this.nextState === 1;
    };
    DelimitedRangesSequence$iterator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Iterator]};
    DelimitedRangesSequence.prototype.iterator = function () {
      return new DelimitedRangesSequence$iterator$ObjectLiteral(this);
    };
    DelimitedRangesSequence.$metadata$ = {kind: Kind_CLASS, simpleName: 'DelimitedRangesSequence', interfaces: [Sequence]};
    function rangesDelimitedBy$lambda(closure$delimiters, closure$ignoreCase) {
      return function ($receiver, currentIndex) {
        var it = indexOfAny($receiver, closure$delimiters, currentIndex, closure$ignoreCase);
        return it < 0 ? null : to(it, 1);
      };
    }
    function rangesDelimitedBy($receiver, delimiters, startIndex, ignoreCase, limit) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      if (!(limit >= 0)) {
        var message = 'Limit must be non-negative, but was ' + limit + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }return new DelimitedRangesSequence($receiver, startIndex, limit, rangesDelimitedBy$lambda(delimiters, ignoreCase));
    }
    function rangesDelimitedBy$lambda_0(closure$delimitersList, closure$ignoreCase) {
      return function ($receiver, currentIndex) {
        var tmp$;
        return (tmp$ = findAnyOf($receiver, closure$delimitersList, currentIndex, closure$ignoreCase, false)) != null ? to(tmp$.first, tmp$.second.length) : null;
      };
    }
    function rangesDelimitedBy_0($receiver, delimiters, startIndex, ignoreCase, limit) {
      if (startIndex === void 0)
        startIndex = 0;
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      if (!(limit >= 0)) {
        var message = 'Limit must be non-negative, but was ' + limit + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }var delimitersList = asList(delimiters);
      return new DelimitedRangesSequence($receiver, startIndex, limit, rangesDelimitedBy$lambda_0(delimitersList, ignoreCase));
    }
    function splitToSequence$lambda(this$splitToSequence) {
      return function (it) {
        return substring_3(this$splitToSequence, it);
      };
    }
    function splitToSequence($receiver, delimiters, ignoreCase, limit) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      return map_10(rangesDelimitedBy_0($receiver, delimiters, void 0, ignoreCase, limit), splitToSequence$lambda($receiver));
    }
    function split($receiver, delimiters, ignoreCase, limit) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      if (delimiters.length === 1) {
        var delimiter = delimiters[0];
        if (!(delimiter.length === 0)) {
          return split_1($receiver, delimiter, ignoreCase, limit);
        }}var $receiver_0 = asIterable_10(rangesDelimitedBy_0($receiver, delimiters, void 0, ignoreCase, limit));
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(substring_3($receiver, item));
      }
      return destination;
    }
    function splitToSequence$lambda_0(this$splitToSequence) {
      return function (it) {
        return substring_3(this$splitToSequence, it);
      };
    }
    function splitToSequence_0($receiver, delimiters, ignoreCase, limit) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      return map_10(rangesDelimitedBy($receiver, delimiters, void 0, ignoreCase, limit), splitToSequence$lambda_0($receiver));
    }
    function split_0($receiver, delimiters, ignoreCase, limit) {
      if (ignoreCase === void 0)
        ignoreCase = false;
      if (limit === void 0)
        limit = 0;
      if (delimiters.length === 1) {
        return split_1($receiver, String.fromCharCode(delimiters[0]), ignoreCase, limit);
      }var $receiver_0 = asIterable_10(rangesDelimitedBy($receiver, delimiters, void 0, ignoreCase, limit));
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(substring_3($receiver, item));
      }
      return destination;
    }
    function split_1($receiver, delimiter, ignoreCase, limit) {
      if (!(limit >= 0)) {
        var message = 'Limit must be non-negative, but was ' + limit + '.';
        throw IllegalArgumentException_init_0(message.toString());
      }var currentOffset = 0;
      var nextIndex = indexOf_17($receiver, delimiter, currentOffset, ignoreCase);
      if (nextIndex === -1 || limit === 1) {
        return listOf($receiver.toString());
      }var isLimited = limit > 0;
      var result = ArrayList_init_0(isLimited ? coerceAtMost_2(limit, 10) : 10);
      do {
        result.add_11rb$(Kotlin.subSequence($receiver, currentOffset, nextIndex).toString());
        currentOffset = nextIndex + delimiter.length | 0;
        if (isLimited && result.size === (limit - 1 | 0))
          break;
        nextIndex = indexOf_17($receiver, delimiter, currentOffset, ignoreCase);
      }
       while (nextIndex !== -1);
      result.add_11rb$(Kotlin.subSequence($receiver, currentOffset, $receiver.length).toString());
      return result;
    }
    var split_2 = defineInlineFunction('kotlin.kotlin.text.split_yymnie$', function ($receiver, regex, limit) {
      if (limit === void 0)
        limit = 0;
      return regex.split_905azu$($receiver, limit);
    });
    function lineSequence($receiver) {
      return splitToSequence($receiver, ['\r\n', '\n', '\r']);
    }
    function lines($receiver) {
      return toList_10(lineSequence($receiver));
    }
    function Typography() {
      Typography_instance = this;
      this.quote = toBoxedChar(34);
      this.dollar = toBoxedChar(36);
      this.amp = toBoxedChar(38);
      this.less = toBoxedChar(60);
      this.greater = toBoxedChar(62);
      this.nbsp = toBoxedChar(160);
      this.times = toBoxedChar(215);
      this.cent = toBoxedChar(162);
      this.pound = toBoxedChar(163);
      this.section = toBoxedChar(167);
      this.copyright = toBoxedChar(169);
      this.leftGuillemete = toBoxedChar(171);
      this.rightGuillemete = toBoxedChar(187);
      this.registered = toBoxedChar(174);
      this.degree = toBoxedChar(176);
      this.plusMinus = toBoxedChar(177);
      this.paragraph = toBoxedChar(182);
      this.middleDot = toBoxedChar(183);
      this.half = toBoxedChar(189);
      this.ndash = toBoxedChar(8211);
      this.mdash = toBoxedChar(8212);
      this.leftSingleQuote = toBoxedChar(8216);
      this.rightSingleQuote = toBoxedChar(8217);
      this.lowSingleQuote = toBoxedChar(8218);
      this.leftDoubleQuote = toBoxedChar(8220);
      this.rightDoubleQuote = toBoxedChar(8221);
      this.lowDoubleQuote = toBoxedChar(8222);
      this.dagger = toBoxedChar(8224);
      this.doubleDagger = toBoxedChar(8225);
      this.bullet = toBoxedChar(8226);
      this.ellipsis = toBoxedChar(8230);
      this.prime = toBoxedChar(8242);
      this.doublePrime = toBoxedChar(8243);
      this.euro = toBoxedChar(8364);
      this.tm = toBoxedChar(8482);
      this.almostEqual = toBoxedChar(8776);
      this.notEqual = toBoxedChar(8800);
      this.lessOrEqual = toBoxedChar(8804);
      this.greaterOrEqual = toBoxedChar(8805);
    }
    Typography.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Typography', interfaces: []};
    var Typography_instance = null;
    function Typography_getInstance() {
      if (Typography_instance === null) {
        new Typography();
      }return Typography_instance;
    }
    function MatchGroupCollection() {
    }
    MatchGroupCollection.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MatchGroupCollection', interfaces: [Collection]};
    function MatchNamedGroupCollection() {
    }
    MatchNamedGroupCollection.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MatchNamedGroupCollection', interfaces: [MatchGroupCollection]};
    function MatchResult() {
    }
    Object.defineProperty(MatchResult.prototype, 'destructured', {get: function () {
      return new MatchResult$Destructured(this);
    }});
    function MatchResult$Destructured(match) {
      this.match = match;
    }
    MatchResult$Destructured.prototype.component1 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component1', function () {
      return this.match.groupValues.get_za3lpa$(1);
    });
    MatchResult$Destructured.prototype.component2 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component2', function () {
      return this.match.groupValues.get_za3lpa$(2);
    });
    MatchResult$Destructured.prototype.component3 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component3', function () {
      return this.match.groupValues.get_za3lpa$(3);
    });
    MatchResult$Destructured.prototype.component4 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component4', function () {
      return this.match.groupValues.get_za3lpa$(4);
    });
    MatchResult$Destructured.prototype.component5 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component5', function () {
      return this.match.groupValues.get_za3lpa$(5);
    });
    MatchResult$Destructured.prototype.component6 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component6', function () {
      return this.match.groupValues.get_za3lpa$(6);
    });
    MatchResult$Destructured.prototype.component7 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component7', function () {
      return this.match.groupValues.get_za3lpa$(7);
    });
    MatchResult$Destructured.prototype.component8 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component8', function () {
      return this.match.groupValues.get_za3lpa$(8);
    });
    MatchResult$Destructured.prototype.component9 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component9', function () {
      return this.match.groupValues.get_za3lpa$(9);
    });
    MatchResult$Destructured.prototype.component10 = defineInlineFunction('kotlin.kotlin.text.MatchResult.Destructured.component10', function () {
      return this.match.groupValues.get_za3lpa$(10);
    });
    MatchResult$Destructured.prototype.toList = function () {
      return this.match.groupValues.subList_vux9f0$(1, this.match.groupValues.size);
    };
    MatchResult$Destructured.$metadata$ = {kind: Kind_CLASS, simpleName: 'Destructured', interfaces: []};
    MatchResult.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'MatchResult', interfaces: []};
    var toRegex = defineInlineFunction('kotlin.kotlin.text.toRegex_pdl1vz$', wrapFunction(function () {
      var Regex_init = _.kotlin.text.Regex_init_61zpoe$;
      return function ($receiver) {
        return Regex_init($receiver);
      };
    }));
    var toRegex_0 = defineInlineFunction('kotlin.kotlin.text.toRegex_2jdgi1$', wrapFunction(function () {
      var Regex_init = _.kotlin.text.Regex_init_sb3q2$;
      return function ($receiver, option) {
        return Regex_init($receiver, option);
      };
    }));
    var toRegex_1 = defineInlineFunction('kotlin.kotlin.text.toRegex_8ioxci$', wrapFunction(function () {
      var Regex_init = _.kotlin.text.Regex;
      return function ($receiver, options) {
        return new Regex_init($receiver, options);
      };
    }));
    function get_storageUnit() {
      return DurationUnit$NANOSECONDS_getInstance();
    }
    function Duration(value) {
      Duration$Companion_getInstance();
      this.value_8be2vx$ = value;
    }
    function Duration$Companion() {
      Duration$Companion_instance = this;
      this.ZERO = new Duration(0.0);
      this.INFINITE = new Duration(kotlin_js_internal_DoubleCompanionObject.POSITIVE_INFINITY);
    }
    Duration$Companion.prototype.convert_d8pp1e$ = function (value, sourceUnit, targetUnit) {
      return convertDurationUnit(value, sourceUnit, targetUnit);
    };
    Duration$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var Duration$Companion_instance = null;
    function Duration$Companion_getInstance() {
      if (Duration$Companion_instance === null) {
        new Duration$Companion();
      }return Duration$Companion_instance;
    }
    Duration.prototype.unaryMinus = function () {
      return new Duration(-this.value_8be2vx$);
    };
    Duration.prototype.plus_cgako$ = function (other) {
      return new Duration(this.value_8be2vx$ + other.value_8be2vx$);
    };
    Duration.prototype.minus_cgako$ = function (other) {
      return new Duration(this.value_8be2vx$ - other.value_8be2vx$);
    };
    Duration.prototype.times_za3lpa$ = function (scale) {
      return new Duration(this.value_8be2vx$ * scale);
    };
    Duration.prototype.times_14dthe$ = function (scale) {
      return new Duration(this.value_8be2vx$ * scale);
    };
    Duration.prototype.div_za3lpa$ = function (scale) {
      return new Duration(this.value_8be2vx$ / scale);
    };
    Duration.prototype.div_14dthe$ = function (scale) {
      return new Duration(this.value_8be2vx$ / scale);
    };
    Duration.prototype.div_cgako$ = function (other) {
      return this.value_8be2vx$ / other.value_8be2vx$;
    };
    Duration.prototype.isNegative = function () {
      return this.value_8be2vx$ < 0;
    };
    Duration.prototype.isPositive = function () {
      return this.value_8be2vx$ > 0;
    };
    Duration.prototype.isInfinite = function () {
      return isInfinite(this.value_8be2vx$);
    };
    Duration.prototype.isFinite = function () {
      return isFinite(this.value_8be2vx$);
    };
    Object.defineProperty(Duration.prototype, 'absoluteValue', {get: function () {
      return this.isNegative() ? this.unaryMinus() : this;
    }});
    Duration.prototype.compareTo_11rb$ = function (other) {
      return Kotlin.compareTo(this.value_8be2vx$, other.value_8be2vx$);
    };
    Duration.prototype.toComponents_fnu26o$ = defineInlineFunction('kotlin.kotlin.time.Duration.toComponents_fnu26o$', wrapFunction(function () {
      var numberToInt = Kotlin.numberToInt;
      return function (action) {
        return action(numberToInt(this.inDays), this.hoursComponent, this.minutesComponent, this.secondsComponent, this.nanosecondsComponent);
      };
    }));
    Duration.prototype.toComponents_v6nad0$ = defineInlineFunction('kotlin.kotlin.time.Duration.toComponents_v6nad0$', wrapFunction(function () {
      var numberToInt = Kotlin.numberToInt;
      return function (action) {
        return action(numberToInt(this.inHours), this.minutesComponent, this.secondsComponent, this.nanosecondsComponent);
      };
    }));
    Duration.prototype.toComponents_sg9n6w$ = defineInlineFunction('kotlin.kotlin.time.Duration.toComponents_sg9n6w$', wrapFunction(function () {
      var numberToInt = Kotlin.numberToInt;
      return function (action) {
        return action(numberToInt(this.inMinutes), this.secondsComponent, this.nanosecondsComponent);
      };
    }));
    Duration.prototype.toComponents_obfv9r$ = defineInlineFunction('kotlin.kotlin.time.Duration.toComponents_obfv9r$', function (action) {
      return action(Kotlin.Long.fromNumber(this.inSeconds), this.nanosecondsComponent);
    });
    Object.defineProperty(Duration.prototype, 'hoursComponent', {get: function () {
      return numberToInt(this.inHours % 24);
    }});
    Object.defineProperty(Duration.prototype, 'minutesComponent', {get: function () {
      return numberToInt(this.inMinutes % 60);
    }});
    Object.defineProperty(Duration.prototype, 'secondsComponent', {get: function () {
      return numberToInt(this.inSeconds % 60);
    }});
    Object.defineProperty(Duration.prototype, 'nanosecondsComponent', {get: function () {
      return numberToInt(this.inNanoseconds % 1.0E9);
    }});
    Duration.prototype.toDouble_p6uejw$ = function (unit) {
      return convertDurationUnit(this.value_8be2vx$, DurationUnit$NANOSECONDS_getInstance(), unit);
    };
    Duration.prototype.toLong_p6uejw$ = function (unit) {
      return Kotlin.Long.fromNumber(this.toDouble_p6uejw$(unit));
    };
    Duration.prototype.toInt_p6uejw$ = function (unit) {
      return numberToInt(this.toDouble_p6uejw$(unit));
    };
    Object.defineProperty(Duration.prototype, 'inDays', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$DAYS_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inHours', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$HOURS_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inMinutes', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$MINUTES_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inSeconds', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$SECONDS_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inMilliseconds', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$MILLISECONDS_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inMicroseconds', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$MICROSECONDS_getInstance());
    }});
    Object.defineProperty(Duration.prototype, 'inNanoseconds', {get: function () {
      return this.toDouble_p6uejw$(DurationUnit$NANOSECONDS_getInstance());
    }});
    Duration.prototype.toLongNanoseconds = function () {
      return this.toLong_p6uejw$(DurationUnit$NANOSECONDS_getInstance());
    };
    Duration.prototype.toLongMilliseconds = function () {
      return this.toLong_p6uejw$(DurationUnit$MILLISECONDS_getInstance());
    };
    Duration.prototype.toString = function () {
      var tmp$, tmp$_0;
      if (this.isInfinite())
        return this.value_8be2vx$.toString();
      else if (this.value_8be2vx$ === 0.0)
        return '0s';
      else {
        var absNs = this.absoluteValue.inNanoseconds;
        var scientific = {v: false};
        var maxDecimals = {v: 0};
        if (absNs < 1.0E-6) {
          var $receiver = DurationUnit$SECONDS_getInstance();
          scientific.v = true;
          tmp$ = $receiver;
        } else if (absNs < 1) {
          var $receiver_0 = DurationUnit$NANOSECONDS_getInstance();
          maxDecimals.v = 7;
          tmp$ = $receiver_0;
        } else if (absNs < 1000.0)
          tmp$ = DurationUnit$NANOSECONDS_getInstance();
        else if (absNs < 1000000.0)
          tmp$ = DurationUnit$MICROSECONDS_getInstance();
        else if (absNs < 1.0E9)
          tmp$ = DurationUnit$MILLISECONDS_getInstance();
        else if (absNs < 1.0E12)
          tmp$ = DurationUnit$SECONDS_getInstance();
        else if (absNs < 6.0E13)
          tmp$ = DurationUnit$MINUTES_getInstance();
        else if (absNs < 3.6E15)
          tmp$ = DurationUnit$HOURS_getInstance();
        else if (absNs < 8.64E13 * 1.0E7)
          tmp$ = DurationUnit$DAYS_getInstance();
        else {
          var $receiver_1 = DurationUnit$DAYS_getInstance();
          scientific.v = true;
          tmp$ = $receiver_1;
        }
        var unit = tmp$;
        var value = this.toDouble_p6uejw$(unit);
        if (scientific.v)
          tmp$_0 = formatScientific(value);
        else if (maxDecimals.v > 0)
          tmp$_0 = formatUpToDecimals(value, maxDecimals.v);
        else {
          tmp$_0 = formatToExactDecimals(value, this.precision_0(Math_0.abs(value)));
        }
        return tmp$_0 + shortName(unit);
      }
    };
    Duration.prototype.precision_0 = function (value) {
      if (value < 1)
        return 3;
      else if (value < 10)
        return 2;
      else if (value < 100)
        return 1;
      else
        return 0;
    };
    Duration.prototype.toString_mha1pa$ = function (unit, decimals) {
      if (decimals === void 0)
        decimals = 0;
      var tmp$;
      if (!(decimals >= 0)) {
        var message = 'decimals must be not negative, but was ' + decimals;
        throw IllegalArgumentException_init_0(message.toString());
      }if (this.isInfinite())
        return this.value_8be2vx$.toString();
      var number = this.toDouble_p6uejw$(unit);
      if (Math_0.abs(number) < 1.0E14)
        tmp$ = formatToExactDecimals(number, coerceAtMost_2(decimals, 12));
      else
        tmp$ = formatScientific(number);
      return tmp$ + shortName(unit);
    };
    Duration.prototype.toIsoString = function () {
      var $receiver = StringBuilder_init_1();
      if (this.isNegative())
        $receiver.append_s8itvh$(45);
      $receiver.append_61zpoe$('PT');
      var $this = this.absoluteValue;
      var hours = numberToInt($this.inHours);
      var minutes = $this.minutesComponent;
      var seconds = $this.secondsComponent;
      var nanoseconds = $this.nanosecondsComponent;
      var hasHours = hours !== 0;
      var hasSeconds = seconds !== 0 || nanoseconds !== 0;
      var hasMinutes = minutes !== 0 || (hasSeconds && hasHours);
      if (hasHours) {
        $receiver.append_s8jyv4$(hours).append_s8itvh$(72);
      }if (hasMinutes) {
        $receiver.append_s8jyv4$(minutes).append_s8itvh$(77);
      }if (hasSeconds || (!hasHours && !hasMinutes)) {
        $receiver.append_s8jyv4$(seconds);
        if (nanoseconds !== 0) {
          $receiver.append_s8itvh$(46);
          var nss = padStart_0(nanoseconds.toString(), 9, 48);
          if (nanoseconds % 1000000 === 0)
            $receiver.appendRange_ezbsdh$(nss, 0, 3);
          else if (nanoseconds % 1000 === 0)
            $receiver.appendRange_ezbsdh$(nss, 0, 6);
          else
            $receiver.append_61zpoe$(nss);
        }$receiver.append_s8itvh$(83);
      }return $receiver.toString();
    };
    Duration.$metadata$ = {kind: Kind_CLASS, simpleName: 'Duration', interfaces: [Comparable]};
    Duration.prototype.unbox = function () {
      return this.value_8be2vx$;
    };
    Duration.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.value_8be2vx$) | 0;
      return result;
    };
    Duration.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.value_8be2vx$, other.value_8be2vx$))));
    };
    function toDuration($receiver, unit) {
      return toDuration_1($receiver, unit);
    }
    function toDuration_0($receiver, unit) {
      return toDuration_1($receiver.toNumber(), unit);
    }
    function toDuration_1($receiver, unit) {
      return new Duration(convertDurationUnit($receiver, unit, DurationUnit$NANOSECONDS_getInstance()));
    }
    function get_nanoseconds($receiver) {
      return toDuration($receiver, DurationUnit$NANOSECONDS_getInstance());
    }
    function get_nanoseconds_0($receiver) {
      return toDuration_0($receiver, DurationUnit$NANOSECONDS_getInstance());
    }
    function get_nanoseconds_1($receiver) {
      return toDuration_1($receiver, DurationUnit$NANOSECONDS_getInstance());
    }
    function get_microseconds($receiver) {
      return toDuration($receiver, DurationUnit$MICROSECONDS_getInstance());
    }
    function get_microseconds_0($receiver) {
      return toDuration_0($receiver, DurationUnit$MICROSECONDS_getInstance());
    }
    function get_microseconds_1($receiver) {
      return toDuration_1($receiver, DurationUnit$MICROSECONDS_getInstance());
    }
    function get_milliseconds($receiver) {
      return toDuration($receiver, DurationUnit$MILLISECONDS_getInstance());
    }
    function get_milliseconds_0($receiver) {
      return toDuration_0($receiver, DurationUnit$MILLISECONDS_getInstance());
    }
    function get_milliseconds_1($receiver) {
      return toDuration_1($receiver, DurationUnit$MILLISECONDS_getInstance());
    }
    function get_seconds($receiver) {
      return toDuration($receiver, DurationUnit$SECONDS_getInstance());
    }
    function get_seconds_0($receiver) {
      return toDuration_0($receiver, DurationUnit$SECONDS_getInstance());
    }
    function get_seconds_1($receiver) {
      return toDuration_1($receiver, DurationUnit$SECONDS_getInstance());
    }
    function get_minutes($receiver) {
      return toDuration($receiver, DurationUnit$MINUTES_getInstance());
    }
    function get_minutes_0($receiver) {
      return toDuration_0($receiver, DurationUnit$MINUTES_getInstance());
    }
    function get_minutes_1($receiver) {
      return toDuration_1($receiver, DurationUnit$MINUTES_getInstance());
    }
    function get_hours($receiver) {
      return toDuration($receiver, DurationUnit$HOURS_getInstance());
    }
    function get_hours_0($receiver) {
      return toDuration_0($receiver, DurationUnit$HOURS_getInstance());
    }
    function get_hours_1($receiver) {
      return toDuration_1($receiver, DurationUnit$HOURS_getInstance());
    }
    function get_days($receiver) {
      return toDuration($receiver, DurationUnit$DAYS_getInstance());
    }
    function get_days_0($receiver) {
      return toDuration_0($receiver, DurationUnit$DAYS_getInstance());
    }
    function get_days_1($receiver) {
      return toDuration_1($receiver, DurationUnit$DAYS_getInstance());
    }
    var times = defineInlineFunction('kotlin.kotlin.time.times_tk7led$', function ($receiver, duration) {
      return duration.times_za3lpa$($receiver);
    });
    var times_0 = defineInlineFunction('kotlin.kotlin.time.times_w68h3b$', function ($receiver, duration) {
      return duration.times_14dthe$($receiver);
    });
    function shortName($receiver) {
      switch ($receiver.name) {
        case 'NANOSECONDS':
          return 'ns';
        case 'MICROSECONDS':
          return 'us';
        case 'MILLISECONDS':
          return 'ms';
        case 'SECONDS':
          return 's';
        case 'MINUTES':
          return 'm';
        case 'HOURS':
          return 'h';
        case 'DAYS':
          return 'd';
        default:return Kotlin.noWhenBranchMatched();
      }
    }
    function ExperimentalTime() {
    }
    ExperimentalTime.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalTime', interfaces: [Annotation]};
    function TimeSource() {
      TimeSource$Companion_getInstance();
    }
    function TimeSource$Monotonic() {
      TimeSource$Monotonic_instance = this;
      this.$delegate_dulig8$_0 = MonotonicTimeSource_getInstance();
    }
    TimeSource$Monotonic.prototype.toString = function () {
      return MonotonicTimeSource_getInstance().toString();
    };
    TimeSource$Monotonic.prototype.markNow = function () {
      return this.$delegate_dulig8$_0.markNow();
    };
    TimeSource$Monotonic.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Monotonic', interfaces: [TimeSource]};
    var TimeSource$Monotonic_instance = null;
    function TimeSource$Monotonic_getInstance() {
      if (TimeSource$Monotonic_instance === null) {
        new TimeSource$Monotonic();
      }return TimeSource$Monotonic_instance;
    }
    function TimeSource$Companion() {
      TimeSource$Companion_instance = this;
    }
    TimeSource$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var TimeSource$Companion_instance = null;
    function TimeSource$Companion_getInstance() {
      if (TimeSource$Companion_instance === null) {
        new TimeSource$Companion();
      }return TimeSource$Companion_instance;
    }
    TimeSource.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'TimeSource', interfaces: []};
    function TimeMark() {
    }
    TimeMark.prototype.plus_cgako$ = function (duration) {
      return new AdjustedTimeMark(this, duration);
    };
    TimeMark.prototype.minus_cgako$ = function (duration) {
      return this.plus_cgako$(duration.unaryMinus());
    };
    TimeMark.prototype.hasPassedNow = function () {
      return !this.elapsedNow().isNegative();
    };
    TimeMark.prototype.hasNotPassedNow = function () {
      return this.elapsedNow().isNegative();
    };
    TimeMark.$metadata$ = {kind: Kind_CLASS, simpleName: 'TimeMark', interfaces: []};
    var minus_15 = defineInlineFunction('kotlin.kotlin.time.minus_8lj69b$', wrapFunction(function () {
      var Error_init = _.kotlin.Error_init_pdl1vj$;
      return function ($receiver, other) {
        throw Error_init('Operation is disallowed.');
      };
    }));
    var compareTo_0 = defineInlineFunction('kotlin.kotlin.time.compareTo_8lj69b$', wrapFunction(function () {
      var Error_init = _.kotlin.Error_init_pdl1vj$;
      return function ($receiver, other) {
        throw Error_init('Operation is disallowed.');
      };
    }));
    function AdjustedTimeMark(mark, adjustment) {
      TimeMark.call(this);
      this.mark = mark;
      this.adjustment = adjustment;
    }
    AdjustedTimeMark.prototype.elapsedNow = function () {
      return this.mark.elapsedNow().minus_cgako$(this.adjustment);
    };
    AdjustedTimeMark.prototype.plus_cgako$ = function (duration) {
      return new AdjustedTimeMark(this.mark, this.adjustment.plus_cgako$(duration));
    };
    AdjustedTimeMark.$metadata$ = {kind: Kind_CLASS, simpleName: 'AdjustedTimeMark', interfaces: [TimeMark]};
    function AbstractLongTimeSource(unit) {
      this.unit = unit;
    }
    function AbstractLongTimeSource$LongTimeMark(startedAt, timeSource, offset) {
      TimeMark.call(this);
      this.startedAt_0 = startedAt;
      this.timeSource_0 = timeSource;
      this.offset_0 = offset;
    }
    AbstractLongTimeSource$LongTimeMark.prototype.elapsedNow = function () {
      return toDuration_0(this.timeSource_0.read().subtract(this.startedAt_0), this.timeSource_0.unit).minus_cgako$(this.offset_0);
    };
    AbstractLongTimeSource$LongTimeMark.prototype.plus_cgako$ = function (duration) {
      return new AbstractLongTimeSource$LongTimeMark(this.startedAt_0, this.timeSource_0, this.offset_0.plus_cgako$(duration));
    };
    AbstractLongTimeSource$LongTimeMark.$metadata$ = {kind: Kind_CLASS, simpleName: 'LongTimeMark', interfaces: [TimeMark]};
    AbstractLongTimeSource.prototype.markNow = function () {
      return new AbstractLongTimeSource$LongTimeMark(this.read(), this, Duration$Companion_getInstance().ZERO);
    };
    AbstractLongTimeSource.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractLongTimeSource', interfaces: [TimeSource]};
    function AbstractDoubleTimeSource(unit) {
      this.unit = unit;
    }
    function AbstractDoubleTimeSource$DoubleTimeMark(startedAt, timeSource, offset) {
      TimeMark.call(this);
      this.startedAt_0 = startedAt;
      this.timeSource_0 = timeSource;
      this.offset_0 = offset;
    }
    AbstractDoubleTimeSource$DoubleTimeMark.prototype.elapsedNow = function () {
      return toDuration_1(this.timeSource_0.read() - this.startedAt_0, this.timeSource_0.unit).minus_cgako$(this.offset_0);
    };
    AbstractDoubleTimeSource$DoubleTimeMark.prototype.plus_cgako$ = function (duration) {
      return new AbstractDoubleTimeSource$DoubleTimeMark(this.startedAt_0, this.timeSource_0, this.offset_0.plus_cgako$(duration));
    };
    AbstractDoubleTimeSource$DoubleTimeMark.$metadata$ = {kind: Kind_CLASS, simpleName: 'DoubleTimeMark', interfaces: [TimeMark]};
    AbstractDoubleTimeSource.prototype.markNow = function () {
      return new AbstractDoubleTimeSource$DoubleTimeMark(this.read(), this, Duration$Companion_getInstance().ZERO);
    };
    AbstractDoubleTimeSource.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractDoubleTimeSource', interfaces: [TimeSource]};
    function TestTimeSource() {
      AbstractLongTimeSource.call(this, DurationUnit$NANOSECONDS_getInstance());
      this.reading_0 = L0;
    }
    TestTimeSource.prototype.read = function () {
      return this.reading_0;
    };
    TestTimeSource.prototype.plusAssign_cgako$ = function (duration) {
      var tmp$;
      var delta = duration.toDouble_p6uejw$(this.unit);
      var longDelta = Kotlin.Long.fromNumber(delta);
      if (!equals(longDelta, Long$Companion$MIN_VALUE) && !equals(longDelta, Long$Companion$MAX_VALUE)) {
        var newReading = this.reading_0.add(longDelta);
        if (this.reading_0.xor(longDelta).toNumber() >= 0 && this.reading_0.xor(newReading).toNumber() < 0)
          this.overflow_0(duration);
        tmp$ = newReading;
      } else {
        var newReading_0 = this.reading_0.toNumber() + delta;
        if (newReading_0 > Long$Companion$MAX_VALUE.toNumber() || newReading_0 < Long$Companion$MIN_VALUE.toNumber())
          this.overflow_0(duration);
        tmp$ = Kotlin.Long.fromNumber(newReading_0);
      }
      this.reading_0 = tmp$;
    };
    TestTimeSource.prototype.overflow_0 = function (duration) {
      throw IllegalStateException_init_0('TestTimeSource will overflow if its reading ' + this.reading_0.toString() + 'ns is advanced by ' + duration + '.');
    };
    TestTimeSource.$metadata$ = {kind: Kind_CLASS, simpleName: 'TestTimeSource', interfaces: [AbstractLongTimeSource]};
    var measureTime = defineInlineFunction('kotlin.kotlin.time.measureTime_o14v8n$', wrapFunction(function () {
      var TimeSource = _.kotlin.time.TimeSource;
      return function (block) {
        var mark = TimeSource.Monotonic.markNow();
        block();
        return mark.elapsedNow();
      };
    }));
    var measureTime_0 = defineInlineFunction('kotlin.kotlin.time.measureTime_8lzfs6$', function ($receiver, block) {
      var mark = $receiver.markNow();
      block();
      return mark.elapsedNow();
    });
    function TimedValue(value, duration) {
      this.value = value;
      this.duration = duration;
    }
    TimedValue.$metadata$ = {kind: Kind_CLASS, simpleName: 'TimedValue', interfaces: []};
    TimedValue.prototype.component1 = function () {
      return this.value;
    };
    TimedValue.prototype.component2 = function () {
      return this.duration;
    };
    TimedValue.prototype.copy_v4727h$ = function (value, duration) {
      return new TimedValue(value === void 0 ? this.value : value, duration === void 0 ? this.duration : duration);
    };
    TimedValue.prototype.toString = function () {
      return 'TimedValue(value=' + Kotlin.toString(this.value) + (', duration=' + Kotlin.toString(this.duration)) + ')';
    };
    TimedValue.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.value) | 0;
      result = result * 31 + Kotlin.hashCode(this.duration) | 0;
      return result;
    };
    TimedValue.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.value, other.value) && Kotlin.equals(this.duration, other.duration)))));
    };
    var measureTimedValue = defineInlineFunction('kotlin.kotlin.time.measureTimedValue_klfg04$', wrapFunction(function () {
      var TimeSource = _.kotlin.time.TimeSource;
      var TimedValue_init = _.kotlin.time.TimedValue;
      return function (block) {
        var mark = TimeSource.Monotonic.markNow();
        var result = block();
        return new TimedValue_init(result, mark.elapsedNow());
      };
    }));
    var measureTimedValue_0 = defineInlineFunction('kotlin.kotlin.time.measureTimedValue_tfb6s1$', wrapFunction(function () {
      var TimedValue_init = _.kotlin.time.TimedValue;
      return function ($receiver, block) {
        var mark = $receiver.markNow();
        var result = block();
        return new TimedValue_init(result, mark.elapsedNow());
      };
    }));
    var hashCode_0 = defineInlineFunction('kotlin.kotlin.hashCode_mzud1t$', wrapFunction(function () {
      var hashCode = Kotlin.hashCode;
      return function ($receiver) {
        var tmp$;
        return (tmp$ = $receiver != null ? hashCode($receiver) : null) != null ? tmp$ : 0;
      };
    }));
    function KotlinVersion(major, minor, patch) {
      KotlinVersion$Companion_getInstance();
      this.major = major;
      this.minor = minor;
      this.patch = patch;
      this.version_0 = this.versionOf_0(this.major, this.minor, this.patch);
    }
    KotlinVersion.prototype.versionOf_0 = function (major, minor, patch) {
      if (!(0 <= major && major <= 255 && (0 <= minor && minor <= 255) && (0 <= patch && patch <= 255))) {
        var message = 'Version components are out of range: ' + major + '.' + minor + '.' + patch;
        throw IllegalArgumentException_init_0(message.toString());
      }return (major << 16) + (minor << 8) + patch | 0;
    };
    KotlinVersion.prototype.toString = function () {
      return this.major.toString() + '.' + this.minor + '.' + this.patch;
    };
    KotlinVersion.prototype.equals = function (other) {
      var tmp$, tmp$_0;
      if (this === other)
        return true;
      tmp$_0 = Kotlin.isType(tmp$ = other, KotlinVersion) ? tmp$ : null;
      if (tmp$_0 == null) {
        return false;
      }var otherVersion = tmp$_0;
      return this.version_0 === otherVersion.version_0;
    };
    KotlinVersion.prototype.hashCode = function () {
      return this.version_0;
    };
    KotlinVersion.prototype.compareTo_11rb$ = function (other) {
      return this.version_0 - other.version_0 | 0;
    };
    KotlinVersion.prototype.isAtLeast_vux9f0$ = function (major, minor) {
      return this.major > major || (this.major === major && this.minor >= minor);
    };
    KotlinVersion.prototype.isAtLeast_qt1dr2$ = function (major, minor, patch) {
      return this.major > major || (this.major === major && (this.minor > minor || (this.minor === minor && this.patch >= patch)));
    };
    function KotlinVersion$Companion() {
      KotlinVersion$Companion_instance = this;
      this.MAX_COMPONENT_VALUE = 255;
      this.CURRENT = new KotlinVersion(1, 3, 72);
    }
    KotlinVersion$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var KotlinVersion$Companion_instance = null;
    function KotlinVersion$Companion_getInstance() {
      if (KotlinVersion$Companion_instance === null) {
        new KotlinVersion$Companion();
      }return KotlinVersion$Companion_instance;
    }
    KotlinVersion.$metadata$ = {kind: Kind_CLASS, simpleName: 'KotlinVersion', interfaces: [Comparable]};
    function KotlinVersion_init(major, minor, $this) {
      $this = $this || Object.create(KotlinVersion.prototype);
      KotlinVersion.call($this, major, minor, 0);
      return $this;
    }
    var get_isInitialized = defineInlineFunction('kotlin.kotlin.get_isInitialized_texjl9$', wrapFunction(function () {
      var NotImplementedError_init = _.kotlin.NotImplementedError;
      return function ($receiver) {
        throw new NotImplementedError_init('Implementation is intrinsic');
      };
    }));
    function Lazy() {
    }
    Lazy.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Lazy', interfaces: []};
    function lazyOf(value) {
      return new InitializedLazyImpl(value);
    }
    var getValue_3 = defineInlineFunction('kotlin.kotlin.getValue_thokl7$', function ($receiver, thisRef, property) {
      return $receiver.value;
    });
    function LazyThreadSafetyMode(name, ordinal) {
      Enum.call(this);
      this.name$ = name;
      this.ordinal$ = ordinal;
    }
    function LazyThreadSafetyMode_initFields() {
      LazyThreadSafetyMode_initFields = function () {
      };
      LazyThreadSafetyMode$SYNCHRONIZED_instance = new LazyThreadSafetyMode('SYNCHRONIZED', 0);
      LazyThreadSafetyMode$PUBLICATION_instance = new LazyThreadSafetyMode('PUBLICATION', 1);
      LazyThreadSafetyMode$NONE_instance = new LazyThreadSafetyMode('NONE', 2);
    }
    var LazyThreadSafetyMode$SYNCHRONIZED_instance;
    function LazyThreadSafetyMode$SYNCHRONIZED_getInstance() {
      LazyThreadSafetyMode_initFields();
      return LazyThreadSafetyMode$SYNCHRONIZED_instance;
    }
    var LazyThreadSafetyMode$PUBLICATION_instance;
    function LazyThreadSafetyMode$PUBLICATION_getInstance() {
      LazyThreadSafetyMode_initFields();
      return LazyThreadSafetyMode$PUBLICATION_instance;
    }
    var LazyThreadSafetyMode$NONE_instance;
    function LazyThreadSafetyMode$NONE_getInstance() {
      LazyThreadSafetyMode_initFields();
      return LazyThreadSafetyMode$NONE_instance;
    }
    LazyThreadSafetyMode.$metadata$ = {kind: Kind_CLASS, simpleName: 'LazyThreadSafetyMode', interfaces: [Enum]};
    function LazyThreadSafetyMode$values() {
      return [LazyThreadSafetyMode$SYNCHRONIZED_getInstance(), LazyThreadSafetyMode$PUBLICATION_getInstance(), LazyThreadSafetyMode$NONE_getInstance()];
    }
    LazyThreadSafetyMode.values = LazyThreadSafetyMode$values;
    function LazyThreadSafetyMode$valueOf(name) {
      switch (name) {
        case 'SYNCHRONIZED':
          return LazyThreadSafetyMode$SYNCHRONIZED_getInstance();
        case 'PUBLICATION':
          return LazyThreadSafetyMode$PUBLICATION_getInstance();
        case 'NONE':
          return LazyThreadSafetyMode$NONE_getInstance();
        default:throwISE('No enum constant kotlin.LazyThreadSafetyMode.' + name);
      }
    }
    LazyThreadSafetyMode.valueOf_61zpoe$ = LazyThreadSafetyMode$valueOf;
    function UNINITIALIZED_VALUE() {
      UNINITIALIZED_VALUE_instance = this;
    }
    UNINITIALIZED_VALUE.$metadata$ = {kind: Kind_OBJECT, simpleName: 'UNINITIALIZED_VALUE', interfaces: []};
    var UNINITIALIZED_VALUE_instance = null;
    function UNINITIALIZED_VALUE_getInstance() {
      if (UNINITIALIZED_VALUE_instance === null) {
        new UNINITIALIZED_VALUE();
      }return UNINITIALIZED_VALUE_instance;
    }
    function UnsafeLazyImpl(initializer) {
      this.initializer_0 = initializer;
      this._value_0 = UNINITIALIZED_VALUE_getInstance();
    }
    Object.defineProperty(UnsafeLazyImpl.prototype, 'value', {get: function () {
      var tmp$;
      if (this._value_0 === UNINITIALIZED_VALUE_getInstance()) {
        this._value_0 = ensureNotNull(this.initializer_0)();
        this.initializer_0 = null;
      }return (tmp$ = this._value_0) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0();
    }});
    UnsafeLazyImpl.prototype.isInitialized = function () {
      return this._value_0 !== UNINITIALIZED_VALUE_getInstance();
    };
    UnsafeLazyImpl.prototype.toString = function () {
      return this.isInitialized() ? toString(this.value) : 'Lazy value not initialized yet.';
    };
    UnsafeLazyImpl.prototype.writeReplace_0 = function () {
      return new InitializedLazyImpl(this.value);
    };
    UnsafeLazyImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'UnsafeLazyImpl', interfaces: [Serializable, Lazy]};
    function InitializedLazyImpl(value) {
      this.value_7taq70$_0 = value;
    }
    Object.defineProperty(InitializedLazyImpl.prototype, 'value', {get: function () {
      return this.value_7taq70$_0;
    }});
    InitializedLazyImpl.prototype.isInitialized = function () {
      return true;
    };
    InitializedLazyImpl.prototype.toString = function () {
      return toString(this.value);
    };
    InitializedLazyImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'InitializedLazyImpl', interfaces: [Serializable, Lazy]};
    var countOneBits_1 = defineInlineFunction('kotlin.kotlin.countOneBits_mz3mee$', wrapFunction(function () {
      var countOneBits = _.kotlin.countOneBits_s8ev3n$;
      return function ($receiver) {
        return countOneBits($receiver & 255);
      };
    }));
    var countLeadingZeroBits_1 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_mz3mee$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver & 255) - 24 | 0;
      };
    }));
    var countTrailingZeroBits_1 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_mz3mee$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_s8ev3n$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver | 256);
      };
    }));
    var takeHighestOneBit_1 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_mz3mee$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_s8ev3n$;
      var toByte = Kotlin.toByte;
      return function ($receiver) {
        return toByte(takeHighestOneBit($receiver & 255));
      };
    }));
    var takeLowestOneBit_1 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_mz3mee$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_s8ev3n$;
      var toByte = Kotlin.toByte;
      return function ($receiver) {
        return toByte(takeLowestOneBit($receiver));
      };
    }));
    function rotateLeft_1($receiver, bitCount) {
      return toByte($receiver << (bitCount & 7) | ($receiver & 255) >>> 8 - (bitCount & 7));
    }
    function rotateRight_1($receiver, bitCount) {
      return toByte($receiver << 8 - (bitCount & 7) | ($receiver & 255) >>> (bitCount & 7));
    }
    var countOneBits_2 = defineInlineFunction('kotlin.kotlin.countOneBits_5vcgdc$', wrapFunction(function () {
      var countOneBits = _.kotlin.countOneBits_s8ev3n$;
      return function ($receiver) {
        return countOneBits($receiver & 65535);
      };
    }));
    var countLeadingZeroBits_2 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_5vcgdc$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver & 65535) - 16 | 0;
      };
    }));
    var countTrailingZeroBits_2 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_5vcgdc$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_s8ev3n$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver | 65536);
      };
    }));
    var takeHighestOneBit_2 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_5vcgdc$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_s8ev3n$;
      var toShort = Kotlin.toShort;
      return function ($receiver) {
        return toShort(takeHighestOneBit($receiver & 65535));
      };
    }));
    var takeLowestOneBit_2 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_5vcgdc$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_s8ev3n$;
      var toShort = Kotlin.toShort;
      return function ($receiver) {
        return toShort(takeLowestOneBit($receiver));
      };
    }));
    function rotateLeft_2($receiver, bitCount) {
      return toShort($receiver << (bitCount & 15) | ($receiver & 65535) >>> 16 - (bitCount & 15));
    }
    function rotateRight_2($receiver, bitCount) {
      return toShort($receiver << 16 - (bitCount & 15) | ($receiver & 65535) >>> (bitCount & 15));
    }
    var require_0 = defineInlineFunction('kotlin.kotlin.require_6taknv$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      return function (value) {
        if (!value) {
          var message = 'Failed requirement.';
          throw IllegalArgumentException_init(message.toString());
        }};
    }));
    var require_1 = defineInlineFunction('kotlin.kotlin.require_4ina18$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      return function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw IllegalArgumentException_init(message.toString());
        }};
    }));
    var requireNotNull = defineInlineFunction('kotlin.kotlin.requireNotNull_issdgt$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      return function (value) {
        var requireNotNull$result;
        if (value == null) {
          var message = 'Required value was null.';
          throw IllegalArgumentException_init(message.toString());
        } else {
          requireNotNull$result = value;
        }
        return requireNotNull$result;
      };
    }));
    var requireNotNull_0 = defineInlineFunction('kotlin.kotlin.requireNotNull_p3yddy$', wrapFunction(function () {
      var IllegalArgumentException_init = _.kotlin.IllegalArgumentException_init_pdl1vj$;
      return function (value, lazyMessage) {
        if (value == null) {
          var message = lazyMessage();
          throw IllegalArgumentException_init(message.toString());
        } else {
          return value;
        }
      };
    }));
    var check = defineInlineFunction('kotlin.kotlin.check_6taknv$', wrapFunction(function () {
      var IllegalStateException_init = _.kotlin.IllegalStateException_init_pdl1vj$;
      return function (value) {
        if (!value) {
          var message = 'Check failed.';
          throw IllegalStateException_init(message.toString());
        }};
    }));
    var check_0 = defineInlineFunction('kotlin.kotlin.check_4ina18$', wrapFunction(function () {
      var IllegalStateException_init = _.kotlin.IllegalStateException_init_pdl1vj$;
      return function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw IllegalStateException_init(message.toString());
        }};
    }));
    var checkNotNull = defineInlineFunction('kotlin.kotlin.checkNotNull_issdgt$', wrapFunction(function () {
      var IllegalStateException_init = _.kotlin.IllegalStateException_init_pdl1vj$;
      return function (value) {
        var checkNotNull$result;
        if (value == null) {
          var message = 'Required value was null.';
          throw IllegalStateException_init(message.toString());
        } else {
          checkNotNull$result = value;
        }
        return checkNotNull$result;
      };
    }));
    var checkNotNull_0 = defineInlineFunction('kotlin.kotlin.checkNotNull_p3yddy$', wrapFunction(function () {
      var IllegalStateException_init = _.kotlin.IllegalStateException_init_pdl1vj$;
      return function (value, lazyMessage) {
        if (value == null) {
          var message = lazyMessage();
          throw IllegalStateException_init(message.toString());
        } else {
          return value;
        }
      };
    }));
    var error = defineInlineFunction('kotlin.kotlin.error_za3rmp$', wrapFunction(function () {
      var IllegalStateException_init = _.kotlin.IllegalStateException_init_pdl1vj$;
      return function (message) {
        throw IllegalStateException_init(message.toString());
      };
    }));
    function Result(value) {
      Result$Companion_getInstance();
      this.value = value;
    }
    Object.defineProperty(Result.prototype, 'isSuccess', {get: function () {
      return !Kotlin.isType(this.value, Result$Failure);
    }});
    Object.defineProperty(Result.prototype, 'isFailure', {get: function () {
      return Kotlin.isType(this.value, Result$Failure);
    }});
    Result.prototype.getOrNull = defineInlineFunction('kotlin.kotlin.Result.getOrNull', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function () {
        var tmp$;
        if (this.isFailure)
          return null;
        else
          return (tmp$ = this.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    Result.prototype.exceptionOrNull = function () {
      if (Kotlin.isType(this.value, Result$Failure))
        return this.value.exception;
      else
        return null;
    };
    Result.prototype.toString = function () {
      if (Kotlin.isType(this.value, Result$Failure))
        return this.value.toString();
      else
        return 'Success(' + toString(this.value) + ')';
    };
    function Result$Companion() {
      Result$Companion_instance = this;
    }
    Result$Companion.prototype.success_mh5how$ = defineInlineFunction('kotlin.kotlin.Result.Companion.success_mh5how$', wrapFunction(function () {
      var Result_init = _.kotlin.Result;
      return function (value) {
        return new Result_init(value);
      };
    }));
    Result$Companion.prototype.failure_lsqlk3$ = defineInlineFunction('kotlin.kotlin.Result.Companion.failure_lsqlk3$', wrapFunction(function () {
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      var Result_init = _.kotlin.Result;
      return function (exception) {
        return new Result_init(createFailure(exception));
      };
    }));
    Result$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var Result$Companion_instance = null;
    function Result$Companion_getInstance() {
      if (Result$Companion_instance === null) {
        new Result$Companion();
      }return Result$Companion_instance;
    }
    function Result$Failure(exception) {
      this.exception = exception;
    }
    Result$Failure.prototype.equals = function (other) {
      return Kotlin.isType(other, Result$Failure) && equals(this.exception, other.exception);
    };
    Result$Failure.prototype.hashCode = function () {
      return hashCode(this.exception);
    };
    Result$Failure.prototype.toString = function () {
      return 'Failure(' + this.exception + ')';
    };
    Result$Failure.$metadata$ = {kind: Kind_CLASS, simpleName: 'Failure', interfaces: [Serializable]};
    Result.$metadata$ = {kind: Kind_CLASS, simpleName: 'Result', interfaces: [Serializable]};
    Result.prototype.unbox = function () {
      return this.value;
    };
    Result.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.value) | 0;
      return result;
    };
    Result.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.value, other.value))));
    };
    function createFailure(exception) {
      return new Result$Failure(exception);
    }
    function throwOnFailure($receiver) {
      if (Kotlin.isType($receiver.value, Result$Failure))
        throw $receiver.value.exception;
    }
    var runCatching = defineInlineFunction('kotlin.kotlin.runCatching_klfg04$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      var Throwable = Error;
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      return function (block) {
        var tmp$;
        try {
          tmp$ = new Result(block());
        } catch (e) {
          if (Kotlin.isType(e, Throwable)) {
            tmp$ = new Result(createFailure(e));
          } else
            throw e;
        }
        return tmp$;
      };
    }));
    var runCatching_0 = defineInlineFunction('kotlin.kotlin.runCatching_96jf0l$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      var Throwable = Error;
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      return function ($receiver, block) {
        var tmp$;
        try {
          tmp$ = new Result(block($receiver));
        } catch (e) {
          if (Kotlin.isType(e, Throwable)) {
            tmp$ = new Result(createFailure(e));
          } else
            throw e;
        }
        return tmp$;
      };
    }));
    var getOrThrow = defineInlineFunction('kotlin.kotlin.getOrThrow_rnsj6g$', wrapFunction(function () {
      var throwOnFailure = _.kotlin.throwOnFailure_iacion$;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver) {
        var tmp$;
        throwOnFailure($receiver);
        return (tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    var getOrElse_15 = defineInlineFunction('kotlin.kotlin.getOrElse_h5t2n1$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, onFailure) {
        var tmp$, tmp$_0;
        var exception = $receiver.exceptionOrNull();
        if (exception == null)
          tmp$_0 = (tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
        else
          tmp$_0 = onFailure(exception);
        return tmp$_0;
      };
    }));
    var getOrDefault = defineInlineFunction('kotlin.kotlin.getOrDefault_98but8$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, defaultValue) {
        var tmp$;
        if ($receiver.isFailure)
          return defaultValue;
        return (tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
      };
    }));
    var fold_17 = defineInlineFunction('kotlin.kotlin.fold_whgilm$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, onSuccess, onFailure) {
        var tmp$, tmp$_0;
        var exception = $receiver.exceptionOrNull();
        if (exception == null) {
          tmp$_0 = onSuccess((tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE());
        } else
          tmp$_0 = onFailure(exception);
        return tmp$_0;
      };
    }));
    var map_16 = defineInlineFunction('kotlin.kotlin.map_dgb8k9$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, transform) {
        var tmp$;
        var tmp$_0;
        if ($receiver.isSuccess) {
          Result.Companion;
          tmp$_0 = new Result(transform((tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE()));
        } else
          tmp$_0 = new Result($receiver.value);
        return tmp$_0;
      };
    }));
    var mapCatching = defineInlineFunction('kotlin.kotlin.mapCatching_dgb8k9$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      var Result_init = _.kotlin.Result;
      var Throwable = Error;
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      return function ($receiver, transform) {
        var tmp$;
        if ($receiver.isSuccess) {
          var tmp$_0;
          try {
            var tmp$_1;
            tmp$_0 = new Result_init(transform((tmp$_1 = $receiver.value) == null || Kotlin.isType(tmp$_1, Any) ? tmp$_1 : throwCCE()));
          } catch (e) {
            if (Kotlin.isType(e, Throwable)) {
              tmp$_0 = new Result_init(createFailure(e));
            } else
              throw e;
          }
          tmp$ = tmp$_0;
        } else
          tmp$ = new Result_init($receiver.value);
        return tmp$;
      };
    }));
    var recover = defineInlineFunction('kotlin.kotlin.recover_h5t2n1$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      return function ($receiver, transform) {
        var tmp$;
        var exception = $receiver.exceptionOrNull();
        if (exception == null)
          tmp$ = $receiver;
        else {
          tmp$ = new Result(transform(exception));
        }
        return tmp$;
      };
    }));
    var recoverCatching = defineInlineFunction('kotlin.kotlin.recoverCatching_h5t2n1$', wrapFunction(function () {
      var Result = _.kotlin.Result;
      var Throwable = Error;
      var createFailure = _.kotlin.createFailure_tcv7n7$;
      return function ($receiver, transform) {
        var tmp$;
        var value = $receiver.value;
        var exception = $receiver.exceptionOrNull();
        if (exception == null)
          tmp$ = $receiver;
        else {
          var tmp$_0;
          try {
            tmp$_0 = new Result(transform(exception));
          } catch (e) {
            if (Kotlin.isType(e, Throwable)) {
              tmp$_0 = new Result(createFailure(e));
            } else
              throw e;
          }
          tmp$ = tmp$_0;
        }
        return tmp$;
      };
    }));
    var onFailure = defineInlineFunction('kotlin.kotlin.onFailure_peshbw$', function ($receiver, action) {
      var tmp$;
      if ((tmp$ = $receiver.exceptionOrNull()) != null) {
        action(tmp$);
      }return $receiver;
    });
    var onSuccess = defineInlineFunction('kotlin.kotlin.onSuccess_3t3bof$', wrapFunction(function () {
      var Any = Object;
      var throwCCE = Kotlin.throwCCE;
      return function ($receiver, action) {
        var tmp$;
        if ($receiver.isSuccess) {
          action((tmp$ = $receiver.value) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE());
        }return $receiver;
      };
    }));
    function NotImplementedError(message) {
      if (message === void 0)
        message = 'An operation is not implemented.';
      Error_init_0(message, this);
      this.name = 'NotImplementedError';
    }
    NotImplementedError.$metadata$ = {kind: Kind_CLASS, simpleName: 'NotImplementedError', interfaces: [Error_0]};
    var TODO = defineInlineFunction('kotlin.kotlin.TODO', wrapFunction(function () {
      var NotImplementedError_init = _.kotlin.NotImplementedError;
      return function () {
        throw new NotImplementedError_init();
      };
    }));
    var TODO_0 = defineInlineFunction('kotlin.kotlin.TODO_61zpoe$', wrapFunction(function () {
      var NotImplementedError_init = _.kotlin.NotImplementedError;
      return function (reason) {
        throw new NotImplementedError_init('An operation is not implemented: ' + reason);
      };
    }));
    var run = defineInlineFunction('kotlin.kotlin.run_klfg04$', function (block) {
      return block();
    });
    var run_0 = defineInlineFunction('kotlin.kotlin.run_96jf0l$', function ($receiver, block) {
      return block($receiver);
    });
    var with_0 = defineInlineFunction('kotlin.kotlin.with_ywwgyq$', function (receiver, block) {
      return block(receiver);
    });
    var apply = defineInlineFunction('kotlin.kotlin.apply_9bxh2u$', function ($receiver, block) {
      block($receiver);
      return $receiver;
    });
    var also = defineInlineFunction('kotlin.kotlin.also_9bxh2u$', function ($receiver, block) {
      block($receiver);
      return $receiver;
    });
    var let_0 = defineInlineFunction('kotlin.kotlin.let_96jf0l$', function ($receiver, block) {
      return block($receiver);
    });
    var takeIf = defineInlineFunction('kotlin.kotlin.takeIf_ujn5f2$', function ($receiver, predicate) {
      return predicate($receiver) ? $receiver : null;
    });
    var takeUnless = defineInlineFunction('kotlin.kotlin.takeUnless_ujn5f2$', function ($receiver, predicate) {
      return !predicate($receiver) ? $receiver : null;
    });
    var repeat_0 = defineInlineFunction('kotlin.kotlin.repeat_8b5ljp$', function (times, action) {
      for (var index = 0; index < times; index++) {
        action(index);
      }
    });
    var suspend = defineInlineFunction('kotlin.kotlin.suspend_lnyleu$', function (block) {
      return block;
    });
    function Pair(first, second) {
      this.first = first;
      this.second = second;
    }
    Pair.prototype.toString = function () {
      return '(' + this.first + ', ' + this.second + ')';
    };
    Pair.$metadata$ = {kind: Kind_CLASS, simpleName: 'Pair', interfaces: [Serializable]};
    Pair.prototype.component1 = function () {
      return this.first;
    };
    Pair.prototype.component2 = function () {
      return this.second;
    };
    Pair.prototype.copy_xwzc9p$ = function (first, second) {
      return new Pair(first === void 0 ? this.first : first, second === void 0 ? this.second : second);
    };
    Pair.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.first) | 0;
      result = result * 31 + Kotlin.hashCode(this.second) | 0;
      return result;
    };
    Pair.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.first, other.first) && Kotlin.equals(this.second, other.second)))));
    };
    function to($receiver, that) {
      return new Pair($receiver, that);
    }
    function toList_12($receiver) {
      return listOf_0([$receiver.first, $receiver.second]);
    }
    function Triple(first, second, third) {
      this.first = first;
      this.second = second;
      this.third = third;
    }
    Triple.prototype.toString = function () {
      return '(' + this.first + ', ' + this.second + ', ' + this.third + ')';
    };
    Triple.$metadata$ = {kind: Kind_CLASS, simpleName: 'Triple', interfaces: [Serializable]};
    Triple.prototype.component1 = function () {
      return this.first;
    };
    Triple.prototype.component2 = function () {
      return this.second;
    };
    Triple.prototype.component3 = function () {
      return this.third;
    };
    Triple.prototype.copy_1llc0w$ = function (first, second, third) {
      return new Triple(first === void 0 ? this.first : first, second === void 0 ? this.second : second, third === void 0 ? this.third : third);
    };
    Triple.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.first) | 0;
      result = result * 31 + Kotlin.hashCode(this.second) | 0;
      result = result * 31 + Kotlin.hashCode(this.third) | 0;
      return result;
    };
    Triple.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.first, other.first) && Kotlin.equals(this.second, other.second) && Kotlin.equals(this.third, other.third)))));
    };
    function toList_13($receiver) {
      return listOf_0([$receiver.first, $receiver.second, $receiver.third]);
    }
    function UByte(data) {
      UByte$Companion_getInstance();
      this.data = data;
    }
    function UByte$Companion() {
      UByte$Companion_instance = this;
      this.MIN_VALUE = new UByte(0);
      this.MAX_VALUE = new UByte(-1 | 0);
      this.SIZE_BYTES = 1;
      this.SIZE_BITS = 8;
    }
    UByte$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var UByte$Companion_instance = null;
    function UByte$Companion_getInstance() {
      if (UByte$Companion_instance === null) {
        new UByte$Companion();
      }return UByte$Companion_instance;
    }
    UByte.prototype.compareTo_11rb$ = defineInlineFunction('kotlin.kotlin.UByte.compareTo_11rb$', function (other) {
      return Kotlin.primitiveCompareTo(this.data & 255, other.data & 255);
    });
    UByte.prototype.compareTo_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.compareTo_6hrhkk$', function (other) {
      return Kotlin.primitiveCompareTo(this.data & 255, other.data & 65535);
    });
    UByte.prototype.compareTo_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.compareTo_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintCompare = _.kotlin.uintCompare_vux9f0$;
      return function (other) {
        return uintCompare((new UInt_init(this.data & 255)).data, other.data);
      };
    }));
    UByte.prototype.compareTo_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.compareTo_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare((new ULong_init(Kotlin.Long.fromInt(this.data).and(L255))).data, other.data);
      };
    }));
    UByte.prototype.plus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.plus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data + (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UByte.prototype.plus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.plus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data + (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UByte.prototype.plus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.plus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data + other.data | 0);
      };
    }));
    UByte.prototype.plus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.plus_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L255))).data.add(other.data));
      };
    }));
    UByte.prototype.minus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.minus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data - (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UByte.prototype.minus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.minus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data - (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UByte.prototype.minus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.minus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 255)).data - other.data | 0);
      };
    }));
    UByte.prototype.minus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.minus_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L255))).data.subtract(other.data));
      };
    }));
    UByte.prototype.times_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.times_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 255)).data, (new UInt_init(other.data & 255)).data));
      };
    }));
    UByte.prototype.times_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.times_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 255)).data, (new UInt_init(other.data & 65535)).data));
      };
    }));
    UByte.prototype.times_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.times_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 255)).data, other.data));
      };
    }));
    UByte.prototype.times_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.times_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L255))).data.multiply(other.data));
      };
    }));
    UByte.prototype.div_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.div_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 255), new UInt_init(other.data & 255));
      };
    }));
    UByte.prototype.div_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.div_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 255), new UInt_init(other.data & 65535));
      };
    }));
    UByte.prototype.div_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.div_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 255), other);
      };
    }));
    UByte.prototype.div_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.div_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(new ULong_init(Kotlin.Long.fromInt(this.data).and(L255)), other);
      };
    }));
    UByte.prototype.rem_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.rem_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 255), new UInt_init(other.data & 255));
      };
    }));
    UByte.prototype.rem_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UByte.rem_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 255), new UInt_init(other.data & 65535));
      };
    }));
    UByte.prototype.rem_s87ys9$ = defineInlineFunction('kotlin.kotlin.UByte.rem_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 255), other);
      };
    }));
    UByte.prototype.rem_mpgczg$ = defineInlineFunction('kotlin.kotlin.UByte.rem_mpgczg$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(new ULong_init(Kotlin.Long.fromInt(this.data).and(L255)), other);
      };
    }));
    UByte.prototype.inc = defineInlineFunction('kotlin.kotlin.UByte.inc', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function () {
        return new UByte_init(toByte(this.data + 1));
      };
    }));
    UByte.prototype.dec = defineInlineFunction('kotlin.kotlin.UByte.dec', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function () {
        return new UByte_init(toByte(this.data - 1));
      };
    }));
    UByte.prototype.rangeTo_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.rangeTo_mpmjao$', wrapFunction(function () {
      var UIntRange_init = _.kotlin.ranges.UIntRange;
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UIntRange_init(new UInt_init(this.data & 255), new UInt_init(other.data & 255));
      };
    }));
    UByte.prototype.and_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.and_mpmjao$', wrapFunction(function () {
      var UByte_init = _.kotlin.UByte;
      var toByte = Kotlin.toByte;
      return function (other) {
        return new UByte_init(toByte(this.data & other.data));
      };
    }));
    UByte.prototype.or_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.or_mpmjao$', wrapFunction(function () {
      var UByte_init = _.kotlin.UByte;
      var toByte = Kotlin.toByte;
      return function (other) {
        return new UByte_init(toByte(this.data | other.data));
      };
    }));
    UByte.prototype.xor_mpmjao$ = defineInlineFunction('kotlin.kotlin.UByte.xor_mpmjao$', wrapFunction(function () {
      var UByte_init = _.kotlin.UByte;
      var toByte = Kotlin.toByte;
      return function (other) {
        return new UByte_init(toByte(this.data ^ other.data));
      };
    }));
    UByte.prototype.inv = defineInlineFunction('kotlin.kotlin.UByte.inv', wrapFunction(function () {
      var UByte_init = _.kotlin.UByte;
      var toByte = Kotlin.toByte;
      return function () {
        return new UByte_init(toByte(~this.data));
      };
    }));
    UByte.prototype.toByte = defineInlineFunction('kotlin.kotlin.UByte.toByte', function () {
      return this.data;
    });
    UByte.prototype.toShort = defineInlineFunction('kotlin.kotlin.UByte.toShort', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function () {
        return toShort(this.data & 255);
      };
    }));
    UByte.prototype.toInt = defineInlineFunction('kotlin.kotlin.UByte.toInt', function () {
      return this.data & 255;
    });
    UByte.prototype.toLong = defineInlineFunction('kotlin.kotlin.UByte.toLong', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      return function () {
        return Kotlin.Long.fromInt(this.data).and(L255);
      };
    }));
    UByte.prototype.toUByte = defineInlineFunction('kotlin.kotlin.UByte.toUByte', function () {
      return this;
    });
    UByte.prototype.toUShort = defineInlineFunction('kotlin.kotlin.UByte.toUShort', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      var toShort = Kotlin.toShort;
      return function () {
        return new UShort_init(toShort(this.data & 255));
      };
    }));
    UByte.prototype.toUInt = defineInlineFunction('kotlin.kotlin.UByte.toUInt', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(this.data & 255);
      };
    }));
    UByte.prototype.toULong = defineInlineFunction('kotlin.kotlin.UByte.toULong', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(Kotlin.Long.fromInt(this.data).and(L255));
      };
    }));
    UByte.prototype.toFloat = defineInlineFunction('kotlin.kotlin.UByte.toFloat', function () {
      return this.data & 255;
    });
    UByte.prototype.toDouble = defineInlineFunction('kotlin.kotlin.UByte.toDouble', function () {
      return this.data & 255;
    });
    UByte.prototype.toString = function () {
      return (this.data & 255).toString();
    };
    UByte.$metadata$ = {kind: Kind_CLASS, simpleName: 'UByte', interfaces: [Comparable]};
    UByte.prototype.unbox = function () {
      return this.data;
    };
    UByte.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.data) | 0;
      return result;
    };
    UByte.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
    };
    var toUByte = defineInlineFunction('kotlin.kotlin.toUByte_mz3mee$', wrapFunction(function () {
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init($receiver);
      };
    }));
    var toUByte_0 = defineInlineFunction('kotlin.kotlin.toUByte_5vcgdc$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(toByte($receiver));
      };
    }));
    var toUByte_1 = defineInlineFunction('kotlin.kotlin.toUByte_s8ev3n$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(toByte($receiver));
      };
    }));
    var toUByte_2 = defineInlineFunction('kotlin.kotlin.toUByte_mts6qi$', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(toByte($receiver.toInt()));
      };
    }));
    function UByteArray(storage) {
      this.storage = storage;
    }
    UByteArray.prototype.get_za3lpa$ = function (index) {
      return new UByte(this.storage[index]);
    };
    UByteArray.prototype.set_2c6cbe$ = function (index, value) {
      this.storage[index] = value.data;
    };
    Object.defineProperty(UByteArray.prototype, 'size', {get: function () {
      return this.storage.length;
    }});
    UByteArray.prototype.iterator = function () {
      return new UByteArray$Iterator(this.storage);
    };
    function UByteArray$Iterator(array) {
      UByteIterator.call(this);
      this.array_0 = array;
      this.index_0 = 0;
    }
    UByteArray$Iterator.prototype.hasNext = function () {
      return this.index_0 < this.array_0.length;
    };
    UByteArray$Iterator.prototype.nextUByte = function () {
      var tmp$;
      if (this.index_0 < this.array_0.length) {
        return new UByte(this.array_0[tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$]);
      } else
        throw new NoSuchElementException(this.index_0.toString());
    };
    UByteArray$Iterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'Iterator', interfaces: [UByteIterator]};
    UByteArray.prototype.contains_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UByte))
        return false;
      return contains_0(this.storage, element.data);
    };
    UByteArray.prototype.containsAll_brywnq$ = function (elements) {
      var tmp$;
      var $receiver = Kotlin.isType(tmp$ = elements, Collection) ? tmp$ : throwCCE_0();
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          var tmp$_1 = Kotlin.isType(element, UByte);
          if (tmp$_1) {
            tmp$_1 = contains_0(this.storage, element.data);
          }if (!tmp$_1) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    UByteArray.prototype.isEmpty = function () {
      return this.storage.length === 0;
    };
    UByteArray.$metadata$ = {kind: Kind_CLASS, simpleName: 'UByteArray', interfaces: [Collection]};
    function UByteArray_init(size, $this) {
      $this = $this || Object.create(UByteArray.prototype);
      UByteArray.call($this, new Int8Array(size));
      return $this;
    }
    UByteArray.prototype.unbox = function () {
      return this.storage;
    };
    UByteArray.prototype.toString = function () {
      return 'UByteArray(storage=' + Kotlin.toString(this.storage) + ')';
    };
    UByteArray.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.storage) | 0;
      return result;
    };
    UByteArray.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.storage, other.storage))));
    };
    var UByteArray_0 = defineInlineFunction('kotlin.kotlin.UByteArray_r6jda2$', wrapFunction(function () {
      var UByteArray_init = _.kotlin.UByteArray;
      function UByteArray$lambda(closure$init) {
        return function (index) {
          return closure$init(index).data;
        };
      }
      return function (size, init) {
        return new UByteArray_init(Kotlin.fillArray(new Int8Array(size), UByteArray$lambda(init)));
      };
    }));
    var ubyteArrayOf = defineInlineFunction('kotlin.kotlin.ubyteArrayOf_heqmip$', function (elements) {
      return elements;
    });
    function UInt(data) {
      UInt$Companion_getInstance();
      this.data = data;
    }
    function UInt$Companion() {
      UInt$Companion_instance = this;
      this.MIN_VALUE = new UInt(0);
      this.MAX_VALUE = new UInt(-1);
      this.SIZE_BYTES = 4;
      this.SIZE_BITS = 32;
    }
    UInt$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var UInt$Companion_instance = null;
    function UInt$Companion_getInstance() {
      if (UInt$Companion_instance === null) {
        new UInt$Companion();
      }return UInt$Companion_instance;
    }
    UInt.prototype.compareTo_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.compareTo_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintCompare = _.kotlin.uintCompare_vux9f0$;
      return function (other) {
        return uintCompare(this.data, (new UInt_init(other.data & 255)).data);
      };
    }));
    UInt.prototype.compareTo_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.compareTo_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintCompare = _.kotlin.uintCompare_vux9f0$;
      return function (other) {
        return uintCompare(this.data, (new UInt_init(other.data & 65535)).data);
      };
    }));
    UInt.prototype.compareTo_11rb$ = defineInlineFunction('kotlin.kotlin.UInt.compareTo_11rb$', wrapFunction(function () {
      var uintCompare = _.kotlin.uintCompare_vux9f0$;
      return function (other) {
        return uintCompare(this.data, other.data);
      };
    }));
    UInt.prototype.compareTo_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.compareTo_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare((new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295))).data, other.data);
      };
    }));
    UInt.prototype.plus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.plus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data + (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UInt.prototype.plus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.plus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data + (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UInt.prototype.plus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.plus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data + other.data | 0);
      };
    }));
    UInt.prototype.plus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.plus_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295))).data.add(other.data));
      };
    }));
    UInt.prototype.minus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.minus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data - (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UInt.prototype.minus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.minus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data - (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UInt.prototype.minus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.minus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data - other.data | 0);
      };
    }));
    UInt.prototype.minus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.minus_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295))).data.subtract(other.data));
      };
    }));
    UInt.prototype.times_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.times_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul(this.data, (new UInt_init(other.data & 255)).data));
      };
    }));
    UInt.prototype.times_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.times_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul(this.data, (new UInt_init(other.data & 65535)).data));
      };
    }));
    UInt.prototype.times_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.times_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul(this.data, other.data));
      };
    }));
    UInt.prototype.times_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.times_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295))).data.multiply(other.data));
      };
    }));
    UInt.prototype.div_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.div_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(this, new UInt_init(other.data & 255));
      };
    }));
    UInt.prototype.div_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.div_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(this, new UInt_init(other.data & 65535));
      };
    }));
    UInt.prototype.div_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.div_s87ys9$', wrapFunction(function () {
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(this, other);
      };
    }));
    UInt.prototype.div_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.div_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295)), other);
      };
    }));
    UInt.prototype.rem_mpmjao$ = defineInlineFunction('kotlin.kotlin.UInt.rem_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(this, new UInt_init(other.data & 255));
      };
    }));
    UInt.prototype.rem_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UInt.rem_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(this, new UInt_init(other.data & 65535));
      };
    }));
    UInt.prototype.rem_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.rem_s87ys9$', wrapFunction(function () {
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(this, other);
      };
    }));
    UInt.prototype.rem_mpgczg$ = defineInlineFunction('kotlin.kotlin.UInt.rem_mpgczg$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295)), other);
      };
    }));
    UInt.prototype.inc = defineInlineFunction('kotlin.kotlin.UInt.inc', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(this.data + 1 | 0);
      };
    }));
    UInt.prototype.dec = defineInlineFunction('kotlin.kotlin.UInt.dec', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(this.data - 1 | 0);
      };
    }));
    UInt.prototype.rangeTo_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.rangeTo_s87ys9$', wrapFunction(function () {
      var UIntRange_init = _.kotlin.ranges.UIntRange;
      return function (other) {
        return new UIntRange_init(this, other);
      };
    }));
    UInt.prototype.shl_za3lpa$ = defineInlineFunction('kotlin.kotlin.UInt.shl_za3lpa$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (bitCount) {
        return new UInt_init(this.data << bitCount);
      };
    }));
    UInt.prototype.shr_za3lpa$ = defineInlineFunction('kotlin.kotlin.UInt.shr_za3lpa$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (bitCount) {
        return new UInt_init(this.data >>> bitCount);
      };
    }));
    UInt.prototype.and_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.and_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data & other.data);
      };
    }));
    UInt.prototype.or_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.or_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data | other.data);
      };
    }));
    UInt.prototype.xor_s87ys9$ = defineInlineFunction('kotlin.kotlin.UInt.xor_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(this.data ^ other.data);
      };
    }));
    UInt.prototype.inv = defineInlineFunction('kotlin.kotlin.UInt.inv', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(~this.data);
      };
    }));
    UInt.prototype.toByte = defineInlineFunction('kotlin.kotlin.UInt.toByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function () {
        return toByte(this.data);
      };
    }));
    UInt.prototype.toShort = defineInlineFunction('kotlin.kotlin.UInt.toShort', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function () {
        return toShort(this.data);
      };
    }));
    UInt.prototype.toInt = defineInlineFunction('kotlin.kotlin.UInt.toInt', function () {
      return this.data;
    });
    UInt.prototype.toLong = defineInlineFunction('kotlin.kotlin.UInt.toLong', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      return function () {
        return Kotlin.Long.fromInt(this.data).and(L4294967295);
      };
    }));
    UInt.prototype.toUByte = defineInlineFunction('kotlin.kotlin.UInt.toUByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function () {
        return new UByte_init(toByte(this.data));
      };
    }));
    UInt.prototype.toUShort = defineInlineFunction('kotlin.kotlin.UInt.toUShort', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function () {
        return new UShort_init(toShort(this.data));
      };
    }));
    UInt.prototype.toUInt = defineInlineFunction('kotlin.kotlin.UInt.toUInt', function () {
      return this;
    });
    UInt.prototype.toULong = defineInlineFunction('kotlin.kotlin.UInt.toULong', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(Kotlin.Long.fromInt(this.data).and(L4294967295));
      };
    }));
    UInt.prototype.toFloat = defineInlineFunction('kotlin.kotlin.UInt.toFloat', wrapFunction(function () {
      var uintToDouble = _.kotlin.uintToDouble_za3lpa$;
      return function () {
        return uintToDouble(this.data);
      };
    }));
    UInt.prototype.toDouble = defineInlineFunction('kotlin.kotlin.UInt.toDouble', wrapFunction(function () {
      var uintToDouble = _.kotlin.uintToDouble_za3lpa$;
      return function () {
        return uintToDouble(this.data);
      };
    }));
    UInt.prototype.toString = function () {
      return Kotlin.Long.fromInt(this.data).and(L4294967295).toString();
    };
    UInt.$metadata$ = {kind: Kind_CLASS, simpleName: 'UInt', interfaces: [Comparable]};
    UInt.prototype.unbox = function () {
      return this.data;
    };
    UInt.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.data) | 0;
      return result;
    };
    UInt.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
    };
    var toUInt = defineInlineFunction('kotlin.kotlin.toUInt_mz3mee$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init($receiver);
      };
    }));
    var toUInt_0 = defineInlineFunction('kotlin.kotlin.toUInt_5vcgdc$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init($receiver);
      };
    }));
    var toUInt_1 = defineInlineFunction('kotlin.kotlin.toUInt_s8ev3n$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init($receiver);
      };
    }));
    var toUInt_2 = defineInlineFunction('kotlin.kotlin.toUInt_mts6qi$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init($receiver.toInt());
      };
    }));
    var toUInt_3 = defineInlineFunction('kotlin.kotlin.toUInt_81szk$', wrapFunction(function () {
      var doubleToUInt = _.kotlin.doubleToUInt_14dthe$;
      return function ($receiver) {
        return doubleToUInt($receiver);
      };
    }));
    var toUInt_4 = defineInlineFunction('kotlin.kotlin.toUInt_yrwdxr$', wrapFunction(function () {
      var doubleToUInt = _.kotlin.doubleToUInt_14dthe$;
      return function ($receiver) {
        return doubleToUInt($receiver);
      };
    }));
    function UIntArray(storage) {
      this.storage = storage;
    }
    UIntArray.prototype.get_za3lpa$ = function (index) {
      return new UInt(this.storage[index]);
    };
    UIntArray.prototype.set_6sqrdv$ = function (index, value) {
      this.storage[index] = value.data;
    };
    Object.defineProperty(UIntArray.prototype, 'size', {get: function () {
      return this.storage.length;
    }});
    UIntArray.prototype.iterator = function () {
      return new UIntArray$Iterator(this.storage);
    };
    function UIntArray$Iterator(array) {
      UIntIterator.call(this);
      this.array_0 = array;
      this.index_0 = 0;
    }
    UIntArray$Iterator.prototype.hasNext = function () {
      return this.index_0 < this.array_0.length;
    };
    UIntArray$Iterator.prototype.nextUInt = function () {
      var tmp$;
      if (this.index_0 < this.array_0.length) {
        return new UInt(this.array_0[tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$]);
      } else
        throw new NoSuchElementException(this.index_0.toString());
    };
    UIntArray$Iterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'Iterator', interfaces: [UIntIterator]};
    UIntArray.prototype.contains_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UInt))
        return false;
      return contains_2(this.storage, element.data);
    };
    UIntArray.prototype.containsAll_brywnq$ = function (elements) {
      var tmp$;
      var $receiver = Kotlin.isType(tmp$ = elements, Collection) ? tmp$ : throwCCE_0();
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          var tmp$_1 = Kotlin.isType(element, UInt);
          if (tmp$_1) {
            tmp$_1 = contains_2(this.storage, element.data);
          }if (!tmp$_1) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    UIntArray.prototype.isEmpty = function () {
      return this.storage.length === 0;
    };
    UIntArray.$metadata$ = {kind: Kind_CLASS, simpleName: 'UIntArray', interfaces: [Collection]};
    function UIntArray_init(size, $this) {
      $this = $this || Object.create(UIntArray.prototype);
      UIntArray.call($this, new Int32Array(size));
      return $this;
    }
    UIntArray.prototype.unbox = function () {
      return this.storage;
    };
    UIntArray.prototype.toString = function () {
      return 'UIntArray(storage=' + Kotlin.toString(this.storage) + ')';
    };
    UIntArray.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.storage) | 0;
      return result;
    };
    UIntArray.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.storage, other.storage))));
    };
    var UIntArray_0 = defineInlineFunction('kotlin.kotlin.UIntArray_8ai2qn$', wrapFunction(function () {
      var UIntArray_init = _.kotlin.UIntArray;
      function UIntArray$lambda(closure$init) {
        return function (index) {
          return closure$init(index).data;
        };
      }
      return function (size, init) {
        return new UIntArray_init(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(init)));
      };
    }));
    var uintArrayOf = defineInlineFunction('kotlin.kotlin.uintArrayOf_b6v1wk$', function (elements) {
      return elements;
    });
    function UIntRange(start, endInclusive) {
      UIntRange$Companion_getInstance();
      UIntProgression.call(this, start, endInclusive, 1);
    }
    Object.defineProperty(UIntRange.prototype, 'start', {get: function () {
      return this.first;
    }});
    Object.defineProperty(UIntRange.prototype, 'endInclusive', {get: function () {
      return this.last;
    }});
    UIntRange.prototype.contains_mef7kx$ = function (value) {
      var tmp$ = uintCompare(this.first.data, value.data) <= 0;
      if (tmp$) {
        tmp$ = uintCompare(value.data, this.last.data) <= 0;
      }return tmp$;
    };
    UIntRange.prototype.isEmpty = function () {
      return uintCompare(this.first.data, this.last.data) > 0;
    };
    UIntRange.prototype.equals = function (other) {
      var tmp$, tmp$_0;
      return Kotlin.isType(other, UIntRange) && (this.isEmpty() && other.isEmpty() || (((tmp$ = this.first) != null ? tmp$.equals(other.first) : null) && ((tmp$_0 = this.last) != null ? tmp$_0.equals(other.last) : null)));
    };
    UIntRange.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * this.first.data | 0) + this.last.data | 0;
    };
    UIntRange.prototype.toString = function () {
      return this.first.toString() + '..' + this.last;
    };
    function UIntRange$Companion() {
      UIntRange$Companion_instance = this;
      this.EMPTY = new UIntRange(UInt$Companion_getInstance().MAX_VALUE, UInt$Companion_getInstance().MIN_VALUE);
    }
    UIntRange$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var UIntRange$Companion_instance = null;
    function UIntRange$Companion_getInstance() {
      if (UIntRange$Companion_instance === null) {
        new UIntRange$Companion();
      }return UIntRange$Companion_instance;
    }
    UIntRange.$metadata$ = {kind: Kind_CLASS, simpleName: 'UIntRange', interfaces: [ClosedRange, UIntProgression]};
    function UIntProgression(start, endInclusive, step) {
      UIntProgression$Companion_getInstance();
      if (step === 0)
        throw IllegalArgumentException_init_0('Step must be non-zero.');
      if (step === -2147483648)
        throw IllegalArgumentException_init_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
      this.first = start;
      this.last = getProgressionLastElement_1(start, endInclusive, step);
      this.step = step;
    }
    UIntProgression.prototype.iterator = function () {
      return new UIntProgressionIterator(this.first, this.last, this.step);
    };
    UIntProgression.prototype.isEmpty = function () {
      return this.step > 0 ? uintCompare(this.first.data, this.last.data) > 0 : uintCompare(this.first.data, this.last.data) < 0;
    };
    UIntProgression.prototype.equals = function (other) {
      var tmp$, tmp$_0;
      return Kotlin.isType(other, UIntProgression) && (this.isEmpty() && other.isEmpty() || (((tmp$ = this.first) != null ? tmp$.equals(other.first) : null) && ((tmp$_0 = this.last) != null ? tmp$_0.equals(other.last) : null) && this.step === other.step));
    };
    UIntProgression.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * ((31 * this.first.data | 0) + this.last.data | 0) | 0) + this.step | 0;
    };
    UIntProgression.prototype.toString = function () {
      return this.step > 0 ? this.first.toString() + '..' + this.last + ' step ' + this.step : this.first.toString() + ' downTo ' + this.last + ' step ' + (-this.step | 0);
    };
    function UIntProgression$Companion() {
      UIntProgression$Companion_instance = this;
    }
    UIntProgression$Companion.prototype.fromClosedRange_fjk8us$ = function (rangeStart, rangeEnd, step) {
      return new UIntProgression(rangeStart, rangeEnd, step);
    };
    UIntProgression$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var UIntProgression$Companion_instance = null;
    function UIntProgression$Companion_getInstance() {
      if (UIntProgression$Companion_instance === null) {
        new UIntProgression$Companion();
      }return UIntProgression$Companion_instance;
    }
    UIntProgression.$metadata$ = {kind: Kind_CLASS, simpleName: 'UIntProgression', interfaces: [Iterable]};
    function UIntProgressionIterator(first, last, step) {
      UIntIterator.call(this);
      this.finalElement_0 = last;
      this.hasNext_0 = step > 0 ? uintCompare(first.data, last.data) <= 0 : uintCompare(first.data, last.data) >= 0;
      this.step_0 = new UInt(step);
      this.next_0 = this.hasNext_0 ? first : this.finalElement_0;
    }
    UIntProgressionIterator.prototype.hasNext = function () {
      return this.hasNext_0;
    };
    UIntProgressionIterator.prototype.nextUInt = function () {
      var value = this.next_0;
      if (value != null ? value.equals(this.finalElement_0) : null) {
        if (!this.hasNext_0)
          throw NoSuchElementException_init();
        this.hasNext_0 = false;
      } else {
        this.next_0 = new UInt(this.next_0.data + this.step_0.data | 0);
      }
      return value;
    };
    UIntProgressionIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'UIntProgressionIterator', interfaces: [UIntIterator]};
    function UByteIterator() {
    }
    UByteIterator.prototype.next = function () {
      return this.nextUByte();
    };
    UByteIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'UByteIterator', interfaces: [Iterator]};
    function UShortIterator() {
    }
    UShortIterator.prototype.next = function () {
      return this.nextUShort();
    };
    UShortIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'UShortIterator', interfaces: [Iterator]};
    function UIntIterator() {
    }
    UIntIterator.prototype.next = function () {
      return this.nextUInt();
    };
    UIntIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'UIntIterator', interfaces: [Iterator]};
    function ULongIterator() {
    }
    ULongIterator.prototype.next = function () {
      return this.nextULong();
    };
    ULongIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULongIterator', interfaces: [Iterator]};
    function ULong(data) {
      ULong$Companion_getInstance();
      this.data = data;
    }
    function ULong$Companion() {
      ULong$Companion_instance = this;
      this.MIN_VALUE = new ULong(L0);
      this.MAX_VALUE = new ULong(L_1);
      this.SIZE_BYTES = 8;
      this.SIZE_BITS = 64;
    }
    ULong$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var ULong$Companion_instance = null;
    function ULong$Companion_getInstance() {
      if (ULong$Companion_instance === null) {
        new ULong$Companion();
      }return ULong$Companion_instance;
    }
    ULong.prototype.compareTo_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.compareTo_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare(this.data, (new ULong_init(Kotlin.Long.fromInt(other.data).and(L255))).data);
      };
    }));
    ULong.prototype.compareTo_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.compareTo_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare(this.data, (new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535))).data);
      };
    }));
    ULong.prototype.compareTo_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.compareTo_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare(this.data, (new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295))).data);
      };
    }));
    ULong.prototype.compareTo_11rb$ = defineInlineFunction('kotlin.kotlin.ULong.compareTo_11rb$', wrapFunction(function () {
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare(this.data, other.data);
      };
    }));
    ULong.prototype.plus_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.plus_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.add((new ULong_init(Kotlin.Long.fromInt(other.data).and(L255))).data));
      };
    }));
    ULong.prototype.plus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.plus_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.add((new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535))).data));
      };
    }));
    ULong.prototype.plus_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.plus_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.add((new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      };
    }));
    ULong.prototype.plus_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.plus_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.add(other.data));
      };
    }));
    ULong.prototype.minus_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.minus_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.subtract((new ULong_init(Kotlin.Long.fromInt(other.data).and(L255))).data));
      };
    }));
    ULong.prototype.minus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.minus_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.subtract((new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535))).data));
      };
    }));
    ULong.prototype.minus_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.minus_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.subtract((new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      };
    }));
    ULong.prototype.minus_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.minus_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.subtract(other.data));
      };
    }));
    ULong.prototype.times_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.times_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.multiply((new ULong_init(Kotlin.Long.fromInt(other.data).and(L255))).data));
      };
    }));
    ULong.prototype.times_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.times_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.multiply((new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535))).data));
      };
    }));
    ULong.prototype.times_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.times_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.multiply((new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      };
    }));
    ULong.prototype.times_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.times_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.multiply(other.data));
      };
    }));
    ULong.prototype.div_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.div_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L255)));
      };
    }));
    ULong.prototype.div_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.div_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535)));
      };
    }));
    ULong.prototype.div_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.div_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295)));
      };
    }));
    ULong.prototype.div_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.div_mpgczg$', wrapFunction(function () {
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(this, other);
      };
    }));
    ULong.prototype.rem_mpmjao$ = defineInlineFunction('kotlin.kotlin.ULong.rem_mpmjao$', wrapFunction(function () {
      var L255 = Kotlin.Long.fromInt(255);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L255)));
      };
    }));
    ULong.prototype.rem_6hrhkk$ = defineInlineFunction('kotlin.kotlin.ULong.rem_6hrhkk$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L65535)));
      };
    }));
    ULong.prototype.rem_s87ys9$ = defineInlineFunction('kotlin.kotlin.ULong.rem_s87ys9$', wrapFunction(function () {
      var L4294967295 = new Kotlin.Long(-1, 0);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(this, new ULong_init(Kotlin.Long.fromInt(other.data).and(L4294967295)));
      };
    }));
    ULong.prototype.rem_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.rem_mpgczg$', wrapFunction(function () {
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(this, other);
      };
    }));
    ULong.prototype.inc = defineInlineFunction('kotlin.kotlin.ULong.inc', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(this.data.inc());
      };
    }));
    ULong.prototype.dec = defineInlineFunction('kotlin.kotlin.ULong.dec', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(this.data.dec());
      };
    }));
    ULong.prototype.rangeTo_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.rangeTo_mpgczg$', wrapFunction(function () {
      var ULongRange_init = _.kotlin.ranges.ULongRange;
      return function (other) {
        return new ULongRange_init(this, other);
      };
    }));
    ULong.prototype.shl_za3lpa$ = defineInlineFunction('kotlin.kotlin.ULong.shl_za3lpa$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (bitCount) {
        return new ULong_init(this.data.shiftLeft(bitCount));
      };
    }));
    ULong.prototype.shr_za3lpa$ = defineInlineFunction('kotlin.kotlin.ULong.shr_za3lpa$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (bitCount) {
        return new ULong_init(this.data.shiftRightUnsigned(bitCount));
      };
    }));
    ULong.prototype.and_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.and_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.and(other.data));
      };
    }));
    ULong.prototype.or_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.or_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.or(other.data));
      };
    }));
    ULong.prototype.xor_mpgczg$ = defineInlineFunction('kotlin.kotlin.ULong.xor_mpgczg$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init(this.data.xor(other.data));
      };
    }));
    ULong.prototype.inv = defineInlineFunction('kotlin.kotlin.ULong.inv', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(this.data.inv());
      };
    }));
    ULong.prototype.toByte = defineInlineFunction('kotlin.kotlin.ULong.toByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function () {
        return toByte(this.data.toInt());
      };
    }));
    ULong.prototype.toShort = defineInlineFunction('kotlin.kotlin.ULong.toShort', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      return function () {
        return toShort(this.data.toInt());
      };
    }));
    ULong.prototype.toInt = defineInlineFunction('kotlin.kotlin.ULong.toInt', function () {
      return this.data.toInt();
    });
    ULong.prototype.toLong = defineInlineFunction('kotlin.kotlin.ULong.toLong', function () {
      return this.data;
    });
    ULong.prototype.toUByte = defineInlineFunction('kotlin.kotlin.ULong.toUByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function () {
        return new UByte_init(toByte(this.data.toInt()));
      };
    }));
    ULong.prototype.toUShort = defineInlineFunction('kotlin.kotlin.ULong.toUShort', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function () {
        return new UShort_init(toShort(this.data.toInt()));
      };
    }));
    ULong.prototype.toUInt = defineInlineFunction('kotlin.kotlin.ULong.toUInt', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(this.data.toInt());
      };
    }));
    ULong.prototype.toULong = defineInlineFunction('kotlin.kotlin.ULong.toULong', function () {
      return this;
    });
    ULong.prototype.toFloat = defineInlineFunction('kotlin.kotlin.ULong.toFloat', wrapFunction(function () {
      var ulongToDouble = _.kotlin.ulongToDouble_s8cxhz$;
      return function () {
        return ulongToDouble(this.data);
      };
    }));
    ULong.prototype.toDouble = defineInlineFunction('kotlin.kotlin.ULong.toDouble', wrapFunction(function () {
      var ulongToDouble = _.kotlin.ulongToDouble_s8cxhz$;
      return function () {
        return ulongToDouble(this.data);
      };
    }));
    ULong.prototype.toString = function () {
      return ulongToString(this.data);
    };
    ULong.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULong', interfaces: [Comparable]};
    ULong.prototype.unbox = function () {
      return this.data;
    };
    ULong.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.data) | 0;
      return result;
    };
    ULong.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
    };
    var toULong = defineInlineFunction('kotlin.kotlin.toULong_mz3mee$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(Kotlin.Long.fromInt($receiver));
      };
    }));
    var toULong_0 = defineInlineFunction('kotlin.kotlin.toULong_5vcgdc$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(Kotlin.Long.fromInt($receiver));
      };
    }));
    var toULong_1 = defineInlineFunction('kotlin.kotlin.toULong_s8ev3n$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(Kotlin.Long.fromInt($receiver));
      };
    }));
    var toULong_2 = defineInlineFunction('kotlin.kotlin.toULong_mts6qi$', wrapFunction(function () {
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init($receiver);
      };
    }));
    var toULong_3 = defineInlineFunction('kotlin.kotlin.toULong_81szk$', wrapFunction(function () {
      var doubleToULong = _.kotlin.doubleToULong_14dthe$;
      return function ($receiver) {
        return doubleToULong($receiver);
      };
    }));
    var toULong_4 = defineInlineFunction('kotlin.kotlin.toULong_yrwdxr$', wrapFunction(function () {
      var doubleToULong = _.kotlin.doubleToULong_14dthe$;
      return function ($receiver) {
        return doubleToULong($receiver);
      };
    }));
    function ULongArray(storage) {
      this.storage = storage;
    }
    ULongArray.prototype.get_za3lpa$ = function (index) {
      return new ULong(this.storage[index]);
    };
    ULongArray.prototype.set_2ccimm$ = function (index, value) {
      this.storage[index] = value.data;
    };
    Object.defineProperty(ULongArray.prototype, 'size', {get: function () {
      return this.storage.length;
    }});
    ULongArray.prototype.iterator = function () {
      return new ULongArray$Iterator(this.storage);
    };
    function ULongArray$Iterator(array) {
      ULongIterator.call(this);
      this.array_0 = array;
      this.index_0 = 0;
    }
    ULongArray$Iterator.prototype.hasNext = function () {
      return this.index_0 < this.array_0.length;
    };
    ULongArray$Iterator.prototype.nextULong = function () {
      var tmp$;
      if (this.index_0 < this.array_0.length) {
        return new ULong(this.array_0[tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$]);
      } else
        throw new NoSuchElementException(this.index_0.toString());
    };
    ULongArray$Iterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'Iterator', interfaces: [ULongIterator]};
    ULongArray.prototype.contains_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), ULong))
        return false;
      return contains_3(this.storage, element.data);
    };
    ULongArray.prototype.containsAll_brywnq$ = function (elements) {
      var tmp$;
      var $receiver = Kotlin.isType(tmp$ = elements, Collection) ? tmp$ : throwCCE_0();
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          var tmp$_1 = Kotlin.isType(element, ULong);
          if (tmp$_1) {
            tmp$_1 = contains_3(this.storage, element.data);
          }if (!tmp$_1) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    ULongArray.prototype.isEmpty = function () {
      return this.storage.length === 0;
    };
    ULongArray.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULongArray', interfaces: [Collection]};
    function ULongArray_init(size, $this) {
      $this = $this || Object.create(ULongArray.prototype);
      ULongArray.call($this, Kotlin.longArray(size));
      return $this;
    }
    ULongArray.prototype.unbox = function () {
      return this.storage;
    };
    ULongArray.prototype.toString = function () {
      return 'ULongArray(storage=' + Kotlin.toString(this.storage) + ')';
    };
    ULongArray.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.storage) | 0;
      return result;
    };
    ULongArray.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.storage, other.storage))));
    };
    var ULongArray_0 = defineInlineFunction('kotlin.kotlin.ULongArray_r17xm6$', wrapFunction(function () {
      var ULongArray_init = _.kotlin.ULongArray;
      function ULongArray$lambda(closure$init) {
        return function (index) {
          return closure$init(index).data;
        };
      }
      return function (size, init) {
        return new ULongArray_init(Kotlin.longArrayF(size, ULongArray$lambda(init)));
      };
    }));
    var ulongArrayOf = defineInlineFunction('kotlin.kotlin.ulongArrayOf_imqi6j$', function (elements) {
      return elements;
    });
    function ULongRange_0(start, endInclusive) {
      ULongRange$Companion_getInstance();
      ULongProgression.call(this, start, endInclusive, L1);
    }
    Object.defineProperty(ULongRange_0.prototype, 'start', {get: function () {
      return this.first;
    }});
    Object.defineProperty(ULongRange_0.prototype, 'endInclusive', {get: function () {
      return this.last;
    }});
    ULongRange_0.prototype.contains_mef7kx$ = function (value) {
      var tmp$ = ulongCompare(this.first.data, value.data) <= 0;
      if (tmp$) {
        tmp$ = ulongCompare(value.data, this.last.data) <= 0;
      }return tmp$;
    };
    ULongRange_0.prototype.isEmpty = function () {
      return ulongCompare(this.first.data, this.last.data) > 0;
    };
    ULongRange_0.prototype.equals = function (other) {
      var tmp$, tmp$_0;
      return Kotlin.isType(other, ULongRange_0) && (this.isEmpty() && other.isEmpty() || (((tmp$ = this.first) != null ? tmp$.equals(other.first) : null) && ((tmp$_0 = this.last) != null ? tmp$_0.equals(other.last) : null)));
    };
    ULongRange_0.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * (new ULong(this.first.data.xor((new ULong(this.first.data.shiftRightUnsigned(32))).data))).data.toInt() | 0) + (new ULong(this.last.data.xor((new ULong(this.last.data.shiftRightUnsigned(32))).data))).data.toInt() | 0;
    };
    ULongRange_0.prototype.toString = function () {
      return this.first.toString() + '..' + this.last;
    };
    function ULongRange$Companion() {
      ULongRange$Companion_instance = this;
      this.EMPTY = new ULongRange_0(ULong$Companion_getInstance().MAX_VALUE, ULong$Companion_getInstance().MIN_VALUE);
    }
    ULongRange$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var ULongRange$Companion_instance = null;
    function ULongRange$Companion_getInstance() {
      if (ULongRange$Companion_instance === null) {
        new ULongRange$Companion();
      }return ULongRange$Companion_instance;
    }
    ULongRange_0.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULongRange', interfaces: [ClosedRange, ULongProgression]};
    function ULongProgression(start, endInclusive, step) {
      ULongProgression$Companion_getInstance();
      if (equals(step, L0))
        throw IllegalArgumentException_init_0('Step must be non-zero.');
      if (equals(step, Long$Companion$MIN_VALUE))
        throw IllegalArgumentException_init_0('Step must be greater than Long.MIN_VALUE to avoid overflow on negation.');
      this.first = start;
      this.last = getProgressionLastElement_2(start, endInclusive, step);
      this.step = step;
    }
    ULongProgression.prototype.iterator = function () {
      return new ULongProgressionIterator(this.first, this.last, this.step);
    };
    ULongProgression.prototype.isEmpty = function () {
      return this.step.toNumber() > 0 ? ulongCompare(this.first.data, this.last.data) > 0 : ulongCompare(this.first.data, this.last.data) < 0;
    };
    ULongProgression.prototype.equals = function (other) {
      var tmp$, tmp$_0;
      return Kotlin.isType(other, ULongProgression) && (this.isEmpty() && other.isEmpty() || (((tmp$ = this.first) != null ? tmp$.equals(other.first) : null) && ((tmp$_0 = this.last) != null ? tmp$_0.equals(other.last) : null) && equals(this.step, other.step)));
    };
    ULongProgression.prototype.hashCode = function () {
      return this.isEmpty() ? -1 : (31 * ((31 * (new ULong(this.first.data.xor((new ULong(this.first.data.shiftRightUnsigned(32))).data))).data.toInt() | 0) + (new ULong(this.last.data.xor((new ULong(this.last.data.shiftRightUnsigned(32))).data))).data.toInt() | 0) | 0) + this.step.xor(this.step.shiftRightUnsigned(32)).toInt() | 0;
    };
    ULongProgression.prototype.toString = function () {
      return this.step.toNumber() > 0 ? this.first.toString() + '..' + this.last + ' step ' + this.step.toString() : this.first.toString() + ' downTo ' + this.last + ' step ' + this.step.unaryMinus().toString();
    };
    function ULongProgression$Companion() {
      ULongProgression$Companion_instance = this;
    }
    ULongProgression$Companion.prototype.fromClosedRange_15zasp$ = function (rangeStart, rangeEnd, step) {
      return new ULongProgression(rangeStart, rangeEnd, step);
    };
    ULongProgression$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var ULongProgression$Companion_instance = null;
    function ULongProgression$Companion_getInstance() {
      if (ULongProgression$Companion_instance === null) {
        new ULongProgression$Companion();
      }return ULongProgression$Companion_instance;
    }
    ULongProgression.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULongProgression', interfaces: [Iterable]};
    function ULongProgressionIterator(first, last, step) {
      ULongIterator.call(this);
      this.finalElement_0 = last;
      this.hasNext_0 = step.toNumber() > 0 ? ulongCompare(first.data, last.data) <= 0 : ulongCompare(first.data, last.data) >= 0;
      this.step_0 = new ULong(step);
      this.next_0 = this.hasNext_0 ? first : this.finalElement_0;
    }
    ULongProgressionIterator.prototype.hasNext = function () {
      return this.hasNext_0;
    };
    ULongProgressionIterator.prototype.nextULong = function () {
      var value = this.next_0;
      if (value != null ? value.equals(this.finalElement_0) : null) {
        if (!this.hasNext_0)
          throw NoSuchElementException_init();
        this.hasNext_0 = false;
      } else {
        this.next_0 = new ULong(this.next_0.data.add(this.step_0.data));
      }
      return value;
    };
    ULongProgressionIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'ULongProgressionIterator', interfaces: [ULongIterator]};
    var min_25 = defineInlineFunction('kotlin.kotlin.math.min_oqfnby$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_oqfnby$;
      return function (a, b) {
        return minOf(a, b);
      };
    }));
    var min_26 = defineInlineFunction('kotlin.kotlin.math.min_jpm79w$', wrapFunction(function () {
      var minOf = _.kotlin.comparisons.minOf_jpm79w$;
      return function (a, b) {
        return minOf(a, b);
      };
    }));
    var max_25 = defineInlineFunction('kotlin.kotlin.math.max_oqfnby$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_oqfnby$;
      return function (a, b) {
        return maxOf(a, b);
      };
    }));
    var max_26 = defineInlineFunction('kotlin.kotlin.math.max_jpm79w$', wrapFunction(function () {
      var maxOf = _.kotlin.comparisons.maxOf_jpm79w$;
      return function (a, b) {
        return maxOf(a, b);
      };
    }));
    var countOneBits_3 = defineInlineFunction('kotlin.kotlin.countOneBits_mpial4$', wrapFunction(function () {
      var countOneBits = _.kotlin.countOneBits_s8ev3n$;
      return function ($receiver) {
        return countOneBits($receiver.data);
      };
    }));
    var countLeadingZeroBits_3 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_mpial4$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver.data);
      };
    }));
    var countTrailingZeroBits_3 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_mpial4$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_s8ev3n$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver.data);
      };
    }));
    var takeHighestOneBit_3 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_mpial4$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_s8ev3n$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(takeHighestOneBit($receiver.data));
      };
    }));
    var takeLowestOneBit_3 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_mpial4$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_s8ev3n$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver) {
        return new UInt_init(takeLowestOneBit($receiver.data));
      };
    }));
    var rotateLeft_3 = defineInlineFunction('kotlin.kotlin.rotateLeft_k13f4a$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_dqglrj$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver, bitCount) {
        return new UInt_init(rotateLeft($receiver.data, bitCount));
      };
    }));
    var rotateRight_3 = defineInlineFunction('kotlin.kotlin.rotateRight_k13f4a$', wrapFunction(function () {
      var rotateRight = _.kotlin.rotateRight_dqglrj$;
      var UInt_init = _.kotlin.UInt;
      return function ($receiver, bitCount) {
        return new UInt_init(rotateRight($receiver.data, bitCount));
      };
    }));
    var countOneBits_4 = defineInlineFunction('kotlin.kotlin.countOneBits_6e1d9n$', wrapFunction(function () {
      var countOneBits = _.kotlin.countOneBits_mts6qi$;
      return function ($receiver) {
        return countOneBits($receiver.data);
      };
    }));
    var countLeadingZeroBits_4 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_6e1d9n$', wrapFunction(function () {
      var countLeadingZeroBits = _.kotlin.countLeadingZeroBits_mts6qi$;
      return function ($receiver) {
        return countLeadingZeroBits($receiver.data);
      };
    }));
    var countTrailingZeroBits_4 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_6e1d9n$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_mts6qi$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver.data);
      };
    }));
    var takeHighestOneBit_4 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_6e1d9n$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_mts6qi$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(takeHighestOneBit($receiver.data));
      };
    }));
    var takeLowestOneBit_4 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_6e1d9n$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_mts6qi$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver) {
        return new ULong_init(takeLowestOneBit($receiver.data));
      };
    }));
    var rotateLeft_4 = defineInlineFunction('kotlin.kotlin.rotateLeft_hc3rh$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_if0zpk$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver, bitCount) {
        return new ULong_init(rotateLeft($receiver.data, bitCount));
      };
    }));
    var rotateRight_4 = defineInlineFunction('kotlin.kotlin.rotateRight_hc3rh$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_if0zpk$;
      var ULong_init = _.kotlin.ULong;
      return function ($receiver, bitCount) {
        return new ULong_init(rotateLeft($receiver.data, -bitCount | 0));
      };
    }));
    var countOneBits_5 = defineInlineFunction('kotlin.kotlin.countOneBits_68pxlr$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var countOneBits = _.kotlin.countOneBits_s8ev3n$;
      return function ($receiver) {
        return countOneBits((new UInt_init($receiver.data & 255)).data);
      };
    }));
    var countLeadingZeroBits_5 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_68pxlr$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver.data & 255) - 24 | 0;
      };
    }));
    var countTrailingZeroBits_5 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_68pxlr$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_s8ev3n$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver.data | 256);
      };
    }));
    var takeHighestOneBit_5 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_68pxlr$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_s8ev3n$;
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(toByte(takeHighestOneBit($receiver.data & 255)));
      };
    }));
    var takeLowestOneBit_5 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_68pxlr$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_s8ev3n$;
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver) {
        return new UByte_init(toByte(takeLowestOneBit($receiver.data & 255)));
      };
    }));
    var rotateLeft_5 = defineInlineFunction('kotlin.kotlin.rotateLeft_aogav3$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_798l30$;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver, bitCount) {
        return new UByte_init(rotateLeft($receiver.data, bitCount));
      };
    }));
    var rotateRight_5 = defineInlineFunction('kotlin.kotlin.rotateRight_aogav3$', wrapFunction(function () {
      var rotateRight = _.kotlin.rotateRight_798l30$;
      var UByte_init = _.kotlin.UByte;
      return function ($receiver, bitCount) {
        return new UByte_init(rotateRight($receiver.data, bitCount));
      };
    }));
    var countOneBits_6 = defineInlineFunction('kotlin.kotlin.countOneBits_bso16t$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var countOneBits = _.kotlin.countOneBits_s8ev3n$;
      return function ($receiver) {
        return countOneBits((new UInt_init($receiver.data & 65535)).data);
      };
    }));
    var countLeadingZeroBits_6 = defineInlineFunction('kotlin.kotlin.countLeadingZeroBits_bso16t$', wrapFunction(function () {
      var Math_0 = Math;
      return function ($receiver) {
        return Math_0.clz32($receiver.data & 65535) - 16 | 0;
      };
    }));
    var countTrailingZeroBits_6 = defineInlineFunction('kotlin.kotlin.countTrailingZeroBits_bso16t$', wrapFunction(function () {
      var countTrailingZeroBits = _.kotlin.countTrailingZeroBits_s8ev3n$;
      return function ($receiver) {
        return countTrailingZeroBits($receiver.data | 65536);
      };
    }));
    var takeHighestOneBit_6 = defineInlineFunction('kotlin.kotlin.takeHighestOneBit_bso16t$', wrapFunction(function () {
      var takeHighestOneBit = _.kotlin.takeHighestOneBit_s8ev3n$;
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(toShort(takeHighestOneBit($receiver.data & 65535)));
      };
    }));
    var takeLowestOneBit_6 = defineInlineFunction('kotlin.kotlin.takeLowestOneBit_bso16t$', wrapFunction(function () {
      var takeLowestOneBit = _.kotlin.takeLowestOneBit_s8ev3n$;
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(toShort(takeLowestOneBit($receiver.data & 65535)));
      };
    }));
    var rotateLeft_6 = defineInlineFunction('kotlin.kotlin.rotateLeft_pqjt0d$', wrapFunction(function () {
      var rotateLeft = _.kotlin.rotateLeft_di2vk2$;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver, bitCount) {
        return new UShort_init(rotateLeft($receiver.data, bitCount));
      };
    }));
    var rotateRight_6 = defineInlineFunction('kotlin.kotlin.rotateRight_pqjt0d$', wrapFunction(function () {
      var rotateRight = _.kotlin.rotateRight_di2vk2$;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver, bitCount) {
        return new UShort_init(rotateRight($receiver.data, bitCount));
      };
    }));
    function differenceModulo_1(a, b, c) {
      var ac = uintRemainder(a, c);
      var bc = uintRemainder(b, c);
      return uintCompare(ac.data, bc.data) >= 0 ? new UInt(ac.data - bc.data | 0) : new UInt((new UInt(ac.data - bc.data | 0)).data + c.data | 0);
    }
    function differenceModulo_2(a, b, c) {
      var ac = ulongRemainder(a, c);
      var bc = ulongRemainder(b, c);
      return ulongCompare(ac.data, bc.data) >= 0 ? new ULong(ac.data.subtract(bc.data)) : new ULong((new ULong(ac.data.subtract(bc.data))).data.add(c.data));
    }
    function getProgressionLastElement_1(start, end, step) {
      if (step > 0) {
        return uintCompare(start.data, end.data) >= 0 ? end : new UInt(end.data - differenceModulo_1(end, start, new UInt(step)).data | 0);
      } else if (step < 0) {
        return uintCompare(start.data, end.data) <= 0 ? end : new UInt(end.data + differenceModulo_1(start, end, new UInt(-step | 0)).data | 0);
      } else
        throw IllegalArgumentException_init_0('Step is zero.');
    }
    function getProgressionLastElement_2(start, end, step) {
      if (step.toNumber() > 0) {
        return ulongCompare(start.data, end.data) >= 0 ? end : new ULong(end.data.subtract(differenceModulo_2(end, start, new ULong(step)).data));
      } else if (step.toNumber() < 0) {
        return ulongCompare(start.data, end.data) <= 0 ? end : new ULong(end.data.add(differenceModulo_2(start, end, new ULong(step.unaryMinus())).data));
      } else
        throw IllegalArgumentException_init_0('Step is zero.');
    }
    function UShort(data) {
      UShort$Companion_getInstance();
      this.data = data;
    }
    function UShort$Companion() {
      UShort$Companion_instance = this;
      this.MIN_VALUE = new UShort(0);
      this.MAX_VALUE = new UShort(-1 | 0);
      this.SIZE_BYTES = 2;
      this.SIZE_BITS = 16;
    }
    UShort$Companion.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Companion', interfaces: []};
    var UShort$Companion_instance = null;
    function UShort$Companion_getInstance() {
      if (UShort$Companion_instance === null) {
        new UShort$Companion();
      }return UShort$Companion_instance;
    }
    UShort.prototype.compareTo_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.compareTo_mpmjao$', function (other) {
      return Kotlin.primitiveCompareTo(this.data & 65535, other.data & 255);
    });
    UShort.prototype.compareTo_11rb$ = defineInlineFunction('kotlin.kotlin.UShort.compareTo_11rb$', function (other) {
      return Kotlin.primitiveCompareTo(this.data & 65535, other.data & 65535);
    });
    UShort.prototype.compareTo_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.compareTo_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintCompare = _.kotlin.uintCompare_vux9f0$;
      return function (other) {
        return uintCompare((new UInt_init(this.data & 65535)).data, other.data);
      };
    }));
    UShort.prototype.compareTo_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.compareTo_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongCompare = _.kotlin.ulongCompare_3pjtqy$;
      return function (other) {
        return ulongCompare((new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535))).data, other.data);
      };
    }));
    UShort.prototype.plus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.plus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data + (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UShort.prototype.plus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.plus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data + (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UShort.prototype.plus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.plus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data + other.data | 0);
      };
    }));
    UShort.prototype.plus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.plus_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535))).data.add(other.data));
      };
    }));
    UShort.prototype.minus_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.minus_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data - (new UInt_init(other.data & 255)).data | 0);
      };
    }));
    UShort.prototype.minus_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.minus_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data - (new UInt_init(other.data & 65535)).data | 0);
      };
    }));
    UShort.prototype.minus_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.minus_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init((new UInt_init(this.data & 65535)).data - other.data | 0);
      };
    }));
    UShort.prototype.minus_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.minus_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535))).data.subtract(other.data));
      };
    }));
    UShort.prototype.times_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.times_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 65535)).data, (new UInt_init(other.data & 255)).data));
      };
    }));
    UShort.prototype.times_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.times_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 65535)).data, (new UInt_init(other.data & 65535)).data));
      };
    }));
    UShort.prototype.times_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.times_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UInt_init(Kotlin.imul((new UInt_init(this.data & 65535)).data, other.data));
      };
    }));
    UShort.prototype.times_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.times_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function (other) {
        return new ULong_init((new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535))).data.multiply(other.data));
      };
    }));
    UShort.prototype.div_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.div_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 65535), new UInt_init(other.data & 255));
      };
    }));
    UShort.prototype.div_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.div_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 65535), new UInt_init(other.data & 65535));
      };
    }));
    UShort.prototype.div_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.div_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintDivide = _.kotlin.uintDivide_oqfnby$;
      return function (other) {
        return uintDivide(new UInt_init(this.data & 65535), other);
      };
    }));
    UShort.prototype.div_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.div_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongDivide = _.kotlin.ulongDivide_jpm79w$;
      return function (other) {
        return ulongDivide(new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535)), other);
      };
    }));
    UShort.prototype.rem_mpmjao$ = defineInlineFunction('kotlin.kotlin.UShort.rem_mpmjao$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 65535), new UInt_init(other.data & 255));
      };
    }));
    UShort.prototype.rem_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.rem_6hrhkk$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 65535), new UInt_init(other.data & 65535));
      };
    }));
    UShort.prototype.rem_s87ys9$ = defineInlineFunction('kotlin.kotlin.UShort.rem_s87ys9$', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      var uintRemainder = _.kotlin.uintRemainder_oqfnby$;
      return function (other) {
        return uintRemainder(new UInt_init(this.data & 65535), other);
      };
    }));
    UShort.prototype.rem_mpgczg$ = defineInlineFunction('kotlin.kotlin.UShort.rem_mpgczg$', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      var ulongRemainder = _.kotlin.ulongRemainder_jpm79w$;
      return function (other) {
        return ulongRemainder(new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535)), other);
      };
    }));
    UShort.prototype.inc = defineInlineFunction('kotlin.kotlin.UShort.inc', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function () {
        return new UShort_init(toShort(this.data + 1));
      };
    }));
    UShort.prototype.dec = defineInlineFunction('kotlin.kotlin.UShort.dec', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function () {
        return new UShort_init(toShort(this.data - 1));
      };
    }));
    UShort.prototype.rangeTo_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.rangeTo_6hrhkk$', wrapFunction(function () {
      var UIntRange_init = _.kotlin.ranges.UIntRange;
      var UInt_init = _.kotlin.UInt;
      return function (other) {
        return new UIntRange_init(new UInt_init(this.data & 65535), new UInt_init(other.data & 65535));
      };
    }));
    UShort.prototype.and_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.and_6hrhkk$', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      var toShort = Kotlin.toShort;
      return function (other) {
        return new UShort_init(toShort(this.data & other.data));
      };
    }));
    UShort.prototype.or_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.or_6hrhkk$', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      var toShort = Kotlin.toShort;
      return function (other) {
        return new UShort_init(toShort(this.data | other.data));
      };
    }));
    UShort.prototype.xor_6hrhkk$ = defineInlineFunction('kotlin.kotlin.UShort.xor_6hrhkk$', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      var toShort = Kotlin.toShort;
      return function (other) {
        return new UShort_init(toShort(this.data ^ other.data));
      };
    }));
    UShort.prototype.inv = defineInlineFunction('kotlin.kotlin.UShort.inv', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      var toShort = Kotlin.toShort;
      return function () {
        return new UShort_init(toShort(~this.data));
      };
    }));
    UShort.prototype.toByte = defineInlineFunction('kotlin.kotlin.UShort.toByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      return function () {
        return toByte(this.data);
      };
    }));
    UShort.prototype.toShort = defineInlineFunction('kotlin.kotlin.UShort.toShort', function () {
      return this.data;
    });
    UShort.prototype.toInt = defineInlineFunction('kotlin.kotlin.UShort.toInt', function () {
      return this.data & 65535;
    });
    UShort.prototype.toLong = defineInlineFunction('kotlin.kotlin.UShort.toLong', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      return function () {
        return Kotlin.Long.fromInt(this.data).and(L65535);
      };
    }));
    UShort.prototype.toUByte = defineInlineFunction('kotlin.kotlin.UShort.toUByte', wrapFunction(function () {
      var toByte = Kotlin.toByte;
      var UByte_init = _.kotlin.UByte;
      return function () {
        return new UByte_init(toByte(this.data));
      };
    }));
    UShort.prototype.toUShort = defineInlineFunction('kotlin.kotlin.UShort.toUShort', function () {
      return this;
    });
    UShort.prototype.toUInt = defineInlineFunction('kotlin.kotlin.UShort.toUInt', wrapFunction(function () {
      var UInt_init = _.kotlin.UInt;
      return function () {
        return new UInt_init(this.data & 65535);
      };
    }));
    UShort.prototype.toULong = defineInlineFunction('kotlin.kotlin.UShort.toULong', wrapFunction(function () {
      var L65535 = Kotlin.Long.fromInt(65535);
      var ULong_init = _.kotlin.ULong;
      return function () {
        return new ULong_init(Kotlin.Long.fromInt(this.data).and(L65535));
      };
    }));
    UShort.prototype.toFloat = defineInlineFunction('kotlin.kotlin.UShort.toFloat', function () {
      return this.data & 65535;
    });
    UShort.prototype.toDouble = defineInlineFunction('kotlin.kotlin.UShort.toDouble', function () {
      return this.data & 65535;
    });
    UShort.prototype.toString = function () {
      return (this.data & 65535).toString();
    };
    UShort.$metadata$ = {kind: Kind_CLASS, simpleName: 'UShort', interfaces: [Comparable]};
    UShort.prototype.unbox = function () {
      return this.data;
    };
    UShort.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.data) | 0;
      return result;
    };
    UShort.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
    };
    var toUShort = defineInlineFunction('kotlin.kotlin.toUShort_mz3mee$', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init($receiver);
      };
    }));
    var toUShort_0 = defineInlineFunction('kotlin.kotlin.toUShort_5vcgdc$', wrapFunction(function () {
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init($receiver);
      };
    }));
    var toUShort_1 = defineInlineFunction('kotlin.kotlin.toUShort_s8ev3n$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(toShort($receiver));
      };
    }));
    var toUShort_2 = defineInlineFunction('kotlin.kotlin.toUShort_mts6qi$', wrapFunction(function () {
      var toShort = Kotlin.toShort;
      var UShort_init = _.kotlin.UShort;
      return function ($receiver) {
        return new UShort_init(toShort($receiver.toInt()));
      };
    }));
    function UShortArray(storage) {
      this.storage = storage;
    }
    UShortArray.prototype.get_za3lpa$ = function (index) {
      return new UShort(this.storage[index]);
    };
    UShortArray.prototype.set_1pe3u2$ = function (index, value) {
      this.storage[index] = value.data;
    };
    Object.defineProperty(UShortArray.prototype, 'size', {get: function () {
      return this.storage.length;
    }});
    UShortArray.prototype.iterator = function () {
      return new UShortArray$Iterator(this.storage);
    };
    function UShortArray$Iterator(array) {
      UShortIterator.call(this);
      this.array_0 = array;
      this.index_0 = 0;
    }
    UShortArray$Iterator.prototype.hasNext = function () {
      return this.index_0 < this.array_0.length;
    };
    UShortArray$Iterator.prototype.nextUShort = function () {
      var tmp$;
      if (this.index_0 < this.array_0.length) {
        return new UShort(this.array_0[tmp$ = this.index_0, this.index_0 = tmp$ + 1 | 0, tmp$]);
      } else
        throw new NoSuchElementException(this.index_0.toString());
    };
    UShortArray$Iterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'Iterator', interfaces: [UShortIterator]};
    UShortArray.prototype.contains_11rb$ = function (element) {
      var tmp$;
      if (!Kotlin.isType((tmp$ = element) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE_0(), UShort))
        return false;
      return contains_1(this.storage, element.data);
    };
    UShortArray.prototype.containsAll_brywnq$ = function (elements) {
      var tmp$;
      var $receiver = Kotlin.isType(tmp$ = elements, Collection) ? tmp$ : throwCCE_0();
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          var tmp$_1 = Kotlin.isType(element, UShort);
          if (tmp$_1) {
            tmp$_1 = contains_1(this.storage, element.data);
          }if (!tmp$_1) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      return all$result;
    };
    UShortArray.prototype.isEmpty = function () {
      return this.storage.length === 0;
    };
    UShortArray.$metadata$ = {kind: Kind_CLASS, simpleName: 'UShortArray', interfaces: [Collection]};
    function UShortArray_init(size, $this) {
      $this = $this || Object.create(UShortArray.prototype);
      UShortArray.call($this, new Int16Array(size));
      return $this;
    }
    UShortArray.prototype.unbox = function () {
      return this.storage;
    };
    UShortArray.prototype.toString = function () {
      return 'UShortArray(storage=' + Kotlin.toString(this.storage) + ')';
    };
    UShortArray.prototype.hashCode = function () {
      var result = 0;
      result = result * 31 + Kotlin.hashCode(this.storage) | 0;
      return result;
    };
    UShortArray.prototype.equals = function (other) {
      return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.storage, other.storage))));
    };
    var UShortArray_0 = defineInlineFunction('kotlin.kotlin.UShortArray_hj0epe$', wrapFunction(function () {
      var UShortArray_init = _.kotlin.UShortArray;
      function UShortArray$lambda(closure$init) {
        return function (index) {
          return closure$init(index).data;
        };
      }
      return function (size, init) {
        return new UShortArray_init(Kotlin.fillArray(new Int16Array(size), UShortArray$lambda(init)));
      };
    }));
    var ushortArrayOf = defineInlineFunction('kotlin.kotlin.ushortArrayOf_golzdd$', function (elements) {
      return elements;
    });
    function toString_4($receiver, radix) {
      return toString_3($receiver.data & 255, radix);
    }
    function toString_5($receiver, radix) {
      return toString_3($receiver.data & 65535, radix);
    }
    function toString_6($receiver, radix) {
      return toString_0(Kotlin.Long.fromInt($receiver.data).and(L4294967295), radix);
    }
    function toString_7($receiver, radix) {
      return ulongToString_0($receiver.data, checkRadix(radix));
    }
    function toUByte_3($receiver) {
      var tmp$;
      return (tmp$ = toUByteOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUByte_4($receiver, radix) {
      var tmp$;
      return (tmp$ = toUByteOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUShort_3($receiver) {
      var tmp$;
      return (tmp$ = toUShortOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUShort_4($receiver, radix) {
      var tmp$;
      return (tmp$ = toUShortOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUInt_5($receiver) {
      var tmp$;
      return (tmp$ = toUIntOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUInt_6($receiver, radix) {
      var tmp$;
      return (tmp$ = toUIntOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toULong_5($receiver) {
      var tmp$;
      return (tmp$ = toULongOrNull($receiver)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toULong_6($receiver, radix) {
      var tmp$;
      return (tmp$ = toULongOrNull_0($receiver, radix)) != null ? tmp$ : numberFormatError($receiver);
    }
    function toUByteOrNull($receiver) {
      return toUByteOrNull_0($receiver, 10);
    }
    function toUByteOrNull_0($receiver, radix) {
      var tmp$;
      tmp$ = toUIntOrNull_0($receiver, radix);
      if (tmp$ == null) {
        return null;
      }var int = tmp$;
      if (uintCompare(int.data, (new UInt(UByte$Companion_getInstance().MAX_VALUE.data & 255)).data) > 0)
        return null;
      return new UByte(toByte(int.data));
    }
    function toUShortOrNull($receiver) {
      return toUShortOrNull_0($receiver, 10);
    }
    function toUShortOrNull_0($receiver, radix) {
      var tmp$;
      tmp$ = toUIntOrNull_0($receiver, radix);
      if (tmp$ == null) {
        return null;
      }var int = tmp$;
      if (uintCompare(int.data, (new UInt(UShort$Companion_getInstance().MAX_VALUE.data & 65535)).data) > 0)
        return null;
      return new UShort(toShort(int.data));
    }
    function toUIntOrNull($receiver) {
      return toUIntOrNull_0($receiver, 10);
    }
    function toUIntOrNull_0($receiver, radix) {
      checkRadix(radix);
      var length = $receiver.length;
      if (length === 0)
        return null;
      var limit = UInt$Companion_getInstance().MAX_VALUE;
      var start;
      var firstChar = $receiver.charCodeAt(0);
      if (firstChar < 48) {
        if (length === 1 || firstChar !== 43)
          return null;
        start = 1;
      } else {
        start = 0;
      }
      var limitForMaxRadix = new UInt(119304647);
      var limitBeforeMul = limitForMaxRadix;
      var uradix = new UInt(radix);
      var result = new UInt(0);
      for (var i = start; i < length; i++) {
        var digit = digitOf($receiver.charCodeAt(i), radix);
        if (digit < 0)
          return null;
        if (uintCompare(result.data, limitBeforeMul.data) > 0) {
          if (limitBeforeMul != null ? limitBeforeMul.equals(limitForMaxRadix) : null) {
            limitBeforeMul = uintDivide(limit, uradix);
            if (uintCompare(result.data, limitBeforeMul.data) > 0) {
              return null;
            }} else {
            return null;
          }
        }result = new UInt(Kotlin.imul(result.data, uradix.data));
        var beforeAdding = result;
        result = new UInt(result.data + (new UInt(digit)).data | 0);
        if (uintCompare(result.data, beforeAdding.data) < 0)
          return null;
      }
      return result;
    }
    function toULongOrNull($receiver) {
      return toULongOrNull_0($receiver, 10);
    }
    function toULongOrNull_0($receiver, radix) {
      checkRadix(radix);
      var length = $receiver.length;
      if (length === 0)
        return null;
      var limit = ULong$Companion_getInstance().MAX_VALUE;
      var start;
      var firstChar = $receiver.charCodeAt(0);
      if (firstChar < 48) {
        if (length === 1 || firstChar !== 43)
          return null;
        start = 1;
      } else {
        start = 0;
      }
      var limitForMaxRadix = new ULong(new Kotlin.Long(477218588, 119304647));
      var limitBeforeMul = limitForMaxRadix;
      var uradix = new ULong(Kotlin.Long.fromInt(radix));
      var result = new ULong(Kotlin.Long.ZERO);
      for (var i = start; i < length; i++) {
        var digit = digitOf($receiver.charCodeAt(i), radix);
        if (digit < 0)
          return null;
        if (ulongCompare(result.data, limitBeforeMul.data) > 0) {
          if (limitBeforeMul != null ? limitBeforeMul.equals(limitForMaxRadix) : null) {
            limitBeforeMul = ulongDivide(limit, uradix);
            if (ulongCompare(result.data, limitBeforeMul.data) > 0) {
              return null;
            }} else {
            return null;
          }
        }result = new ULong(result.data.multiply(uradix.data));
        var beforeAdding = result;
        result = new ULong(result.data.add((new ULong(Kotlin.Long.fromInt((new UInt(digit)).data).and(L4294967295))).data));
        if (ulongCompare(result.data, beforeAdding.data) < 0)
          return null;
      }
      return result;
    }
    function uintCompare(v1, v2) {
      return Kotlin.primitiveCompareTo(v1 ^ -2147483648, v2 ^ -2147483648);
    }
    function ulongCompare(v1, v2) {
      return v1.xor(Long$Companion$MIN_VALUE).compareTo_11rb$(v2.xor(Long$Companion$MIN_VALUE));
    }
    function uintDivide(v1, v2) {
      return new UInt(Kotlin.Long.fromInt(v1.data).and(L4294967295).div(Kotlin.Long.fromInt(v2.data).and(L4294967295)).toInt());
    }
    function uintRemainder(v1, v2) {
      return new UInt(Kotlin.Long.fromInt(v1.data).and(L4294967295).modulo(Kotlin.Long.fromInt(v2.data).and(L4294967295)).toInt());
    }
    function ulongDivide(v1, v2) {
      var dividend = v1.data;
      var divisor = v2.data;
      if (divisor.toNumber() < 0) {
        return ulongCompare(v1.data, v2.data) < 0 ? new ULong(L0) : new ULong(L1);
      }if (dividend.toNumber() >= 0) {
        return new ULong(dividend.div(divisor));
      }var quotient = dividend.shiftRightUnsigned(1).div(divisor).shiftLeft(1);
      var rem = dividend.subtract(quotient.multiply(divisor));
      return new ULong(quotient.add(Kotlin.Long.fromInt(ulongCompare((new ULong(rem)).data, (new ULong(divisor)).data) >= 0 ? 1 : 0)));
    }
    function ulongRemainder(v1, v2) {
      var tmp$;
      var dividend = v1.data;
      var divisor = v2.data;
      if (divisor.toNumber() < 0) {
        if (ulongCompare(v1.data, v2.data) < 0) {
          tmp$ = v1;
        } else {
          tmp$ = new ULong(v1.data.subtract(v2.data));
        }
        return tmp$;
      }if (dividend.toNumber() >= 0) {
        return new ULong(dividend.modulo(divisor));
      }var quotient = dividend.shiftRightUnsigned(1).div(divisor).shiftLeft(1);
      var rem = dividend.subtract(quotient.multiply(divisor));
      return new ULong(rem.subtract(ulongCompare((new ULong(rem)).data, (new ULong(divisor)).data) >= 0 ? divisor : L0));
    }
    function doubleToUInt(v) {
      if (isNaN_0(v))
        return new UInt(0);
      else {
        if (v <= uintToDouble(UInt$Companion_getInstance().MIN_VALUE.data))
          return UInt$Companion_getInstance().MIN_VALUE;
        else {
          if (v >= uintToDouble(UInt$Companion_getInstance().MAX_VALUE.data))
            return UInt$Companion_getInstance().MAX_VALUE;
          else if (v <= 2147483647) {
            return new UInt(numberToInt(v));
          } else {
            return new UInt((new UInt(numberToInt(v - 2147483647))).data + (new UInt(2147483647)).data | 0);
          }
        }
      }
    }
    function doubleToULong(v) {
      if (isNaN_0(v))
        return new ULong(Kotlin.Long.ZERO);
      else {
        if (v <= ulongToDouble(ULong$Companion_getInstance().MIN_VALUE.data))
          return ULong$Companion_getInstance().MIN_VALUE;
        else {
          if (v >= ulongToDouble(ULong$Companion_getInstance().MAX_VALUE.data))
            return ULong$Companion_getInstance().MAX_VALUE;
          else if (v < Long$Companion$MAX_VALUE.toNumber()) {
            return new ULong(Kotlin.Long.fromNumber(v));
          } else {
            return new ULong((new ULong(Kotlin.Long.fromNumber(v - 9.223372036854776E18))).data.add((new ULong(Kotlin.Long.MIN_VALUE)).data));
          }
        }
      }
    }
    function uintToDouble(v) {
      return (v & 2147483647) + (v >>> 31 << 30) * 2;
    }
    function ulongToDouble(v) {
      return v.shiftRightUnsigned(11).toNumber() * 2048 + v.and(L2047).toNumber();
    }
    function ulongToString(v) {
      return ulongToString_0(v, 10);
    }
    function ulongToString_0(v, base) {
      if (v.toNumber() >= 0)
        return toString_0(v, base);
      var quotient = v.shiftRightUnsigned(1).div(Kotlin.Long.fromInt(base)).shiftLeft(1);
      var rem = v.subtract(quotient.multiply(Kotlin.Long.fromInt(base)));
      if (rem.toNumber() >= base) {
        rem = rem.subtract(Kotlin.Long.fromInt(base));
        quotient = quotient.add(Kotlin.Long.fromInt(1));
      }return toString_0(quotient, base) + toString_0(rem, base);
    }
    function ExperimentalUnsignedTypes() {
    }
    ExperimentalUnsignedTypes.$metadata$ = {kind: Kind_CLASS, simpleName: 'ExperimentalUnsignedTypes', interfaces: [Annotation]};
    var package$kotlin = _.kotlin || (_.kotlin = {});
    var package$collections = package$kotlin.collections || (package$kotlin.collections = {});
    package$collections.contains_mjy6jw$ = contains;
    package$collections.contains_jlnu8a$ = contains_0;
    package$collections.contains_s7ir3o$ = contains_1;
    package$collections.contains_c03ot6$ = contains_2;
    package$collections.contains_uxdaoa$ = contains_3;
    package$collections.contains_omthmc$ = contains_4;
    package$collections.contains_taaqy$ = contains_5;
    package$collections.contains_yax8s4$ = contains_6;
    package$collections.contains_o2f9me$ = contains_7;
    package$collections.get_lastIndex_m7z4lg$ = get_lastIndex;
    package$collections.get_lastIndex_964n91$ = get_lastIndex_0;
    package$collections.get_lastIndex_i2lc79$ = get_lastIndex_1;
    package$collections.get_lastIndex_tmsbgo$ = get_lastIndex_2;
    package$collections.get_lastIndex_se6h4x$ = get_lastIndex_3;
    package$collections.get_lastIndex_rjqryz$ = get_lastIndex_4;
    package$collections.get_lastIndex_bvy38s$ = get_lastIndex_5;
    package$collections.get_lastIndex_l1lu5t$ = get_lastIndex_6;
    package$collections.get_lastIndex_355ntz$ = get_lastIndex_7;
    package$collections.getOrNull_8ujjk8$ = getOrNull;
    package$collections.getOrNull_mrm5p$ = getOrNull_0;
    package$collections.getOrNull_m2jy6x$ = getOrNull_1;
    package$collections.getOrNull_c03ot6$ = getOrNull_2;
    package$collections.getOrNull_3aefkx$ = getOrNull_3;
    package$collections.getOrNull_rblqex$ = getOrNull_4;
    package$collections.getOrNull_xgrzbe$ = getOrNull_5;
    package$collections.getOrNull_1qu12l$ = getOrNull_6;
    package$collections.getOrNull_gtcw5h$ = getOrNull_7;
    package$collections.firstOrNull_sfx99b$ = firstOrNull_8;
    package$collections.firstOrNull_c3i447$ = firstOrNull_9;
    package$collections.firstOrNull_247xw3$ = firstOrNull_10;
    package$collections.firstOrNull_il4kyb$ = firstOrNull_11;
    package$collections.firstOrNull_i1oc7r$ = firstOrNull_12;
    package$collections.firstOrNull_u4nq1f$ = firstOrNull_13;
    package$collections.firstOrNull_3vq27r$ = firstOrNull_14;
    package$collections.firstOrNull_xffwn9$ = firstOrNull_15;
    package$collections.firstOrNull_3ji0pj$ = firstOrNull_16;
    package$collections.lastOrNull_sfx99b$ = lastOrNull_8;
    package$collections.lastOrNull_c3i447$ = lastOrNull_9;
    package$collections.lastOrNull_247xw3$ = lastOrNull_10;
    package$collections.lastOrNull_il4kyb$ = lastOrNull_11;
    package$collections.lastOrNull_i1oc7r$ = lastOrNull_12;
    package$collections.lastOrNull_u4nq1f$ = lastOrNull_13;
    package$collections.lastOrNull_3vq27r$ = lastOrNull_14;
    package$collections.lastOrNull_xffwn9$ = lastOrNull_15;
    package$collections.lastOrNull_3ji0pj$ = lastOrNull_16;
    package$collections.first_us0mfu$ = first;
    package$collections.first_964n91$ = first_0;
    package$collections.first_i2lc79$ = first_1;
    package$collections.first_tmsbgo$ = first_2;
    package$collections.first_se6h4x$ = first_3;
    package$collections.first_rjqryz$ = first_4;
    package$collections.first_bvy38s$ = first_5;
    package$collections.first_l1lu5t$ = first_6;
    package$collections.first_355ntz$ = first_7;
    package$collections.first_sfx99b$ = first_8;
    package$collections.first_c3i447$ = first_9;
    package$collections.first_247xw3$ = first_10;
    package$collections.first_il4kyb$ = first_11;
    package$collections.first_i1oc7r$ = first_12;
    package$collections.first_u4nq1f$ = first_13;
    package$collections.first_3vq27r$ = first_14;
    package$collections.first_xffwn9$ = first_15;
    package$collections.first_3ji0pj$ = first_16;
    package$collections.firstOrNull_us0mfu$ = firstOrNull;
    package$collections.firstOrNull_964n91$ = firstOrNull_0;
    package$collections.firstOrNull_i2lc79$ = firstOrNull_1;
    package$collections.firstOrNull_tmsbgo$ = firstOrNull_2;
    package$collections.firstOrNull_se6h4x$ = firstOrNull_3;
    package$collections.firstOrNull_rjqryz$ = firstOrNull_4;
    package$collections.firstOrNull_bvy38s$ = firstOrNull_5;
    package$collections.firstOrNull_l1lu5t$ = firstOrNull_6;
    package$collections.firstOrNull_355ntz$ = firstOrNull_7;
    package$collections.indexOf_mjy6jw$ = indexOf;
    package$collections.indexOf_jlnu8a$ = indexOf_0;
    package$collections.indexOf_s7ir3o$ = indexOf_1;
    package$collections.indexOf_c03ot6$ = indexOf_2;
    package$collections.indexOf_uxdaoa$ = indexOf_3;
    package$collections.indexOf_omthmc$ = indexOf_4;
    package$collections.indexOf_taaqy$ = indexOf_5;
    package$collections.indexOf_yax8s4$ = indexOf_6;
    package$collections.indexOf_o2f9me$ = indexOf_7;
    package$collections.indexOfFirst_sfx99b$ = indexOfFirst;
    package$collections.indexOfFirst_c3i447$ = indexOfFirst_0;
    package$collections.indexOfFirst_247xw3$ = indexOfFirst_1;
    package$collections.indexOfFirst_il4kyb$ = indexOfFirst_2;
    package$collections.indexOfFirst_i1oc7r$ = indexOfFirst_3;
    package$collections.indexOfFirst_u4nq1f$ = indexOfFirst_4;
    package$collections.indexOfFirst_3vq27r$ = indexOfFirst_5;
    package$collections.indexOfFirst_xffwn9$ = indexOfFirst_6;
    package$collections.indexOfFirst_3ji0pj$ = indexOfFirst_7;
    package$collections.get_indices_m7z4lg$ = get_indices;
    var package$ranges = package$kotlin.ranges || (package$kotlin.ranges = {});
    package$ranges.reversed_zf1xzc$ = reversed_9;
    package$collections.indexOfLast_sfx99b$ = indexOfLast;
    package$collections.get_indices_964n91$ = get_indices_0;
    package$collections.indexOfLast_c3i447$ = indexOfLast_0;
    package$collections.get_indices_i2lc79$ = get_indices_1;
    package$collections.indexOfLast_247xw3$ = indexOfLast_1;
    package$collections.get_indices_tmsbgo$ = get_indices_2;
    package$collections.indexOfLast_il4kyb$ = indexOfLast_2;
    package$collections.get_indices_se6h4x$ = get_indices_3;
    package$collections.indexOfLast_i1oc7r$ = indexOfLast_3;
    package$collections.get_indices_rjqryz$ = get_indices_4;
    package$collections.indexOfLast_u4nq1f$ = indexOfLast_4;
    package$collections.get_indices_bvy38s$ = get_indices_5;
    package$collections.indexOfLast_3vq27r$ = indexOfLast_5;
    package$collections.get_indices_l1lu5t$ = get_indices_6;
    package$collections.indexOfLast_xffwn9$ = indexOfLast_6;
    package$collections.get_indices_355ntz$ = get_indices_7;
    package$collections.indexOfLast_3ji0pj$ = indexOfLast_7;
    package$collections.last_us0mfu$ = last;
    package$collections.last_964n91$ = last_0;
    package$collections.last_i2lc79$ = last_1;
    package$collections.last_tmsbgo$ = last_2;
    package$collections.last_se6h4x$ = last_3;
    package$collections.last_rjqryz$ = last_4;
    package$collections.last_bvy38s$ = last_5;
    package$collections.last_l1lu5t$ = last_6;
    package$collections.last_355ntz$ = last_7;
    package$collections.last_sfx99b$ = last_8;
    package$collections.last_c3i447$ = last_9;
    package$collections.last_247xw3$ = last_10;
    package$collections.last_il4kyb$ = last_11;
    package$collections.last_i1oc7r$ = last_12;
    package$collections.last_u4nq1f$ = last_13;
    package$collections.last_3vq27r$ = last_14;
    package$collections.last_xffwn9$ = last_15;
    package$collections.last_3ji0pj$ = last_16;
    package$collections.lastIndexOf_mjy6jw$ = lastIndexOf;
    package$collections.lastIndexOf_jlnu8a$ = lastIndexOf_0;
    package$collections.lastIndexOf_s7ir3o$ = lastIndexOf_1;
    package$collections.lastIndexOf_c03ot6$ = lastIndexOf_2;
    package$collections.lastIndexOf_uxdaoa$ = lastIndexOf_3;
    package$collections.lastIndexOf_omthmc$ = lastIndexOf_4;
    package$collections.lastIndexOf_taaqy$ = lastIndexOf_5;
    package$collections.lastIndexOf_yax8s4$ = lastIndexOf_6;
    package$collections.lastIndexOf_o2f9me$ = lastIndexOf_7;
    package$collections.lastOrNull_us0mfu$ = lastOrNull;
    package$collections.lastOrNull_964n91$ = lastOrNull_0;
    package$collections.lastOrNull_i2lc79$ = lastOrNull_1;
    package$collections.lastOrNull_tmsbgo$ = lastOrNull_2;
    package$collections.lastOrNull_se6h4x$ = lastOrNull_3;
    package$collections.lastOrNull_rjqryz$ = lastOrNull_4;
    package$collections.lastOrNull_bvy38s$ = lastOrNull_5;
    package$collections.lastOrNull_l1lu5t$ = lastOrNull_6;
    package$collections.lastOrNull_355ntz$ = lastOrNull_7;
    var package$random = package$kotlin.random || (package$kotlin.random = {});
    package$random.Random = Random;
    package$collections.random_lj338n$ = random_8;
    package$collections.random_ciead0$ = random_9;
    package$collections.random_wayomy$ = random_10;
    package$collections.random_os0q87$ = random_11;
    package$collections.random_2uk8lc$ = random_12;
    package$collections.random_zcvl96$ = random_13;
    package$collections.random_k31a39$ = random_14;
    package$collections.random_mwcbea$ = random_15;
    package$collections.random_8kgqmy$ = random_16;
    package$collections.randomOrNull_lj338n$ = randomOrNull_8;
    package$collections.randomOrNull_ciead0$ = randomOrNull_9;
    package$collections.randomOrNull_wayomy$ = randomOrNull_10;
    package$collections.randomOrNull_os0q87$ = randomOrNull_11;
    package$collections.randomOrNull_2uk8lc$ = randomOrNull_12;
    package$collections.randomOrNull_zcvl96$ = randomOrNull_13;
    package$collections.randomOrNull_k31a39$ = randomOrNull_14;
    package$collections.randomOrNull_mwcbea$ = randomOrNull_15;
    package$collections.randomOrNull_8kgqmy$ = randomOrNull_16;
    package$collections.single_us0mfu$ = single;
    package$collections.single_964n91$ = single_0;
    package$collections.single_i2lc79$ = single_1;
    package$collections.single_tmsbgo$ = single_2;
    package$collections.single_se6h4x$ = single_3;
    package$collections.single_rjqryz$ = single_4;
    package$collections.single_bvy38s$ = single_5;
    package$collections.single_l1lu5t$ = single_6;
    package$collections.single_355ntz$ = single_7;
    package$kotlin.IllegalArgumentException_init_pdl1vj$ = IllegalArgumentException_init_0;
    package$collections.single_sfx99b$ = single_8;
    package$collections.single_c3i447$ = single_9;
    package$collections.single_247xw3$ = single_10;
    package$collections.single_il4kyb$ = single_11;
    package$collections.single_i1oc7r$ = single_12;
    package$collections.single_u4nq1f$ = single_13;
    package$collections.single_3vq27r$ = single_14;
    package$collections.single_xffwn9$ = single_15;
    package$collections.single_3ji0pj$ = single_16;
    package$collections.singleOrNull_us0mfu$ = singleOrNull;
    package$collections.singleOrNull_964n91$ = singleOrNull_0;
    package$collections.singleOrNull_i2lc79$ = singleOrNull_1;
    package$collections.singleOrNull_tmsbgo$ = singleOrNull_2;
    package$collections.singleOrNull_se6h4x$ = singleOrNull_3;
    package$collections.singleOrNull_rjqryz$ = singleOrNull_4;
    package$collections.singleOrNull_bvy38s$ = singleOrNull_5;
    package$collections.singleOrNull_l1lu5t$ = singleOrNull_6;
    package$collections.singleOrNull_355ntz$ = singleOrNull_7;
    package$collections.singleOrNull_sfx99b$ = singleOrNull_8;
    package$collections.singleOrNull_c3i447$ = singleOrNull_9;
    package$collections.singleOrNull_247xw3$ = singleOrNull_10;
    package$collections.singleOrNull_il4kyb$ = singleOrNull_11;
    package$collections.singleOrNull_i1oc7r$ = singleOrNull_12;
    package$collections.singleOrNull_u4nq1f$ = singleOrNull_13;
    package$collections.singleOrNull_3vq27r$ = singleOrNull_14;
    package$collections.singleOrNull_xffwn9$ = singleOrNull_15;
    package$collections.singleOrNull_3ji0pj$ = singleOrNull_16;
    package$collections.drop_8ujjk8$ = drop;
    package$collections.drop_mrm5p$ = drop_0;
    package$collections.drop_m2jy6x$ = drop_1;
    package$collections.drop_c03ot6$ = drop_2;
    package$collections.drop_3aefkx$ = drop_3;
    package$collections.drop_rblqex$ = drop_4;
    package$collections.drop_xgrzbe$ = drop_5;
    package$collections.drop_1qu12l$ = drop_6;
    package$collections.drop_gtcw5h$ = drop_7;
    package$collections.dropLast_8ujjk8$ = dropLast;
    package$collections.dropLast_mrm5p$ = dropLast_0;
    package$collections.dropLast_m2jy6x$ = dropLast_1;
    package$collections.dropLast_c03ot6$ = dropLast_2;
    package$collections.dropLast_3aefkx$ = dropLast_3;
    package$collections.dropLast_rblqex$ = dropLast_4;
    package$collections.dropLast_xgrzbe$ = dropLast_5;
    package$collections.dropLast_1qu12l$ = dropLast_6;
    package$collections.dropLast_gtcw5h$ = dropLast_7;
    package$collections.take_8ujjk8$ = take;
    package$collections.emptyList_287e2$ = emptyList;
    package$collections.dropLastWhile_sfx99b$ = dropLastWhile;
    package$collections.take_mrm5p$ = take_0;
    package$collections.dropLastWhile_c3i447$ = dropLastWhile_0;
    package$collections.take_m2jy6x$ = take_1;
    package$collections.dropLastWhile_247xw3$ = dropLastWhile_1;
    package$collections.take_c03ot6$ = take_2;
    package$collections.dropLastWhile_il4kyb$ = dropLastWhile_2;
    package$collections.take_3aefkx$ = take_3;
    package$collections.dropLastWhile_i1oc7r$ = dropLastWhile_3;
    package$collections.take_rblqex$ = take_4;
    package$collections.dropLastWhile_u4nq1f$ = dropLastWhile_4;
    package$collections.take_xgrzbe$ = take_5;
    package$collections.dropLastWhile_3vq27r$ = dropLastWhile_5;
    package$collections.take_1qu12l$ = take_6;
    package$collections.dropLastWhile_xffwn9$ = dropLastWhile_6;
    package$collections.take_gtcw5h$ = take_7;
    package$collections.dropLastWhile_3ji0pj$ = dropLastWhile_7;
    package$collections.ArrayList_init_287e2$ = ArrayList_init;
    package$collections.dropWhile_sfx99b$ = dropWhile;
    package$collections.dropWhile_c3i447$ = dropWhile_0;
    package$collections.dropWhile_247xw3$ = dropWhile_1;
    package$collections.dropWhile_il4kyb$ = dropWhile_2;
    package$collections.dropWhile_i1oc7r$ = dropWhile_3;
    package$collections.dropWhile_u4nq1f$ = dropWhile_4;
    package$collections.dropWhile_3vq27r$ = dropWhile_5;
    package$collections.dropWhile_xffwn9$ = dropWhile_6;
    package$collections.dropWhile_3ji0pj$ = dropWhile_7;
    package$collections.filterTo_ywpv22$ = filterTo;
    package$collections.filter_sfx99b$ = filter;
    package$collections.filterTo_oqzfqb$ = filterTo_0;
    package$collections.filter_c3i447$ = filter_0;
    package$collections.filterTo_pth3ij$ = filterTo_1;
    package$collections.filter_247xw3$ = filter_1;
    package$collections.filterTo_fz4mzi$ = filterTo_2;
    package$collections.filter_il4kyb$ = filter_2;
    package$collections.filterTo_xddlih$ = filterTo_3;
    package$collections.filter_i1oc7r$ = filter_3;
    package$collections.filterTo_b4wiqz$ = filterTo_4;
    package$collections.filter_u4nq1f$ = filter_4;
    package$collections.filterTo_y6u45w$ = filterTo_5;
    package$collections.filter_3vq27r$ = filter_5;
    package$collections.filterTo_soq3qv$ = filterTo_6;
    package$collections.filter_xffwn9$ = filter_6;
    package$collections.filterTo_7as3in$ = filterTo_7;
    package$collections.filter_3ji0pj$ = filter_7;
    package$collections.filterIndexedTo_yy1162$ = filterIndexedTo;
    package$collections.filterIndexed_1x1hc5$ = filterIndexed;
    package$collections.filterIndexedTo_9utof$ = filterIndexedTo_0;
    package$collections.filterIndexed_muebcr$ = filterIndexed_0;
    package$collections.filterIndexedTo_9c7hyn$ = filterIndexedTo_1;
    package$collections.filterIndexed_na3tu9$ = filterIndexed_1;
    package$collections.filterIndexedTo_xxq4i$ = filterIndexedTo_2;
    package$collections.filterIndexed_j54otz$ = filterIndexed_2;
    package$collections.filterIndexedTo_sp77il$ = filterIndexedTo_3;
    package$collections.filterIndexed_8y5rp7$ = filterIndexed_3;
    package$collections.filterIndexedTo_1eenap$ = filterIndexedTo_4;
    package$collections.filterIndexed_ngxnyp$ = filterIndexed_4;
    package$collections.filterIndexedTo_a0ikl4$ = filterIndexedTo_5;
    package$collections.filterIndexed_4abx9h$ = filterIndexed_5;
    package$collections.filterIndexedTo_m16605$ = filterIndexedTo_6;
    package$collections.filterIndexed_40mjvt$ = filterIndexed_6;
    package$collections.filterIndexedTo_evsozx$ = filterIndexedTo_7;
    package$collections.filterIndexed_es6ekl$ = filterIndexed_7;
    package$collections.forEachIndexed_arhcu7$ = forEachIndexed;
    package$collections.forEachIndexed_1b870r$ = forEachIndexed_0;
    package$collections.forEachIndexed_2042pt$ = forEachIndexed_1;
    package$collections.forEachIndexed_71hk2v$ = forEachIndexed_2;
    package$collections.forEachIndexed_xp2l85$ = forEachIndexed_3;
    package$collections.forEachIndexed_fd0uwv$ = forEachIndexed_4;
    package$collections.forEachIndexed_fchhez$ = forEachIndexed_5;
    package$collections.forEachIndexed_jzv3dz$ = forEachIndexed_6;
    package$collections.forEachIndexed_u1r9l7$ = forEachIndexed_7;
    package$collections.filterNotTo_ywpv22$ = filterNotTo;
    package$collections.filterNot_sfx99b$ = filterNot;
    package$collections.filterNotTo_oqzfqb$ = filterNotTo_0;
    package$collections.filterNot_c3i447$ = filterNot_0;
    package$collections.filterNotTo_pth3ij$ = filterNotTo_1;
    package$collections.filterNot_247xw3$ = filterNot_1;
    package$collections.filterNotTo_fz4mzi$ = filterNotTo_2;
    package$collections.filterNot_il4kyb$ = filterNot_2;
    package$collections.filterNotTo_xddlih$ = filterNotTo_3;
    package$collections.filterNot_i1oc7r$ = filterNot_3;
    package$collections.filterNotTo_b4wiqz$ = filterNotTo_4;
    package$collections.filterNot_u4nq1f$ = filterNot_4;
    package$collections.filterNotTo_y6u45w$ = filterNotTo_5;
    package$collections.filterNot_3vq27r$ = filterNot_5;
    package$collections.filterNotTo_soq3qv$ = filterNotTo_6;
    package$collections.filterNot_xffwn9$ = filterNot_6;
    package$collections.filterNotTo_7as3in$ = filterNotTo_7;
    package$collections.filterNot_3ji0pj$ = filterNot_7;
    package$collections.filterNotNull_emfgvx$ = filterNotNull;
    package$collections.filterNotNullTo_hhiqfl$ = filterNotNullTo;
    package$collections.slice_l0m14x$ = slice;
    package$collections.slice_dww5cs$ = slice_0;
    package$collections.slice_stgke$ = slice_1;
    package$collections.slice_bo8l67$ = slice_2;
    package$collections.slice_renlpk$ = slice_3;
    package$collections.slice_l0yznm$ = slice_4;
    package$collections.slice_eezeoj$ = slice_5;
    package$collections.slice_99nmd2$ = slice_6;
    package$collections.slice_bq4su$ = slice_7;
    package$collections.slice_ojs19h$ = slice_8;
    package$collections.slice_9qpjb4$ = slice_9;
    package$collections.slice_uttdbu$ = slice_10;
    package$collections.slice_e3izir$ = slice_11;
    package$collections.slice_b97tkk$ = slice_12;
    package$collections.slice_43gn6u$ = slice_13;
    package$collections.slice_tsyzex$ = slice_14;
    package$collections.slice_5rv4nu$ = slice_15;
    package$collections.slice_f1e7g2$ = slice_16;
    package$collections.sliceArray_fzrmze$ = sliceArray;
    package$collections.sliceArray_c5a9lg$ = sliceArray_0;
    package$collections.sliceArray_w9izwu$ = sliceArray_1;
    package$collections.sliceArray_q1yphb$ = sliceArray_2;
    package$collections.sliceArray_ofyxrs$ = sliceArray_3;
    package$collections.sliceArray_3hmy1e$ = sliceArray_4;
    package$collections.sliceArray_rv5q3n$ = sliceArray_5;
    package$collections.sliceArray_ht9wl6$ = sliceArray_6;
    package$collections.sliceArray_6pwjvi$ = sliceArray_7;
    package$collections.sliceArray_8r7b3e$ = sliceArray_8;
    package$collections.sliceArray_dww5cs$ = sliceArray_9;
    package$collections.sliceArray_stgke$ = sliceArray_10;
    package$collections.sliceArray_bo8l67$ = sliceArray_11;
    package$collections.sliceArray_renlpk$ = sliceArray_12;
    package$collections.sliceArray_l0yznm$ = sliceArray_13;
    package$collections.sliceArray_eezeoj$ = sliceArray_14;
    package$collections.sliceArray_99nmd2$ = sliceArray_15;
    package$collections.sliceArray_bq4su$ = sliceArray_16;
    package$collections.takeLast_8ujjk8$ = takeLast;
    package$collections.takeLast_mrm5p$ = takeLast_0;
    package$collections.takeLast_m2jy6x$ = takeLast_1;
    package$collections.takeLast_c03ot6$ = takeLast_2;
    package$collections.takeLast_3aefkx$ = takeLast_3;
    package$collections.takeLast_rblqex$ = takeLast_4;
    package$collections.takeLast_xgrzbe$ = takeLast_5;
    package$collections.takeLast_1qu12l$ = takeLast_6;
    package$collections.takeLast_gtcw5h$ = takeLast_7;
    package$collections.toList_us0mfu$ = toList;
    package$collections.takeLastWhile_sfx99b$ = takeLastWhile;
    package$collections.toList_964n91$ = toList_0;
    package$collections.takeLastWhile_c3i447$ = takeLastWhile_0;
    package$collections.toList_i2lc79$ = toList_1;
    package$collections.takeLastWhile_247xw3$ = takeLastWhile_1;
    package$collections.toList_tmsbgo$ = toList_2;
    package$collections.takeLastWhile_il4kyb$ = takeLastWhile_2;
    package$collections.toList_se6h4x$ = toList_3;
    package$collections.takeLastWhile_i1oc7r$ = takeLastWhile_3;
    package$collections.toList_rjqryz$ = toList_4;
    package$collections.takeLastWhile_u4nq1f$ = takeLastWhile_4;
    package$collections.toList_bvy38s$ = toList_5;
    package$collections.takeLastWhile_3vq27r$ = takeLastWhile_5;
    package$collections.toList_l1lu5t$ = toList_6;
    package$collections.takeLastWhile_xffwn9$ = takeLastWhile_6;
    package$collections.toList_355ntz$ = toList_7;
    package$collections.takeLastWhile_3ji0pj$ = takeLastWhile_7;
    package$collections.takeWhile_sfx99b$ = takeWhile;
    package$collections.takeWhile_c3i447$ = takeWhile_0;
    package$collections.takeWhile_247xw3$ = takeWhile_1;
    package$collections.takeWhile_il4kyb$ = takeWhile_2;
    package$collections.takeWhile_i1oc7r$ = takeWhile_3;
    package$collections.takeWhile_u4nq1f$ = takeWhile_4;
    package$collections.takeWhile_3vq27r$ = takeWhile_5;
    package$collections.takeWhile_xffwn9$ = takeWhile_6;
    package$collections.takeWhile_3ji0pj$ = takeWhile_7;
    package$collections.reverse_4b5429$ = reverse;
    package$collections.reverse_964n91$ = reverse_0;
    package$collections.reverse_i2lc79$ = reverse_1;
    package$collections.reverse_tmsbgo$ = reverse_2;
    package$collections.reverse_se6h4x$ = reverse_3;
    package$collections.reverse_rjqryz$ = reverse_4;
    package$collections.reverse_bvy38s$ = reverse_5;
    package$collections.reverse_l1lu5t$ = reverse_6;
    package$collections.reverse_355ntz$ = reverse_7;
    package$collections.reversed_us0mfu$ = reversed;
    package$collections.reversed_964n91$ = reversed_0;
    package$collections.reversed_i2lc79$ = reversed_1;
    package$collections.reversed_tmsbgo$ = reversed_2;
    package$collections.reversed_se6h4x$ = reversed_3;
    package$collections.reversed_rjqryz$ = reversed_4;
    package$collections.reversed_bvy38s$ = reversed_5;
    package$collections.reversed_l1lu5t$ = reversed_6;
    package$collections.reversed_355ntz$ = reversed_7;
    package$collections.reversedArray_4b5429$ = reversedArray;
    package$collections.reversedArray_964n91$ = reversedArray_0;
    package$collections.reversedArray_i2lc79$ = reversedArray_1;
    package$collections.reversedArray_tmsbgo$ = reversedArray_2;
    package$collections.reversedArray_se6h4x$ = reversedArray_3;
    package$collections.reversedArray_rjqryz$ = reversedArray_4;
    package$collections.reversedArray_bvy38s$ = reversedArray_5;
    package$collections.reversedArray_l1lu5t$ = reversedArray_6;
    package$collections.reversedArray_355ntz$ = reversedArray_7;
    package$collections.sortWith_iwcb0m$ = sortWith;
    package$collections.sortBy_99hh6x$ = sortBy;
    package$collections.sortByDescending_99hh6x$ = sortByDescending;
    package$collections.sortDescending_pbinho$ = sortDescending;
    package$collections.sortDescending_964n91$ = sortDescending_0;
    package$collections.sortDescending_i2lc79$ = sortDescending_1;
    package$collections.sortDescending_tmsbgo$ = sortDescending_2;
    package$collections.sortDescending_se6h4x$ = sortDescending_3;
    package$collections.sortDescending_rjqryz$ = sortDescending_4;
    package$collections.sortDescending_bvy38s$ = sortDescending_5;
    package$collections.sortDescending_355ntz$ = sortDescending_6;
    package$collections.sorted_pbinho$ = sorted;
    package$collections.sorted_964n91$ = sorted_0;
    package$collections.sorted_i2lc79$ = sorted_1;
    package$collections.sorted_tmsbgo$ = sorted_2;
    package$collections.sorted_se6h4x$ = sorted_3;
    package$collections.sorted_rjqryz$ = sorted_4;
    package$collections.sorted_bvy38s$ = sorted_5;
    package$collections.sorted_355ntz$ = sorted_6;
    package$collections.sortedArray_j2hqw1$ = sortedArray;
    package$collections.sortedArray_964n91$ = sortedArray_0;
    package$collections.sortedArray_i2lc79$ = sortedArray_1;
    package$collections.sortedArray_tmsbgo$ = sortedArray_2;
    package$collections.sortedArray_se6h4x$ = sortedArray_3;
    package$collections.sortedArray_rjqryz$ = sortedArray_4;
    package$collections.sortedArray_bvy38s$ = sortedArray_5;
    package$collections.sortedArray_355ntz$ = sortedArray_6;
    package$collections.sortedArrayDescending_j2hqw1$ = sortedArrayDescending;
    package$collections.sortedArrayDescending_964n91$ = sortedArrayDescending_0;
    package$collections.sortedArrayDescending_i2lc79$ = sortedArrayDescending_1;
    package$collections.sortedArrayDescending_tmsbgo$ = sortedArrayDescending_2;
    package$collections.sortedArrayDescending_se6h4x$ = sortedArrayDescending_3;
    package$collections.sortedArrayDescending_rjqryz$ = sortedArrayDescending_4;
    package$collections.sortedArrayDescending_bvy38s$ = sortedArrayDescending_5;
    package$collections.sortedArrayDescending_355ntz$ = sortedArrayDescending_6;
    package$collections.sortedArrayWith_iwcb0m$ = sortedArrayWith;
    package$collections.sortedWith_iwcb0m$ = sortedWith;
    package$collections.sortedBy_99hh6x$ = sortedBy;
    package$collections.sortedWith_movtv6$ = sortedWith_0;
    package$collections.sortedBy_jirwv8$ = sortedBy_0;
    package$collections.sortedWith_u08rls$ = sortedWith_1;
    package$collections.sortedBy_p0tdr4$ = sortedBy_1;
    package$collections.sortedWith_rsw9pc$ = sortedWith_2;
    package$collections.sortedBy_30vlmi$ = sortedBy_2;
    package$collections.sortedWith_wqwa2y$ = sortedWith_3;
    package$collections.sortedBy_hom4ws$ = sortedBy_3;
    package$collections.sortedWith_1sg7gg$ = sortedWith_4;
    package$collections.sortedBy_ksd00w$ = sortedBy_4;
    package$collections.sortedWith_jucva8$ = sortedWith_5;
    package$collections.sortedBy_fvpt30$ = sortedBy_5;
    package$collections.sortedWith_7ffj0g$ = sortedWith_6;
    package$collections.sortedBy_xt360o$ = sortedBy_6;
    package$collections.sortedWith_7ncb86$ = sortedWith_7;
    package$collections.sortedBy_epurks$ = sortedBy_7;
    package$collections.sortedByDescending_99hh6x$ = sortedByDescending;
    package$collections.sortedByDescending_jirwv8$ = sortedByDescending_0;
    package$collections.sortedByDescending_p0tdr4$ = sortedByDescending_1;
    package$collections.sortedByDescending_30vlmi$ = sortedByDescending_2;
    package$collections.sortedByDescending_hom4ws$ = sortedByDescending_3;
    package$collections.sortedByDescending_ksd00w$ = sortedByDescending_4;
    package$collections.sortedByDescending_fvpt30$ = sortedByDescending_5;
    package$collections.sortedByDescending_xt360o$ = sortedByDescending_6;
    package$collections.sortedByDescending_epurks$ = sortedByDescending_7;
    package$collections.sortedDescending_pbinho$ = sortedDescending;
    package$collections.sortedDescending_964n91$ = sortedDescending_0;
    package$collections.sortedDescending_i2lc79$ = sortedDescending_1;
    package$collections.sortedDescending_tmsbgo$ = sortedDescending_2;
    package$collections.sortedDescending_se6h4x$ = sortedDescending_3;
    package$collections.sortedDescending_rjqryz$ = sortedDescending_4;
    package$collections.sortedDescending_bvy38s$ = sortedDescending_5;
    package$collections.sortedDescending_355ntz$ = sortedDescending_6;
    package$collections.toBooleanArray_xbflon$ = toBooleanArray;
    package$collections.toByteArray_vn5r1x$ = toByteArray;
    package$collections.toCharArray_vfshuv$ = toCharArray;
    package$collections.toDoubleArray_pnorak$ = toDoubleArray;
    package$collections.toFloatArray_529xol$ = toFloatArray;
    package$collections.toIntArray_5yd9ji$ = toIntArray;
    package$collections.toLongArray_r2b9hd$ = toLongArray;
    package$collections.toShortArray_t8c1id$ = toShortArray;
    package$collections.mapCapacity_za3lpa$ = mapCapacity;
    package$ranges.coerceAtLeast_dqglrj$ = coerceAtLeast_2;
    package$collections.LinkedHashMap_init_bwtc7$ = LinkedHashMap_init_2;
    package$collections.associateTo_t6a58$ = associateTo;
    package$collections.associate_51p84z$ = associate;
    package$collections.associateTo_30k0gw$ = associateTo_0;
    package$collections.associate_hllm27$ = associate_0;
    package$collections.associateTo_pdwiok$ = associateTo_1;
    package$collections.associate_21tl2r$ = associate_1;
    package$collections.associateTo_yjydda$ = associateTo_2;
    package$collections.associate_ff74x3$ = associate_2;
    package$collections.associateTo_o9od0g$ = associateTo_3;
    package$collections.associate_d7c9rj$ = associate_3;
    package$collections.associateTo_642zho$ = associateTo_4;
    package$collections.associate_ddcx1p$ = associate_4;
    package$collections.associateTo_t00y2o$ = associateTo_5;
    package$collections.associate_neh4lr$ = associate_5;
    package$collections.associateTo_l2eg58$ = associateTo_6;
    package$collections.associate_su3lit$ = associate_6;
    package$collections.associateTo_7k1sps$ = associateTo_7;
    package$collections.associate_2m77bl$ = associate_7;
    package$collections.associateByTo_jnbl5d$ = associateByTo;
    package$collections.associateBy_73x53s$ = associateBy;
    package$collections.associateByTo_6rsi3p$ = associateByTo_0;
    package$collections.associateBy_i1orpu$ = associateBy_0;
    package$collections.associateByTo_mvhbwl$ = associateByTo_1;
    package$collections.associateBy_2yxo7i$ = associateBy_1;
    package$collections.associateByTo_jk03w$ = associateByTo_2;
    package$collections.associateBy_vhfi20$ = associateBy_2;
    package$collections.associateByTo_fajp69$ = associateByTo_3;
    package$collections.associateBy_oifiz6$ = associateBy_3;
    package$collections.associateByTo_z2kljv$ = associateByTo_4;
    package$collections.associateBy_5k9h5a$ = associateBy_4;
    package$collections.associateByTo_s8dkm4$ = associateByTo_5;
    package$collections.associateBy_hbdsc2$ = associateBy_5;
    package$collections.associateByTo_ro4olb$ = associateByTo_6;
    package$collections.associateBy_8oadti$ = associateBy_6;
    package$collections.associateByTo_deafr$ = associateByTo_7;
    package$collections.associateBy_pmkh76$ = associateBy_7;
    package$collections.associateByTo_8rzqwv$ = associateByTo_8;
    package$collections.associateBy_67lihi$ = associateBy_8;
    package$collections.associateByTo_cne8q6$ = associateByTo_9;
    package$collections.associateBy_prlkfp$ = associateBy_9;
    package$collections.associateByTo_gcgqha$ = associateByTo_10;
    package$collections.associateBy_emzy0b$ = associateBy_10;
    package$collections.associateByTo_snsha9$ = associateByTo_11;
    package$collections.associateBy_5wtufc$ = associateBy_11;
    package$collections.associateByTo_ryii4m$ = associateByTo_12;
    package$collections.associateBy_hq1329$ = associateBy_12;
    package$collections.associateByTo_6a7lri$ = associateByTo_13;
    package$collections.associateBy_jjomwl$ = associateBy_13;
    package$collections.associateByTo_lxofut$ = associateByTo_14;
    package$collections.associateBy_bvjqb8$ = associateBy_14;
    package$collections.associateByTo_u9h8ze$ = associateByTo_15;
    package$collections.associateBy_hxvtq7$ = associateBy_15;
    package$collections.associateByTo_u7k4io$ = associateByTo_16;
    package$collections.associateBy_nlw5ll$ = associateBy_16;
    package$collections.toCollection_5n4o2z$ = toCollection;
    package$collections.toCollection_iu3dad$ = toCollection_0;
    package$collections.toCollection_wvb8kp$ = toCollection_1;
    package$collections.toCollection_u9aek7$ = toCollection_2;
    package$collections.toCollection_j1hzal$ = toCollection_3;
    package$collections.toCollection_tkc3iv$ = toCollection_4;
    package$collections.toCollection_hivqqf$ = toCollection_5;
    package$collections.toCollection_v35pav$ = toCollection_6;
    package$collections.toCollection_qezmjj$ = toCollection_7;
    package$collections.toHashSet_us0mfu$ = toHashSet;
    package$collections.toHashSet_964n91$ = toHashSet_0;
    package$collections.toHashSet_i2lc79$ = toHashSet_1;
    package$collections.toHashSet_tmsbgo$ = toHashSet_2;
    package$collections.toHashSet_se6h4x$ = toHashSet_3;
    package$collections.toHashSet_rjqryz$ = toHashSet_4;
    package$collections.toHashSet_bvy38s$ = toHashSet_5;
    package$collections.toHashSet_l1lu5t$ = toHashSet_6;
    package$collections.toHashSet_355ntz$ = toHashSet_7;
    package$collections.toMutableList_us0mfu$ = toMutableList;
    package$collections.toMutableList_964n91$ = toMutableList_0;
    package$collections.toMutableList_i2lc79$ = toMutableList_1;
    package$collections.toMutableList_tmsbgo$ = toMutableList_2;
    package$collections.toMutableList_se6h4x$ = toMutableList_3;
    package$collections.toMutableList_rjqryz$ = toMutableList_4;
    package$collections.toMutableList_bvy38s$ = toMutableList_5;
    package$collections.toMutableList_l1lu5t$ = toMutableList_6;
    package$collections.toMutableList_355ntz$ = toMutableList_7;
    package$collections.toSet_us0mfu$ = toSet;
    package$collections.toSet_964n91$ = toSet_0;
    package$collections.toSet_i2lc79$ = toSet_1;
    package$collections.toSet_tmsbgo$ = toSet_2;
    package$collections.toSet_se6h4x$ = toSet_3;
    package$collections.toSet_rjqryz$ = toSet_4;
    package$collections.toSet_bvy38s$ = toSet_5;
    package$collections.toSet_l1lu5t$ = toSet_6;
    package$collections.toSet_355ntz$ = toSet_7;
    package$collections.flatMapTo_qpz03$ = flatMapTo;
    package$collections.flatMap_m96iup$ = flatMap;
    package$collections.flatMapTo_hrglhs$ = flatMapTo_0;
    package$collections.flatMap_7g5j6z$ = flatMap_0;
    package$collections.flatMapTo_9q2ddu$ = flatMapTo_1;
    package$collections.flatMap_2azm6x$ = flatMap_1;
    package$collections.flatMapTo_ae7k4k$ = flatMapTo_2;
    package$collections.flatMap_k7x5xb$ = flatMap_2;
    package$collections.flatMapTo_6h8o5s$ = flatMapTo_3;
    package$collections.flatMap_jv6p05$ = flatMap_3;
    package$collections.flatMapTo_fngh32$ = flatMapTo_4;
    package$collections.flatMap_a6ay1l$ = flatMap_4;
    package$collections.flatMapTo_53zyz4$ = flatMapTo_5;
    package$collections.flatMap_kx9v79$ = flatMap_5;
    package$collections.flatMapTo_9hj6lm$ = flatMapTo_6;
    package$collections.flatMap_io4c5r$ = flatMap_6;
    package$collections.flatMapTo_5s36kw$ = flatMapTo_7;
    package$collections.flatMap_m4binf$ = flatMap_7;
    package$collections.addAll_ipc267$ = addAll;
    package$collections.LinkedHashMap_init_q3lmfv$ = LinkedHashMap_init;
    package$collections.groupByTo_1qxbxg$ = groupByTo;
    package$collections.groupBy_73x53s$ = groupBy;
    package$collections.groupByTo_6kmz48$ = groupByTo_0;
    package$collections.groupBy_i1orpu$ = groupBy_0;
    package$collections.groupByTo_bo8r4m$ = groupByTo_1;
    package$collections.groupBy_2yxo7i$ = groupBy_1;
    package$collections.groupByTo_q1iim5$ = groupByTo_2;
    package$collections.groupBy_vhfi20$ = groupBy_2;
    package$collections.groupByTo_mu2a4k$ = groupByTo_3;
    package$collections.groupBy_oifiz6$ = groupBy_3;
    package$collections.groupByTo_x0uw5m$ = groupByTo_4;
    package$collections.groupBy_5k9h5a$ = groupBy_4;
    package$collections.groupByTo_xcz1ip$ = groupByTo_5;
    package$collections.groupBy_hbdsc2$ = groupBy_5;
    package$collections.groupByTo_mrd1pq$ = groupByTo_6;
    package$collections.groupBy_8oadti$ = groupBy_6;
    package$collections.groupByTo_axxeqe$ = groupByTo_7;
    package$collections.groupBy_pmkh76$ = groupBy_7;
    package$collections.groupByTo_ha2xv2$ = groupByTo_8;
    package$collections.groupBy_67lihi$ = groupBy_8;
    package$collections.groupByTo_lnembp$ = groupByTo_9;
    package$collections.groupBy_prlkfp$ = groupBy_9;
    package$collections.groupByTo_n3jh2d$ = groupByTo_10;
    package$collections.groupBy_emzy0b$ = groupBy_10;
    package$collections.groupByTo_ted19q$ = groupByTo_11;
    package$collections.groupBy_5wtufc$ = groupBy_11;
    package$collections.groupByTo_bzm9l3$ = groupByTo_12;
    package$collections.groupBy_hq1329$ = groupBy_12;
    package$collections.groupByTo_4auzph$ = groupByTo_13;
    package$collections.groupBy_jjomwl$ = groupBy_13;
    package$collections.groupByTo_akngni$ = groupByTo_14;
    package$collections.groupBy_bvjqb8$ = groupBy_14;
    package$collections.groupByTo_au1frb$ = groupByTo_15;
    package$collections.groupBy_hxvtq7$ = groupBy_15;
    package$collections.groupByTo_cmmt3n$ = groupByTo_16;
    package$collections.groupBy_nlw5ll$ = groupBy_16;
    package$collections.getOrPut_9wl75a$ = getOrPut;
    package$collections.Grouping = Grouping;
    package$collections.groupingBy_73x53s$ = groupingBy;
    package$collections.ArrayList_init_ww73n8$ = ArrayList_init_0;
    package$collections.mapTo_4g4n0c$ = mapTo;
    package$collections.map_73x53s$ = map;
    package$collections.mapTo_lvjep5$ = mapTo_0;
    package$collections.map_i1orpu$ = map_0;
    package$collections.mapTo_jtf97t$ = mapTo_1;
    package$collections.map_2yxo7i$ = map_1;
    package$collections.mapTo_18cmir$ = mapTo_2;
    package$collections.map_vhfi20$ = map_2;
    package$collections.mapTo_6e2q1j$ = mapTo_3;
    package$collections.map_oifiz6$ = map_3;
    package$collections.mapTo_jpuhm1$ = mapTo_4;
    package$collections.map_5k9h5a$ = map_4;
    package$collections.mapTo_u2n9ft$ = mapTo_5;
    package$collections.map_hbdsc2$ = map_5;
    package$collections.mapTo_jrz1ox$ = mapTo_6;
    package$collections.map_8oadti$ = map_6;
    package$collections.mapTo_bsh7dj$ = mapTo_7;
    package$collections.map_pmkh76$ = map_7;
    package$collections.mapIndexedTo_d8bv34$ = mapIndexedTo;
    package$collections.mapIndexed_d05wzo$ = mapIndexed;
    package$collections.mapIndexedTo_797pmj$ = mapIndexedTo_0;
    package$collections.mapIndexed_b1mzcm$ = mapIndexed_0;
    package$collections.mapIndexedTo_5akchx$ = mapIndexedTo_1;
    package$collections.mapIndexed_17cht6$ = mapIndexed_1;
    package$collections.mapIndexedTo_ey1r33$ = mapIndexedTo_2;
    package$collections.mapIndexed_n9l81o$ = mapIndexed_2;
    package$collections.mapIndexedTo_yqgxdn$ = mapIndexedTo_3;
    package$collections.mapIndexed_6hpo96$ = mapIndexed_3;
    package$collections.mapIndexedTo_3uie0r$ = mapIndexedTo_4;
    package$collections.mapIndexed_xqj56$ = mapIndexed_4;
    package$collections.mapIndexedTo_3zacuz$ = mapIndexedTo_5;
    package$collections.mapIndexed_623t7u$ = mapIndexed_5;
    package$collections.mapIndexedTo_r9wz1$ = mapIndexedTo_6;
    package$collections.mapIndexed_tk88gi$ = mapIndexed_6;
    package$collections.mapIndexedTo_d11l8l$ = mapIndexedTo_7;
    package$collections.mapIndexed_8r1kga$ = mapIndexed_7;
    package$collections.mapIndexedNotNullTo_97f7ib$ = mapIndexedNotNullTo;
    package$collections.mapIndexedNotNull_aytly7$ = mapIndexedNotNull;
    package$collections.mapNotNullTo_cni40x$ = mapNotNullTo;
    package$collections.mapNotNull_oxs7gb$ = mapNotNull;
    package$collections.forEach_je628z$ = forEach;
    package$collections.withIndex_us0mfu$ = withIndex;
    package$collections.withIndex_964n91$ = withIndex_0;
    package$collections.withIndex_i2lc79$ = withIndex_1;
    package$collections.withIndex_tmsbgo$ = withIndex_2;
    package$collections.withIndex_se6h4x$ = withIndex_3;
    package$collections.withIndex_rjqryz$ = withIndex_4;
    package$collections.withIndex_bvy38s$ = withIndex_5;
    package$collections.withIndex_l1lu5t$ = withIndex_6;
    package$collections.withIndex_355ntz$ = withIndex_7;
    package$collections.distinct_us0mfu$ = distinct;
    package$collections.distinct_964n91$ = distinct_0;
    package$collections.distinct_i2lc79$ = distinct_1;
    package$collections.distinct_tmsbgo$ = distinct_2;
    package$collections.distinct_se6h4x$ = distinct_3;
    package$collections.distinct_rjqryz$ = distinct_4;
    package$collections.distinct_bvy38s$ = distinct_5;
    package$collections.distinct_l1lu5t$ = distinct_6;
    package$collections.distinct_355ntz$ = distinct_7;
    package$collections.HashSet_init_287e2$ = HashSet_init;
    package$collections.distinctBy_73x53s$ = distinctBy;
    package$collections.distinctBy_i1orpu$ = distinctBy_0;
    package$collections.distinctBy_2yxo7i$ = distinctBy_1;
    package$collections.distinctBy_vhfi20$ = distinctBy_2;
    package$collections.distinctBy_oifiz6$ = distinctBy_3;
    package$collections.distinctBy_5k9h5a$ = distinctBy_4;
    package$collections.distinctBy_hbdsc2$ = distinctBy_5;
    package$collections.distinctBy_8oadti$ = distinctBy_6;
    package$collections.distinctBy_pmkh76$ = distinctBy_7;
    package$collections.intersect_fe0ubx$ = intersect;
    package$collections.intersect_hrvwcl$ = intersect_0;
    package$collections.intersect_ao5c0d$ = intersect_1;
    package$collections.intersect_e3izir$ = intersect_2;
    package$collections.intersect_665vtv$ = intersect_3;
    package$collections.intersect_v6evar$ = intersect_4;
    package$collections.intersect_prhtir$ = intersect_5;
    package$collections.intersect_s6pdl9$ = intersect_6;
    package$collections.intersect_ux50q1$ = intersect_7;
    package$collections.subtract_fe0ubx$ = subtract;
    package$collections.subtract_hrvwcl$ = subtract_0;
    package$collections.subtract_ao5c0d$ = subtract_1;
    package$collections.subtract_e3izir$ = subtract_2;
    package$collections.subtract_665vtv$ = subtract_3;
    package$collections.subtract_v6evar$ = subtract_4;
    package$collections.subtract_prhtir$ = subtract_5;
    package$collections.subtract_s6pdl9$ = subtract_6;
    package$collections.subtract_ux50q1$ = subtract_7;
    package$collections.toMutableSet_us0mfu$ = toMutableSet;
    package$collections.toMutableSet_964n91$ = toMutableSet_0;
    package$collections.toMutableSet_i2lc79$ = toMutableSet_1;
    package$collections.toMutableSet_tmsbgo$ = toMutableSet_2;
    package$collections.toMutableSet_se6h4x$ = toMutableSet_3;
    package$collections.toMutableSet_rjqryz$ = toMutableSet_4;
    package$collections.toMutableSet_bvy38s$ = toMutableSet_5;
    package$collections.toMutableSet_l1lu5t$ = toMutableSet_6;
    package$collections.toMutableSet_355ntz$ = toMutableSet_7;
    package$collections.union_fe0ubx$ = union;
    package$collections.union_hrvwcl$ = union_0;
    package$collections.union_ao5c0d$ = union_1;
    package$collections.union_e3izir$ = union_2;
    package$collections.union_665vtv$ = union_3;
    package$collections.union_v6evar$ = union_4;
    package$collections.union_prhtir$ = union_5;
    package$collections.union_s6pdl9$ = union_6;
    package$collections.union_ux50q1$ = union_7;
    package$collections.all_sfx99b$ = all;
    package$collections.all_c3i447$ = all_0;
    package$collections.all_247xw3$ = all_1;
    package$collections.all_il4kyb$ = all_2;
    package$collections.all_i1oc7r$ = all_3;
    package$collections.all_u4nq1f$ = all_4;
    package$collections.all_3vq27r$ = all_5;
    package$collections.all_xffwn9$ = all_6;
    package$collections.all_3ji0pj$ = all_7;
    package$collections.any_us0mfu$ = any;
    package$collections.any_964n91$ = any_0;
    package$collections.any_i2lc79$ = any_1;
    package$collections.any_tmsbgo$ = any_2;
    package$collections.any_se6h4x$ = any_3;
    package$collections.any_rjqryz$ = any_4;
    package$collections.any_bvy38s$ = any_5;
    package$collections.any_l1lu5t$ = any_6;
    package$collections.any_355ntz$ = any_7;
    package$collections.any_sfx99b$ = any_8;
    package$collections.any_c3i447$ = any_9;
    package$collections.any_247xw3$ = any_10;
    package$collections.any_il4kyb$ = any_11;
    package$collections.any_i1oc7r$ = any_12;
    package$collections.any_u4nq1f$ = any_13;
    package$collections.any_3vq27r$ = any_14;
    package$collections.any_xffwn9$ = any_15;
    package$collections.any_3ji0pj$ = any_16;
    package$collections.count_sfx99b$ = count_8;
    package$collections.count_c3i447$ = count_9;
    package$collections.count_247xw3$ = count_10;
    package$collections.count_il4kyb$ = count_11;
    package$collections.count_i1oc7r$ = count_12;
    package$collections.count_u4nq1f$ = count_13;
    package$collections.count_3vq27r$ = count_14;
    package$collections.count_xffwn9$ = count_15;
    package$collections.count_3ji0pj$ = count_16;
    package$collections.fold_agj4oo$ = fold;
    package$collections.fold_fl151e$ = fold_0;
    package$collections.fold_9nnzbm$ = fold_1;
    package$collections.fold_sgag36$ = fold_2;
    package$collections.fold_sc6mze$ = fold_3;
    package$collections.fold_fnzdea$ = fold_4;
    package$collections.fold_mnppu8$ = fold_5;
    package$collections.fold_43zc0i$ = fold_6;
    package$collections.fold_8nwlk6$ = fold_7;
    package$collections.foldIndexed_oj0mn0$ = foldIndexed;
    package$collections.foldIndexed_qzmh7i$ = foldIndexed_0;
    package$collections.foldIndexed_aijnee$ = foldIndexed_1;
    package$collections.foldIndexed_28ylm2$ = foldIndexed_2;
    package$collections.foldIndexed_37s2ie$ = foldIndexed_3;
    package$collections.foldIndexed_faee2y$ = foldIndexed_4;
    package$collections.foldIndexed_ufoyfg$ = foldIndexed_5;
    package$collections.foldIndexed_z82r06$ = foldIndexed_6;
    package$collections.foldIndexed_sfak8u$ = foldIndexed_7;
    package$collections.foldRight_svmc2u$ = foldRight;
    package$collections.foldRight_wssfls$ = foldRight_0;
    package$collections.foldRight_9ug2j2$ = foldRight_1;
    package$collections.foldRight_8vbxp4$ = foldRight_2;
    package$collections.foldRight_1fuzy8$ = foldRight_3;
    package$collections.foldRight_lsgf76$ = foldRight_4;
    package$collections.foldRight_v5l2cg$ = foldRight_5;
    package$collections.foldRight_ej6ng6$ = foldRight_6;
    package$collections.foldRight_i7w5ds$ = foldRight_7;
    package$collections.foldRightIndexed_et4u4i$ = foldRightIndexed;
    package$collections.foldRightIndexed_le73fo$ = foldRightIndexed_0;
    package$collections.foldRightIndexed_8zkega$ = foldRightIndexed_1;
    package$collections.foldRightIndexed_ltx404$ = foldRightIndexed_2;
    package$collections.foldRightIndexed_qk9kf8$ = foldRightIndexed_3;
    package$collections.foldRightIndexed_95xca2$ = foldRightIndexed_4;
    package$collections.foldRightIndexed_lxtlx8$ = foldRightIndexed_5;
    package$collections.foldRightIndexed_gkwrji$ = foldRightIndexed_6;
    package$collections.foldRightIndexed_ivb0f8$ = foldRightIndexed_7;
    package$collections.forEach_l09evt$ = forEach_0;
    package$collections.forEach_q32uhv$ = forEach_1;
    package$collections.forEach_4l7qrh$ = forEach_2;
    package$collections.forEach_j4vz15$ = forEach_3;
    package$collections.forEach_w9sc9v$ = forEach_4;
    package$collections.forEach_txsb7r$ = forEach_5;
    package$collections.forEach_g04iob$ = forEach_6;
    package$collections.forEach_kxoc7t$ = forEach_7;
    package$collections.max_pnorak$ = max;
    package$collections.max_529xol$ = max_0;
    package$collections.max_pbinho$ = max_1;
    package$collections.max_964n91$ = max_2;
    package$collections.max_i2lc79$ = max_3;
    package$collections.max_tmsbgo$ = max_4;
    package$collections.max_se6h4x$ = max_5;
    package$collections.max_rjqryz$ = max_6;
    package$collections.max_bvy38s$ = max_7;
    package$collections.max_355ntz$ = max_8;
    package$collections.maxBy_99hh6x$ = maxBy;
    package$collections.maxBy_jirwv8$ = maxBy_0;
    package$collections.maxBy_p0tdr4$ = maxBy_1;
    package$collections.maxBy_30vlmi$ = maxBy_2;
    package$collections.maxBy_hom4ws$ = maxBy_3;
    package$collections.maxBy_ksd00w$ = maxBy_4;
    package$collections.maxBy_fvpt30$ = maxBy_5;
    package$collections.maxBy_xt360o$ = maxBy_6;
    package$collections.maxBy_epurks$ = maxBy_7;
    package$collections.maxWith_iwcb0m$ = maxWith;
    package$collections.maxWith_movtv6$ = maxWith_0;
    package$collections.maxWith_u08rls$ = maxWith_1;
    package$collections.maxWith_rsw9pc$ = maxWith_2;
    package$collections.maxWith_wqwa2y$ = maxWith_3;
    package$collections.maxWith_1sg7gg$ = maxWith_4;
    package$collections.maxWith_jucva8$ = maxWith_5;
    package$collections.maxWith_7ffj0g$ = maxWith_6;
    package$collections.maxWith_7ncb86$ = maxWith_7;
    package$collections.min_pnorak$ = min;
    package$collections.min_529xol$ = min_0;
    package$collections.min_pbinho$ = min_1;
    package$collections.min_964n91$ = min_2;
    package$collections.min_i2lc79$ = min_3;
    package$collections.min_tmsbgo$ = min_4;
    package$collections.min_se6h4x$ = min_5;
    package$collections.min_rjqryz$ = min_6;
    package$collections.min_bvy38s$ = min_7;
    package$collections.min_355ntz$ = min_8;
    package$collections.minBy_99hh6x$ = minBy;
    package$collections.minBy_jirwv8$ = minBy_0;
    package$collections.minBy_p0tdr4$ = minBy_1;
    package$collections.minBy_30vlmi$ = minBy_2;
    package$collections.minBy_hom4ws$ = minBy_3;
    package$collections.minBy_ksd00w$ = minBy_4;
    package$collections.minBy_fvpt30$ = minBy_5;
    package$collections.minBy_xt360o$ = minBy_6;
    package$collections.minBy_epurks$ = minBy_7;
    package$collections.minWith_iwcb0m$ = minWith;
    package$collections.minWith_movtv6$ = minWith_0;
    package$collections.minWith_u08rls$ = minWith_1;
    package$collections.minWith_rsw9pc$ = minWith_2;
    package$collections.minWith_wqwa2y$ = minWith_3;
    package$collections.minWith_1sg7gg$ = minWith_4;
    package$collections.minWith_jucva8$ = minWith_5;
    package$collections.minWith_7ffj0g$ = minWith_6;
    package$collections.minWith_7ncb86$ = minWith_7;
    package$collections.none_us0mfu$ = none;
    package$collections.none_964n91$ = none_0;
    package$collections.none_i2lc79$ = none_1;
    package$collections.none_tmsbgo$ = none_2;
    package$collections.none_se6h4x$ = none_3;
    package$collections.none_rjqryz$ = none_4;
    package$collections.none_bvy38s$ = none_5;
    package$collections.none_l1lu5t$ = none_6;
    package$collections.none_355ntz$ = none_7;
    package$collections.none_sfx99b$ = none_8;
    package$collections.none_c3i447$ = none_9;
    package$collections.none_247xw3$ = none_10;
    package$collections.none_il4kyb$ = none_11;
    package$collections.none_i1oc7r$ = none_12;
    package$collections.none_u4nq1f$ = none_13;
    package$collections.none_3vq27r$ = none_14;
    package$collections.none_xffwn9$ = none_15;
    package$collections.none_3ji0pj$ = none_16;
    package$kotlin.UnsupportedOperationException_init_pdl1vj$ = UnsupportedOperationException_init_0;
    package$collections.reduce_5bz9yp$ = reduce;
    package$collections.reduce_ua0gmo$ = reduce_0;
    package$collections.reduce_5x6csy$ = reduce_1;
    package$collections.reduce_vuuzha$ = reduce_2;
    package$collections.reduce_8z4g8g$ = reduce_3;
    package$collections.reduce_m57mj6$ = reduce_4;
    package$collections.reduce_5rthjk$ = reduce_5;
    package$collections.reduce_if3lfm$ = reduce_6;
    package$collections.reduce_724a40$ = reduce_7;
    package$collections.reduceIndexed_f61gul$ = reduceIndexed;
    package$collections.reduceIndexed_y1rlg4$ = reduceIndexed_0;
    package$collections.reduceIndexed_ctdw5m$ = reduceIndexed_1;
    package$collections.reduceIndexed_y7bnwe$ = reduceIndexed_2;
    package$collections.reduceIndexed_54m7jg$ = reduceIndexed_3;
    package$collections.reduceIndexed_mzocqy$ = reduceIndexed_4;
    package$collections.reduceIndexed_i4uovg$ = reduceIndexed_5;
    package$collections.reduceIndexed_fqu0be$ = reduceIndexed_6;
    package$collections.reduceIndexed_n25zu4$ = reduceIndexed_7;
    package$collections.reduceOrNull_5bz9yp$ = reduceOrNull;
    package$collections.reduceOrNull_ua0gmo$ = reduceOrNull_0;
    package$collections.reduceOrNull_5x6csy$ = reduceOrNull_1;
    package$collections.reduceOrNull_vuuzha$ = reduceOrNull_2;
    package$collections.reduceOrNull_8z4g8g$ = reduceOrNull_3;
    package$collections.reduceOrNull_m57mj6$ = reduceOrNull_4;
    package$collections.reduceOrNull_5rthjk$ = reduceOrNull_5;
    package$collections.reduceOrNull_if3lfm$ = reduceOrNull_6;
    package$collections.reduceOrNull_724a40$ = reduceOrNull_7;
    package$collections.reduceRight_m9c08d$ = reduceRight;
    package$collections.reduceRight_ua0gmo$ = reduceRight_0;
    package$collections.reduceRight_5x6csy$ = reduceRight_1;
    package$collections.reduceRight_vuuzha$ = reduceRight_2;
    package$collections.reduceRight_8z4g8g$ = reduceRight_3;
    package$collections.reduceRight_m57mj6$ = reduceRight_4;
    package$collections.reduceRight_5rthjk$ = reduceRight_5;
    package$collections.reduceRight_if3lfm$ = reduceRight_6;
    package$collections.reduceRight_724a40$ = reduceRight_7;
    package$collections.reduceRightIndexed_cf9tch$ = reduceRightIndexed;
    package$collections.reduceRightIndexed_y1rlg4$ = reduceRightIndexed_0;
    package$collections.reduceRightIndexed_ctdw5m$ = reduceRightIndexed_1;
    package$collections.reduceRightIndexed_y7bnwe$ = reduceRightIndexed_2;
    package$collections.reduceRightIndexed_54m7jg$ = reduceRightIndexed_3;
    package$collections.reduceRightIndexed_mzocqy$ = reduceRightIndexed_4;
    package$collections.reduceRightIndexed_i4uovg$ = reduceRightIndexed_5;
    package$collections.reduceRightIndexed_fqu0be$ = reduceRightIndexed_6;
    package$collections.reduceRightIndexed_n25zu4$ = reduceRightIndexed_7;
    package$collections.reduceRightOrNull_m9c08d$ = reduceRightOrNull;
    package$collections.reduceRightOrNull_ua0gmo$ = reduceRightOrNull_0;
    package$collections.reduceRightOrNull_5x6csy$ = reduceRightOrNull_1;
    package$collections.reduceRightOrNull_vuuzha$ = reduceRightOrNull_2;
    package$collections.reduceRightOrNull_8z4g8g$ = reduceRightOrNull_3;
    package$collections.reduceRightOrNull_m57mj6$ = reduceRightOrNull_4;
    package$collections.reduceRightOrNull_5rthjk$ = reduceRightOrNull_5;
    package$collections.reduceRightOrNull_if3lfm$ = reduceRightOrNull_6;
    package$collections.reduceRightOrNull_724a40$ = reduceRightOrNull_7;
    package$collections.listOf_mh5how$ = listOf;
    package$collections.scan_agj4oo$ = scan;
    package$collections.scanIndexed_oj0mn0$ = scanIndexed;
    package$collections.scanReduce_5bz9yp$ = scanReduce;
    package$collections.scanReduceIndexed_f61gul$ = scanReduceIndexed;
    package$collections.sumBy_9qh8u2$ = sumBy;
    package$collections.sumBy_s616nk$ = sumBy_0;
    package$collections.sumBy_sccsus$ = sumBy_1;
    package$collections.sumBy_n2f0qi$ = sumBy_2;
    package$collections.sumBy_8jxuvk$ = sumBy_3;
    package$collections.sumBy_lv6o8c$ = sumBy_4;
    package$collections.sumBy_a4xh9s$ = sumBy_5;
    package$collections.sumBy_d84lg4$ = sumBy_6;
    package$collections.sumBy_izzzcg$ = sumBy_7;
    package$collections.sumByDouble_vyz3zq$ = sumByDouble;
    package$collections.sumByDouble_kkr9hw$ = sumByDouble_0;
    package$collections.sumByDouble_u2ap1s$ = sumByDouble_1;
    package$collections.sumByDouble_suc1jq$ = sumByDouble_2;
    package$collections.sumByDouble_rqe08c$ = sumByDouble_3;
    package$collections.sumByDouble_8jdnkg$ = sumByDouble_4;
    package$collections.sumByDouble_vuwwjw$ = sumByDouble_5;
    package$collections.sumByDouble_1f8lq0$ = sumByDouble_6;
    package$collections.sumByDouble_ik7e6s$ = sumByDouble_7;
    package$collections.requireNoNulls_9b7vla$ = requireNoNulls;
    package$collections.partition_sfx99b$ = partition;
    package$collections.partition_c3i447$ = partition_0;
    package$collections.partition_247xw3$ = partition_1;
    package$collections.partition_il4kyb$ = partition_2;
    package$collections.partition_i1oc7r$ = partition_3;
    package$collections.partition_u4nq1f$ = partition_4;
    package$collections.partition_3vq27r$ = partition_5;
    package$collections.partition_xffwn9$ = partition_6;
    package$collections.partition_3ji0pj$ = partition_7;
    package$collections.zip_r9t3v7$ = zip;
    package$collections.zip_f8fqmg$ = zip_0;
    package$collections.zip_ty5cjm$ = zip_1;
    package$collections.zip_hh3at1$ = zip_2;
    package$collections.zip_1qoa9o$ = zip_3;
    package$collections.zip_84cwbm$ = zip_4;
    package$collections.zip_eqchap$ = zip_5;
    package$collections.zip_jvo9m6$ = zip_6;
    package$collections.zip_stlr6e$ = zip_7;
    package$collections.zip_t5fk8e$ = zip_8;
    package$collections.zip_c731w7$ = zip_9;
    package$collections.zip_ochmv5$ = zip_10;
    package$collections.zip_fvmov$ = zip_11;
    package$collections.zip_g0832p$ = zip_12;
    package$collections.zip_cpiwht$ = zip_13;
    package$collections.zip_p5twxn$ = zip_14;
    package$collections.zip_6fiayp$ = zip_15;
    package$collections.zip_xwrum3$ = zip_16;
    package$collections.zip_evp5ax$ = zip_17;
    package$collections.zip_bguba6$ = zip_18;
    package$collections.zip_1xs6vw$ = zip_19;
    package$collections.zip_rs3hg1$ = zip_20;
    package$collections.zip_spy2lm$ = zip_21;
    package$collections.zip_s1ag1o$ = zip_22;
    package$collections.zip_qczpth$ = zip_23;
    package$collections.zip_za56m0$ = zip_24;
    package$collections.zip_jfs5m8$ = zip_25;
    package$collections.collectionSizeOrDefault_ba2ldo$ = collectionSizeOrDefault;
    package$collections.zip_aoaibi$ = zip_26;
    package$collections.zip_2fxjb5$ = zip_27;
    package$collections.zip_ey57vj$ = zip_28;
    package$collections.zip_582drv$ = zip_29;
    package$collections.zip_5584fz$ = zip_30;
    package$collections.zip_dszx9d$ = zip_31;
    package$collections.zip_p8lavz$ = zip_32;
    package$collections.zip_e6btvt$ = zip_33;
    package$collections.zip_imz1rz$ = zip_34;
    package$collections.zip_ndt7zj$ = zip_35;
    package$collections.zip_907jet$ = zip_36;
    package$collections.zip_mgkctd$ = zip_37;
    package$collections.zip_tq12cv$ = zip_38;
    package$collections.zip_tec1tx$ = zip_39;
    package$collections.zip_pmvpm9$ = zip_40;
    package$collections.zip_qsfoml$ = zip_41;
    package$collections.zip_wxyzfz$ = zip_42;
    package$collections.zip_fvjg0r$ = zip_43;
    package$collections.zip_u8n9wb$ = zip_44;
    package$collections.zip_2l2rw1$ = zip_45;
    package$collections.zip_3bxm8r$ = zip_46;
    package$collections.zip_h04u5h$ = zip_47;
    package$collections.zip_t5hjvf$ = zip_48;
    package$collections.zip_l9qpsl$ = zip_49;
    package$collections.zip_rvvoh1$ = zip_50;
    package$collections.joinTo_aust33$ = joinTo;
    package$collections.joinTo_5gzrdz$ = joinTo_0;
    package$collections.joinTo_9p6wnv$ = joinTo_1;
    package$collections.joinTo_sylrwb$ = joinTo_2;
    package$collections.joinTo_d79htt$ = joinTo_3;
    package$collections.joinTo_ohfn4r$ = joinTo_4;
    package$collections.joinTo_ghgesr$ = joinTo_5;
    package$collections.joinTo_7e5iud$ = joinTo_6;
    package$collections.joinTo_gm3uff$ = joinTo_7;
    package$collections.joinToString_cgipc5$ = joinToString;
    package$collections.joinToString_s78119$ = joinToString_0;
    package$collections.joinToString_khecbp$ = joinToString_1;
    package$collections.joinToString_vk9fgb$ = joinToString_2;
    package$collections.joinToString_q4l9w5$ = joinToString_3;
    package$collections.joinToString_cph1y3$ = joinToString_4;
    package$collections.joinToString_raq4np$ = joinToString_5;
    package$collections.joinToString_fgvu1x$ = joinToString_6;
    package$collections.joinToString_xqrb1d$ = joinToString_7;
    package$collections.asIterable_us0mfu$ = asIterable;
    package$collections.asIterable_964n91$ = asIterable_0;
    package$collections.asIterable_i2lc79$ = asIterable_1;
    package$collections.asIterable_tmsbgo$ = asIterable_2;
    package$collections.asIterable_se6h4x$ = asIterable_3;
    package$collections.asIterable_rjqryz$ = asIterable_4;
    package$collections.asIterable_bvy38s$ = asIterable_5;
    package$collections.asIterable_l1lu5t$ = asIterable_6;
    package$collections.asIterable_355ntz$ = asIterable_7;
    package$collections.asSequence_us0mfu$ = asSequence;
    package$collections.asSequence_964n91$ = asSequence_0;
    package$collections.asSequence_i2lc79$ = asSequence_1;
    package$collections.asSequence_tmsbgo$ = asSequence_2;
    package$collections.asSequence_se6h4x$ = asSequence_3;
    package$collections.asSequence_rjqryz$ = asSequence_4;
    package$collections.asSequence_bvy38s$ = asSequence_5;
    package$collections.asSequence_l1lu5t$ = asSequence_6;
    package$collections.asSequence_355ntz$ = asSequence_7;
    package$collections.average_vn5r1x$ = average;
    package$collections.average_t8c1id$ = average_0;
    package$collections.average_5yd9ji$ = average_1;
    package$collections.average_r2b9hd$ = average_2;
    package$collections.average_529xol$ = average_3;
    package$collections.average_pnorak$ = average_4;
    package$collections.average_964n91$ = average_5;
    package$collections.average_i2lc79$ = average_6;
    package$collections.average_tmsbgo$ = average_7;
    package$collections.average_se6h4x$ = average_8;
    package$collections.average_rjqryz$ = average_9;
    package$collections.average_bvy38s$ = average_10;
    package$collections.sum_vn5r1x$ = sum;
    package$collections.sum_t8c1id$ = sum_0;
    package$collections.sum_5yd9ji$ = sum_1;
    package$collections.sum_r2b9hd$ = sum_2;
    package$collections.sum_529xol$ = sum_3;
    package$collections.sum_pnorak$ = sum_4;
    package$collections.sum_964n91$ = sum_5;
    package$collections.sum_i2lc79$ = sum_6;
    package$collections.sum_tmsbgo$ = sum_7;
    package$collections.sum_se6h4x$ = sum_8;
    package$collections.sum_rjqryz$ = sum_9;
    package$collections.sum_bvy38s$ = sum_10;
    package$collections.contains_2ws7j4$ = contains_8;
    package$collections.elementAt_ba2ldo$ = elementAt;
    package$collections.elementAtOrElse_qeve62$ = elementAtOrElse_8;
    package$collections.get_lastIndex_55thoc$ = get_lastIndex_12;
    package$collections.elementAtOrNull_ba2ldo$ = elementAtOrNull_8;
    package$collections.getOrNull_yzln2o$ = getOrNull_8;
    package$collections.firstOrNull_6jwkkr$ = firstOrNull_19;
    package$collections.lastOrNull_6jwkkr$ = lastOrNull_19;
    package$collections.lastOrNull_dmm9ex$ = lastOrNull_20;
    package$collections.first_7wnvza$ = first_17;
    package$collections.first_2p1efm$ = first_18;
    package$collections.first_6jwkkr$ = first_19;
    package$collections.firstOrNull_7wnvza$ = firstOrNull_17;
    package$collections.firstOrNull_2p1efm$ = firstOrNull_18;
    package$collections.indexOf_2ws7j4$ = indexOf_8;
    package$collections.indexOf_bv23uc$ = indexOf_9;
    package$collections.checkIndexOverflow_za3lpa$ = checkIndexOverflow;
    package$collections.indexOfFirst_6jwkkr$ = indexOfFirst_8;
    package$collections.indexOfFirst_dmm9ex$ = indexOfFirst_9;
    package$collections.indexOfLast_6jwkkr$ = indexOfLast_8;
    package$collections.indexOfLast_dmm9ex$ = indexOfLast_9;
    package$collections.last_7wnvza$ = last_17;
    package$collections.last_2p1efm$ = last_18;
    package$collections.last_6jwkkr$ = last_19;
    package$collections.last_dmm9ex$ = last_20;
    package$collections.lastIndexOf_2ws7j4$ = lastIndexOf_8;
    package$collections.lastIndexOf_bv23uc$ = lastIndexOf_9;
    package$collections.lastOrNull_7wnvza$ = lastOrNull_17;
    package$collections.lastOrNull_2p1efm$ = lastOrNull_18;
    package$collections.random_iscd7z$ = random_18;
    package$collections.randomOrNull_iscd7z$ = randomOrNull_18;
    package$collections.single_7wnvza$ = single_17;
    package$collections.single_2p1efm$ = single_18;
    package$collections.single_6jwkkr$ = single_19;
    package$collections.singleOrNull_7wnvza$ = singleOrNull_17;
    package$collections.singleOrNull_2p1efm$ = singleOrNull_18;
    package$collections.singleOrNull_6jwkkr$ = singleOrNull_19;
    package$collections.drop_ba2ldo$ = drop_8;
    package$collections.dropLast_yzln2o$ = dropLast_8;
    package$collections.take_ba2ldo$ = take_8;
    package$collections.dropLastWhile_dmm9ex$ = dropLastWhile_8;
    package$collections.dropWhile_6jwkkr$ = dropWhile_8;
    package$collections.filterTo_cslyey$ = filterTo_8;
    package$collections.filter_6jwkkr$ = filter_8;
    package$collections.filterIndexedTo_i2yxnm$ = filterIndexedTo_8;
    package$collections.filterIndexed_p81qtj$ = filterIndexed_8;
    package$collections.forEachIndexed_g8ms6t$ = forEachIndexed_8;
    package$collections.filterNotTo_cslyey$ = filterNotTo_8;
    package$collections.filterNot_6jwkkr$ = filterNot_8;
    package$collections.filterNotNull_m3lr2h$ = filterNotNull_0;
    package$collections.filterNotNullTo_u9kwcl$ = filterNotNullTo_0;
    package$collections.slice_6bjbi1$ = slice_17;
    package$collections.slice_b9tsm5$ = slice_18;
    package$collections.takeLast_yzln2o$ = takeLast_8;
    package$collections.toList_7wnvza$ = toList_8;
    package$collections.takeLastWhile_dmm9ex$ = takeLastWhile_8;
    package$collections.takeWhile_6jwkkr$ = takeWhile_8;
    package$collections.reversed_7wnvza$ = reversed_8;
    package$collections.sortWith_nqfjgj$ = sortWith_0;
    package$collections.sortBy_yag3x6$ = sortBy_0;
    package$collections.sortByDescending_yag3x6$ = sortByDescending_0;
    package$collections.sortDescending_4wi501$ = sortDescending_7;
    package$collections.sorted_exjks8$ = sorted_7;
    package$collections.sortedWith_eknfly$ = sortedWith_8;
    package$collections.sortedBy_nd8ern$ = sortedBy_8;
    package$collections.sortedByDescending_nd8ern$ = sortedByDescending_8;
    package$collections.sortedDescending_exjks8$ = sortedDescending_7;
    package$collections.toBooleanArray_xmyvgf$ = toBooleanArray_0;
    package$collections.toByteArray_kdx1v$ = toByteArray_0;
    package$collections.toCharArray_rr68x$ = toCharArray_0;
    package$collections.toDoubleArray_tcduak$ = toDoubleArray_0;
    package$collections.toFloatArray_zwy31$ = toFloatArray_0;
    package$collections.toIntArray_fx3nzu$ = toIntArray_0;
    package$collections.toLongArray_558emf$ = toLongArray_0;
    package$collections.toShortArray_p5z1wt$ = toShortArray_0;
    package$collections.associateTo_tp6zhs$ = associateTo_8;
    package$collections.associate_wbhhmp$ = associate_8;
    package$collections.associateByTo_q9k9lv$ = associateByTo_17;
    package$collections.associateBy_dvm6j0$ = associateBy_17;
    package$collections.associateByTo_5s21dh$ = associateByTo_18;
    package$collections.associateBy_6kgnfi$ = associateBy_18;
    package$collections.associateWithTo_u35i63$ = associateWithTo;
    package$collections.associateWith_dvm6j0$ = associateWith;
    package$collections.toCollection_5cfyqp$ = toCollection_8;
    package$collections.toHashSet_7wnvza$ = toHashSet_8;
    package$collections.toMutableList_7wnvza$ = toMutableList_8;
    package$collections.toMutableList_4c7yge$ = toMutableList_9;
    package$collections.toSet_7wnvza$ = toSet_8;
    package$collections.flatMapTo_farraf$ = flatMapTo_8;
    package$collections.flatMap_en2w03$ = flatMap_8;
    package$collections.groupByTo_2nn80$ = groupByTo_17;
    package$collections.groupBy_dvm6j0$ = groupBy_17;
    package$collections.groupByTo_spnc2q$ = groupByTo_18;
    package$collections.groupBy_6kgnfi$ = groupBy_18;
    package$collections.groupingBy_dvm6j0$ = groupingBy_0;
    package$collections.mapTo_h3il0w$ = mapTo_8;
    package$collections.map_dvm6j0$ = map_8;
    package$collections.mapIndexedTo_qixlg$ = mapIndexedTo_8;
    package$collections.mapIndexed_yigmvk$ = mapIndexed_8;
    package$collections.mapIndexedNotNullTo_s7kjlj$ = mapIndexedNotNullTo_0;
    package$collections.mapIndexedNotNull_aw5p9p$ = mapIndexedNotNull_0;
    package$collections.mapNotNullTo_p5b1il$ = mapNotNullTo_0;
    package$collections.mapNotNull_3fhhkf$ = mapNotNull_0;
    package$collections.forEach_i7id1t$ = forEach_8;
    package$collections.withIndex_7wnvza$ = withIndex_8;
    package$collections.distinct_7wnvza$ = distinct_8;
    package$collections.distinctBy_dvm6j0$ = distinctBy_8;
    package$collections.intersect_q4559j$ = intersect_8;
    package$collections.subtract_q4559j$ = subtract_8;
    package$collections.toMutableSet_7wnvza$ = toMutableSet_8;
    package$collections.union_q4559j$ = union_8;
    package$collections.Collection = Collection;
    package$collections.all_6jwkkr$ = all_8;
    package$collections.any_7wnvza$ = any_17;
    package$collections.any_6jwkkr$ = any_18;
    package$collections.count_7wnvza$ = count_17;
    package$collections.checkCountOverflow_za3lpa$ = checkCountOverflow;
    package$collections.count_6jwkkr$ = count_19;
    package$collections.fold_l1hrho$ = fold_8;
    package$collections.foldIndexed_a080b4$ = foldIndexed_8;
    package$collections.foldRight_flo3fi$ = foldRight_8;
    package$collections.foldRightIndexed_nj6056$ = foldRightIndexed_8;
    package$collections.max_l63kqw$ = max_9;
    package$collections.max_lvsncp$ = max_10;
    package$collections.max_exjks8$ = max_11;
    package$collections.maxBy_nd8ern$ = maxBy_8;
    package$collections.maxWith_eknfly$ = maxWith_8;
    package$collections.min_l63kqw$ = min_9;
    package$collections.min_lvsncp$ = min_10;
    package$collections.min_exjks8$ = min_11;
    package$collections.minBy_nd8ern$ = minBy_8;
    package$collections.minWith_eknfly$ = minWith_8;
    package$collections.none_7wnvza$ = none_17;
    package$collections.none_6jwkkr$ = none_18;
    package$collections.onEach_w8vc4v$ = onEach;
    package$collections.reduce_lrrcxv$ = reduce_8;
    package$collections.reduceIndexed_8txfjb$ = reduceIndexed_8;
    package$collections.reduceOrNull_lrrcxv$ = reduceOrNull_8;
    package$collections.reduceRight_y5l5zf$ = reduceRight_8;
    package$collections.reduceRightIndexed_1a67zb$ = reduceRightIndexed_8;
    package$collections.reduceRightOrNull_y5l5zf$ = reduceRightOrNull_8;
    package$collections.scan_l1hrho$ = scan_8;
    package$collections.scanIndexed_a080b4$ = scanIndexed_8;
    package$collections.scanReduce_lrrcxv$ = scanReduce_8;
    package$collections.scanReduceIndexed_8txfjb$ = scanReduceIndexed_8;
    package$collections.sumBy_1nckxa$ = sumBy_8;
    package$collections.sumByDouble_k0tf9a$ = sumByDouble_8;
    package$collections.requireNoNulls_m3lr2h$ = requireNoNulls_0;
    package$collections.requireNoNulls_whsx6z$ = requireNoNulls_1;
    package$collections.chunked_ba2ldo$ = chunked;
    package$collections.chunked_oqjilr$ = chunked_0;
    package$collections.minus_2ws7j4$ = minus;
    package$collections.minus_4gmyjx$ = minus_0;
    package$collections.minus_q4559j$ = minus_1;
    package$collections.minus_i0e5px$ = minus_2;
    package$collections.partition_6jwkkr$ = partition_8;
    package$collections.plus_2ws7j4$ = plus;
    package$collections.plus_qloxvw$ = plus_0;
    package$collections.plus_4gmyjx$ = plus_1;
    package$collections.plus_drqvgf$ = plus_2;
    package$collections.plus_q4559j$ = plus_3;
    package$collections.plus_mydzjv$ = plus_4;
    package$collections.plus_i0e5px$ = plus_5;
    package$collections.plus_hjm0xj$ = plus_6;
    package$collections.windowed_vo9c23$ = windowed;
    package$collections.windowed_au5p4$ = windowed_0;
    package$collections.zip_xiheex$ = zip_51;
    package$collections.zip_curaua$ = zip_52;
    package$collections.zip_45mdf7$ = zip_53;
    package$collections.zip_3h9v02$ = zip_54;
    package$collections.zipWithNext_7wnvza$ = zipWithNext;
    package$collections.zipWithNext_kvcuaw$ = zipWithNext_0;
    package$collections.joinTo_gcc71v$ = joinTo_8;
    package$collections.joinToString_fmv235$ = joinToString_8;
    package$collections.asSequence_7wnvza$ = asSequence_8;
    package$collections.average_922ytb$ = average_11;
    package$collections.average_oz9asn$ = average_12;
    package$collections.average_plj8ka$ = average_13;
    package$collections.average_dmxgdv$ = average_14;
    package$collections.average_lvsncp$ = average_15;
    package$collections.average_l63kqw$ = average_16;
    package$collections.sum_922ytb$ = sum_11;
    package$collections.sum_oz9asn$ = sum_12;
    package$collections.sum_plj8ka$ = sum_13;
    package$collections.sum_dmxgdv$ = sum_14;
    package$collections.sum_lvsncp$ = sum_15;
    package$collections.sum_l63kqw$ = sum_16;
    var package$comparisons = package$kotlin.comparisons || (package$kotlin.comparisons = {});
    package$comparisons.maxOf_7cibz0$ = maxOf;
    package$comparisons.maxOf_z1gega$ = maxOf_0;
    package$comparisons.minOf_7cibz0$ = minOf;
    package$comparisons.minOf_z1gega$ = minOf_0;
    package$collections.toList_abgq59$ = toList_9;
    package$collections.flatMapTo_qdz8ho$ = flatMapTo_9;
    package$collections.flatMap_2r9935$ = flatMap_9;
    package$collections.mapTo_qxe4nl$ = mapTo_9;
    package$collections.map_8169ik$ = map_9;
    package$collections.mapNotNullTo_ir6y9a$ = mapNotNullTo_1;
    package$collections.mapNotNull_9b72hb$ = mapNotNull_1;
    package$collections.forEach_62casv$ = forEach_9;
    package$collections.all_9peqz9$ = all_9;
    package$collections.any_abgq59$ = any_19;
    package$collections.any_9peqz9$ = any_20;
    package$collections.count_9peqz9$ = count_21;
    package$collections.minBy_44nibo$ = minBy_9;
    package$collections.minWith_e3q53g$ = minWith_9;
    package$collections.none_abgq59$ = none_19;
    package$collections.none_9peqz9$ = none_20;
    package$collections.onEach_bdwhnn$ = onEach_0;
    package$collections.asSequence_abgq59$ = asSequence_9;
    package$ranges.random_xmiyix$ = random_22;
    package$ranges.random_6753zu$ = random_23;
    package$ranges.random_bx1m1g$ = random_24;
    package$ranges.randomOrNull_xmiyix$ = randomOrNull_22;
    package$ranges.randomOrNull_6753zu$ = randomOrNull_23;
    package$ranges.randomOrNull_bx1m1g$ = randomOrNull_24;
    package$ranges.contains_8t4apg$ = contains_12;
    package$ranges.contains_ptt68h$ = contains_13;
    package$ranges.contains_a0sexr$ = contains_14;
    package$ranges.contains_st7t5o$ = contains_15;
    package$ranges.contains_w4n8vz$ = contains_16;
    package$ranges.contains_bupbvv$ = contains_17;
    package$ranges.contains_vs2922$ = contains_18;
    package$ranges.contains_fnkcb2$ = contains_19;
    package$ranges.contains_sc6rfc$ = contains_20;
    package$ranges.contains_lmtni0$ = contains_21;
    package$ranges.contains_b3prtk$ = contains_22;
    package$ranges.contains_jdujeb$ = contains_23;
    package$ranges.contains_ng3igv$ = contains_24;
    package$ranges.contains_qlzezp$ = contains_25;
    package$ranges.contains_u6rtyw$ = contains_26;
    package$ranges.contains_wwtm9y$ = contains_27;
    package$ranges.contains_sy6r8u$ = contains_28;
    package$ranges.contains_wegtiw$ = contains_29;
    package$ranges.contains_x0ackb$ = contains_30;
    package$ranges.contains_84mv1k$ = contains_31;
    package$ranges.contains_8sy4e8$ = contains_32;
    package$ranges.contains_pyp6pl$ = contains_33;
    package$ranges.contains_a0yl8z$ = contains_34;
    package$ranges.contains_stdzgw$ = contains_35;
    package$ranges.contains_w4tf77$ = contains_36;
    package$ranges.contains_basjzs$ = contains_37;
    package$ranges.contains_jkxbkj$ = contains_38;
    package$ranges.contains_nn6an3$ = contains_39;
    package$ranges.contains_tzp1so$ = contains_40;
    package$ranges.contains_1thfvp$ = contains_41;
    package$ranges.downTo_ehttk$ = downTo;
    package$ranges.downTo_2ou2j3$ = downTo_0;
    package$ranges.downTo_buxqzf$ = downTo_1;
    package$ranges.downTo_7mbe97$ = downTo_2;
    package$ranges.downTo_ui3wc7$ = downTo_3;
    package$ranges.downTo_dqglrj$ = downTo_4;
    package$ranges.downTo_if0zpk$ = downTo_5;
    package$ranges.downTo_798l30$ = downTo_6;
    package$ranges.downTo_di2vk2$ = downTo_7;
    package$ranges.downTo_ebnic$ = downTo_8;
    package$ranges.downTo_2p08ub$ = downTo_9;
    package$ranges.downTo_bv3xan$ = downTo_10;
    package$ranges.downTo_7m57xz$ = downTo_11;
    package$ranges.downTo_c8b4g4$ = downTo_12;
    package$ranges.downTo_cltogl$ = downTo_13;
    package$ranges.downTo_cqjimh$ = downTo_14;
    package$ranges.downTo_mvfjzl$ = downTo_15;
    package$ranges.reversed_3080cb$ = reversed_10;
    package$ranges.reversed_uthk7p$ = reversed_11;
    package$ranges.step_xsgg7u$ = step;
    package$ranges.step_9rx6pe$ = step_0;
    package$ranges.step_kf5xo7$ = step_1;
    package$ranges.toByteExactOrNull_8e50z4$ = toByteExactOrNull;
    package$ranges.toByteExactOrNull_nzsbcz$ = toByteExactOrNull_0;
    package$ranges.toByteExactOrNull_ybd44d$ = toByteExactOrNull_1;
    package$ranges.toByteExactOrNull_1zw1ma$ = toByteExactOrNull_2;
    package$ranges.toByteExactOrNull_umcohv$ = toByteExactOrNull_3;
    package$ranges.toIntExactOrNull_nzsbcz$ = toIntExactOrNull;
    package$ranges.toIntExactOrNull_1zw1ma$ = toIntExactOrNull_0;
    package$ranges.toIntExactOrNull_umcohv$ = toIntExactOrNull_1;
    package$ranges.toLongExactOrNull_1zw1ma$ = toLongExactOrNull;
    package$ranges.toLongExactOrNull_umcohv$ = toLongExactOrNull_0;
    package$ranges.toShortExactOrNull_8e50z4$ = toShortExactOrNull;
    package$ranges.toShortExactOrNull_nzsbcz$ = toShortExactOrNull_0;
    package$ranges.toShortExactOrNull_1zw1ma$ = toShortExactOrNull_1;
    package$ranges.toShortExactOrNull_umcohv$ = toShortExactOrNull_2;
    package$ranges.until_ehttk$ = until;
    package$ranges.until_2ou2j3$ = until_0;
    package$ranges.until_buxqzf$ = until_1;
    package$ranges.until_7mbe97$ = until_2;
    package$ranges.until_ui3wc7$ = until_3;
    package$ranges.until_dqglrj$ = until_4;
    package$ranges.until_if0zpk$ = until_5;
    package$ranges.until_798l30$ = until_6;
    package$ranges.until_di2vk2$ = until_7;
    package$ranges.until_ebnic$ = until_8;
    package$ranges.until_2p08ub$ = until_9;
    package$ranges.until_bv3xan$ = until_10;
    package$ranges.until_7m57xz$ = until_11;
    package$ranges.until_c8b4g4$ = until_12;
    package$ranges.until_cltogl$ = until_13;
    package$ranges.until_cqjimh$ = until_14;
    package$ranges.until_mvfjzl$ = until_15;
    package$ranges.coerceAtLeast_8xshf9$ = coerceAtLeast;
    package$ranges.coerceAtLeast_buxqzf$ = coerceAtLeast_0;
    package$ranges.coerceAtLeast_mvfjzl$ = coerceAtLeast_1;
    package$ranges.coerceAtLeast_2p08ub$ = coerceAtLeast_3;
    package$ranges.coerceAtLeast_yni7l$ = coerceAtLeast_4;
    package$ranges.coerceAtLeast_38ydlf$ = coerceAtLeast_5;
    package$ranges.coerceAtMost_8xshf9$ = coerceAtMost;
    package$ranges.coerceAtMost_buxqzf$ = coerceAtMost_0;
    package$ranges.coerceAtMost_mvfjzl$ = coerceAtMost_1;
    package$ranges.coerceAtMost_dqglrj$ = coerceAtMost_2;
    package$ranges.coerceAtMost_2p08ub$ = coerceAtMost_3;
    package$ranges.coerceAtMost_yni7l$ = coerceAtMost_4;
    package$ranges.coerceAtMost_38ydlf$ = coerceAtMost_5;
    package$ranges.coerceIn_99j3dd$ = coerceIn;
    package$ranges.coerceIn_glfpss$ = coerceIn_0;
    package$ranges.coerceIn_jn2ilo$ = coerceIn_1;
    package$ranges.coerceIn_e4yvb3$ = coerceIn_2;
    package$ranges.coerceIn_ekzx8g$ = coerceIn_3;
    package$ranges.coerceIn_wj6e7o$ = coerceIn_4;
    package$ranges.coerceIn_nig4hr$ = coerceIn_5;
    package$ranges.coerceIn_52zmhz$ = coerceIn_6;
    package$ranges.coerceIn_jqk3rj$ = coerceIn_7;
    package$ranges.coerceIn_nayhkp$ = coerceIn_8;
    package$ranges.coerceIn_k7ygy9$ = coerceIn_9;
    var package$sequences = package$kotlin.sequences || (package$kotlin.sequences = {});
    package$sequences.contains_9h40j2$ = contains_42;
    package$sequences.elementAt_wuwhe2$ = elementAt_1;
    package$sequences.elementAtOrElse_i0ukx8$ = elementAtOrElse_10;
    package$sequences.elementAtOrNull_wuwhe2$ = elementAtOrNull_10;
    package$sequences.firstOrNull_euau3h$ = firstOrNull_21;
    package$sequences.lastOrNull_euau3h$ = lastOrNull_22;
    package$sequences.first_veqyi0$ = first_20;
    package$sequences.first_euau3h$ = first_21;
    package$sequences.firstOrNull_veqyi0$ = firstOrNull_20;
    package$sequences.indexOf_9h40j2$ = indexOf_10;
    package$sequences.indexOfFirst_euau3h$ = indexOfFirst_10;
    package$sequences.indexOfLast_euau3h$ = indexOfLast_10;
    package$sequences.last_veqyi0$ = last_21;
    package$sequences.last_euau3h$ = last_22;
    package$sequences.lastIndexOf_9h40j2$ = lastIndexOf_10;
    package$sequences.lastOrNull_veqyi0$ = lastOrNull_21;
    package$sequences.single_veqyi0$ = single_20;
    package$sequences.single_euau3h$ = single_21;
    package$sequences.singleOrNull_veqyi0$ = singleOrNull_20;
    package$sequences.singleOrNull_euau3h$ = singleOrNull_21;
    package$sequences.drop_wuwhe2$ = drop_9;
    package$sequences.dropWhile_euau3h$ = dropWhile_9;
    package$sequences.filter_euau3h$ = filter_9;
    package$sequences.filterIndexed_m6ft53$ = filterIndexed_9;
    package$sequences.forEachIndexed_iyis71$ = forEachIndexed_9;
    package$sequences.filterIndexedTo_t68vbo$ = filterIndexedTo_9;
    package$sequences.Sequence = Sequence;
    package$sequences.filterNot_euau3h$ = filterNot_9;
    package$sequences.filterNotNull_q2m9h7$ = filterNotNull_1;
    package$sequences.filterNotNullTo_jmgotp$ = filterNotNullTo_1;
    package$sequences.filterNotTo_zemxx4$ = filterNotTo_9;
    package$sequences.filterTo_zemxx4$ = filterTo_9;
    package$sequences.take_wuwhe2$ = take_9;
    package$sequences.takeWhile_euau3h$ = takeWhile_9;
    package$sequences.sorted_gtzq52$ = sorted_8;
    package$sequences.sortedWith_vjgqpk$ = sortedWith_9;
    package$sequences.sortedBy_aht3pn$ = sortedBy_9;
    package$sequences.sortedByDescending_aht3pn$ = sortedByDescending_9;
    package$sequences.sortedDescending_gtzq52$ = sortedDescending_8;
    package$sequences.associateTo_xiiici$ = associateTo_9;
    package$sequences.associate_ohgugh$ = associate_9;
    package$sequences.associateByTo_pdrkj5$ = associateByTo_19;
    package$sequences.associateBy_z5avom$ = associateBy_19;
    package$sequences.associateByTo_vqogar$ = associateByTo_20;
    package$sequences.associateBy_rpj48c$ = associateBy_20;
    package$sequences.associateWithTo_uyy78t$ = associateWithTo_0;
    package$sequences.associateWith_z5avom$ = associateWith_0;
    package$sequences.toCollection_gtszxp$ = toCollection_9;
    package$sequences.toHashSet_veqyi0$ = toHashSet_9;
    package$sequences.toList_veqyi0$ = toList_10;
    package$sequences.toMutableList_veqyi0$ = toMutableList_10;
    package$sequences.toSet_veqyi0$ = toSet_9;
    package$sequences.flatMap_49vfel$ = flatMap_10;
    package$collections.addAll_tj7pfx$ = addAll_0;
    package$sequences.flatMapTo_skhdnd$ = flatMapTo_10;
    package$sequences.groupByTo_m5ds0u$ = groupByTo_19;
    package$sequences.groupBy_z5avom$ = groupBy_19;
    package$sequences.groupByTo_r8laog$ = groupByTo_20;
    package$sequences.groupBy_rpj48c$ = groupBy_20;
    package$sequences.groupingBy_z5avom$ = groupingBy_1;
    package$sequences.map_z5avom$ = map_10;
    package$sequences.mapIndexed_b7yuyq$ = mapIndexed_9;
    package$sequences.mapIndexedNotNull_pqenxb$ = mapIndexedNotNull_1;
    package$sequences.mapIndexedNotNullTo_eyjglh$ = mapIndexedNotNullTo_1;
    package$sequences.mapIndexedTo_49r4ke$ = mapIndexedTo_9;
    package$sequences.mapNotNull_qpz9h9$ = mapNotNull_2;
    package$sequences.forEach_o41pun$ = forEach_10;
    package$sequences.mapNotNullTo_u5l3of$ = mapNotNullTo_2;
    package$sequences.mapTo_kntv26$ = mapTo_10;
    package$sequences.withIndex_veqyi0$ = withIndex_9;
    package$sequences.distinct_veqyi0$ = distinct_9;
    package$sequences.distinctBy_z5avom$ = distinctBy_9;
    package$sequences.toMutableSet_veqyi0$ = toMutableSet_9;
    package$sequences.all_euau3h$ = all_10;
    package$sequences.any_veqyi0$ = any_21;
    package$sequences.any_euau3h$ = any_22;
    package$sequences.count_veqyi0$ = count_22;
    package$sequences.count_euau3h$ = count_23;
    package$sequences.fold_azbry2$ = fold_9;
    package$sequences.foldIndexed_wxmp26$ = foldIndexed_9;
    package$sequences.max_1bslqu$ = max_12;
    package$sequences.max_8rwv2f$ = max_13;
    package$sequences.max_gtzq52$ = max_14;
    package$sequences.maxBy_aht3pn$ = maxBy_10;
    package$sequences.maxWith_vjgqpk$ = maxWith_10;
    package$sequences.min_1bslqu$ = min_12;
    package$sequences.min_8rwv2f$ = min_13;
    package$sequences.min_gtzq52$ = min_14;
    package$sequences.minBy_aht3pn$ = minBy_10;
    package$sequences.minWith_vjgqpk$ = minWith_10;
    package$sequences.none_veqyi0$ = none_21;
    package$sequences.none_euau3h$ = none_22;
    package$sequences.onEach_o41pun$ = onEach_1;
    package$sequences.reduce_linb1r$ = reduce_9;
    package$sequences.reduceIndexed_8denzp$ = reduceIndexed_9;
    package$sequences.reduceOrNull_linb1r$ = reduceOrNull_9;
    package$sequences.scan_azbry2$ = scan_9;
    package$sequences.scanIndexed_wxmp26$ = scanIndexed_9;
    package$sequences.scanReduce_linb1r$ = scanReduce_9;
    package$sequences.scanReduceIndexed_8denzp$ = scanReduceIndexed_9;
    package$sequences.sumBy_gvemys$ = sumBy_9;
    package$sequences.sumByDouble_b4hqx8$ = sumByDouble_9;
    package$sequences.requireNoNulls_q2m9h7$ = requireNoNulls_2;
    package$sequences.chunked_wuwhe2$ = chunked_1;
    package$sequences.chunked_b62g8t$ = chunked_2;
    package$sequences.minus_9h40j2$ = minus_3;
    package$sequences.minus_5jckhn$ = minus_4;
    package$sequences.minus_639hpx$ = minus_5;
    package$sequences.minus_v0iwhp$ = minus_6;
    package$sequences.partition_euau3h$ = partition_9;
    package$sequences.plus_9h40j2$ = plus_7;
    package$sequences.plus_5jckhn$ = plus_8;
    package$sequences.plus_639hpx$ = plus_9;
    package$sequences.plus_v0iwhp$ = plus_10;
    package$sequences.windowed_1ll6yl$ = windowed_1;
    package$sequences.windowed_4fyara$ = windowed_2;
    package$sequences.zip_r7q3s9$ = zip_55;
    package$sequences.zip_etk53i$ = zip_56;
    package$sequences.zipWithNext_veqyi0$ = zipWithNext_1;
    package$sequences.zipWithNext_k332kq$ = zipWithNext_2;
    package$sequences.joinTo_q99qgx$ = joinTo_9;
    package$sequences.joinToString_853xkz$ = joinToString_9;
    package$sequences.asIterable_veqyi0$ = asIterable_10;
    package$sequences.average_in95sd$ = average_17;
    package$sequences.average_wxyyw7$ = average_18;
    package$sequences.average_j17fkc$ = average_19;
    package$sequences.average_n83ncx$ = average_20;
    package$sequences.average_8rwv2f$ = average_21;
    package$sequences.average_1bslqu$ = average_22;
    package$sequences.sum_in95sd$ = sum_17;
    package$sequences.sum_wxyyw7$ = sum_18;
    package$sequences.sum_j17fkc$ = sum_19;
    package$sequences.sum_n83ncx$ = sum_20;
    package$sequences.sum_8rwv2f$ = sum_21;
    package$sequences.sum_1bslqu$ = sum_22;
    package$collections.minus_xfiyik$ = minus_7;
    package$collections.minus_ws1dkn$ = minus_8;
    package$collections.minus_khz7k3$ = minus_9;
    package$collections.minus_dk0kmn$ = minus_10;
    package$collections.plus_xfiyik$ = plus_11;
    package$collections.plus_ws1dkn$ = plus_12;
    package$collections.plus_khz7k3$ = plus_13;
    package$collections.plus_dk0kmn$ = plus_14;
    var package$text = package$kotlin.text || (package$kotlin.text = {});
    package$text.get_lastIndex_gw00vp$ = get_lastIndex_13;
    package$text.getOrNull_94bcnn$ = getOrNull_9;
    package$text.firstOrNull_2pivbd$ = firstOrNull_23;
    package$text.lastOrNull_2pivbd$ = lastOrNull_24;
    package$text.first_gw00vp$ = first_22;
    package$text.iterator_gw00vp$ = iterator_4;
    package$text.first_2pivbd$ = first_23;
    package$text.firstOrNull_gw00vp$ = firstOrNull_22;
    package$text.get_indices_gw00vp$ = get_indices_13;
    package$text.indexOfFirst_2pivbd$ = indexOfFirst_11;
    package$text.indexOfLast_2pivbd$ = indexOfLast_11;
    package$text.last_gw00vp$ = last_23;
    package$text.last_2pivbd$ = last_24;
    package$text.lastOrNull_gw00vp$ = lastOrNull_23;
    package$text.random_kewcp8$ = random_26;
    package$text.randomOrNull_kewcp8$ = randomOrNull_26;
    package$text.single_gw00vp$ = single_22;
    package$text.single_2pivbd$ = single_23;
    package$text.singleOrNull_gw00vp$ = singleOrNull_22;
    package$text.singleOrNull_2pivbd$ = singleOrNull_23;
    package$text.drop_94bcnn$ = drop_10;
    package$text.drop_6ic1pp$ = drop_11;
    package$text.dropLast_94bcnn$ = dropLast_9;
    package$text.dropLast_6ic1pp$ = dropLast_10;
    package$text.dropLastWhile_2pivbd$ = dropLastWhile_9;
    package$text.dropLastWhile_ouje1d$ = dropLastWhile_10;
    package$text.dropWhile_2pivbd$ = dropWhile_10;
    package$text.dropWhile_ouje1d$ = dropWhile_11;
    package$text.StringBuilder_init = StringBuilder_init_1;
    package$text.filterTo_2vcf41$ = filterTo_10;
    package$text.filter_2pivbd$ = filter_10;
    package$text.filter_ouje1d$ = filter_11;
    package$text.filterIndexedTo_2omorh$ = filterIndexedTo_10;
    package$text.filterIndexed_3xan9v$ = filterIndexed_10;
    package$text.filterIndexed_4cgdv1$ = filterIndexed_11;
    package$text.forEachIndexed_q254al$ = forEachIndexed_10;
    package$text.filterNotTo_2vcf41$ = filterNotTo_10;
    package$text.filterNot_2pivbd$ = filterNot_10;
    package$text.filterNot_ouje1d$ = filterNot_11;
    package$text.slice_i511yc$ = slice_19;
    package$text.slice_fc3b62$ = slice_20;
    package$text.slice_ymrxhc$ = slice_21;
    package$text.take_94bcnn$ = take_10;
    package$text.take_6ic1pp$ = take_11;
    package$text.takeLast_94bcnn$ = takeLast_9;
    package$text.takeLast_6ic1pp$ = takeLast_10;
    package$text.takeLastWhile_2pivbd$ = takeLastWhile_9;
    package$text.takeLastWhile_ouje1d$ = takeLastWhile_10;
    package$text.takeWhile_2pivbd$ = takeWhile_10;
    package$text.takeWhile_ouje1d$ = takeWhile_11;
    package$text.reversed_gw00vp$ = reversed_12;
    package$text.associateTo_1pzh9q$ = associateTo_10;
    package$text.associate_b3xl1f$ = associate_10;
    package$text.associateByTo_lm6k0r$ = associateByTo_21;
    package$text.associateBy_16h5q4$ = associateBy_21;
    package$text.associateByTo_woixqq$ = associateByTo_22;
    package$text.associateBy_m7aj6v$ = associateBy_22;
    package$text.associateWithTo_dykjl$ = associateWithTo_1;
    package$text.associateWith_16h5q4$ = associateWith_1;
    package$text.toCollection_7uruwd$ = toCollection_10;
    package$text.toHashSet_gw00vp$ = toHashSet_10;
    package$text.toList_gw00vp$ = toList_11;
    package$text.toMutableList_gw00vp$ = toMutableList_11;
    package$text.toSet_gw00vp$ = toSet_10;
    package$text.flatMapTo_kg2lzy$ = flatMapTo_11;
    package$text.flatMap_83nucd$ = flatMap_11;
    package$text.groupByTo_mntg7c$ = groupByTo_21;
    package$text.groupBy_16h5q4$ = groupBy_21;
    package$text.groupByTo_dgnza9$ = groupByTo_22;
    package$text.groupBy_m7aj6v$ = groupBy_22;
    package$text.groupingBy_16h5q4$ = groupingBy_2;
    package$text.mapTo_wrnknd$ = mapTo_11;
    package$text.map_16h5q4$ = map_11;
    package$text.mapIndexedTo_4f8103$ = mapIndexedTo_10;
    package$text.mapIndexed_bnyqco$ = mapIndexed_10;
    package$text.mapIndexedNotNullTo_cynlyo$ = mapIndexedNotNullTo_2;
    package$text.mapIndexedNotNull_iqd6dn$ = mapIndexedNotNull_2;
    package$text.mapNotNullTo_jcwsr8$ = mapNotNullTo_3;
    package$text.mapNotNull_10i1d3$ = mapNotNull_3;
    package$text.forEach_57f55l$ = forEach_11;
    package$text.withIndex_gw00vp$ = withIndex_10;
    package$text.all_2pivbd$ = all_11;
    package$text.any_gw00vp$ = any_23;
    package$text.any_2pivbd$ = any_24;
    package$text.count_2pivbd$ = count_25;
    package$text.fold_riyz04$ = fold_10;
    package$text.foldIndexed_l9i73k$ = foldIndexed_10;
    package$text.foldRight_xy5j5e$ = foldRight_9;
    package$text.foldRightIndexed_bpin9y$ = foldRightIndexed_9;
    package$text.max_gw00vp$ = max_15;
    package$text.maxBy_lwkw4q$ = maxBy_11;
    package$text.maxWith_mfvi1w$ = maxWith_11;
    package$text.min_gw00vp$ = min_15;
    package$text.minBy_lwkw4q$ = minBy_11;
    package$text.minWith_mfvi1w$ = minWith_11;
    package$text.none_gw00vp$ = none_23;
    package$text.none_2pivbd$ = none_24;
    package$text.onEach_jdhw1f$ = onEach_2;
    package$text.reduce_bc19pa$ = reduce_10;
    package$text.reduceIndexed_8uyn22$ = reduceIndexed_10;
    package$text.reduceOrNull_bc19pa$ = reduceOrNull_10;
    package$text.reduceRight_bc19pa$ = reduceRight_9;
    package$text.reduceRightIndexed_8uyn22$ = reduceRightIndexed_9;
    package$text.reduceRightOrNull_bc19pa$ = reduceRightOrNull_9;
    package$text.scan_riyz04$ = scan_10;
    package$text.scanIndexed_l9i73k$ = scanIndexed_10;
    package$text.scanReduce_bc19pa$ = scanReduce_10;
    package$text.scanReduceIndexed_8uyn22$ = scanReduceIndexed_10;
    package$text.sumBy_kg4n8i$ = sumBy_10;
    package$text.sumByDouble_4bpanu$ = sumByDouble_10;
    package$text.chunked_94bcnn$ = chunked_3;
    package$text.chunked_hq8uo9$ = chunked_4;
    package$text.chunkedSequence_94bcnn$ = chunkedSequence;
    package$text.chunkedSequence_hq8uo9$ = chunkedSequence_0;
    package$text.partition_2pivbd$ = partition_10;
    package$text.partition_ouje1d$ = partition_11;
    package$text.windowed_l0nco6$ = windowed_3;
    package$text.windowed_tbil1a$ = windowed_4;
    package$text.windowedSequence_l0nco6$ = windowedSequence;
    package$text.windowedSequence_tbil1a$ = windowedSequence_0;
    package$text.zip_b6aurr$ = zip_57;
    package$text.zip_tac5w1$ = zip_58;
    package$text.zipWithNext_gw00vp$ = zipWithNext_3;
    package$text.zipWithNext_hf4kax$ = zipWithNext_4;
    package$text.asIterable_gw00vp$ = asIterable_11;
    package$text.asSequence_gw00vp$ = asSequence_11;
    package$collections.get_lastIndex_9hsmwz$ = get_lastIndex_8;
    package$collections.get_lastIndex_rnn80q$ = get_lastIndex_9;
    package$collections.get_lastIndex_o5f02i$ = get_lastIndex_10;
    package$collections.get_lastIndex_k4ndbq$ = get_lastIndex_11;
    package$collections.getOrNull_h8io69$ = getOrNull_10;
    package$collections.getOrNull_k9lyrg$ = getOrNull_11;
    package$collections.getOrNull_hlz5c8$ = getOrNull_12;
    package$collections.getOrNull_7156lo$ = getOrNull_13;
    package$collections.firstOrNull_9hsmwz$ = firstOrNull_24;
    package$collections.firstOrNull_rnn80q$ = firstOrNull_25;
    package$collections.firstOrNull_o5f02i$ = firstOrNull_26;
    package$collections.firstOrNull_k4ndbq$ = firstOrNull_27;
    package$collections.get_indices_9hsmwz$ = get_indices_8;
    package$collections.get_indices_rnn80q$ = get_indices_9;
    package$collections.get_indices_o5f02i$ = get_indices_10;
    package$collections.get_indices_k4ndbq$ = get_indices_11;
    package$collections.lastOrNull_9hsmwz$ = lastOrNull_25;
    package$collections.lastOrNull_rnn80q$ = lastOrNull_26;
    package$collections.lastOrNull_o5f02i$ = lastOrNull_27;
    package$collections.lastOrNull_k4ndbq$ = lastOrNull_28;
    package$collections.random_b7l3ya$ = random_31;
    package$collections.random_2qnwpx$ = random_32;
    package$collections.random_i3mfo9$ = random_33;
    package$collections.random_7icwln$ = random_34;
    package$collections.randomOrNull_b7l3ya$ = randomOrNull_31;
    package$collections.randomOrNull_2qnwpx$ = randomOrNull_32;
    package$collections.randomOrNull_i3mfo9$ = randomOrNull_33;
    package$collections.randomOrNull_7icwln$ = randomOrNull_34;
    package$kotlin.UInt = UInt;
    package$kotlin.ULong = ULong;
    package$kotlin.UByte = UByte;
    package$kotlin.UShort = UShort;
    package$collections.singleOrNull_9hsmwz$ = singleOrNull_24;
    package$collections.singleOrNull_rnn80q$ = singleOrNull_25;
    package$collections.singleOrNull_o5f02i$ = singleOrNull_26;
    package$collections.singleOrNull_k4ndbq$ = singleOrNull_27;
    package$collections.drop_h8io69$ = drop_12;
    package$collections.drop_k9lyrg$ = drop_13;
    package$collections.drop_hlz5c8$ = drop_14;
    package$collections.drop_7156lo$ = drop_15;
    package$collections.dropLast_h8io69$ = dropLast_11;
    package$collections.dropLast_k9lyrg$ = dropLast_12;
    package$collections.dropLast_hlz5c8$ = dropLast_13;
    package$collections.dropLast_7156lo$ = dropLast_14;
    package$collections.take_h8io69$ = take_12;
    package$collections.take_k9lyrg$ = take_13;
    package$collections.take_hlz5c8$ = take_14;
    package$collections.take_7156lo$ = take_15;
    package$collections.slice_s5302e$ = slice_23;
    package$collections.slice_ol8wd$ = slice_24;
    package$collections.slice_ct67gf$ = slice_25;
    package$collections.slice_n4i5zx$ = slice_26;
    package$collections.slice_m409qm$ = slice_27;
    package$collections.slice_o2bt9t$ = slice_28;
    package$collections.slice_pku3j9$ = slice_29;
    package$collections.slice_1clitb$ = slice_30;
    package$collections.sliceArray_fhxhza$ = sliceArray_17;
    package$collections.sliceArray_ev9i1p$ = sliceArray_18;
    package$collections.sliceArray_lpzpbj$ = sliceArray_19;
    package$collections.sliceArray_q24qi5$ = sliceArray_20;
    package$collections.sliceArray_s5302e$ = sliceArray_21;
    package$collections.sliceArray_ol8wd$ = sliceArray_22;
    package$collections.sliceArray_ct67gf$ = sliceArray_23;
    package$collections.sliceArray_n4i5zx$ = sliceArray_24;
    package$collections.takeLast_h8io69$ = takeLast_11;
    package$collections.takeLast_k9lyrg$ = takeLast_12;
    package$collections.takeLast_hlz5c8$ = takeLast_13;
    package$collections.takeLast_7156lo$ = takeLast_14;
    package$collections.reversed_9hsmwz$ = reversed_14;
    package$collections.reversed_rnn80q$ = reversed_15;
    package$collections.reversed_o5f02i$ = reversed_16;
    package$collections.reversed_k4ndbq$ = reversed_17;
    package$collections.sortDescending_9hsmwz$ = sortDescending_8;
    package$collections.sortDescending_rnn80q$ = sortDescending_9;
    package$collections.sortDescending_o5f02i$ = sortDescending_10;
    package$collections.sortDescending_k4ndbq$ = sortDescending_11;
    package$collections.sorted_9hsmwz$ = sorted_9;
    package$collections.sorted_rnn80q$ = sorted_10;
    package$collections.sorted_o5f02i$ = sorted_11;
    package$collections.sorted_k4ndbq$ = sorted_12;
    package$collections.sortedArray_9hsmwz$ = sortedArray_7;
    package$collections.sortedArray_rnn80q$ = sortedArray_8;
    package$collections.sortedArray_o5f02i$ = sortedArray_9;
    package$collections.sortedArray_k4ndbq$ = sortedArray_10;
    package$collections.sortedArrayDescending_9hsmwz$ = sortedArrayDescending_7;
    package$collections.sortedArrayDescending_rnn80q$ = sortedArrayDescending_8;
    package$collections.sortedArrayDescending_o5f02i$ = sortedArrayDescending_9;
    package$collections.sortedArrayDescending_k4ndbq$ = sortedArrayDescending_10;
    package$collections.sortedDescending_9hsmwz$ = sortedDescending_9;
    package$collections.sortedDescending_rnn80q$ = sortedDescending_10;
    package$collections.sortedDescending_o5f02i$ = sortedDescending_11;
    package$collections.sortedDescending_k4ndbq$ = sortedDescending_12;
    package$collections.contentEquals_yvstjl$ = contentEquals_0;
    package$collections.contentEquals_oi0tr9$ = contentEquals_1;
    package$collections.contentEquals_7u5a2r$ = contentEquals_2;
    package$collections.contentEquals_7t078x$ = contentEquals_3;
    package$collections.contentHashCode_9hsmwz$ = contentHashCode_0;
    package$collections.contentHashCode_rnn80q$ = contentHashCode_1;
    package$collections.contentHashCode_o5f02i$ = contentHashCode_2;
    package$collections.contentHashCode_k4ndbq$ = contentHashCode_3;
    package$collections.contentToString_9hsmwz$ = contentToString;
    package$collections.contentToString_rnn80q$ = contentToString_0;
    package$collections.contentToString_o5f02i$ = contentToString_1;
    package$collections.contentToString_k4ndbq$ = contentToString_2;
    package$collections.copyOf_tmsbgo$ = copyOf_10;
    package$collections.copyOf_se6h4x$ = copyOf_11;
    package$collections.copyOf_964n91$ = copyOf_8;
    package$collections.copyOf_i2lc79$ = copyOf_9;
    package$collections.copyOf_c03ot6$ = copyOf_18;
    package$collections.copyOf_3aefkx$ = copyOf_19;
    package$collections.copyOf_mrm5p$ = copyOf_16;
    package$collections.copyOf_m2jy6x$ = copyOf_17;
    package$collections.copyOfRange_6pxxqk$ = copyOfRange_6;
    package$collections.copyOfRange_2n8m0j$ = copyOfRange_7;
    package$collections.copyOfRange_ietg8x$ = copyOfRange_4;
    package$collections.copyOfRange_qxueih$ = copyOfRange_5;
    package$collections.fill_9p0cei$ = fill;
    package$collections.fill_u0vwim$ = fill_0;
    package$collections.fill_i88zna$ = fill_1;
    package$collections.fill_ujo1re$ = fill_2;
    package$collections.plus_c03ot6$ = plus_30;
    package$collections.plus_uxdaoa$ = plus_31;
    package$collections.plus_jlnu8a$ = plus_28;
    package$collections.plus_s7ir3o$ = plus_29;
    package$collections.plus_gm02yb$ = plus_19;
    package$collections.plus_677egv$ = plus_20;
    package$collections.plus_38kby7$ = plus_21;
    package$collections.plus_c0pbm5$ = plus_22;
    package$collections.plus_mgkctd$ = plus_48;
    package$collections.plus_tq12cv$ = plus_49;
    package$collections.plus_ndt7zj$ = plus_46;
    package$collections.plus_907jet$ = plus_47;
    package$collections.sort_9hsmwz$ = sort_0;
    package$collections.sort_rnn80q$ = sort_1;
    package$collections.sort_o5f02i$ = sort_2;
    package$collections.sort_k4ndbq$ = sort_3;
    package$collections.toTypedArray_9hsmwz$ = toTypedArray;
    package$collections.toTypedArray_rnn80q$ = toTypedArray_0;
    package$collections.toTypedArray_o5f02i$ = toTypedArray_1;
    package$collections.toTypedArray_k4ndbq$ = toTypedArray_2;
    package$collections.toUByteArray_hpq79g$ = toUByteArray;
    package$collections.toUIntArray_ndskub$ = toUIntArray;
    package$collections.toULongArray_d4vpow$ = toULongArray;
    package$collections.toUShortArray_nmmbue$ = toUShortArray;
    package$collections.withIndex_9hsmwz$ = withIndex_11;
    package$collections.withIndex_rnn80q$ = withIndex_12;
    package$collections.withIndex_o5f02i$ = withIndex_13;
    package$collections.withIndex_k4ndbq$ = withIndex_14;
    package$collections.max_9hsmwz$ = max_16;
    package$collections.max_rnn80q$ = max_17;
    package$collections.max_o5f02i$ = max_18;
    package$collections.max_k4ndbq$ = max_19;
    package$collections.maxWith_tn4aoe$ = maxWith_12;
    package$collections.maxWith_b44h28$ = maxWith_13;
    package$collections.maxWith_yaj5y8$ = maxWith_14;
    package$collections.maxWith_902cl0$ = maxWith_15;
    package$collections.min_9hsmwz$ = min_16;
    package$collections.min_rnn80q$ = min_17;
    package$collections.min_o5f02i$ = min_18;
    package$collections.min_k4ndbq$ = min_19;
    package$collections.minWith_tn4aoe$ = minWith_12;
    package$collections.minWith_b44h28$ = minWith_13;
    package$collections.minWith_yaj5y8$ = minWith_14;
    package$collections.minWith_902cl0$ = minWith_15;
    package$collections.zip_dqp5xi$ = zip_59;
    package$collections.zip_sgqn2v$ = zip_60;
    package$collections.zip_t2lyjh$ = zip_61;
    package$collections.zip_60tpzb$ = zip_62;
    package$collections.zip_6x2jmc$ = zip_67;
    package$collections.zip_iifz73$ = zip_68;
    package$collections.zip_19c7vn$ = zip_69;
    package$collections.zip_y9wwht$ = zip_70;
    package$collections.zip_yvstjl$ = zip_75;
    package$collections.zip_oi0tr9$ = zip_76;
    package$collections.zip_7u5a2r$ = zip_77;
    package$collections.zip_7t078x$ = zip_78;
    package$collections.sum_ndskub$ = sum_23;
    package$collections.sum_d4vpow$ = sum_24;
    package$collections.sum_hpq79g$ = sum_25;
    package$collections.sum_nmmbue$ = sum_26;
    package$collections.toUByteArray_dnd7nw$ = toUByteArray_1;
    package$collections.toUIntArray_8tr39h$ = toUIntArray_1;
    package$collections.toULongArray_92iq3c$ = toULongArray_1;
    package$collections.toUShortArray_vdg9qq$ = toUShortArray_1;
    package$collections.sum_hbg50x$ = sum_31;
    package$collections.sum_tyefd0$ = sum_32;
    package$collections.sum_yj8wxk$ = sum_33;
    package$collections.sum_n76072$ = sum_34;
    package$comparisons.maxOf_oqfnby$ = maxOf_1;
    package$comparisons.maxOf_jpm79w$ = maxOf_2;
    package$comparisons.maxOf_jl2jf8$ = maxOf_3;
    package$comparisons.maxOf_2ahd1g$ = maxOf_4;
    package$comparisons.minOf_oqfnby$ = minOf_1;
    package$comparisons.minOf_jpm79w$ = minOf_2;
    package$comparisons.minOf_jl2jf8$ = minOf_3;
    package$comparisons.minOf_2ahd1g$ = minOf_4;
    package$ranges.random_7v08js$ = random_37;
    package$ranges.random_nk0vix$ = random_38;
    package$ranges.randomOrNull_7v08js$ = randomOrNull_37;
    package$ranges.randomOrNull_nk0vix$ = randomOrNull_38;
    package$ranges.contains_dwk81l$ = contains_45;
    package$ranges.contains_jxvyg8$ = contains_46;
    package$ranges.contains_at9xrl$ = contains_47;
    package$ranges.contains_dwe1qd$ = contains_48;
    package$ranges.contains_4lp1ib$ = contains_49;
    package$ranges.contains_kug9t0$ = contains_50;
    package$ranges.downTo_y54h1t$ = downTo_16;
    package$ranges.downTo_ibvkqp$ = downTo_17;
    package$ranges.downTo_y9o4wh$ = downTo_18;
    package$ranges.downTo_rdgzmv$ = downTo_19;
    package$ranges.reversed_i0sryf$ = reversed_18;
    package$ranges.reversed_pys8o6$ = reversed_19;
    package$ranges.step_f4enhh$ = step_2;
    package$ranges.step_7edafj$ = step_3;
    package$ranges.until_y54h1t$ = until_16;
    package$ranges.until_ibvkqp$ = until_17;
    package$ranges.until_y9o4wh$ = until_18;
    package$ranges.until_rdgzmv$ = until_19;
    package$ranges.coerceAtLeast_ibvkqp$ = coerceAtLeast_6;
    package$ranges.coerceAtLeast_y9o4wh$ = coerceAtLeast_7;
    package$ranges.coerceAtLeast_y54h1t$ = coerceAtLeast_8;
    package$ranges.coerceAtLeast_rdgzmv$ = coerceAtLeast_9;
    package$ranges.coerceAtMost_ibvkqp$ = coerceAtMost_6;
    package$ranges.coerceAtMost_y9o4wh$ = coerceAtMost_7;
    package$ranges.coerceAtMost_y54h1t$ = coerceAtMost_8;
    package$ranges.coerceAtMost_rdgzmv$ = coerceAtMost_9;
    package$ranges.coerceIn_c1v3ga$ = coerceIn_10;
    package$ranges.coerceIn_x7zcdb$ = coerceIn_11;
    package$ranges.coerceIn_mkpui5$ = coerceIn_12;
    package$ranges.coerceIn_9bl8v3$ = coerceIn_13;
    package$ranges.coerceIn_na0ld7$ = coerceIn_14;
    package$ranges.coerceIn_pt40p3$ = coerceIn_15;
    package$sequences.sum_qwmbzz$ = sum_35;
    package$sequences.sum_guin2q$ = sum_36;
    package$sequences.sum_lfd4na$ = sum_37;
    package$sequences.sum_3cv170$ = sum_38;
    var package$math = package$kotlin.math || (package$kotlin.math = {});
    Object.defineProperty(package$math, 'PI', {get: function () {
      return PI;
    }});
    Object.defineProperty(package$math, 'E', {get: function () {
      return E;
    }});
    package$kotlin.Annotation = Annotation;
    package$kotlin.CharSequence = CharSequence;
    package$collections.Iterable = Iterable;
    package$collections.MutableIterable = MutableIterable;
    package$collections.MutableCollection = MutableCollection;
    package$collections.List = List;
    package$collections.MutableList = MutableList;
    package$collections.Set = Set;
    package$collections.MutableSet = MutableSet;
    Map.Entry = Map$Entry;
    package$collections.Map = Map;
    MutableMap.MutableEntry = MutableMap$MutableEntry;
    package$collections.MutableMap = MutableMap;
    package$kotlin.Function = Function_0;
    package$collections.Iterator = Iterator;
    package$collections.MutableIterator = MutableIterator;
    package$collections.ListIterator = ListIterator;
    package$collections.MutableListIterator = MutableListIterator;
    package$collections.ByteIterator = ByteIterator;
    package$collections.CharIterator = CharIterator;
    package$collections.ShortIterator = ShortIterator;
    package$collections.IntIterator = IntIterator;
    package$collections.LongIterator = LongIterator;
    package$collections.FloatIterator = FloatIterator;
    package$collections.DoubleIterator = DoubleIterator;
    package$collections.BooleanIterator = BooleanIterator;
    package$ranges.CharProgressionIterator = CharProgressionIterator;
    package$ranges.IntProgressionIterator = IntProgressionIterator;
    package$ranges.LongProgressionIterator = LongProgressionIterator;
    Object.defineProperty(CharProgression, 'Companion', {get: CharProgression$Companion_getInstance});
    package$ranges.CharProgression = CharProgression;
    Object.defineProperty(IntProgression, 'Companion', {get: IntProgression$Companion_getInstance});
    package$ranges.IntProgression = IntProgression;
    Object.defineProperty(LongProgression, 'Companion', {get: LongProgression$Companion_getInstance});
    package$ranges.LongProgression = LongProgression;
    package$ranges.ClosedRange = ClosedRange;
    Object.defineProperty(CharRange, 'Companion', {get: CharRange$Companion_getInstance});
    package$ranges.CharRange = CharRange;
    Object.defineProperty(IntRange, 'Companion', {get: IntRange$Companion_getInstance});
    package$ranges.IntRange = IntRange;
    Object.defineProperty(LongRange, 'Companion', {get: LongRange$Companion_getInstance});
    package$ranges.LongRange = LongRange;
    Object.defineProperty(package$kotlin, 'Unit', {get: Unit_getInstance});
    Object.defineProperty(AnnotationTarget, 'CLASS', {get: AnnotationTarget$CLASS_getInstance});
    Object.defineProperty(AnnotationTarget, 'ANNOTATION_CLASS', {get: AnnotationTarget$ANNOTATION_CLASS_getInstance});
    Object.defineProperty(AnnotationTarget, 'TYPE_PARAMETER', {get: AnnotationTarget$TYPE_PARAMETER_getInstance});
    Object.defineProperty(AnnotationTarget, 'PROPERTY', {get: AnnotationTarget$PROPERTY_getInstance});
    Object.defineProperty(AnnotationTarget, 'FIELD', {get: AnnotationTarget$FIELD_getInstance});
    Object.defineProperty(AnnotationTarget, 'LOCAL_VARIABLE', {get: AnnotationTarget$LOCAL_VARIABLE_getInstance});
    Object.defineProperty(AnnotationTarget, 'VALUE_PARAMETER', {get: AnnotationTarget$VALUE_PARAMETER_getInstance});
    Object.defineProperty(AnnotationTarget, 'CONSTRUCTOR', {get: AnnotationTarget$CONSTRUCTOR_getInstance});
    Object.defineProperty(AnnotationTarget, 'FUNCTION', {get: AnnotationTarget$FUNCTION_getInstance});
    Object.defineProperty(AnnotationTarget, 'PROPERTY_GETTER', {get: AnnotationTarget$PROPERTY_GETTER_getInstance});
    Object.defineProperty(AnnotationTarget, 'PROPERTY_SETTER', {get: AnnotationTarget$PROPERTY_SETTER_getInstance});
    Object.defineProperty(AnnotationTarget, 'TYPE', {get: AnnotationTarget$TYPE_getInstance});
    Object.defineProperty(AnnotationTarget, 'EXPRESSION', {get: AnnotationTarget$EXPRESSION_getInstance});
    Object.defineProperty(AnnotationTarget, 'FILE', {get: AnnotationTarget$FILE_getInstance});
    Object.defineProperty(AnnotationTarget, 'TYPEALIAS', {get: AnnotationTarget$TYPEALIAS_getInstance});
    var package$annotation = package$kotlin.annotation || (package$kotlin.annotation = {});
    package$annotation.AnnotationTarget = AnnotationTarget;
    Object.defineProperty(AnnotationRetention, 'SOURCE', {get: AnnotationRetention$SOURCE_getInstance});
    Object.defineProperty(AnnotationRetention, 'BINARY', {get: AnnotationRetention$BINARY_getInstance});
    Object.defineProperty(AnnotationRetention, 'RUNTIME', {get: AnnotationRetention$RUNTIME_getInstance});
    package$annotation.AnnotationRetention = AnnotationRetention;
    package$annotation.Target = Target;
    package$annotation.Retention = Retention;
    package$annotation.Repeatable = Repeatable;
    package$annotation.MustBeDocumented = MustBeDocumented;
    var package$internal = package$kotlin.internal || (package$kotlin.internal = {});
    package$internal.PureReifiable = PureReifiable;
    package$internal.PlatformDependent = PlatformDependent;
    package$internal.getProgressionLastElement_qt1dr2$ = getProgressionLastElement;
    package$internal.getProgressionLastElement_b9bd0d$ = getProgressionLastElement_0;
    var package$reflect = package$kotlin.reflect || (package$kotlin.reflect = {});
    package$reflect.KAnnotatedElement = KAnnotatedElement;
    package$reflect.KCallable = KCallable;
    package$reflect.KClass = KClass;
    package$reflect.KClassifier = KClassifier;
    package$reflect.KDeclarationContainer = KDeclarationContainer;
    package$reflect.KFunction = KFunction;
    Object.defineProperty(KParameter$Kind, 'INSTANCE', {get: KParameter$Kind$INSTANCE_getInstance});
    Object.defineProperty(KParameter$Kind, 'EXTENSION_RECEIVER', {get: KParameter$Kind$EXTENSION_RECEIVER_getInstance});
    Object.defineProperty(KParameter$Kind, 'VALUE', {get: KParameter$Kind$VALUE_getInstance});
    KParameter.Kind = KParameter$Kind;
    package$reflect.KParameter = KParameter;
    KProperty.Accessor = KProperty$Accessor;
    KProperty.Getter = KProperty$Getter;
    package$reflect.KProperty = KProperty;
    KMutableProperty.Setter = KMutableProperty$Setter;
    package$reflect.KMutableProperty = KMutableProperty;
    KProperty0.Getter = KProperty0$Getter;
    package$reflect.KProperty0 = KProperty0;
    KMutableProperty0.Setter = KMutableProperty0$Setter;
    package$reflect.KMutableProperty0 = KMutableProperty0;
    KProperty1.Getter = KProperty1$Getter;
    package$reflect.KProperty1 = KProperty1;
    KMutableProperty1.Setter = KMutableProperty1$Setter;
    package$reflect.KMutableProperty1 = KMutableProperty1;
    KProperty2.Getter = KProperty2$Getter;
    package$reflect.KProperty2 = KProperty2;
    KMutableProperty2.Setter = KMutableProperty2$Setter;
    package$reflect.KMutableProperty2 = KMutableProperty2;
    package$reflect.KType = KType;
    Object.defineProperty(KTypeProjection, 'Companion', {get: KTypeProjection$Companion_getInstance});
    package$reflect.KTypeProjection = KTypeProjection;
    package$reflect.KTypeParameter = KTypeParameter;
    Object.defineProperty(KVariance, 'INVARIANT', {get: KVariance$INVARIANT_getInstance});
    Object.defineProperty(KVariance, 'IN', {get: KVariance$IN_getInstance});
    Object.defineProperty(KVariance, 'OUT', {get: KVariance$OUT_getInstance});
    package$reflect.KVariance = KVariance;
    Object.defineProperty(KVisibility, 'PUBLIC', {get: KVisibility$PUBLIC_getInstance});
    Object.defineProperty(KVisibility, 'PROTECTED', {get: KVisibility$PROTECTED_getInstance});
    Object.defineProperty(KVisibility, 'INTERNAL', {get: KVisibility$INTERNAL_getInstance});
    Object.defineProperty(KVisibility, 'PRIVATE', {get: KVisibility$PRIVATE_getInstance});
    package$reflect.KVisibility = KVisibility;
    _.arrayIterator = arrayIterator;
    _.booleanArrayIterator = booleanArrayIterator;
    _.byteArrayIterator = byteArrayIterator;
    _.shortArrayIterator = shortArrayIterator;
    _.charArrayIterator = charArrayIterator;
    _.intArrayIterator = intArrayIterator;
    _.floatArrayIterator = floatArrayIterator;
    _.doubleArrayIterator = doubleArrayIterator;
    _.longArrayIterator = longArrayIterator;
    _.PropertyMetadata = PropertyMetadata;
    _.noWhenBranchMatched = noWhenBranchMatched;
    _.subSequence = subSequence;
    _.captureStack = captureStack;
    _.newThrowable = newThrowable;
    _.BoxedChar = BoxedChar;
    _.arrayConcat = arrayConcat;
    _.primitiveArrayConcat = primitiveArrayConcat;
    _.booleanArrayOf = booleanArrayOf;
    _.charArrayOf = charArrayOf;
    _.longArrayOf = longArrayOf;
    var package$coroutines = package$kotlin.coroutines || (package$kotlin.coroutines = {});
    package$coroutines.CoroutineImpl = CoroutineImpl;
    Object.defineProperty(package$coroutines, 'CompletedContinuation', {get: CompletedContinuation_getInstance});
    var package$intrinsics = package$coroutines.intrinsics || (package$coroutines.intrinsics = {});
    package$intrinsics.createCoroutineUnintercepted_x18nsh$ = createCoroutineUnintercepted;
    package$intrinsics.createCoroutineUnintercepted_3a617i$ = createCoroutineUnintercepted_0;
    package$intrinsics.intercepted_f9mg25$ = intercepted;
    var package$js = package$kotlin.js || (package$kotlin.js = {});
    package$js.isArrayish_kcmwxo$ = isArrayish;
    package$kotlin.emptyArray_287e2$ = emptyArray;
    package$kotlin.lazy_klfg04$ = lazy;
    package$kotlin.lazy_kls4a0$ = lazy_0;
    package$kotlin.lazy_c7lj6g$ = lazy_1;
    package$kotlin.fillFrom_dgzutr$ = fillFrom;
    package$kotlin.arrayCopyResize_xao4iu$ = arrayCopyResize;
    package$kotlin.arrayPlusCollection_ksxw79$ = arrayPlusCollection;
    package$kotlin.fillFromCollection_40q1uj$ = fillFromCollection;
    package$kotlin.copyArrayType_dgzutr$ = copyArrayType;
    package$kotlin.jsIsType_dgzutr$ = jsIsType;
    package$math.withSign_38ydlf$ = withSign;
    package$kotlin.Long_6xvm5r$ = Long;
    package$kotlin.get_low_nzsbcz$ = get_low;
    package$kotlin.get_high_nzsbcz$ = get_high;
    package$text.toString_if0zpk$ = toString_0;
    package$collections.elementAt_8ujjk8$ = elementAt_2;
    package$collections.elementAt_mrm5p$ = elementAt_3;
    package$collections.elementAt_m2jy6x$ = elementAt_4;
    package$collections.elementAt_c03ot6$ = elementAt_5;
    package$collections.elementAt_3aefkx$ = elementAt_6;
    package$collections.elementAt_rblqex$ = elementAt_7;
    package$collections.elementAt_xgrzbe$ = elementAt_8;
    package$collections.elementAt_1qu12l$ = elementAt_9;
    package$collections.elementAt_gtcw5h$ = elementAt_10;
    package$collections.asList_us0mfu$ = asList;
    package$collections.asList_355ntz$ = asList_7;
    package$collections.arrayCopy = arrayCopy;
    package$collections.copyOf_us0mfu$ = copyOf_7;
    package$collections.copyOf_rjqryz$ = copyOf_12;
    package$collections.copyOf_bvy38s$ = copyOf_13;
    package$collections.copyOf_l1lu5t$ = copyOf_14;
    package$collections.copyOf_355ntz$ = copyOf_15;
    package$collections.copyOf_rblqex$ = copyOf_20;
    package$collections.copyOf_xgrzbe$ = copyOf_21;
    package$collections.copyOf_1qu12l$ = copyOf_22;
    package$collections.copyOf_gtcw5h$ = copyOf_23;
    package$collections.copyOf_8ujjk8$ = copyOf_24;
    package$collections.copyOfRange_5f8l3u$ = copyOfRange_3;
    package$collections.copyOfRange_kh1mav$ = copyOfRange_8;
    package$collections.copyOfRange_yfnal4$ = copyOfRange_9;
    package$collections.copyOfRange_ke2ov9$ = copyOfRange_10;
    package$collections.copyOfRange_wlitf7$ = copyOfRange_11;
    package$collections.fill_jfbbbd$ = fill_3;
    package$collections.fill_6mk3ue$ = fill_4;
    package$collections.fill_htcctw$ = fill_5;
    package$collections.fill_tpuxuu$ = fill_6;
    package$collections.fill_wp4zxy$ = fill_7;
    package$collections.fill_nwy378$ = fill_8;
    package$collections.fill_x4f2cq$ = fill_9;
    package$collections.fill_py0txo$ = fill_10;
    package$collections.fill_t1iw8m$ = fill_11;
    package$collections.plus_mjy6jw$ = plus_27;
    package$collections.plus_tec1tx$ = plus_50;
    package$collections.plus_omthmc$ = plus_32;
    package$collections.plus_pmvpm9$ = plus_51;
    package$collections.plus_taaqy$ = plus_33;
    package$collections.plus_qsfoml$ = plus_52;
    package$collections.plus_yax8s4$ = plus_34;
    package$collections.plus_wxyzfz$ = plus_53;
    package$collections.plus_o2f9me$ = plus_35;
    package$collections.plus_b32j0n$ = plus_36;
    package$collections.plus_lamh9t$ = plus_37;
    package$collections.plus_tizwwv$ = plus_38;
    package$collections.plus_q1yphb$ = plus_39;
    package$collections.plus_nmtg5l$ = plus_40;
    package$collections.plus_gtiwrj$ = plus_41;
    package$collections.plus_5ltrxd$ = plus_42;
    package$collections.plus_cr20yn$ = plus_43;
    package$collections.plus_4ow3it$ = plus_44;
    package$collections.plus_vu4gah$ = plus_45;
    package$collections.plusElement_mjy6jw$ = plusElement_3;
    package$collections.sort_se6h4x$ = sort_4;
    package$collections.sort_pbinho$ = sort_5;
    package$collections.sort_ra7spe$ = sort_6;
    package$collections.toTypedArray_964n91$ = toTypedArray_3;
    package$collections.toTypedArray_i2lc79$ = toTypedArray_4;
    package$collections.toTypedArray_tmsbgo$ = toTypedArray_5;
    package$collections.toTypedArray_se6h4x$ = toTypedArray_6;
    package$collections.toTypedArray_rjqryz$ = toTypedArray_7;
    package$collections.toTypedArray_bvy38s$ = toTypedArray_8;
    package$collections.toTypedArray_l1lu5t$ = toTypedArray_9;
    package$collections.toTypedArray_355ntz$ = toTypedArray_10;
    package$collections.reverse_vvxzk3$ = reverse_12;
    package$comparisons.maxOf_sdesaw$ = maxOf_9;
    package$comparisons.maxOf_3pjtqy$ = maxOf_13;
    package$comparisons.maxOf_73gzaq$ = maxOf_16;
    package$comparisons.minOf_sdesaw$ = minOf_9;
    package$comparisons.minOf_3pjtqy$ = minOf_13;
    package$comparisons.minOf_73gzaq$ = minOf_16;
    package$text.elementAt_94bcnn$ = elementAt_11;
    package$collections.elementAt_h8io69$ = elementAt_12;
    package$collections.elementAt_k9lyrg$ = elementAt_13;
    package$collections.elementAt_hlz5c8$ = elementAt_14;
    package$collections.elementAt_7156lo$ = elementAt_15;
    package$collections.asList_9hsmwz$ = asList_8;
    package$collections.asList_rnn80q$ = asList_9;
    package$collections.asList_o5f02i$ = asList_10;
    package$collections.asList_k4ndbq$ = asList_11;
    var package$jquery = _.jquery || (_.jquery = {});
    var package$ui = package$jquery.ui || (package$jquery.ui = {});
    package$ui.buttonset_vwohdt$ = buttonset;
    package$ui.dialog_vwohdt$ = dialog;
    package$ui.dialog_pm4xy9$ = dialog_0;
    package$ui.dialog_zc05ld$ = dialog_1;
    package$ui.dialog_v89ba5$ = dialog_2;
    package$ui.dialog_pfp31$ = dialog_3;
    package$ui.button_vwohdt$ = button;
    package$ui.accordion_vwohdt$ = accordion;
    package$ui.draggable_pm4xy9$ = draggable;
    package$ui.selectable_vwohdt$ = selectable;
    package$kotlin.Comparator = Comparator;
    package$kotlin.Comparator_x4fedy$ = Comparator_0;
    package$js.native = native;
    package$js.nativeGetter = nativeGetter;
    package$js.nativeSetter = nativeSetter;
    package$js.nativeInvoke = nativeInvoke;
    package$js.library = library;
    package$js.marker = marker;
    package$js.JsName = JsName;
    package$js.JsModule = JsModule;
    package$js.JsNonModule = JsNonModule;
    package$js.JsQualifier = JsQualifier;
    package$js.ExperimentalJsExport = ExperimentalJsExport;
    package$js.JsExport = JsExport;
    var package$jvm = package$kotlin.jvm || (package$kotlin.jvm = {});
    package$jvm.Volatile = Volatile;
    package$jvm.Synchronized = Synchronized;
    package$collections.copyToArray = copyToArray;
    package$collections.copyToArrayImpl = copyToArrayImpl;
    package$collections.copyToExistingArrayImpl = copyToArrayImpl_0;
    package$collections.setOf_mh5how$ = setOf;
    package$collections.mapOf_x2b85n$ = mapOf;
    package$collections.fill_dwdffb$ = fill_12;
    package$collections.shuffle_vvxzk3$ = shuffle;
    package$collections.shuffled_7wnvza$ = shuffled;
    package$collections.sort_4wi501$ = sort_14;
    package$collections.arrayOfNulls_83b1gz$ = arrayOfNulls;
    package$collections.toSingletonMapOrSelf_1vp4qn$ = toSingletonMapOrSelf;
    package$collections.toMutableMap_abgq59$ = toMutableMap;
    package$collections.toSingletonMap_3imywq$ = toSingletonMap;
    package$collections.copyToArrayOfAny_e0iprw$ = copyToArrayOfAny;
    package$collections.checkBuilderCapacity_za3lpa$ = checkBuilderCapacity;
    package$collections.AbstractMutableCollection = AbstractMutableCollection;
    package$collections.AbstractMutableList = AbstractMutableList;
    AbstractMutableMap.SimpleEntry_init_trwmqg$ = AbstractMutableMap$AbstractMutableMap$SimpleEntry_init;
    AbstractMutableMap.SimpleEntry = AbstractMutableMap$SimpleEntry;
    package$collections.AbstractMutableMap = AbstractMutableMap;
    package$collections.AbstractMutableSet = AbstractMutableSet;
    package$collections.ArrayList_init_mqih57$ = ArrayList_init_1;
    package$collections.ArrayList = ArrayList;
    package$collections.sortArrayWith_w8adym$ = sortArrayWith;
    package$collections.sortArrayWith_6xblhi$ = sortArrayWith_0;
    package$collections.sortArray_5zbtrs$ = sortArray;
    package$collections.contentDeepHashCodeImpl = contentDeepHashCodeImpl;
    Object.defineProperty(EqualityComparator, 'HashCode', {get: EqualityComparator$HashCode_getInstance});
    package$collections.EqualityComparator = EqualityComparator;
    package$collections.HashMap_init_va96d4$ = HashMap_init;
    package$collections.HashMap_init_q3lmfv$ = HashMap_init_0;
    package$collections.HashMap_init_xf5xz2$ = HashMap_init_1;
    package$collections.HashMap_init_bwtc7$ = HashMap_init_2;
    package$collections.HashMap_init_73mtqc$ = HashMap_init_3;
    package$collections.HashMap = HashMap;
    package$collections.stringMapOf_gkrhic$ = stringMapOf;
    package$collections.HashSet_init_mqih57$ = HashSet_init_0;
    package$collections.HashSet_init_2wofer$ = HashSet_init_1;
    package$collections.HashSet_init_ww73n8$ = HashSet_init_2;
    package$collections.HashSet_init_nn01ho$ = HashSet_init_3;
    package$collections.HashSet = HashSet;
    package$collections.stringSetOf_vqirvp$ = stringSetOf;
    package$collections.InternalHashCodeMap = InternalHashCodeMap;
    package$collections.InternalMap = InternalMap;
    package$collections.InternalStringMap = InternalStringMap;
    package$collections.LinkedHashMap_init_p5wce1$ = LinkedHashMap_init_0;
    package$collections.LinkedHashMap_init_xf5xz2$ = LinkedHashMap_init_1;
    package$collections.LinkedHashMap_init_73mtqc$ = LinkedHashMap_init_3;
    package$collections.LinkedHashMap = LinkedHashMap;
    package$collections.linkedStringMapOf_gkrhic$ = linkedStringMapOf;
    package$collections.LinkedHashSet_init_nkfcz7$ = LinkedHashSet_init;
    package$collections.LinkedHashSet_init_287e2$ = LinkedHashSet_init_0;
    package$collections.LinkedHashSet_init_mqih57$ = LinkedHashSet_init_1;
    package$collections.LinkedHashSet_init_2wofer$ = LinkedHashSet_init_2;
    package$collections.LinkedHashSet_init_ww73n8$ = LinkedHashSet_init_3;
    package$collections.LinkedHashSet = LinkedHashSet;
    package$collections.linkedStringSetOf_vqirvp$ = linkedStringSetOf;
    package$collections.RandomAccess = RandomAccess;
    var package$contracts = package$kotlin.contracts || (package$kotlin.contracts = {});
    package$contracts.InvocationKind = InvocationKind;
    var package$io = package$kotlin.io || (package$kotlin.io = {});
    package$io.BaseOutput = BaseOutput;
    package$io.NodeJsOutput = NodeJsOutput;
    package$io.OutputToConsoleLog = OutputToConsoleLog;
    package$io.BufferedOutput = BufferedOutput;
    package$io.BufferedOutputToConsoleLog = BufferedOutputToConsoleLog;
    Object.defineProperty(package$io, 'output', {get: function () {
      return output;
    }, set: function (value) {
      output = value;
    }});
    package$io.println = println;
    package$io.println_s8jyv4$ = println_0;
    package$io.print_s8jyv4$ = print;
    package$coroutines.SafeContinuation_init_wj8d80$ = SafeContinuation_init;
    package$coroutines.SafeContinuation = SafeContinuation;
    var package$js_0 = package$coroutines.js || (package$coroutines.js = {});
    var package$internal_0 = package$js_0.internal || (package$js_0.internal = {});
    Object.defineProperty(package$internal_0, 'EmptyContinuation', {get: function () {
      return EmptyContinuation;
    }});
    package$js.dateLocaleOptions_49uy1x$ = dateLocaleOptions;
    var package$dom = package$kotlin.dom || (package$kotlin.dom = {});
    package$dom.createElement_7cgwi1$ = createElement;
    package$dom.appendElement_ldvnw0$ = appendElement;
    package$dom.hasClass_46n0ku$ = hasClass;
    package$dom.addClass_hhb33f$ = addClass;
    package$dom.removeClass_hhb33f$ = removeClass;
    package$dom.get_isText_asww5s$ = get_isText;
    package$dom.get_isElement_asww5s$ = get_isElement;
    var package$org = _.org || (_.org = {});
    var package$w3c = package$org.w3c || (package$org.w3c = {});
    var package$dom_0 = package$w3c.dom || (package$w3c.dom = {});
    var package$events = package$dom_0.events || (package$dom_0.events = {});
    package$events.EventListener_gbr1zf$ = EventListener;
    package$dom_0.asList_kt9thq$ = asList_12;
    package$dom.clear_asww5s$ = clear;
    package$dom.appendText_46n0ku$ = appendText;
    package$js.iterator_s8jyvk$ = iterator;
    _.throwNPE = throwNPE;
    _.throwCCE = throwCCE_0;
    _.throwISE = throwISE;
    _.throwUPAE = throwUPAE;
    package$kotlin.Error_init = Error_init;
    package$kotlin.Error_init_pdl1vj$ = Error_init_0;
    package$kotlin.Error_init_dbl4no$ = Error_init_1;
    package$kotlin.Error = Error_0;
    package$kotlin.Exception_init = Exception_init;
    package$kotlin.Exception_init_pdl1vj$ = Exception_init_0;
    package$kotlin.Exception_init_dbl4no$ = Exception_init_1;
    package$kotlin.Exception = Exception;
    package$kotlin.RuntimeException_init = RuntimeException_init;
    package$kotlin.RuntimeException_init_pdl1vj$ = RuntimeException_init_0;
    package$kotlin.RuntimeException_init_dbl4no$ = RuntimeException_init_1;
    package$kotlin.RuntimeException = RuntimeException;
    package$kotlin.IllegalArgumentException_init = IllegalArgumentException_init;
    package$kotlin.IllegalArgumentException_init_dbl4no$ = IllegalArgumentException_init_1;
    package$kotlin.IllegalArgumentException = IllegalArgumentException;
    package$kotlin.IllegalStateException_init = IllegalStateException_init;
    package$kotlin.IllegalStateException_init_pdl1vj$ = IllegalStateException_init_0;
    package$kotlin.IllegalStateException_init_dbl4no$ = IllegalStateException_init_1;
    package$kotlin.IllegalStateException = IllegalStateException;
    package$kotlin.IndexOutOfBoundsException_init = IndexOutOfBoundsException_init;
    package$kotlin.IndexOutOfBoundsException = IndexOutOfBoundsException;
    package$kotlin.ConcurrentModificationException_init = ConcurrentModificationException_init;
    package$kotlin.ConcurrentModificationException_init_pdl1vj$ = ConcurrentModificationException_init_0;
    package$kotlin.ConcurrentModificationException_init_dbl4no$ = ConcurrentModificationException_init_1;
    package$kotlin.ConcurrentModificationException = ConcurrentModificationException;
    package$kotlin.UnsupportedOperationException_init = UnsupportedOperationException_init;
    package$kotlin.UnsupportedOperationException_init_dbl4no$ = UnsupportedOperationException_init_1;
    package$kotlin.UnsupportedOperationException = UnsupportedOperationException;
    package$kotlin.NumberFormatException_init = NumberFormatException_init;
    package$kotlin.NumberFormatException = NumberFormatException;
    package$kotlin.NullPointerException_init = NullPointerException_init;
    package$kotlin.NullPointerException = NullPointerException;
    package$kotlin.ClassCastException_init = ClassCastException_init;
    package$kotlin.ClassCastException = ClassCastException;
    package$kotlin.AssertionError_init = AssertionError_init;
    package$kotlin.AssertionError_init_pdl1vj$ = AssertionError_init_0;
    package$kotlin.AssertionError_init_s8jyv4$ = AssertionError_init_1;
    package$kotlin.AssertionError = AssertionError;
    package$kotlin.NoSuchElementException_init = NoSuchElementException_init;
    package$kotlin.NoSuchElementException = NoSuchElementException;
    package$kotlin.ArithmeticException_init = ArithmeticException_init;
    package$kotlin.ArithmeticException = ArithmeticException;
    package$kotlin.NoWhenBranchMatchedException_init = NoWhenBranchMatchedException_init;
    package$kotlin.NoWhenBranchMatchedException_init_pdl1vj$ = NoWhenBranchMatchedException_init_0;
    package$kotlin.NoWhenBranchMatchedException_init_dbl4no$ = NoWhenBranchMatchedException_init_1;
    package$kotlin.NoWhenBranchMatchedException = NoWhenBranchMatchedException;
    package$kotlin.UninitializedPropertyAccessException_init = UninitializedPropertyAccessException_init;
    package$kotlin.UninitializedPropertyAccessException_init_pdl1vj$ = UninitializedPropertyAccessException_init_0;
    package$kotlin.UninitializedPropertyAccessException_init_dbl4no$ = UninitializedPropertyAccessException_init_1;
    package$kotlin.UninitializedPropertyAccessException = UninitializedPropertyAccessException;
    package$collections.eachCount_kji7v9$ = eachCount;
    package$io.Serializable = Serializable;
    package$js.min_bug313$ = min_20;
    package$js.max_bug313$ = max_20;
    package$js.json_pyyo18$ = json;
    package$js.add_g26eq9$ = add;
    package$math.log_lu1900$ = log;
    package$math.round_14dthe$ = round;
    package$math.get_ulp_yrwdxr$ = get_ulp;
    package$math.nextUp_yrwdxr$ = nextUp;
    package$math.nextDown_yrwdxr$ = nextDown;
    package$math.nextTowards_38ydlf$ = nextTowards;
    package$math.roundToInt_yrwdxr$ = roundToInt;
    package$math.roundToLong_yrwdxr$ = roundToLong;
    package$math.abs_za3lpa$ = abs_1;
    package$math.get_sign_s8ev3n$ = get_sign_1;
    package$math.abs_s8cxhz$ = abs_2;
    package$math.min_3pjtqy$ = min_24;
    package$math.max_3pjtqy$ = max_24;
    package$math.get_sign_mts6qi$ = get_sign_2;
    package$kotlin.isNaN_yrwdxr$ = isNaN_0;
    package$kotlin.isNaN_81szk$ = isNaN_1;
    package$kotlin.isInfinite_yrwdxr$ = isInfinite;
    package$kotlin.isInfinite_81szk$ = isInfinite_0;
    package$kotlin.isFinite_yrwdxr$ = isFinite;
    package$kotlin.isFinite_81szk$ = isFinite_0;
    package$kotlin.countOneBits_s8ev3n$ = countOneBits;
    package$kotlin.countTrailingZeroBits_s8ev3n$ = countTrailingZeroBits;
    package$kotlin.takeHighestOneBit_s8ev3n$ = takeHighestOneBit;
    package$kotlin.takeLowestOneBit_s8ev3n$ = takeLowestOneBit;
    package$kotlin.rotateLeft_dqglrj$ = rotateLeft;
    package$kotlin.rotateRight_dqglrj$ = rotateRight;
    package$kotlin.countOneBits_mts6qi$ = countOneBits_0;
    package$kotlin.countLeadingZeroBits_mts6qi$ = countLeadingZeroBits_0;
    package$kotlin.countTrailingZeroBits_mts6qi$ = countTrailingZeroBits_0;
    package$kotlin.takeHighestOneBit_mts6qi$ = takeHighestOneBit_0;
    package$kotlin.takeLowestOneBit_mts6qi$ = takeLowestOneBit_0;
    package$kotlin.rotateLeft_if0zpk$ = rotateLeft_0;
    package$js.then_eyvp0y$ = then;
    package$js.then_a5sxob$ = then_0;
    package$random.defaultPlatformRandom_8be2vx$ = defaultPlatformRandom;
    package$random.doubleFromParts_6xvm5r$ = doubleFromParts;
    package$js.get_jsClass_irb06o$ = get_jsClass;
    package$js.get_js_1yb8b7$ = get_js;
    package$js.get_kotlin_2sk2mx$ = get_kotlin;
    var package$js_1 = package$reflect.js || (package$reflect.js = {});
    var package$internal_1 = package$js_1.internal || (package$js_1.internal = {});
    package$internal_1.KClassImpl = KClassImpl;
    package$internal_1.SimpleKClassImpl = SimpleKClassImpl;
    package$internal_1.PrimitiveKClassImpl = PrimitiveKClassImpl;
    Object.defineProperty(package$internal_1, 'NothingKClassImpl', {get: NothingKClassImpl_getInstance});
    _.createKType = createKType;
    _.createDynamicKType = createDynamicKType;
    _.markKTypeNullable = markKTypeNullable;
    _.createKTypeParameter = createKTypeParameter;
    _.getStarKTypeProjection = getStarKTypeProjection;
    _.createCovariantKTypeProjection = createCovariantKTypeProjection;
    _.createInvariantKTypeProjection = createInvariantKTypeProjection;
    _.createContravariantKTypeProjection = createContravariantKTypeProjection;
    package$internal_1.KTypeImpl = KTypeImpl;
    Object.defineProperty(package$internal_1, 'DynamicKType', {get: DynamicKType_getInstance});
    package$internal_1.prefixString_knho38$ = prefixString;
    package$internal_1.KTypeParameterImpl = KTypeParameterImpl;
    Object.defineProperty(package$internal_1, 'PrimitiveClasses', {get: PrimitiveClasses_getInstance});
    _.getKClass = getKClass;
    _.getKClassFromExpression = getKClassFromExpression;
    package$js.reset_xjqeni$ = reset;
    package$js.get_kmxd4d$ = get_0;
    package$js.asArray_tgewol$ = asArray;
    package$sequences.ConstrainedOnceSequence = ConstrainedOnceSequence;
    package$text.Appendable = Appendable;
    package$text.CharacterCodingException_init = CharacterCodingException_init;
    package$text.CharacterCodingException = CharacterCodingException;
    package$text.StringBuilder_init_za3lpa$ = StringBuilder_init;
    package$text.StringBuilder_init_6bul2c$ = StringBuilder_init_0;
    package$text.StringBuilder = StringBuilder;
    package$text.clear_dn5lc7$ = clear_0;
    package$text.set_fgr66m$ = set_0;
    package$text.setRange_o6zo9x$ = setRange;
    package$text.deleteAt_pgf5y3$ = deleteAt;
    package$text.deleteRange_52xiy5$ = deleteRange;
    package$text.toCharArray_uxry3l$ = toCharArray_1;
    package$text.appendRange_tjrg5r$ = appendRange;
    package$text.appendRange_3tn578$ = appendRange_0;
    package$text.insertRange_5k1bpj$ = insertRange;
    package$text.insertRange_abo1kk$ = insertRange_0;
    package$text.isWhitespace_myv2d0$ = isWhitespace;
    package$text.isHighSurrogate_myv2d0$ = isHighSurrogate;
    package$text.isLowSurrogate_myv2d0$ = isLowSurrogate;
    package$text.toBoolean_pdl1vz$ = toBoolean;
    package$text.toByte_pdl1vz$ = toByte_0;
    package$text.toByte_6ic1pp$ = toByte_1;
    package$text.toShort_pdl1vz$ = toShort_0;
    package$text.toShort_6ic1pp$ = toShort_1;
    package$text.toInt_pdl1vz$ = toInt;
    package$text.toInt_6ic1pp$ = toInt_0;
    package$text.toLong_pdl1vz$ = toLong;
    package$text.toLong_6ic1pp$ = toLong_0;
    package$text.toDouble_pdl1vz$ = toDouble;
    package$text.toDoubleOrNull_pdl1vz$ = toDoubleOrNull;
    package$text.toString_dqglrj$ = toString_3;
    package$text.checkRadix_za3lpa$ = checkRadix;
    package$text.digitOf_xvg9q0$ = digitOf;
    Object.defineProperty(RegexOption, 'IGNORE_CASE', {get: RegexOption$IGNORE_CASE_getInstance});
    Object.defineProperty(RegexOption, 'MULTILINE', {get: RegexOption$MULTILINE_getInstance});
    package$text.RegexOption = RegexOption;
    package$text.MatchGroup = MatchGroup;
    Object.defineProperty(Regex, 'Companion', {get: Regex$Companion_getInstance});
    package$text.Regex_init_sb3q2$ = Regex_init;
    package$text.Regex_init_61zpoe$ = Regex_init_0;
    package$text.Regex = Regex;
    package$text.Regex_sb3q2$ = Regex_0;
    package$text.Regex_61zpoe$ = Regex_1;
    package$text.String_4hbowm$ = String_1;
    package$text.String_8chfmy$ = String_2;
    package$text.concatToString_355ntz$ = concatToString;
    package$text.concatToString_wlitf7$ = concatToString_0;
    package$text.toCharArray_pdl1vz$ = toCharArray_2;
    package$text.toCharArray_qgyqat$ = toCharArray_3;
    package$text.decodeToString_964n91$ = decodeToString;
    package$text.decodeToString_vahp5y$ = decodeToString_0;
    package$text.encodeToByteArray_pdl1vz$ = encodeToByteArray;
    package$text.encodeToByteArray_i5b2wk$ = encodeToByteArray_0;
    package$text.compareTo_7epoxm$ = compareTo;
    package$text.get_CASE_INSENSITIVE_ORDER_6eet4j$ = get_CASE_INSENSITIVE_ORDER;
    package$text.startsWith_7epoxm$ = startsWith;
    package$text.startsWith_3azpy2$ = startsWith_0;
    package$text.endsWith_7epoxm$ = endsWith;
    package$text.matches_rjktp$ = matches;
    package$text.isBlank_gw00vp$ = isBlank;
    package$text.equals_igcy3c$ = equals_0;
    package$text.regionMatches_h3ii2q$ = regionMatches;
    package$text.capitalize_pdl1vz$ = capitalize;
    package$text.decapitalize_pdl1vz$ = decapitalize;
    package$text.repeat_94bcnn$ = repeat;
    package$text.replace_680rmw$ = replace;
    package$text.replace_r2fvfm$ = replace_0;
    package$text.replaceFirst_680rmw$ = replaceFirst;
    package$text.replaceFirst_r2fvfm$ = replaceFirst_0;
    package$text.encodeUtf8_eq9l2e$ = encodeUtf8;
    package$text.decodeUtf8_bndkiu$ = decodeUtf8;
    Object.defineProperty(DurationUnit, 'NANOSECONDS', {get: DurationUnit$NANOSECONDS_getInstance});
    Object.defineProperty(DurationUnit, 'MICROSECONDS', {get: DurationUnit$MICROSECONDS_getInstance});
    Object.defineProperty(DurationUnit, 'MILLISECONDS', {get: DurationUnit$MILLISECONDS_getInstance});
    Object.defineProperty(DurationUnit, 'SECONDS', {get: DurationUnit$SECONDS_getInstance});
    Object.defineProperty(DurationUnit, 'MINUTES', {get: DurationUnit$MINUTES_getInstance});
    Object.defineProperty(DurationUnit, 'HOURS', {get: DurationUnit$HOURS_getInstance});
    Object.defineProperty(DurationUnit, 'DAYS', {get: DurationUnit$DAYS_getInstance});
    var package$time = package$kotlin.time || (package$kotlin.time = {});
    package$time.DurationUnit = DurationUnit;
    package$time.convertDurationUnit_sgln0f$ = convertDurationUnit;
    Object.defineProperty(package$time, 'MonotonicTimeSource', {get: MonotonicTimeSource_getInstance});
    package$time.HrTimeSource = HrTimeSource;
    package$time.PerformanceTimeSource = PerformanceTimeSource;
    Object.defineProperty(package$time, 'DateNowTimeSource', {get: DateNowTimeSource_getInstance});
    package$time.formatToExactDecimals_coldnx$ = formatToExactDecimals;
    package$time.formatUpToDecimals_coldnx$ = formatUpToDecimals;
    package$time.formatScientific_tq0o01$ = formatScientific;
    package$dom_0.get_as__xbdrh1$ = get_as_;
    package$dom_0.set_as__lprayv$ = set_as_;
    package$dom_0.get_is__jkvip$ = get_is_;
    package$dom_0.set_is__ri92sw$ = set_is_;
    package$dom_0.get_NONZERO_mhbikd$ = get_NONZERO;
    package$dom_0.get_NONE_xgljrz$ = get_NONE;
    package$dom_0.get_DEFAULT_b5608t$ = get_DEFAULT;
    package$dom_0.get_DEFAULT_xqeuit$ = get_DEFAULT_0;
    package$dom_0.get_LOW_32fsn1$ = get_LOW_0;
    package$dom_0.get_CLASSIC_xc77to$ = get_CLASSIC;
    var package$fetch = package$w3c.fetch || (package$w3c.fetch = {});
    package$fetch.get_OMIT_yuzaxt$ = get_OMIT;
    package$dom_0.get_AUTO_gi1pud$ = get_AUTO_0;
    package$dom_0.get_CENTER_ltkif$ = get_CENTER_0;
    package$dom_0.get_BORDER_eb1l8y$ = get_BORDER;
    package$dom_0.get_LOADING_cuyr1n$ = get_LOADING;
    package$dom_0.get_INTERACTIVE_cuyr1n$ = get_INTERACTIVE;
    package$dom_0.get_COMPLETE_cuyr1n$ = get_COMPLETE;
    package$dom_0.get_EMPTY_k3kzzn$ = get_EMPTY;
    package$dom_0.get_MAYBE_k3kzzn$ = get_MAYBE;
    package$dom_0.get_PROBABLY_k3kzzn$ = get_PROBABLY;
    package$dom_0.get_DISABLED_ygmcel$ = get_DISABLED;
    package$dom_0.get_HIDDEN_ygmcel$ = get_HIDDEN;
    package$dom_0.get_SHOWING_ygmcel$ = get_SHOWING;
    package$dom_0.get_SUBTITLES_fw7o78$ = get_SUBTITLES;
    package$dom_0.get_CAPTIONS_fw7o78$ = get_CAPTIONS;
    package$dom_0.get_DESCRIPTIONS_fw7o78$ = get_DESCRIPTIONS;
    package$dom_0.get_CHAPTERS_fw7o78$ = get_CHAPTERS;
    package$dom_0.get_METADATA_fw7o78$ = get_METADATA;
    package$dom_0.get_SELECT_efic67$ = get_SELECT;
    package$dom_0.get_START_efic67$ = get_START;
    package$dom_0.get_END_efic67$ = get_END;
    package$dom_0.get_PRESERVE_efic67$ = get_PRESERVE;
    package$dom_0.get_EVENODD_mhbikd$ = get_EVENODD;
    package$dom_0.get_LOW_lt2gtk$ = get_LOW;
    package$dom_0.get_MEDIUM_lt2gtk$ = get_MEDIUM;
    package$dom_0.get_HIGH_lt2gtk$ = get_HIGH;
    package$dom_0.get_BUTT_w26v20$ = get_BUTT;
    package$dom_0.get_ROUND_w26v20$ = get_ROUND;
    package$dom_0.get_SQUARE_w26v20$ = get_SQUARE;
    package$dom_0.get_ROUND_1xtghu$ = get_ROUND_0;
    package$dom_0.get_BEVEL_1xtghu$ = get_BEVEL;
    package$dom_0.get_MITER_1xtghu$ = get_MITER;
    package$dom_0.get_START_hbi5si$ = get_START_0;
    package$dom_0.get_END_hbi5si$ = get_END_0;
    package$dom_0.get_LEFT_hbi5si$ = get_LEFT;
    package$dom_0.get_RIGHT_hbi5si$ = get_RIGHT;
    package$dom_0.get_CENTER_hbi5si$ = get_CENTER;
    package$dom_0.get_TOP_oz2y96$ = get_TOP;
    package$dom_0.get_HANGING_oz2y96$ = get_HANGING;
    package$dom_0.get_MIDDLE_oz2y96$ = get_MIDDLE;
    package$dom_0.get_ALPHABETIC_oz2y96$ = get_ALPHABETIC;
    package$dom_0.get_IDEOGRAPHIC_oz2y96$ = get_IDEOGRAPHIC;
    package$dom_0.get_BOTTOM_oz2y96$ = get_BOTTOM;
    package$dom_0.get_LTR_qxot9j$ = get_LTR;
    package$dom_0.get_RTL_qxot9j$ = get_RTL;
    package$dom_0.get_INHERIT_qxot9j$ = get_INHERIT;
    package$dom_0.get_AUTO_huqvoj$ = get_AUTO;
    package$dom_0.get_MANUAL_huqvoj$ = get_MANUAL;
    package$dom_0.get_FLIPY_xgljrz$ = get_FLIPY;
    package$dom_0.get_NONE_b5608t$ = get_NONE_0;
    package$dom_0.get_PREMULTIPLY_b5608t$ = get_PREMULTIPLY;
    package$dom_0.get_NONE_xqeuit$ = get_NONE_1;
    package$dom_0.get_PIXELATED_32fsn1$ = get_PIXELATED;
    package$dom_0.get_MEDIUM_32fsn1$ = get_MEDIUM_0;
    package$dom_0.get_HIGH_32fsn1$ = get_HIGH_0;
    package$dom_0.get_BLOB_qxle9l$ = get_BLOB;
    package$dom_0.get_ARRAYBUFFER_qxle9l$ = get_ARRAYBUFFER;
    package$dom_0.get_MODULE_xc77to$ = get_MODULE;
    package$dom_0.get_OPEN_knhupb$ = get_OPEN;
    package$dom_0.get_CLOSED_knhupb$ = get_CLOSED;
    package$dom_0.get_INSTANT_gi1pud$ = get_INSTANT;
    package$dom_0.get_SMOOTH_gi1pud$ = get_SMOOTH;
    package$dom_0.get_START_ltkif$ = get_START_1;
    package$dom_0.get_END_ltkif$ = get_END_1;
    package$dom_0.get_NEAREST_ltkif$ = get_NEAREST;
    package$dom_0.get_MARGIN_eb1l8y$ = get_MARGIN;
    package$dom_0.get_PADDING_eb1l8y$ = get_PADDING;
    package$dom_0.get_CONTENT_eb1l8y$ = get_CONTENT;
    var package$mediacapture = package$dom_0.mediacapture || (package$dom_0.mediacapture = {});
    package$mediacapture.get_LIVE_tsyfvu$ = get_LIVE;
    package$mediacapture.get_ENDED_tsyfvu$ = get_ENDED;
    package$mediacapture.get_USER_ctcynt$ = get_USER;
    package$mediacapture.get_ENVIRONMENT_ctcynt$ = get_ENVIRONMENT;
    package$mediacapture.get_LEFT_ctcynt$ = get_LEFT_0;
    package$mediacapture.get_RIGHT_ctcynt$ = get_RIGHT_0;
    package$mediacapture.get_NONE_qdzhpp$ = get_NONE_2;
    package$mediacapture.get_CROP_AND_SCALE_qdzhpp$ = get_CROP_AND_SCALE;
    package$mediacapture.get_AUDIOINPUT_bcgeby$ = get_AUDIOINPUT;
    package$mediacapture.get_AUDIOOUTPUT_bcgeby$ = get_AUDIOOUTPUT;
    package$mediacapture.get_VIDEOINPUT_bcgeby$ = get_VIDEOINPUT;
    package$fetch.get_EMPTY_ih0r03$ = get_EMPTY_0;
    package$fetch.get_AUDIO_ih0r03$ = get_AUDIO;
    package$fetch.get_FONT_ih0r03$ = get_FONT;
    package$fetch.get_IMAGE_ih0r03$ = get_IMAGE;
    package$fetch.get_SCRIPT_ih0r03$ = get_SCRIPT;
    package$fetch.get_STYLE_ih0r03$ = get_STYLE;
    package$fetch.get_TRACK_ih0r03$ = get_TRACK;
    package$fetch.get_VIDEO_ih0r03$ = get_VIDEO;
    package$fetch.get_EMPTY_dgizjn$ = get_EMPTY_1;
    package$fetch.get_DOCUMENT_dgizjn$ = get_DOCUMENT;
    package$fetch.get_EMBED_dgizjn$ = get_EMBED;
    package$fetch.get_FONT_dgizjn$ = get_FONT_0;
    package$fetch.get_IMAGE_dgizjn$ = get_IMAGE_0;
    package$fetch.get_MANIFEST_dgizjn$ = get_MANIFEST;
    package$fetch.get_MEDIA_dgizjn$ = get_MEDIA;
    package$fetch.get_OBJECT_dgizjn$ = get_OBJECT;
    package$fetch.get_REPORT_dgizjn$ = get_REPORT;
    package$fetch.get_SCRIPT_dgizjn$ = get_SCRIPT_0;
    package$fetch.get_SERVICEWORKER_dgizjn$ = get_SERVICEWORKER;
    package$fetch.get_SHAREDWORKER_dgizjn$ = get_SHAREDWORKER;
    package$fetch.get_STYLE_dgizjn$ = get_STYLE_0;
    package$fetch.get_WORKER_dgizjn$ = get_WORKER;
    package$fetch.get_XSLT_dgizjn$ = get_XSLT;
    package$fetch.get_NAVIGATE_jvdbus$ = get_NAVIGATE;
    package$fetch.get_SAME_ORIGIN_jvdbus$ = get_SAME_ORIGIN;
    package$fetch.get_NO_CORS_jvdbus$ = get_NO_CORS;
    package$fetch.get_CORS_jvdbus$ = get_CORS;
    package$fetch.get_SAME_ORIGIN_yuzaxt$ = get_SAME_ORIGIN_0;
    package$fetch.get_INCLUDE_yuzaxt$ = get_INCLUDE;
    package$fetch.get_DEFAULT_iyytcp$ = get_DEFAULT_1;
    package$fetch.get_NO_STORE_iyytcp$ = get_NO_STORE;
    package$fetch.get_RELOAD_iyytcp$ = get_RELOAD;
    package$fetch.get_NO_CACHE_iyytcp$ = get_NO_CACHE;
    package$fetch.get_FORCE_CACHE_iyytcp$ = get_FORCE_CACHE;
    package$fetch.get_ONLY_IF_CACHED_iyytcp$ = get_ONLY_IF_CACHED;
    package$fetch.get_FOLLOW_tow8et$ = get_FOLLOW;
    package$fetch.get_ERROR_tow8et$ = get_ERROR;
    package$fetch.get_MANUAL_tow8et$ = get_MANUAL_0;
    package$fetch.get_BASIC_1el1vz$ = get_BASIC;
    package$fetch.get_CORS_1el1vz$ = get_CORS_0;
    package$fetch.get_DEFAULT_1el1vz$ = get_DEFAULT_2;
    package$fetch.get_ERROR_1el1vz$ = get_ERROR_0;
    package$fetch.get_OPAQUE_1el1vz$ = get_OPAQUE;
    package$fetch.get_OPAQUEREDIRECT_1el1vz$ = get_OPAQUEREDIRECT;
    var package$notifications = package$w3c.notifications || (package$w3c.notifications = {});
    package$notifications.get_AUTO_6wyje4$ = get_AUTO_1;
    package$notifications.get_DEFAULT_4wcaio$ = get_DEFAULT_3;
    package$notifications.get_DENIED_4wcaio$ = get_DENIED;
    package$notifications.get_GRANTED_4wcaio$ = get_GRANTED;
    package$notifications.get_LTR_6wyje4$ = get_LTR_0;
    package$notifications.get_RTL_6wyje4$ = get_RTL_0;
    var package$workers = package$w3c.workers || (package$w3c.workers = {});
    package$workers.get_WINDOW_jpgnoe$ = get_WINDOW;
    package$workers.get_INSTALLING_7rndk9$ = get_INSTALLING;
    package$workers.get_INSTALLED_7rndk9$ = get_INSTALLED;
    package$workers.get_ACTIVATING_7rndk9$ = get_ACTIVATING;
    package$workers.get_ACTIVATED_7rndk9$ = get_ACTIVATED;
    package$workers.get_REDUNDANT_7rndk9$ = get_REDUNDANT;
    package$workers.get_AUXILIARY_1foc4s$ = get_AUXILIARY;
    package$workers.get_TOP_LEVEL_1foc4s$ = get_TOP_LEVEL;
    package$workers.get_NESTED_1foc4s$ = get_NESTED;
    package$workers.get_NONE_1foc4s$ = get_NONE_3;
    package$workers.get_WORKER_jpgnoe$ = get_WORKER_0;
    package$workers.get_SHAREDWORKER_jpgnoe$ = get_SHAREDWORKER_0;
    package$workers.get_ALL_jpgnoe$ = get_ALL;
    var package$xhr = package$w3c.xhr || (package$w3c.xhr = {});
    package$xhr.get_EMPTY_8edqmh$ = get_EMPTY_2;
    package$xhr.get_ARRAYBUFFER_8edqmh$ = get_ARRAYBUFFER_0;
    package$xhr.get_BLOB_8edqmh$ = get_BLOB_0;
    package$xhr.get_DOCUMENT_8edqmh$ = get_DOCUMENT_0;
    package$xhr.get_JSON_8edqmh$ = get_JSON;
    package$xhr.get_TEXT_8edqmh$ = get_TEXT;
    Object.defineProperty(Experimental$Level, 'WARNING', {get: Experimental$Level$WARNING_getInstance});
    Object.defineProperty(Experimental$Level, 'ERROR', {get: Experimental$Level$ERROR_getInstance});
    Experimental.Level = Experimental$Level;
    package$kotlin.Experimental = Experimental;
    package$kotlin.UseExperimental = UseExperimental;
    package$kotlin.WasExperimental = WasExperimental;
    package$kotlin.ExperimentalStdlibApi = ExperimentalStdlibApi;
    package$kotlin.BuilderInference = BuilderInference;
    package$kotlin.ExperimentalMultiplatform = ExperimentalMultiplatform;
    package$kotlin.OptionalExpectation = OptionalExpectation;
    Object.defineProperty(RequiresOptIn$Level, 'WARNING', {get: RequiresOptIn$Level$WARNING_getInstance});
    Object.defineProperty(RequiresOptIn$Level, 'ERROR', {get: RequiresOptIn$Level$ERROR_getInstance});
    RequiresOptIn.Level = RequiresOptIn$Level;
    package$kotlin.RequiresOptIn = RequiresOptIn;
    package$kotlin.OptIn = OptIn;
    package$collections.AbstractCollection = AbstractCollection;
    package$collections.AbstractIterator = AbstractIterator;
    Object.defineProperty(AbstractList, 'Companion', {get: AbstractList$Companion_getInstance});
    package$collections.AbstractList = AbstractList;
    Object.defineProperty(AbstractMap, 'Companion', {get: AbstractMap$Companion_getInstance});
    package$collections.AbstractMap = AbstractMap;
    Object.defineProperty(AbstractSet, 'Companion', {get: AbstractSet$Companion_getInstance});
    package$collections.AbstractSet = AbstractSet;
    package$collections.ArrayDeque_init_ww73n8$ = ArrayDeque_init;
    package$collections.ArrayDeque_init_287e2$ = ArrayDeque_init_0;
    package$collections.ArrayDeque_init_mqih57$ = ArrayDeque_init_1;
    package$collections.ArrayDeque = ArrayDeque;
    package$collections.flatten_yrqxlj$ = flatten;
    package$collections.unzip_v2dak7$ = unzip;
    package$collections.contentDeepEqualsImpl = contentDeepEqualsImpl;
    package$collections.contentDeepToStringImpl = contentDeepToStringImpl;
    Object.defineProperty(package$collections, 'EmptyIterator', {get: EmptyIterator_getInstance});
    Object.defineProperty(package$collections, 'EmptyList', {get: EmptyList_getInstance});
    package$collections.asCollection_vj43ah$ = asCollection;
    package$collections.listOf_i5x0yv$ = listOf_0;
    package$collections.mutableListOf_i5x0yv$ = mutableListOf_0;
    package$collections.arrayListOf_i5x0yv$ = arrayListOf_0;
    package$collections.listOfNotNull_issdgt$ = listOfNotNull;
    package$collections.listOfNotNull_jurz7g$ = listOfNotNull_0;
    package$collections.get_indices_gzk92b$ = get_indices_12;
    package$collections.optimizeReadOnlyList_qzupvv$ = optimizeReadOnlyList;
    package$collections.binarySearch_jhx6be$ = binarySearch;
    package$collections.binarySearch_vikexg$ = binarySearch_0;
    package$comparisons.compareValues_s00gnj$ = compareValues;
    package$collections.binarySearch_sr7qim$ = binarySearch_1;
    package$collections.binarySearchBy_7gj2ve$ = binarySearchBy;
    package$collections.throwIndexOverflow = throwIndexOverflow;
    package$collections.throwCountOverflow = throwCountOverflow;
    package$collections.aggregateTo_qtifb3$ = aggregateTo;
    package$collections.aggregate_kz95qp$ = aggregate;
    package$collections.fold_2g9ybd$ = fold_15;
    package$collections.foldTo_ldb57n$ = foldTo;
    package$collections.fold_id3q3f$ = fold_16;
    package$collections.foldTo_1dwgsv$ = foldTo_0;
    package$collections.reduce_hy0spo$ = reduce_15;
    package$collections.reduceTo_vpctix$ = reduceTo;
    package$collections.eachCountTo_i5vr9n$ = eachCountTo;
    package$collections.IndexedValue = IndexedValue;
    package$collections.IndexingIterable = IndexingIterable;
    package$collections.collectionSizeOrNull_7wnvza$ = collectionSizeOrNull;
    package$collections.convertToSetForSetOperationWith_wo44v8$ = convertToSetForSetOperationWith;
    package$collections.convertToSetForSetOperation_tw993d$ = convertToSetForSetOperation;
    package$collections.flatten_u0ad8z$ = flatten_0;
    package$collections.unzip_6hr0sd$ = unzip_0;
    package$collections.withIndex_35ci02$ = withIndex_15;
    package$collections.forEach_p594rv$ = forEach_16;
    package$collections.IndexingIterator = IndexingIterator;
    package$collections.getOrImplicitDefault_t9ocha$ = getOrImplicitDefault;
    package$collections.withDefault_jgsead$ = withDefault;
    package$collections.withDefault_btzz9u$ = withDefault_0;
    package$collections.emptyMap_q3lmfv$ = emptyMap;
    package$collections.mapOf_qfcya0$ = mapOf_0;
    package$collections.mutableMapOf_qfcya0$ = mutableMapOf_0;
    package$collections.hashMapOf_qfcya0$ = hashMapOf_0;
    package$collections.linkedMapOf_qfcya0$ = linkedMapOf_0;
    package$collections.getOrElseNullable_e54js$ = getOrElseNullable;
    package$collections.getValue_t9ocha$ = getValue_2;
    package$collections.mapValuesTo_8auxj8$ = mapValuesTo;
    package$collections.mapKeysTo_l1xmvz$ = mapKeysTo;
    package$collections.putAll_5gv49o$ = putAll;
    package$collections.putAll_cweazw$ = putAll_0;
    package$collections.putAll_2ud8ki$ = putAll_1;
    package$collections.mapValues_8169ik$ = mapValues;
    package$collections.mapKeys_8169ik$ = mapKeys;
    package$collections.filterKeys_bbcyu0$ = filterKeys;
    package$collections.filterValues_btttvb$ = filterValues;
    package$collections.filterTo_6i6lq2$ = filterTo_15;
    package$collections.filter_9peqz9$ = filter_16;
    package$collections.filterNotTo_6i6lq2$ = filterNotTo_15;
    package$collections.filterNot_9peqz9$ = filterNot_16;
    package$collections.toMap_6hr0sd$ = toMap;
    package$collections.toMap_jbpz7q$ = toMap_0;
    package$collections.toMap_v2dak7$ = toMap_1;
    package$collections.toMap_ujwnei$ = toMap_2;
    package$collections.toMap_ah2ab9$ = toMap_3;
    package$collections.toMap_vxlxo8$ = toMap_4;
    package$collections.toMap_abgq59$ = toMap_5;
    package$collections.toMap_d6li1s$ = toMap_6;
    package$collections.plus_e8164j$ = plus_54;
    package$collections.plus_cm8adq$ = plus_55;
    package$collections.plus_z7hp2i$ = plus_56;
    package$collections.plus_kc70o4$ = plus_57;
    package$collections.plus_iwxh38$ = plus_58;
    package$collections.minus_4pa84t$ = minus_11;
    package$collections.minus_uk696c$ = minus_12;
    package$collections.minus_8blsds$ = minus_13;
    package$collections.minus_nyfmny$ = minus_14;
    package$collections.removeAll_ipc267$ = removeAll_0;
    package$collections.removeAll_ye1y7v$ = removeAll_2;
    package$collections.removeAll_tj7pfx$ = removeAll_1;
    package$collections.optimizeReadOnlyMap_1vp4qn$ = optimizeReadOnlyMap;
    package$collections.addAll_ye1y7v$ = addAll_1;
    package$collections.retainAll_ipc267$ = retainAll_0;
    package$collections.retainAll_ye1y7v$ = retainAll_1;
    package$collections.retainAll_tj7pfx$ = retainAll_2;
    package$collections.removeAll_uhyeqt$ = removeAll_3;
    package$collections.retainAll_uhyeqt$ = retainAll_3;
    package$collections.shuffled_4173s5$ = shuffled_0;
    package$collections.removeFirst_vvxzk3$ = removeFirst;
    package$collections.removeFirstOrNull_vvxzk3$ = removeFirstOrNull;
    package$collections.removeLast_vvxzk3$ = removeLast;
    package$collections.removeLastOrNull_vvxzk3$ = removeLastOrNull;
    package$collections.removeAll_qafx1e$ = removeAll_4;
    package$collections.retainAll_qafx1e$ = retainAll_4;
    package$collections.shuffle_9jeydg$ = shuffle_0;
    package$collections.asReversed_2p1efm$ = asReversed;
    package$collections.asReversed_vvxzk3$ = asReversed_0;
    package$sequences.sequence_o0x0bg$ = sequence;
    package$sequences.iterator_o0x0bg$ = iterator_3;
    package$sequences.SequenceScope = SequenceScope;
    package$sequences.asSequence_35ci02$ = asSequence_12;
    package$sequences.sequenceOf_i5x0yv$ = sequenceOf;
    package$sequences.emptySequence_287e2$ = emptySequence;
    package$sequences.ifEmpty_za92oh$ = ifEmpty_2;
    package$sequences.flatten_41nmvn$ = flatten_1;
    package$sequences.flatten_d9bjs1$ = flatten_2;
    package$sequences.unzip_ah2ab9$ = unzip_1;
    package$sequences.FilteringSequence = FilteringSequence;
    package$sequences.TransformingSequence = TransformingSequence;
    package$sequences.TransformingIndexedSequence = TransformingIndexedSequence;
    package$sequences.IndexingSequence = IndexingSequence;
    package$sequences.MergingSequence = MergingSequence;
    package$sequences.FlatteningSequence = FlatteningSequence;
    package$sequences.DropTakeSequence = DropTakeSequence;
    package$sequences.SubSequence = SubSequence;
    package$sequences.TakeSequence = TakeSequence;
    package$sequences.TakeWhileSequence = TakeWhileSequence;
    package$sequences.DropSequence = DropSequence;
    package$sequences.DropWhileSequence = DropWhileSequence;
    package$sequences.DistinctSequence = DistinctSequence;
    package$sequences.constrainOnce_veqyi0$ = constrainOnce;
    package$sequences.generateSequence_9ce4rd$ = generateSequence;
    package$sequences.generateSequence_gexuht$ = generateSequence_0;
    package$sequences.generateSequence_c6s9hp$ = generateSequence_1;
    Object.defineProperty(package$collections, 'EmptySet', {get: EmptySet_getInstance});
    package$collections.emptySet_287e2$ = emptySet;
    package$collections.setOf_i5x0yv$ = setOf_0;
    package$collections.mutableSetOf_i5x0yv$ = mutableSetOf_0;
    package$collections.hashSetOf_i5x0yv$ = hashSetOf_0;
    package$collections.linkedSetOf_i5x0yv$ = linkedSetOf_0;
    package$collections.optimizeReadOnlySet_94kdbt$ = optimizeReadOnlySet;
    package$collections.checkWindowSizeStep_6xvm5r$ = checkWindowSizeStep;
    package$collections.windowedSequence_38k18b$ = windowedSequence_1;
    package$collections.windowedIterator_4ozct4$ = windowedIterator;
    package$collections.MovingSubList = MovingSubList;
    package$collections.sortArray_6dl5as$ = sortArray_0;
    package$collections.sortArray_tugffi$ = sortArray_1;
    package$collections.sortArray_57d09b$ = sortArray_2;
    package$collections.sortArray_tnvzeg$ = sortArray_3;
    package$comparisons.compareValuesBy_d999kh$ = compareValuesBy;
    package$comparisons.compareBy_bvgy4j$ = compareBy;
    package$comparisons.then_15rrmw$ = then_1;
    package$comparisons.thenDescending_15rrmw$ = thenDescending;
    package$comparisons.nullsFirst_c94i6r$ = nullsFirst;
    package$comparisons.naturalOrder_dahdeg$ = naturalOrder;
    package$comparisons.nullsLast_c94i6r$ = nullsLast;
    package$comparisons.reverseOrder_dahdeg$ = reverseOrder;
    package$comparisons.reversed_2avth4$ = reversed_20;
    package$contracts.ExperimentalContracts = ExperimentalContracts;
    package$contracts.ContractBuilder = ContractBuilder;
    Object.defineProperty(InvocationKind, 'AT_MOST_ONCE', {get: InvocationKind$AT_MOST_ONCE_getInstance});
    Object.defineProperty(InvocationKind, 'AT_LEAST_ONCE', {get: InvocationKind$AT_LEAST_ONCE_getInstance});
    Object.defineProperty(InvocationKind, 'EXACTLY_ONCE', {get: InvocationKind$EXACTLY_ONCE_getInstance});
    Object.defineProperty(InvocationKind, 'UNKNOWN', {get: InvocationKind$UNKNOWN_getInstance});
    package$contracts.Effect = Effect;
    package$contracts.ConditionalEffect = ConditionalEffect;
    package$contracts.SimpleEffect = SimpleEffect;
    package$contracts.Returns = Returns;
    package$contracts.ReturnsNotNull = ReturnsNotNull;
    package$contracts.CallsInPlace = CallsInPlace;
    package$coroutines.Continuation = Continuation;
    package$coroutines.RestrictsSuspension = RestrictsSuspension;
    package$kotlin.Result = Result;
    package$coroutines.createCoroutine_x18nsh$ = createCoroutine;
    package$coroutines.createCoroutine_3a617i$ = createCoroutine_0;
    package$coroutines.startCoroutine_x18nsh$ = startCoroutine;
    package$coroutines.startCoroutine_3a617i$ = startCoroutine_0;
    package$intrinsics.get_COROUTINE_SUSPENDED = get_COROUTINE_SUSPENDED;
    Object.defineProperty(package$coroutines, 'coroutineContext', {get: get_coroutineContext});
    Object.defineProperty(ContinuationInterceptor, 'Key', {get: ContinuationInterceptor$Key_getInstance});
    package$coroutines.ContinuationInterceptor = ContinuationInterceptor;
    CoroutineContext.Key = CoroutineContext$Key;
    CoroutineContext.Element = CoroutineContext$Element;
    package$coroutines.CoroutineContext = CoroutineContext;
    package$coroutines.AbstractCoroutineContextElement = AbstractCoroutineContextElement;
    package$coroutines.AbstractCoroutineContextKey = AbstractCoroutineContextKey;
    package$coroutines.getPolymorphicElement_ou7kgl$ = getPolymorphicElement;
    package$coroutines.minusPolymorphicKey_pu2ztq$ = minusPolymorphicKey;
    Object.defineProperty(package$coroutines, 'EmptyCoroutineContext', {get: EmptyCoroutineContext_getInstance});
    package$coroutines.CombinedContext = CombinedContext;
    Object.defineProperty(package$intrinsics, 'COROUTINE_SUSPENDED', {get: get_COROUTINE_SUSPENDED});
    Object.defineProperty(CoroutineSingletons, 'COROUTINE_SUSPENDED', {get: CoroutineSingletons$COROUTINE_SUSPENDED_getInstance});
    Object.defineProperty(CoroutineSingletons, 'UNDECIDED', {get: CoroutineSingletons$UNDECIDED_getInstance});
    Object.defineProperty(CoroutineSingletons, 'RESUMED', {get: CoroutineSingletons$RESUMED_getInstance});
    package$intrinsics.CoroutineSingletons = CoroutineSingletons;
    var package$experimental = package$kotlin.experimental || (package$kotlin.experimental = {});
    package$experimental.ExperimentalTypeInference = ExperimentalTypeInference;
    package$internal.NoInfer = NoInfer;
    package$internal.Exact = Exact;
    package$internal.LowPriorityInOverloadResolution = LowPriorityInOverloadResolution;
    package$internal.HidesMembers = HidesMembers;
    package$internal.OnlyInputTypes = OnlyInputTypes;
    package$internal.InlineOnly = InlineOnly;
    package$internal.DynamicExtension = DynamicExtension;
    package$internal.AccessibleLateinitPropertyLiteral = AccessibleLateinitPropertyLiteral;
    package$internal.RequireKotlin = RequireKotlin;
    Object.defineProperty(RequireKotlinVersionKind, 'LANGUAGE_VERSION', {get: RequireKotlinVersionKind$LANGUAGE_VERSION_getInstance});
    Object.defineProperty(RequireKotlinVersionKind, 'COMPILER_VERSION', {get: RequireKotlinVersionKind$COMPILER_VERSION_getInstance});
    Object.defineProperty(RequireKotlinVersionKind, 'API_VERSION', {get: RequireKotlinVersionKind$API_VERSION_getInstance});
    package$internal.RequireKotlinVersionKind = RequireKotlinVersionKind;
    package$internal.ContractsDsl = ContractsDsl;
    var package$properties = package$kotlin.properties || (package$kotlin.properties = {});
    package$properties.ObservableProperty = ObservableProperty;
    Object.defineProperty(package$properties, 'Delegates', {get: Delegates_getInstance});
    package$properties.ReadOnlyProperty = ReadOnlyProperty;
    package$properties.ReadWriteProperty = ReadWriteProperty;
    Object.defineProperty(Random, 'Default', {get: Random$Default_getInstance});
    Object.defineProperty(Random, 'Companion', {get: Random$Companion_getInstance});
    package$random.Random_za3lpa$ = Random_0;
    package$random.Random_s8cxhz$ = Random_1;
    package$random.nextInt_ixthlz$ = nextInt;
    package$random.nextLong_lq3jag$ = nextLong;
    package$random.fastLog2_kcn2v3$ = fastLog2;
    package$random.takeUpperBits_b6l1hq$ = takeUpperBits;
    package$random.checkRangeBounds_6xvm5r$ = checkRangeBounds;
    package$random.checkRangeBounds_cfj5zr$ = checkRangeBounds_0;
    package$random.checkRangeBounds_sdh6z7$ = checkRangeBounds_1;
    package$random.boundsErrorMessage_dgzutr$ = boundsErrorMessage;
    package$random.nextUInt_j8mu42$ = nextUInt;
    package$random.nextUInt_nppi6x$ = nextUInt_0;
    package$random.nextUInt_3yup1w$ = nextUInt_1;
    package$random.nextUInt_d63giy$ = nextUInt_2;
    package$random.nextULong_j8mu42$ = nextULong;
    package$random.nextULong_otw1ua$ = nextULong_0;
    package$random.nextULong_3bt3ku$ = nextULong_1;
    package$random.nextULong_f33ad7$ = nextULong_2;
    package$random.nextUBytes_dg37c5$ = nextUBytes;
    package$random.nextUBytes_wucvsg$ = nextUBytes_0;
    package$random.nextUBytes_h8e49n$ = nextUBytes_1;
    package$random.checkUIntRangeBounds_xgezkr$ = checkUIntRangeBounds;
    package$random.checkULongRangeBounds_jmpl8x$ = checkULongRangeBounds;
    package$random.XorWowRandom_init_6xvm5r$ = XorWowRandom_init;
    package$random.XorWowRandom = XorWowRandom;
    package$ranges.rangeTo_8xshf9$ = rangeTo;
    package$ranges.ClosedFloatingPointRange = ClosedFloatingPointRange;
    package$ranges.rangeTo_38ydlf$ = rangeTo_0;
    package$ranges.rangeTo_yni7l$ = rangeTo_1;
    package$ranges.checkStepIsPositive_44uddq$ = checkStepIsPositive;
    package$reflect.cast_o6trj3$ = cast;
    package$reflect.safeCast_o6trj3$ = safeCast;
    package$text.appendRange_p5ndjo$ = appendRange_1;
    package$text.append_1mr2mh$ = append;
    package$text.appendElement_k2zgzt$ = appendElement_0;
    package$text.equals_4lte5s$ = equals_1;
    package$text.isSurrogate_myv2d0$ = isSurrogate;
    package$text.trimMargin_rjktp$ = trimMargin;
    package$text.replaceIndentByMargin_j4ogox$ = replaceIndentByMargin;
    package$text.trimIndent_pdl1vz$ = trimIndent;
    package$text.replaceIndent_rjktp$ = replaceIndent;
    package$text.prependIndent_rjktp$ = prependIndent;
    package$text.append_4v9nlb$ = append_1;
    package$text.append_s3yiwm$ = append_2;
    package$text.toByteOrNull_pdl1vz$ = toByteOrNull;
    package$text.toByteOrNull_6ic1pp$ = toByteOrNull_0;
    package$text.toShortOrNull_pdl1vz$ = toShortOrNull;
    package$text.toShortOrNull_6ic1pp$ = toShortOrNull_0;
    package$text.toIntOrNull_pdl1vz$ = toIntOrNull;
    package$text.toIntOrNull_6ic1pp$ = toIntOrNull_0;
    package$text.toLongOrNull_pdl1vz$ = toLongOrNull;
    package$text.toLongOrNull_6ic1pp$ = toLongOrNull_0;
    package$text.numberFormatError_y4putb$ = numberFormatError;
    package$text.trim_2pivbd$ = trim;
    package$text.trim_ouje1d$ = trim_0;
    package$text.trimStart_2pivbd$ = trimStart;
    package$text.trimStart_ouje1d$ = trimStart_0;
    package$text.trimEnd_2pivbd$ = trimEnd;
    package$text.trimEnd_ouje1d$ = trimEnd_0;
    package$text.trim_8d0cet$ = trim_1;
    package$text.trim_wqw3xr$ = trim_2;
    package$text.trimStart_8d0cet$ = trimStart_1;
    package$text.trimStart_wqw3xr$ = trimStart_2;
    package$text.trimEnd_8d0cet$ = trimEnd_1;
    package$text.trimEnd_wqw3xr$ = trimEnd_2;
    package$text.trim_gw00vp$ = trim_3;
    package$text.trimStart_gw00vp$ = trimStart_3;
    package$text.trimEnd_gw00vp$ = trimEnd_3;
    package$text.padStart_yk9sg4$ = padStart;
    package$text.padStart_vrc1nu$ = padStart_0;
    package$text.padEnd_yk9sg4$ = padEnd;
    package$text.padEnd_vrc1nu$ = padEnd_0;
    package$text.hasSurrogatePairAt_94bcnn$ = hasSurrogatePairAt;
    package$text.substring_fc3b62$ = substring_1;
    package$text.subSequence_i511yc$ = subSequence_0;
    package$text.substring_i511yc$ = substring_3;
    package$text.substringBefore_8cymmc$ = substringBefore;
    package$text.substringBefore_j4ogox$ = substringBefore_0;
    package$text.substringAfter_8cymmc$ = substringAfter;
    package$text.substringAfter_j4ogox$ = substringAfter_0;
    package$text.substringBeforeLast_8cymmc$ = substringBeforeLast;
    package$text.substringBeforeLast_j4ogox$ = substringBeforeLast_0;
    package$text.substringAfterLast_8cymmc$ = substringAfterLast;
    package$text.substringAfterLast_j4ogox$ = substringAfterLast_0;
    package$text.replaceRange_p5j4qv$ = replaceRange;
    package$text.replaceRange_r6gztw$ = replaceRange_1;
    package$text.removeRange_qdpigv$ = removeRange;
    package$text.removeRange_i511yc$ = removeRange_1;
    package$text.removePrefix_b6aurr$ = removePrefix;
    package$text.removePrefix_gsj5wt$ = removePrefix_0;
    package$text.removeSuffix_b6aurr$ = removeSuffix;
    package$text.removeSuffix_gsj5wt$ = removeSuffix_0;
    package$text.removeSurrounding_xhcipd$ = removeSurrounding;
    package$text.removeSurrounding_90ijwr$ = removeSurrounding_0;
    package$text.removeSurrounding_b6aurr$ = removeSurrounding_1;
    package$text.removeSurrounding_gsj5wt$ = removeSurrounding_2;
    package$text.replaceBefore_gvb6y2$ = replaceBefore;
    package$text.replaceBefore_q1ioxb$ = replaceBefore_0;
    package$text.replaceAfter_gvb6y2$ = replaceAfter;
    package$text.replaceAfter_q1ioxb$ = replaceAfter_0;
    package$text.replaceAfterLast_q1ioxb$ = replaceAfterLast;
    package$text.replaceAfterLast_gvb6y2$ = replaceAfterLast_0;
    package$text.replaceBeforeLast_gvb6y2$ = replaceBeforeLast;
    package$text.replaceBeforeLast_q1ioxb$ = replaceBeforeLast_0;
    package$text.regionMatchesImpl_4c7s8r$ = regionMatchesImpl;
    package$text.startsWith_sgbm27$ = startsWith_1;
    package$text.endsWith_sgbm27$ = endsWith_0;
    package$text.startsWith_li3zpu$ = startsWith_2;
    package$text.startsWith_pebkaa$ = startsWith_3;
    package$text.endsWith_li3zpu$ = endsWith_1;
    package$text.commonPrefixWith_li3zpu$ = commonPrefixWith;
    package$text.commonSuffixWith_li3zpu$ = commonSuffixWith;
    package$text.indexOfAny_junqau$ = indexOfAny;
    package$text.lastIndexOfAny_junqau$ = lastIndexOfAny;
    package$text.findAnyOf_7utkvz$ = findAnyOf_0;
    package$text.findLastAnyOf_7utkvz$ = findLastAnyOf;
    package$text.indexOfAny_7utkvz$ = indexOfAny_0;
    package$text.lastIndexOfAny_7utkvz$ = lastIndexOfAny_0;
    package$text.indexOf_8eortd$ = indexOf_16;
    package$text.indexOf_l5u8uk$ = indexOf_17;
    package$text.lastIndexOf_8eortd$ = lastIndexOf_15;
    package$text.lastIndexOf_l5u8uk$ = lastIndexOf_16;
    package$text.contains_li3zpu$ = contains_53;
    package$text.contains_sgbm27$ = contains_54;
    package$text.splitToSequence_ip8yn$ = splitToSequence;
    package$text.split_ip8yn$ = split;
    package$text.splitToSequence_o64adg$ = splitToSequence_0;
    package$text.split_o64adg$ = split_0;
    package$text.lineSequence_gw00vp$ = lineSequence;
    package$text.lines_gw00vp$ = lines;
    Object.defineProperty(package$text, 'Typography', {get: Typography_getInstance});
    package$text.MatchGroupCollection = MatchGroupCollection;
    package$text.MatchNamedGroupCollection = MatchNamedGroupCollection;
    MatchResult.Destructured = MatchResult$Destructured;
    package$text.MatchResult = MatchResult;
    Object.defineProperty(Duration, 'Companion', {get: Duration$Companion_getInstance});
    package$time.Duration = Duration;
    package$time.toDuration_14orw9$ = toDuration;
    package$time.toDuration_rrkdm6$ = toDuration_0;
    package$time.toDuration_n769wd$ = toDuration_1;
    package$time.get_nanoseconds_s8ev3n$ = get_nanoseconds;
    package$time.get_nanoseconds_mts6qi$ = get_nanoseconds_0;
    package$time.get_nanoseconds_yrwdxr$ = get_nanoseconds_1;
    package$time.get_microseconds_s8ev3n$ = get_microseconds;
    package$time.get_microseconds_mts6qi$ = get_microseconds_0;
    package$time.get_microseconds_yrwdxr$ = get_microseconds_1;
    package$time.get_milliseconds_s8ev3n$ = get_milliseconds;
    package$time.get_milliseconds_mts6qi$ = get_milliseconds_0;
    package$time.get_milliseconds_yrwdxr$ = get_milliseconds_1;
    package$time.get_seconds_s8ev3n$ = get_seconds;
    package$time.get_seconds_mts6qi$ = get_seconds_0;
    package$time.get_seconds_yrwdxr$ = get_seconds_1;
    package$time.get_minutes_s8ev3n$ = get_minutes;
    package$time.get_minutes_mts6qi$ = get_minutes_0;
    package$time.get_minutes_yrwdxr$ = get_minutes_1;
    package$time.get_hours_s8ev3n$ = get_hours;
    package$time.get_hours_mts6qi$ = get_hours_0;
    package$time.get_hours_yrwdxr$ = get_hours_1;
    package$time.get_days_s8ev3n$ = get_days;
    package$time.get_days_mts6qi$ = get_days_0;
    package$time.get_days_yrwdxr$ = get_days_1;
    package$time.shortName_d5gje$ = shortName;
    package$time.ExperimentalTime = ExperimentalTime;
    Object.defineProperty(TimeSource, 'Monotonic', {get: TimeSource$Monotonic_getInstance});
    Object.defineProperty(TimeSource, 'Companion', {get: TimeSource$Companion_getInstance});
    package$time.TimeSource = TimeSource;
    package$time.TimeMark = TimeMark;
    package$time.AbstractLongTimeSource = AbstractLongTimeSource;
    package$time.AbstractDoubleTimeSource = AbstractDoubleTimeSource;
    package$time.TestTimeSource = TestTimeSource;
    package$time.measureTime_8lzfs6$ = measureTime_0;
    package$time.measureTime_o14v8n$ = measureTime;
    package$time.TimedValue = TimedValue;
    package$time.measureTimedValue_tfb6s1$ = measureTimedValue_0;
    package$time.measureTimedValue_klfg04$ = measureTimedValue;
    Object.defineProperty(KotlinVersion, 'Companion', {get: KotlinVersion$Companion_getInstance});
    package$kotlin.KotlinVersion_init_vux9f0$ = KotlinVersion_init;
    package$kotlin.KotlinVersion = KotlinVersion;
    package$kotlin.Lazy = Lazy;
    package$kotlin.lazyOf_mh5how$ = lazyOf;
    Object.defineProperty(LazyThreadSafetyMode, 'SYNCHRONIZED', {get: LazyThreadSafetyMode$SYNCHRONIZED_getInstance});
    Object.defineProperty(LazyThreadSafetyMode, 'PUBLICATION', {get: LazyThreadSafetyMode$PUBLICATION_getInstance});
    Object.defineProperty(LazyThreadSafetyMode, 'NONE', {get: LazyThreadSafetyMode$NONE_getInstance});
    package$kotlin.LazyThreadSafetyMode = LazyThreadSafetyMode;
    Object.defineProperty(package$kotlin, 'UNINITIALIZED_VALUE', {get: UNINITIALIZED_VALUE_getInstance});
    package$kotlin.UnsafeLazyImpl = UnsafeLazyImpl;
    package$kotlin.InitializedLazyImpl = InitializedLazyImpl;
    package$kotlin.rotateLeft_798l30$ = rotateLeft_1;
    package$kotlin.rotateRight_798l30$ = rotateRight_1;
    package$kotlin.rotateLeft_di2vk2$ = rotateLeft_2;
    package$kotlin.rotateRight_di2vk2$ = rotateRight_2;
    package$kotlin.createFailure_tcv7n7$ = createFailure;
    Object.defineProperty(Result, 'Companion', {get: Result$Companion_getInstance});
    Result.Failure = Result$Failure;
    package$kotlin.throwOnFailure_iacion$ = throwOnFailure;
    package$kotlin.NotImplementedError = NotImplementedError;
    package$kotlin.Pair = Pair;
    package$kotlin.to_ujzrz7$ = to;
    package$kotlin.toList_tt9upe$ = toList_12;
    package$kotlin.Triple = Triple;
    package$kotlin.toList_z6mquf$ = toList_13;
    Object.defineProperty(UByte, 'Companion', {get: UByte$Companion_getInstance});
    package$kotlin.UByteArray_init_za3lpa$ = UByteArray_init;
    package$kotlin.UByteArray = UByteArray;
    Object.defineProperty(UInt, 'Companion', {get: UInt$Companion_getInstance});
    package$kotlin.uintCompare_vux9f0$ = uintCompare;
    package$kotlin.uintDivide_oqfnby$ = uintDivide;
    package$kotlin.uintRemainder_oqfnby$ = uintRemainder;
    package$kotlin.uintToDouble_za3lpa$ = uintToDouble;
    package$kotlin.doubleToUInt_14dthe$ = doubleToUInt;
    package$kotlin.UIntArray_init_za3lpa$ = UIntArray_init;
    package$kotlin.UIntArray = UIntArray;
    Object.defineProperty(UIntRange, 'Companion', {get: UIntRange$Companion_getInstance});
    package$ranges.UIntRange = UIntRange;
    Object.defineProperty(UIntProgression, 'Companion', {get: UIntProgression$Companion_getInstance});
    package$ranges.UIntProgression = UIntProgression;
    package$collections.UByteIterator = UByteIterator;
    package$collections.UShortIterator = UShortIterator;
    package$collections.UIntIterator = UIntIterator;
    package$collections.ULongIterator = ULongIterator;
    Object.defineProperty(ULong, 'Companion', {get: ULong$Companion_getInstance});
    package$kotlin.ulongCompare_3pjtqy$ = ulongCompare;
    package$kotlin.ulongDivide_jpm79w$ = ulongDivide;
    package$kotlin.ulongRemainder_jpm79w$ = ulongRemainder;
    package$kotlin.ulongToDouble_s8cxhz$ = ulongToDouble;
    package$kotlin.doubleToULong_14dthe$ = doubleToULong;
    package$kotlin.ULongArray_init_za3lpa$ = ULongArray_init;
    package$kotlin.ULongArray = ULongArray;
    Object.defineProperty(ULongRange_0, 'Companion', {get: ULongRange$Companion_getInstance});
    package$ranges.ULongRange = ULongRange_0;
    Object.defineProperty(ULongProgression, 'Companion', {get: ULongProgression$Companion_getInstance});
    package$ranges.ULongProgression = ULongProgression;
    package$internal.getProgressionLastElement_fjk8us$ = getProgressionLastElement_1;
    package$internal.getProgressionLastElement_15zasp$ = getProgressionLastElement_2;
    Object.defineProperty(UShort, 'Companion', {get: UShort$Companion_getInstance});
    package$kotlin.UShortArray_init_za3lpa$ = UShortArray_init;
    package$kotlin.UShortArray = UShortArray;
    package$text.toString_aogav3$ = toString_4;
    package$text.toString_pqjt0d$ = toString_5;
    package$text.toString_k13f4a$ = toString_6;
    package$text.toString_hc3rh$ = toString_7;
    package$text.toUByte_pdl1vz$ = toUByte_3;
    package$text.toUByte_6ic1pp$ = toUByte_4;
    package$text.toUShort_pdl1vz$ = toUShort_3;
    package$text.toUShort_6ic1pp$ = toUShort_4;
    package$text.toUInt_pdl1vz$ = toUInt_5;
    package$text.toUInt_6ic1pp$ = toUInt_6;
    package$text.toULong_pdl1vz$ = toULong_5;
    package$text.toULong_6ic1pp$ = toULong_6;
    package$text.toUByteOrNull_pdl1vz$ = toUByteOrNull;
    package$text.toUByteOrNull_6ic1pp$ = toUByteOrNull_0;
    package$text.toUShortOrNull_pdl1vz$ = toUShortOrNull;
    package$text.toUShortOrNull_6ic1pp$ = toUShortOrNull_0;
    package$text.toUIntOrNull_pdl1vz$ = toUIntOrNull;
    package$text.toUIntOrNull_6ic1pp$ = toUIntOrNull_0;
    package$text.toULongOrNull_pdl1vz$ = toULongOrNull;
    package$text.toULongOrNull_6ic1pp$ = toULongOrNull_0;
    package$kotlin.ulongToString_8e33dg$ = ulongToString;
    package$kotlin.ulongToString_plstum$ = ulongToString_0;
    package$kotlin.ExperimentalUnsignedTypes = ExperimentalUnsignedTypes;
    MutableMap.prototype.getOrDefault_xwzc9p$ = Map.prototype.getOrDefault_xwzc9p$;
    AbstractMap.prototype.getOrDefault_xwzc9p$ = Map.prototype.getOrDefault_xwzc9p$;
    AbstractMutableMap.prototype.remove_xwzc9p$ = MutableMap.prototype.remove_xwzc9p$;
    InternalHashCodeMap.prototype.createJsMap = InternalMap.prototype.createJsMap;
    InternalStringMap.prototype.createJsMap = InternalMap.prototype.createJsMap;
    Object.defineProperty(findNext$ObjectLiteral.prototype, 'destructured', Object.getOwnPropertyDescriptor(MatchResult.prototype, 'destructured'));
    MapWithDefault.prototype.getOrDefault_xwzc9p$ = Map.prototype.getOrDefault_xwzc9p$;
    MutableMapWithDefault.prototype.remove_xwzc9p$ = MutableMap.prototype.remove_xwzc9p$;
    MutableMapWithDefault.prototype.getOrDefault_xwzc9p$ = MutableMap.prototype.getOrDefault_xwzc9p$;
    MapWithDefaultImpl.prototype.getOrDefault_xwzc9p$ = MapWithDefault.prototype.getOrDefault_xwzc9p$;
    MutableMapWithDefaultImpl.prototype.remove_xwzc9p$ = MutableMapWithDefault.prototype.remove_xwzc9p$;
    MutableMapWithDefaultImpl.prototype.getOrDefault_xwzc9p$ = MutableMapWithDefault.prototype.getOrDefault_xwzc9p$;
    EmptyMap.prototype.getOrDefault_xwzc9p$ = Map.prototype.getOrDefault_xwzc9p$;
    CoroutineContext$Element.prototype.plus_1fupul$ = CoroutineContext.prototype.plus_1fupul$;
    ContinuationInterceptor.prototype.fold_3cc69b$ = CoroutineContext$Element.prototype.fold_3cc69b$;
    ContinuationInterceptor.prototype.plus_1fupul$ = CoroutineContext$Element.prototype.plus_1fupul$;
    AbstractCoroutineContextElement.prototype.get_j3r2sn$ = CoroutineContext$Element.prototype.get_j3r2sn$;
    AbstractCoroutineContextElement.prototype.fold_3cc69b$ = CoroutineContext$Element.prototype.fold_3cc69b$;
    AbstractCoroutineContextElement.prototype.minusKey_yeqjby$ = CoroutineContext$Element.prototype.minusKey_yeqjby$;
    AbstractCoroutineContextElement.prototype.plus_1fupul$ = CoroutineContext$Element.prototype.plus_1fupul$;
    CombinedContext.prototype.plus_1fupul$ = CoroutineContext.prototype.plus_1fupul$;
    ComparableRange.prototype.contains_mef7kx$ = ClosedRange.prototype.contains_mef7kx$;
    ComparableRange.prototype.isEmpty = ClosedRange.prototype.isEmpty;
    PI = 3.141592653589793;
    E = 2.718281828459045;
    _stableSortingIsSupported = null;
    var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
    output = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();
    EmptyContinuation = new Continuation$ObjectLiteral(EmptyCoroutineContext_getInstance(), EmptyContinuation$lambda);
    INV_2_26 = Math_0.pow(2.0, -26);
    INV_2_53 = Math_0.pow(2.0, -53);
    functionClasses = Kotlin.newArray(0, null);
    STRING_CASE_INSENSITIVE_ORDER = new Comparator$ObjectLiteral_0(STRING_CASE_INSENSITIVE_ORDER$lambda);
    MAX_BYTES_PER_CHAR = 3;
    REPLACEMENT_BYTE_SEQUENCE = new Int8Array([toByte(239), toByte(191), toByte(189)]);
    REPLACEMENT_CHAR = 65533;
    emptyElementData = [];
    maxArraySize = 2147483639;
    defaultMinCapacity = 10;
    State_NotReady = 0;
    State_ManyNotReady = 1;
    State_ManyReady = 2;
    State_Ready = 3;
    State_Done = 4;
    State_Failed = 5;
    Kotlin.defineModule('kotlin', _);
    
  }());
  (function() {
    'use strict';
    var Kind_CLASS = Kotlin.Kind.CLASS;
    var Any = Object;
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    var throwCCE = Kotlin.throwCCE;
    var Throwable = Error;
    var defineInlineFunction = Kotlin.defineInlineFunction;
    var Kind_OBJECT = Kotlin.Kind.OBJECT;
    var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
    var equals = Kotlin.equals;
    var hashCode = Kotlin.hashCode;
    var toString = Kotlin.toString;
    var Annotation = Kotlin.kotlin.Annotation;
    var Unit = Kotlin.kotlin.Unit;
    var wrapFunction = Kotlin.wrapFunction;
    var Collection = Kotlin.kotlin.collections.Collection;
    var ensureNotNull = Kotlin.ensureNotNull;
    var NoSuchElementException_init = Kotlin.kotlin.NoSuchElementException_init;
    var Iterator = Kotlin.kotlin.collections.Iterator;
    var Sequence = Kotlin.kotlin.sequences.Sequence;
    var NotImplementedError = Kotlin.kotlin.NotImplementedError;
    SequenceBuilderIterator.prototype = Object.create(SequenceBuilder.prototype);
    SequenceBuilderIterator.prototype.constructor = SequenceBuilderIterator;
    function CoroutineImpl(resultContinuation) {
      this.resultContinuation_0 = resultContinuation;
      this.state_0 = 0;
      this.exceptionState_0 = 0;
      this.result_0 = null;
      this.exception_0 = null;
      this.finallyPath_0 = null;
      this.context_xate5b$_0 = this.resultContinuation_0.context;
      var tmp$, tmp$_0;
      this.facade = (tmp$_0 = (tmp$ = this.context.get_8oh8b3$(ContinuationInterceptor$Key_getInstance())) != null ? tmp$.interceptContinuation_n4f53e$(this) : null) != null ? tmp$_0 : this;
    }
    Object.defineProperty(CoroutineImpl.prototype, 'context', {get: function () {
      return this.context_xate5b$_0;
    }});
    CoroutineImpl.prototype.resume_11rb$ = function (value) {
      this.result_0 = value;
      this.doResumeWrapper_0();
    };
    CoroutineImpl.prototype.resumeWithException_tcv7n7$ = function (exception) {
      this.state_0 = this.exceptionState_0;
      this.exception_0 = exception;
      this.doResumeWrapper_0();
    };
    CoroutineImpl.prototype.doResumeWrapper_0 = function () {
      var completion = this.resultContinuation_0;
      var tmp$;
      try {
        var result = this.doResume();
        if (result !== COROUTINE_SUSPENDED) {
          (Kotlin.isType(tmp$ = completion, Continuation) ? tmp$ : throwCCE()).resume_11rb$(result);
        }} catch (t) {
        if (Kotlin.isType(t, Throwable)) {
          completion.resumeWithException_tcv7n7$(t);
        } else
          throw t;
      }
    };
    CoroutineImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'CoroutineImpl', interfaces: [Continuation]};
    var UNDECIDED;
    var RESUMED;
    function Fail(exception) {
      this.exception = exception;
    }
    Fail.$metadata$ = {kind: Kind_CLASS, simpleName: 'Fail', interfaces: []};
    function SafeContinuation(delegate, initialResult) {
      this.delegate_0 = delegate;
      this.result_0 = initialResult;
    }
    Object.defineProperty(SafeContinuation.prototype, 'context', {get: function () {
      return this.delegate_0.context;
    }});
    SafeContinuation.prototype.resume_11rb$ = function (value) {
      if (this.result_0 === UNDECIDED)
        this.result_0 = value;
      else if (this.result_0 === COROUTINE_SUSPENDED) {
        this.result_0 = RESUMED;
        this.delegate_0.resume_11rb$(value);
      } else {
        throw IllegalStateException_init('Already resumed');
      }
    };
    SafeContinuation.prototype.resumeWithException_tcv7n7$ = function (exception) {
      if (this.result_0 === UNDECIDED)
        this.result_0 = new Fail(exception);
      else if (this.result_0 === COROUTINE_SUSPENDED) {
        this.result_0 = RESUMED;
        this.delegate_0.resumeWithException_tcv7n7$(exception);
      } else {
        throw IllegalStateException_init('Already resumed');
      }
    };
    SafeContinuation.prototype.getResult = function () {
      var tmp$;
      if (this.result_0 === UNDECIDED) {
        this.result_0 = COROUTINE_SUSPENDED;
      }var result = this.result_0;
      if (result === RESUMED)
        tmp$ = COROUTINE_SUSPENDED;
      else if (Kotlin.isType(result, Fail))
        throw result.exception;
      else {
        tmp$ = result;
      }
      return tmp$;
    };
    SafeContinuation.$metadata$ = {kind: Kind_CLASS, simpleName: 'SafeContinuation', interfaces: [Continuation]};
    function SafeContinuation_init(delegate, $this) {
      $this = $this || Object.create(SafeContinuation.prototype);
      SafeContinuation.call($this, delegate, UNDECIDED);
      return $this;
    }
    var startCoroutineUninterceptedOrReturn = defineInlineFunction('kotlin.kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn_xtwlez$', function ($receiver, completion) {
      return $receiver(completion, false);
    });
    var startCoroutineUninterceptedOrReturn_0 = defineInlineFunction('kotlin.kotlin.coroutines.experimental.intrinsics.startCoroutineUninterceptedOrReturn_uao1qo$', function ($receiver, receiver, completion) {
      return $receiver(receiver, completion, false);
    });
    function createCoroutineUnchecked($receiver, receiver, completion) {
      return $receiver(receiver, completion, true).facade;
    }
    function createCoroutineUnchecked_0($receiver, completion) {
      return $receiver(completion, true).facade;
    }
    var COROUTINE_SUSPENDED;
    function CoroutineSuspendedMarker() {
      CoroutineSuspendedMarker_instance = this;
    }
    CoroutineSuspendedMarker.$metadata$ = {kind: Kind_OBJECT, simpleName: 'CoroutineSuspendedMarker', interfaces: []};
    var CoroutineSuspendedMarker_instance = null;
    function CoroutineSuspendedMarker_getInstance() {
      if (CoroutineSuspendedMarker_instance === null) {
        new CoroutineSuspendedMarker();
      }return CoroutineSuspendedMarker_instance;
    }
    function ContinuationInterceptor() {
      ContinuationInterceptor$Key_getInstance();
    }
    function ContinuationInterceptor$Key() {
      ContinuationInterceptor$Key_instance = this;
    }
    ContinuationInterceptor$Key.$metadata$ = {kind: Kind_OBJECT, simpleName: 'Key', interfaces: [CoroutineContext$Key]};
    var ContinuationInterceptor$Key_instance = null;
    function ContinuationInterceptor$Key_getInstance() {
      if (ContinuationInterceptor$Key_instance === null) {
        new ContinuationInterceptor$Key();
      }return ContinuationInterceptor$Key_instance;
    }
    ContinuationInterceptor.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ContinuationInterceptor', interfaces: [CoroutineContext$Element]};
    function CoroutineContext() {
    }
    function CoroutineContext$plus$lambda(acc, element) {
      var removed = acc.minusKey_ds72xk$(element.key);
      if (removed === EmptyCoroutineContext_getInstance())
        return element;
      else {
        var interceptor = removed.get_8oh8b3$(ContinuationInterceptor$Key_getInstance());
        if (interceptor == null)
          return new CombinedContext(removed, element);
        else {
          var left = removed.minusKey_ds72xk$(ContinuationInterceptor$Key_getInstance());
          return left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
        }
      }
    }
    CoroutineContext.prototype.plus_dvqyjb$ = function (context) {
      return context === EmptyCoroutineContext_getInstance() ? this : context.fold_m9u1mr$(this, CoroutineContext$plus$lambda);
    };
    function CoroutineContext$Element() {
    }
    CoroutineContext$Element.prototype.get_8oh8b3$ = function (key) {
      var tmp$;
      return this.key === key ? Kotlin.isType(tmp$ = this, CoroutineContext$Element) ? tmp$ : throwCCE() : null;
    };
    CoroutineContext$Element.prototype.fold_m9u1mr$ = function (initial, operation) {
      return operation(initial, this);
    };
    CoroutineContext$Element.prototype.minusKey_ds72xk$ = function (key) {
      return this.key === key ? EmptyCoroutineContext_getInstance() : this;
    };
    CoroutineContext$Element.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Element', interfaces: [CoroutineContext]};
    function CoroutineContext$Key() {
    }
    CoroutineContext$Key.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Key', interfaces: []};
    CoroutineContext.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'CoroutineContext', interfaces: []};
    function AbstractCoroutineContextElement(key) {
      this.key_5qfgrq$_0 = key;
    }
    Object.defineProperty(AbstractCoroutineContextElement.prototype, 'key', {get: function () {
      return this.key_5qfgrq$_0;
    }});
    AbstractCoroutineContextElement.$metadata$ = {kind: Kind_CLASS, simpleName: 'AbstractCoroutineContextElement', interfaces: [CoroutineContext$Element]};
    function EmptyCoroutineContext() {
      EmptyCoroutineContext_instance = this;
    }
    EmptyCoroutineContext.prototype.get_8oh8b3$ = function (key) {
      return null;
    };
    EmptyCoroutineContext.prototype.fold_m9u1mr$ = function (initial, operation) {
      return initial;
    };
    EmptyCoroutineContext.prototype.plus_dvqyjb$ = function (context) {
      return context;
    };
    EmptyCoroutineContext.prototype.minusKey_ds72xk$ = function (key) {
      return this;
    };
    EmptyCoroutineContext.prototype.hashCode = function () {
      return 0;
    };
    EmptyCoroutineContext.prototype.toString = function () {
      return 'EmptyCoroutineContext';
    };
    EmptyCoroutineContext.$metadata$ = {kind: Kind_OBJECT, simpleName: 'EmptyCoroutineContext', interfaces: [CoroutineContext]};
    var EmptyCoroutineContext_instance = null;
    function EmptyCoroutineContext_getInstance() {
      if (EmptyCoroutineContext_instance === null) {
        new EmptyCoroutineContext();
      }return EmptyCoroutineContext_instance;
    }
    function CombinedContext(left, element) {
      this.left = left;
      this.element = element;
    }
    CombinedContext.prototype.get_8oh8b3$ = function (key) {
      var tmp$;
      var cur = this;
      while (true) {
        if ((tmp$ = cur.element.get_8oh8b3$(key)) != null) {
          return tmp$;
        }var next = cur.left;
        if (Kotlin.isType(next, CombinedContext)) {
          cur = next;
        } else {
          return next.get_8oh8b3$(key);
        }
      }
    };
    CombinedContext.prototype.fold_m9u1mr$ = function (initial, operation) {
      return operation(this.left.fold_m9u1mr$(initial, operation), this.element);
    };
    CombinedContext.prototype.minusKey_ds72xk$ = function (key) {
      var tmp$;
      if (this.element.get_8oh8b3$(key) != null) {
        return this.left;
      }var newLeft = this.left.minusKey_ds72xk$(key);
      if (newLeft === this.left)
        tmp$ = this;
      else if (newLeft === EmptyCoroutineContext_getInstance())
        tmp$ = this.element;
      else
        tmp$ = new CombinedContext(newLeft, this.element);
      return tmp$;
    };
    CombinedContext.prototype.size_0 = function () {
      return Kotlin.isType(this.left, CombinedContext) ? this.left.size_0() + 1 | 0 : 2;
    };
    CombinedContext.prototype.contains_0 = function (element) {
      return equals(this.get_8oh8b3$(element.key), element);
    };
    CombinedContext.prototype.containsAll_0 = function (context) {
      var tmp$;
      var cur = context;
      while (true) {
        if (!this.contains_0(cur.element))
          return false;
        var next = cur.left;
        if (Kotlin.isType(next, CombinedContext)) {
          cur = next;
        } else {
          return this.contains_0(Kotlin.isType(tmp$ = next, CoroutineContext$Element) ? tmp$ : throwCCE());
        }
      }
    };
    CombinedContext.prototype.equals = function (other) {
      return this === other || (Kotlin.isType(other, CombinedContext) && other.size_0() === this.size_0() && other.containsAll_0(this));
    };
    CombinedContext.prototype.hashCode = function () {
      return hashCode(this.left) + hashCode(this.element) | 0;
    };
    function CombinedContext$toString$lambda(acc, element) {
      return acc.length === 0 ? element.toString() : acc + ', ' + toString(element);
    }
    CombinedContext.prototype.toString = function () {
      return '[' + this.fold_m9u1mr$('', CombinedContext$toString$lambda) + ']';
    };
    CombinedContext.$metadata$ = {kind: Kind_CLASS, simpleName: 'CombinedContext', interfaces: [CoroutineContext]};
    function Continuation() {
    }
    Continuation.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'Continuation', interfaces: []};
    function RestrictsSuspension() {
    }
    RestrictsSuspension.$metadata$ = {kind: Kind_CLASS, simpleName: 'RestrictsSuspension', interfaces: [Annotation]};
    function suspendCoroutineOrReturn$lambda(closure$block) {
      return function (cont) {
        return closure$block(cont.facade);
      };
    }
    function suspendCoroutine$lambda(closure$block) {
      return function (c) {
        var safe = SafeContinuation_init(c);
        closure$block(safe);
        return safe.getResult();
      };
    }
    function startCoroutine($receiver, receiver, completion) {
      createCoroutineUnchecked($receiver, receiver, completion).resume_11rb$(Unit);
    }
    function startCoroutine_0($receiver, completion) {
      createCoroutineUnchecked_0($receiver, completion).resume_11rb$(Unit);
    }
    function createCoroutine($receiver, receiver, completion) {
      return new SafeContinuation(createCoroutineUnchecked($receiver, receiver, completion), COROUTINE_SUSPENDED);
    }
    function createCoroutine_0($receiver, completion) {
      return new SafeContinuation(createCoroutineUnchecked_0($receiver, completion), COROUTINE_SUSPENDED);
    }
    function suspendCoroutine(block, continuation) {
      return suspendCoroutineOrReturn$lambda(suspendCoroutine$lambda(block))(continuation);
    }
    defineInlineFunction('kotlin.kotlin.coroutines.experimental.suspendCoroutine_z3e1t3$', wrapFunction(function () {
      var SafeContinuation_init = _.kotlin.coroutines.experimental.SafeContinuation_init_n4f53e$;
      function suspendCoroutineOrReturn$lambda(closure$block) {
        return function (cont) {
          return closure$block(cont.facade);
        };
      }
      function suspendCoroutine$lambda(closure$block) {
        return function (c) {
          var safe = SafeContinuation_init(c);
          closure$block(safe);
          return safe.getResult();
        };
      }
      return function (block, continuation) {
        Kotlin.suspendCall(suspendCoroutineOrReturn$lambda(suspendCoroutine$lambda(block))(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      };
    }));
    var get_coroutineContext = defineInlineFunction('kotlin.kotlin.coroutines.experimental.get_coroutineContext', wrapFunction(function () {
      var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
      return function () {
        throw new NotImplementedError_init('Implemented as intrinsic');
      };
    }));
    var processBareContinuationResume = defineInlineFunction('kotlin.kotlin.coroutines.experimental.processBareContinuationResume_xjdw2a$', wrapFunction(function () {
      var COROUTINE_SUSPENDED = _.kotlin.coroutines.experimental.intrinsics.COROUTINE_SUSPENDED;
      var Continuation = _.kotlin.coroutines.experimental.Continuation;
      var throwCCE = Kotlin.throwCCE;
      var Throwable = Error;
      return function (completion, block) {
        var tmp$;
        try {
          var result = block();
          if (result !== COROUTINE_SUSPENDED) {
            (Kotlin.isType(tmp$ = completion, Continuation) ? tmp$ : throwCCE()).resume_11rb$(result);
          }} catch (t) {
          if (Kotlin.isType(t, Throwable)) {
            completion.resumeWithException_tcv7n7$(t);
          } else
            throw t;
        }
      };
    }));
    function Sequence$ObjectLiteral(closure$iterator) {
      this.closure$iterator = closure$iterator;
    }
    Sequence$ObjectLiteral.prototype.iterator = function () {
      return this.closure$iterator();
    };
    Sequence$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Sequence]};
    function suspendCoroutineOrReturn$lambda_0(closure$block) {
      return function (cont) {
        return closure$block(cont.facade);
      };
    }
    function buildSequence$lambda(closure$builderAction) {
      return function () {
        return buildIterator(closure$builderAction);
      };
    }
    function buildSequence(builderAction) {
      return new Sequence$ObjectLiteral(buildSequence$lambda(builderAction));
    }
    function buildIterator(builderAction) {
      var iterator = new SequenceBuilderIterator();
      iterator.nextStep = createCoroutineUnchecked(builderAction, iterator, iterator);
      return iterator;
    }
    function SequenceBuilder() {
    }
    SequenceBuilder.prototype.yieldAll_p1ys8y$ = function (elements, continuation) {
      if (Kotlin.isType(elements, Collection) && elements.isEmpty())
        return;
      return this.yieldAll_1phuh2$(elements.iterator(), continuation);
    };
    SequenceBuilder.prototype.yieldAll_swo9gw$ = function (sequence, continuation) {
      return this.yieldAll_1phuh2$(sequence.iterator(), continuation);
    };
    SequenceBuilder.$metadata$ = {kind: Kind_CLASS, simpleName: 'SequenceBuilder', interfaces: []};
    var State_NotReady;
    var State_ManyNotReady;
    var State_ManyReady;
    var State_Ready;
    var State_Done;
    var State_Failed;
    function SequenceBuilderIterator() {
      SequenceBuilder.call(this);
      this.state_0 = 0;
      this.nextValue_0 = null;
      this.nextIterator_0 = null;
      this.nextStep = null;
    }
    SequenceBuilderIterator.prototype.hasNext = function () {
      while (true) {
        switch (this.state_0) {
          case 0:
            break;
          case 1:
            if (ensureNotNull(this.nextIterator_0).hasNext()) {
              this.state_0 = 2;
              return true;
            } else {
              this.nextIterator_0 = null;
            }

            break;
          case 4:
            return false;
          case 3:
          case 2:
            return true;
          default:throw this.exceptionalState_0();
        }
        this.state_0 = 5;
        var step = ensureNotNull(this.nextStep);
        this.nextStep = null;
        step.resume_11rb$(Unit);
      }
    };
    SequenceBuilderIterator.prototype.next = function () {
      var tmp$;
      switch (this.state_0) {
        case 0:
        case 1:
          return this.nextNotReady_0();
        case 2:
          this.state_0 = 1;
          return ensureNotNull(this.nextIterator_0).next();
        case 3:
          this.state_0 = 0;
          var result = (tmp$ = this.nextValue_0) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
          this.nextValue_0 = null;
          return result;
        default:throw this.exceptionalState_0();
      }
    };
    SequenceBuilderIterator.prototype.nextNotReady_0 = function () {
      if (!this.hasNext())
        throw NoSuchElementException_init();
      else
        return this.next();
    };
    SequenceBuilderIterator.prototype.exceptionalState_0 = function () {
      switch (this.state_0) {
        case 4:
          return NoSuchElementException_init();
        case 5:
          return IllegalStateException_init('Iterator has failed.');
        default:return IllegalStateException_init('Unexpected state of the iterator: ' + this.state_0);
      }
    };
    function SequenceBuilderIterator$yield$lambda(this$SequenceBuilderIterator) {
      return function (c) {
        this$SequenceBuilderIterator.nextStep = c;
        return COROUTINE_SUSPENDED;
      };
    }
    SequenceBuilderIterator.prototype.yield_11rb$ = function (value, continuation) {
      this.nextValue_0 = value;
      this.state_0 = 3;
      return suspendCoroutineOrReturn$lambda_0(SequenceBuilderIterator$yield$lambda(this))(continuation);
    };
    function SequenceBuilderIterator$yieldAll$lambda(this$SequenceBuilderIterator) {
      return function (c) {
        this$SequenceBuilderIterator.nextStep = c;
        return COROUTINE_SUSPENDED;
      };
    }
    SequenceBuilderIterator.prototype.yieldAll_1phuh2$ = function (iterator, continuation) {
      if (!iterator.hasNext())
        return;
      this.nextIterator_0 = iterator;
      this.state_0 = 2;
      return suspendCoroutineOrReturn$lambda_0(SequenceBuilderIterator$yieldAll$lambda(this))(continuation);
    };
    SequenceBuilderIterator.prototype.resume_11rb$ = function (value) {
      this.state_0 = 4;
    };
    SequenceBuilderIterator.prototype.resumeWithException_tcv7n7$ = function (exception) {
      throw exception;
    };
    Object.defineProperty(SequenceBuilderIterator.prototype, 'context', {get: function () {
      return EmptyCoroutineContext_getInstance();
    }});
    SequenceBuilderIterator.$metadata$ = {kind: Kind_CLASS, simpleName: 'SequenceBuilderIterator', interfaces: [Continuation, Iterator, SequenceBuilder]};
    function suspendCoroutineOrReturn$lambda_1(closure$block) {
      return function (cont) {
        return closure$block(cont.facade);
      };
    }
    function suspendCoroutineOrReturn(block, continuation) {
      return suspendCoroutineOrReturn$lambda_1(block)(continuation);
    }
    defineInlineFunction('kotlin.kotlin.coroutines.experimental.intrinsics.suspendCoroutineOrReturn_8ufn2u$', wrapFunction(function () {
      function suspendCoroutineOrReturn$lambda(closure$block) {
        return function (cont) {
          return closure$block(cont.facade);
        };
      }
      return function (block, continuation) {
        Kotlin.suspendCall(suspendCoroutineOrReturn$lambda(block)(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      };
    }));
    function suspendCoroutineUninterceptedOrReturn(block, continuation) {
      throw new NotImplementedError('Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic');
    }
    defineInlineFunction('kotlin.kotlin.coroutines.experimental.intrinsics.suspendCoroutineUninterceptedOrReturn_8ufn2u$', wrapFunction(function () {
      var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
      return function (block, continuation) {
        throw new NotImplementedError_init('Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic');
      };
    }));
    var intercepted = defineInlineFunction('kotlin.kotlin.coroutines.experimental.intrinsics.intercepted_5cx0c9$', wrapFunction(function () {
      var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
      return function ($receiver) {
        throw new NotImplementedError_init('Implementation of intercepted is intrinsic');
      };
    }));
    var package$kotlin = _.kotlin || (_.kotlin = {});
    var package$coroutines = package$kotlin.coroutines || (package$kotlin.coroutines = {});
    var package$experimental = package$coroutines.experimental || (package$coroutines.experimental = {});
    package$experimental.CoroutineImpl = CoroutineImpl;
    package$experimental.SafeContinuation_init_n4f53e$ = SafeContinuation_init;
    package$experimental.SafeContinuation = SafeContinuation;
    var package$intrinsics = package$experimental.intrinsics || (package$experimental.intrinsics = {});
    package$intrinsics.createCoroutineUnchecked_uao1qo$ = createCoroutineUnchecked;
    package$intrinsics.createCoroutineUnchecked_xtwlez$ = createCoroutineUnchecked_0;
    Object.defineProperty(package$intrinsics, 'COROUTINE_SUSPENDED', {get: function () {
      return COROUTINE_SUSPENDED;
    }});
    Object.defineProperty(ContinuationInterceptor, 'Key', {get: ContinuationInterceptor$Key_getInstance});
    package$experimental.ContinuationInterceptor = ContinuationInterceptor;
    CoroutineContext.Element = CoroutineContext$Element;
    CoroutineContext.Key = CoroutineContext$Key;
    package$experimental.CoroutineContext = CoroutineContext;
    package$experimental.AbstractCoroutineContextElement = AbstractCoroutineContextElement;
    Object.defineProperty(package$experimental, 'EmptyCoroutineContext', {get: EmptyCoroutineContext_getInstance});
    package$experimental.CombinedContext = CombinedContext;
    package$experimental.Continuation = Continuation;
    package$experimental.RestrictsSuspension = RestrictsSuspension;
    package$experimental.startCoroutine_uao1qo$ = startCoroutine;
    package$experimental.startCoroutine_xtwlez$ = startCoroutine_0;
    package$experimental.createCoroutine_uao1qo$ = createCoroutine;
    package$experimental.createCoroutine_xtwlez$ = createCoroutine_0;
    package$experimental.suspendCoroutine_z3e1t3$ = suspendCoroutine;
    Object.defineProperty(package$experimental, 'coroutineContext', {get: get_coroutineContext});
    package$experimental.buildSequence_of7nec$ = buildSequence;
    package$experimental.buildIterator_of7nec$ = buildIterator;
    package$experimental.SequenceBuilder = SequenceBuilder;
    CoroutineContext$Element.prototype.plus_dvqyjb$ = CoroutineContext.prototype.plus_dvqyjb$;
    ContinuationInterceptor.prototype.get_8oh8b3$ = CoroutineContext$Element.prototype.get_8oh8b3$;
    ContinuationInterceptor.prototype.fold_m9u1mr$ = CoroutineContext$Element.prototype.fold_m9u1mr$;
    ContinuationInterceptor.prototype.minusKey_ds72xk$ = CoroutineContext$Element.prototype.minusKey_ds72xk$;
    ContinuationInterceptor.prototype.plus_dvqyjb$ = CoroutineContext$Element.prototype.plus_dvqyjb$;
    AbstractCoroutineContextElement.prototype.get_8oh8b3$ = CoroutineContext$Element.prototype.get_8oh8b3$;
    AbstractCoroutineContextElement.prototype.fold_m9u1mr$ = CoroutineContext$Element.prototype.fold_m9u1mr$;
    AbstractCoroutineContextElement.prototype.minusKey_ds72xk$ = CoroutineContext$Element.prototype.minusKey_ds72xk$;
    AbstractCoroutineContextElement.prototype.plus_dvqyjb$ = CoroutineContext$Element.prototype.plus_dvqyjb$;
    CombinedContext.prototype.plus_dvqyjb$ = CoroutineContext.prototype.plus_dvqyjb$;
    UNDECIDED = new Any();
    RESUMED = new Any();
    COROUTINE_SUSPENDED = CoroutineSuspendedMarker_getInstance();
    State_NotReady = 0;
    State_ManyNotReady = 1;
    State_ManyReady = 2;
    State_Ready = 3;
    State_Done = 4;
    State_Failed = 5;
    Kotlin.defineModule('kotlin', _);
    
  }());
}));



}).call(this,require('_process'))
},{"_process":2}],67:[function(require,module,exports){
(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'kt-math'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kt-math'.");
    }root['kt-math'] = factory(typeof this['kt-math'] === 'undefined' ? {} : this['kt-math'], kotlin);
  }
}(this, function (_, Kotlin) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var equals = Kotlin.equals;
  var ensureNotNull = Kotlin.ensureNotNull;
  var L0 = Kotlin.Long.ZERO;
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var ArithmeticException = Kotlin.kotlin.ArithmeticException;
  var L2147483647 = Kotlin.Long.fromInt(2147483647);
  var abs = Kotlin.kotlin.math.abs_s8cxhz$;
  var Pair = Kotlin.kotlin.Pair;
  var L1 = Kotlin.Long.ONE;
  var AssertionError_init = Kotlin.kotlin.AssertionError_init_pdl1vj$;
  var abs_0 = Kotlin.kotlin.math.abs_za3lpa$;
  var get_sign = Kotlin.kotlin.math.get_sign_mts6qi$;
  var Long$Companion$MIN_VALUE = Kotlin.Long.MIN_VALUE;
  var throwCCE = Kotlin.throwCCE;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init_za3lpa$;
  var StringBuilder = Kotlin.kotlin.text.StringBuilder;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var toByte = Kotlin.toByte;
  var toChar = Kotlin.toChar;
  var toBoxedChar = Kotlin.toBoxedChar;
  var toShort = Kotlin.toShort;
  var L4194304 = Kotlin.Long.fromInt(4194304);
  var L4503599627370496 = new Kotlin.Long(0, 1048576);
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var removeRange = Kotlin.kotlin.text.removeRange_qdpigv$;
  var StringBuilder_init_0 = Kotlin.kotlin.text.StringBuilder_init;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var toString = Kotlin.toString;
  var CharRange = Kotlin.kotlin.ranges.CharRange;
  var copyOf = Kotlin.kotlin.collections.copyOf_8ujjk8$;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var L10 = Kotlin.Long.fromInt(10);
  var L2 = Kotlin.Long.fromInt(2);
  var L3 = Kotlin.Long.fromInt(3);
  var L4 = Kotlin.Long.fromInt(4);
  var L5 = Kotlin.Long.fromInt(5);
  var L6 = Kotlin.Long.fromInt(6);
  var L7 = Kotlin.Long.fromInt(7);
  var L8 = Kotlin.Long.fromInt(8);
  var L9 = Kotlin.Long.fromInt(9);
  var L4611686018427387903 = new Kotlin.Long(-1, 1073741823);
  var L_4611686018427387904 = new Kotlin.Long(0, -1073741824);
  var L100 = Kotlin.Long.fromInt(100);
  var L1000 = Kotlin.Long.fromInt(1000);
  var L10000 = Kotlin.Long.fromInt(10000);
  var L100000 = Kotlin.Long.fromInt(100000);
  var L1000000 = Kotlin.Long.fromInt(1000000);
  var L10000000 = Kotlin.Long.fromInt(10000000);
  var L100000000 = Kotlin.Long.fromInt(100000000);
  var L1000000000 = Kotlin.Long.fromInt(1000000000);
  var L10000000000 = new Kotlin.Long(1410065408, 2);
  var L100000000000 = new Kotlin.Long(1215752192, 23);
  var L1000000000000 = new Kotlin.Long(-727379968, 232);
  var L10000000000000 = new Kotlin.Long(1316134912, 2328);
  var L100000000000000 = new Kotlin.Long(276447232, 23283);
  var L1000000000000000 = new Kotlin.Long(-1530494976, 232830);
  var L10000000000000000 = new Kotlin.Long(1874919424, 2328306);
  var L100000000000000000 = new Kotlin.Long(1569325056, 23283064);
  var L1000000000000000000 = new Kotlin.Long(-1486618624, 232830643);
  var L922337203685477580 = new Kotlin.Long(-858993460, 214748364);
  var L92233720368547758 = new Kotlin.Long(2061584302, 21474836);
  var L9223372036854775 = new Kotlin.Long(-1511828489, 2147483);
  var L922337203685477 = new Kotlin.Long(1566804069, 214748);
  var L92233720368547 = new Kotlin.Long(-702313053, 21474);
  var L9223372036854 = new Kotlin.Long(2077252342, 2147);
  var L922337203685 = new Kotlin.Long(-1080764955, 214);
  var L92233720368 = new Kotlin.Long(2039407152, 21);
  var L9223372036 = new Kotlin.Long(633437444, 2);
  var L922337203 = Kotlin.Long.fromInt(922337203);
  var L92233720 = Kotlin.Long.fromInt(92233720);
  var L9223372 = Kotlin.Long.fromInt(9223372);
  var L922337 = Kotlin.Long.fromInt(922337);
  var L92233 = Kotlin.Long.fromInt(92233);
  var L9223 = Kotlin.Long.fromInt(9223);
  var L922 = Kotlin.Long.fromInt(922);
  var L92 = Kotlin.Long.fromInt(92);
  var L4294967296 = new Kotlin.Long(0, 1);
  var L_8446744073709551616 = new Kotlin.Long(-1981284352, -1966660860);
  var L7766279631452241920 = new Kotlin.Long(1661992960, 1808227885);
  var L54 = Kotlin.Long.fromInt(54);
  var L3875820019684212736 = new Kotlin.Long(-559939584, 902409669);
  var L542 = Kotlin.Long.fromInt(542);
  var L1864712049423024128 = new Kotlin.Long(-1304428544, 434162106);
  var L5421 = Kotlin.Long.fromInt(5421);
  var L200376420520689664 = new Kotlin.Long(-159383552, 46653770);
  var L54210 = Kotlin.Long.fromInt(54210);
  var L2003764205206896640 = new Kotlin.Long(-1593835520, 466537709);
  var L542101 = Kotlin.Long.fromInt(542101);
  var L1590897978359414784 = new Kotlin.Long(1241513984, 370409800);
  var L5421010 = Kotlin.Long.fromInt(5421010);
  var L_2537764290115403776 = new Kotlin.Long(-469762048, -590869294);
  var L54210108 = Kotlin.Long.fromInt(54210108);
  var L_6930898827444486144 = new Kotlin.Long(-402653184, -1613725636);
  var L542101086 = Kotlin.Long.fromInt(542101086);
  var L4477988020393345024 = new Kotlin.Long(268435456, 1042612833);
  var L5421010862 = new Kotlin.Long(1126043566, 1);
  var L7886392056514347008 = new Kotlin.Long(-1610612736, 1836193738);
  var L54210108624 = new Kotlin.Long(-1624466224, 12);
  var L5076944270305263616 = new Kotlin.Long(1073741824, 1182068202);
  var L542101086242 = new Kotlin.Long(935206946, 126);
  var L_4570789518076018688 = new Kotlin.Long(-2147483648, -1064219866);
  var L5421010862427 = new Kotlin.Long(762134875, 1262);
  var L_8814407033341083648 = new Kotlin.Long(0, -2052264063);
  var L54210108624275 = new Kotlin.Long(-968585837, 12621);
  var L4089650035136921600 = new Kotlin.Long(0, 952195850);
  var L542101086242752 = new Kotlin.Long(-1095923776, 126217);
  var L4003012203950112768 = new Kotlin.Long(0, 932023908);
  var L5421010862427522 = new Kotlin.Long(1925664130, 1262177);
  var L3136633892082024448 = new Kotlin.Long(0, 730304488);
  var L54210108624275221 = new Kotlin.Long(2076772117, 12621774);
  var L_5527149226598858752 = new Kotlin.Long(0, -1286889712);
  var L542101086242752217 = new Kotlin.Long(-707115303, 126217744);
  var L68739955140067328 = new Kotlin.Long(0, 16004768);
  var L5421010862427522170 = new Kotlin.Long(1518781562, 1262177448);
  var L687399551400673280 = new Kotlin.Long(0, 160047680);
  var Comparable = Kotlin.kotlin.Comparable;
  var NumberFormatException_init = Kotlin.kotlin.NumberFormatException_init;
  var IndexOutOfBoundsException = Kotlin.kotlin.IndexOutOfBoundsException;
  var RuntimeException = Kotlin.kotlin.RuntimeException;
  var isInfinite = Kotlin.kotlin.isInfinite_yrwdxr$;
  var toBits = Kotlin.doubleToBits;
  var L2047 = Kotlin.Long.fromInt(2047);
  var L4503599627370495 = new Kotlin.Long(-1, 1048575);
  var Math_0 = Math;
  var String_0 = Kotlin.kotlin.text.String_4hbowm$;
  var Random = Kotlin.kotlin.random.Random;
  var copyOfRange = Kotlin.kotlin.collections.copyOfRange_6pxxqk$;
  var L2863311531 = new Kotlin.Long(-1431655765, 0);
  var L1431655766 = Kotlin.Long.fromInt(1431655766);
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var copyOf_0 = Kotlin.kotlin.collections.copyOf_c03ot6$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init;
  var toString_0 = Kotlin.kotlin.text.toString_if0zpk$;
  var kotlin_js_internal_ShortCompanionObject = Kotlin.kotlin.js.internal.ShortCompanionObject;
  var kotlin_js_internal_ByteCompanionObject = Kotlin.kotlin.js.internal.ByteCompanionObject;
  var IntRange = Kotlin.kotlin.ranges.IntRange;
  var contains = Kotlin.kotlin.ranges.contains_8sy4e8$;
  var replaceFirst = Kotlin.kotlin.text.replaceFirst_680rmw$;
  var contains_0 = Kotlin.kotlin.text.contains_li3zpu$;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var numberToInt = Kotlin.numberToInt;
  var Array_0 = Array;
  var requireNoNulls = Kotlin.kotlin.collections.requireNoNulls_9b7vla$;
  var get_indices = Kotlin.kotlin.collections.get_indices_tmsbgo$;
  var reversed = Kotlin.kotlin.ranges.reversed_zf1xzc$;
  var L4294967295 = new Kotlin.Long(-1, 0);
  var L1024 = Kotlin.Long.fromInt(1024);
  var L1624 = Kotlin.Long.fromInt(1624);
  var L2048 = Kotlin.Long.fromInt(2048);
  var L2378 = Kotlin.Long.fromInt(2378);
  var L2648 = Kotlin.Long.fromInt(2648);
  var L2875 = Kotlin.Long.fromInt(2875);
  var L3072 = Kotlin.Long.fromInt(3072);
  var L3247 = Kotlin.Long.fromInt(3247);
  var L3402 = Kotlin.Long.fromInt(3402);
  var L3543 = Kotlin.Long.fromInt(3543);
  var L3672 = Kotlin.Long.fromInt(3672);
  var L3790 = Kotlin.Long.fromInt(3790);
  var L3899 = Kotlin.Long.fromInt(3899);
  var L4001 = Kotlin.Long.fromInt(4001);
  var L4096 = Kotlin.Long.fromInt(4096);
  var L4186 = Kotlin.Long.fromInt(4186);
  var L4271 = Kotlin.Long.fromInt(4271);
  var L4350 = Kotlin.Long.fromInt(4350);
  var L4426 = Kotlin.Long.fromInt(4426);
  var L4498 = Kotlin.Long.fromInt(4498);
  var L4567 = Kotlin.Long.fromInt(4567);
  var L4633 = Kotlin.Long.fromInt(4633);
  var L4696 = Kotlin.Long.fromInt(4696);
  var L4756 = Kotlin.Long.fromInt(4756);
  var L4814 = Kotlin.Long.fromInt(4814);
  var L4870 = Kotlin.Long.fromInt(4870);
  var L4923 = Kotlin.Long.fromInt(4923);
  var L4975 = Kotlin.Long.fromInt(4975);
  var L5025 = Kotlin.Long.fromInt(5025);
  var L5074 = Kotlin.Long.fromInt(5074);
  var L5120 = Kotlin.Long.fromInt(5120);
  var L5166 = Kotlin.Long.fromInt(5166);
  var L5210 = Kotlin.Long.fromInt(5210);
  var L5253 = Kotlin.Long.fromInt(5253);
  var L5295 = Kotlin.Long.fromInt(5295);
  var L152125131763605 = new Kotlin.Long(1685106581, 35419);
  var L4611686018427387904 = new Kotlin.Long(0, 1073741824);
  var L4052555153018976267 = new Kotlin.Long(-1201670133, 943559024);
  var L7450580596923828125 = new Kotlin.Long(-99612771, 1734723475);
  var L4738381338321616896 = new Kotlin.Long(-520093696, 1103240376);
  var L3909821048582988049 = new Kotlin.Long(1344430353, 910326151);
  var L1152921504606846976 = new Kotlin.Long(0, 268435456);
  var L1350851717672992089 = new Kotlin.Long(-400556711, 314519674);
  var L5559917313492231481 = new Kotlin.Long(-1019239111, 1294519126);
  var L2218611106740436992 = new Kotlin.Long(0, 516560652);
  var L8650415919381337933 = new Kotlin.Long(1645991757, 2014081906);
  var L2177953337809371136 = new Kotlin.Long(2105606144, 507094277);
  var L6568408355712890625 = new Kotlin.Long(1039759105, 1529326745);
  var L2862423051509815793 = new Kotlin.Long(2116147697, 666459801);
  var L6746640616477458432 = new Kotlin.Long(1012695040, 1570824677);
  var L799006685782884121 = new Kotlin.Long(-281002215, 186033240);
  var L1638400000000000000 = new Kotlin.Long(-1879048192, 381469726);
  var L3243919932521508681 = new Kotlin.Long(-641667255, 755283965);
  var L6221821273427820544 = new Kotlin.Long(-895336448, 1448630651);
  var L504036361936467383 = new Kotlin.Long(-1826982473, 117355110);
  var L876488338465357824 = new Kotlin.Long(0, 204073344);
  var L1490116119384765625 = new Kotlin.Long(839070905, 346944695);
  var L2481152873203736576 = new Kotlin.Long(2025824256, 577688420);
  var L6502111422497947648 = new Kotlin.Long(-1677721600, 1513890787);
  var L353814783205469041 = new Kotlin.Long(-1254200463, 82378923);
  var L531441000000000000 = new Kotlin.Long(403968000, 123735750);
  var L787662783788549761 = new Kotlin.Long(-293403007, 183392032);
  var L1667889514952984961 = new Kotlin.Long(1331628417, 388335789);
  var L2386420683693101056 = new Kotlin.Long(-802418688, 555631863);
  var L3379220508056640625 = new Kotlin.Long(-261202831, 786786085);
  var IndexOutOfBoundsException_init = Kotlin.kotlin.IndexOutOfBoundsException_init;
  var lastIndexOf = Kotlin.kotlin.text.lastIndexOf_8eortd$;
  var toInt = Kotlin.kotlin.text.toInt_6ic1pp$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  var L9218868437227405312 = new Kotlin.Long(0, 2146435072);
  var L32 = Kotlin.Long.fromInt(32);
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var until_0 = Kotlin.kotlin.ranges.until_ui3wc7$;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var StringBuilder_init_1 = Kotlin.kotlin.text.StringBuilder_init_6bul2c$;
  var charArray = Kotlin.charArray;
  var unboxChar = Kotlin.unboxChar;
  var numberToLong = Kotlin.numberToLong;
  var IllegalArgumentException_init_0 = Kotlin.kotlin.IllegalArgumentException_init;
  var Any = Object;
  RoundingMode.prototype = Object.create(Enum.prototype);
  RoundingMode.prototype.constructor = RoundingMode;
  SignedMutableBigInteger.prototype = Object.create(MutableBigInteger.prototype);
  SignedMutableBigInteger.prototype.constructor = SignedMutableBigInteger;
  function BigDecimal() {
    BigDecimal$Companion_getInstance();
    this._intVal_0 = null;
    this._scale_0 = 0;
    this._precision_0 = 0;
    this._stringCache_0 = null;
    this._intCompact_0 = null;
  }
  Object.defineProperty(BigDecimal.prototype, 'isPowerOfTen_0', {
    get: function () {
      var tmp$;
      return (tmp$ = BigInteger$Companion_getInstance().ONE) != null ? tmp$.equals(this.unscaledValue) : null;
    }
  });
  BigDecimal.prototype.adjustScale_0 = function (scl, exp) {
    var scl_0 = scl;
    var adjustedScale = Kotlin.Long.fromInt(scl_0).subtract(exp);
    if (adjustedScale.toNumber() > 2147483647 || adjustedScale.toNumber() < -2147483648)
      throw new NumberFormatException('Scale out of range.');
    scl_0 = adjustedScale.toInt();
    return scl_0;
  };
  BigDecimal.prototype.plus = function (augend) {
    var tmp$;
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(ensureNotNull(augend)._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().sum_0(this._intCompact_0, this._scale_0, augend._intCompact_0, augend._scale_0);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().sum_1(this._intCompact_0, this._scale_0, ensureNotNull(augend._intVal_0), augend._scale_0);
      }
    } else {
      if (!equals(ensureNotNull(augend)._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().sum_1(augend._intCompact_0, augend._scale_0, ensureNotNull(this._intVal_0), this._scale_0);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().sum_2(this._intVal_0, this._scale_0, augend._intVal_0, augend._scale_0);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.plusWithContext = function (augend, mc) {
    var augend_0 = {v: augend};
    if (mc.precision === 0)
      return this.plus(augend_0.v);
    var lhs = {v: this};
    var lhsIsZero = lhs.v.signum === 0;
    var augendIsZero = ensureNotNull(augend_0.v).signum === 0;
    if (lhsIsZero || augendIsZero) {
      var a = lhs.v.scale;
      var b = ensureNotNull(augend_0.v).scale;
      var preferredScale = Math_0.max(a, b);
      var result = lhsIsZero ? BigDecimal$Companion_getInstance().doRound_0(augend_0.v, mc) : BigDecimal$Companion_getInstance().doRound_0(lhs.v, mc);
      if (lhsIsZero && augendIsZero)
        return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(preferredScale);
      if (ensureNotNull(result).scale === preferredScale)
        return result;
      else if (result.scale > preferredScale) {
        return BigDecimal$Companion_getInstance().stripZerosToMatchScale_0(result._intVal_0, result._intCompact_0, result._scale_0, preferredScale);
      } else {
        var precisionDiff = mc.precision - result.precision | 0;
        var scaleDiff = preferredScale - result.scale | 0;
        return precisionDiff >= scaleDiff ? result.setScale(preferredScale) : result.setScale(result.scale + precisionDiff | 0);
      }
    }var padding = Kotlin.Long.fromInt(lhs.v._scale_0).subtract(Kotlin.Long.fromInt(ensureNotNull(augend_0.v)._scale_0));
    if (!equals(padding, L0)) {
      var arg = this.preAlign_0(lhs.v, augend_0.v, padding, mc);
      BigDecimal$Companion_getInstance().matchScale_0(arg);
      lhs.v = arg[0];
      augend_0.v = arg[1];
    }return BigDecimal$Companion_getInstance().doRound_1(lhs.v.inflated_0().plus(augend_0.v.inflated_0()), lhs.v._scale_0, mc);
  };
  BigDecimal.prototype.preAlign_0 = function (lhs, augend, padding, mc) {
    if (!!equals(padding, L0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var big;
    var small;
    if (padding.toNumber() < 0) {
      big = lhs;
      small = augend;
    } else {
      big = augend;
      small = lhs;
    }
    var estResultUlpScale = Kotlin.Long.fromInt(big._scale_0).subtract(Kotlin.Long.fromInt(big.precision)).add(Kotlin.Long.fromInt(mc.precision));
    var smallHighDigitPos = Kotlin.Long.fromInt(small._scale_0).subtract(Kotlin.Long.fromInt(small.precision)).add(Kotlin.Long.fromInt(1));
    if (smallHighDigitPos.toNumber() > (big._scale_0 + 2 | 0) && smallHighDigitPos.compareTo_11rb$(estResultUlpScale.add(Kotlin.Long.fromInt(2))) > 0) {
      var tmp$ = BigDecimal$Companion_getInstance();
      var tmp$_0 = Kotlin.Long.fromInt(small.signum);
      var a = Kotlin.Long.fromInt(big._scale_0);
      small = tmp$.of_yhmem3$(tmp$_0, this.checkScale_0((a.compareTo_11rb$(estResultUlpScale) >= 0 ? a : estResultUlpScale).add(Kotlin.Long.fromInt(3))));
    }return [big, small];
  };
  BigDecimal.prototype.minus = function (subtrahend) {
    var tmp$;
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(subtrahend._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().sum_0(this._intCompact_0, this._scale_0, subtrahend._intCompact_0.unaryMinus(), subtrahend._scale_0);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().sum_1(this._intCompact_0, this._scale_0, ensureNotNull(subtrahend._intVal_0).unaryMinus(), subtrahend._scale_0);
      }
    } else {
      if (!equals(subtrahend._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().sum_1(subtrahend._intCompact_0.unaryMinus(), subtrahend._scale_0, ensureNotNull(this._intVal_0), this._scale_0);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().sum_2(this._intVal_0, this._scale_0, ensureNotNull(subtrahend._intVal_0).unaryMinus(), subtrahend._scale_0);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.minusWithContext = function (subtrahend, mc) {
    return mc.precision === 0 ? this.minus(subtrahend) : this.plusWithContext(subtrahend.unaryMinus(), mc);
  };
  BigDecimal.prototype.times = function (multiplicand) {
    var tmp$;
    var productScale = this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).add(Kotlin.Long.fromInt(ensureNotNull(multiplicand)._scale_0)));
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(multiplicand._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().multiply_0(this._intCompact_0, multiplicand._intCompact_0, productScale);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().multiply_1(this._intCompact_0, multiplicand._intVal_0, productScale);
      }
    } else {
      if (!equals(multiplicand._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().multiply_1(multiplicand._intCompact_0, this._intVal_0, productScale);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().multiply_2(ensureNotNull(this._intVal_0), multiplicand._intVal_0, productScale);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.timesWithContext = function (multiplicand, mc) {
    var tmp$;
    if (mc.precision === 0)
      return this.times(multiplicand);
    var productScale = this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).add(Kotlin.Long.fromInt(multiplicand._scale_0)));
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(multiplicand._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().multiplyAndRound_0(this._intCompact_0, multiplicand._intCompact_0, productScale, mc);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().multiplyAndRound_1(this._intCompact_0, multiplicand._intVal_0, productScale, mc);
      }
    } else {
      if (!equals(multiplicand._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().multiplyAndRound_1(multiplicand._intCompact_0, this._intVal_0, productScale, mc);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().multiplyAndRound_2(ensureNotNull(this._intVal_0), multiplicand._intVal_0, productScale, mc);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.div_0 = function (divisor, scale, roundingMode) {
    var tmp$;
    if (roundingMode < BigDecimal$Companion_getInstance().ROUND_UP_8be2vx$ || roundingMode > BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$)
      throw IllegalArgumentException_init('Invalid rounding mode');
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(divisor._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().divide_0(this._intCompact_0, this._scale_0, divisor._intCompact_0, divisor._scale_0, scale, roundingMode);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().divide_1(this._intCompact_0, this._scale_0, divisor._intVal_0, divisor._scale_0, scale, roundingMode);
      }
    } else {
      if (!equals(divisor._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().divide_2(this._intVal_0, this._scale_0, divisor._intCompact_0, divisor._scale_0, scale, roundingMode);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().divide_3(this._intVal_0, this._scale_0, divisor._intVal_0, divisor._scale_0, scale, roundingMode);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.div_1 = function (divisor, scale, roundingMode) {
    return this.div_0(divisor, scale, roundingMode.oldMode_8be2vx$);
  };
  BigDecimal.prototype.div_2 = function (divisor, roundingMode) {
    return this.div_0(divisor, this._scale_0, roundingMode);
  };
  BigDecimal.prototype.div_3 = function (divisor, roundingMode) {
    return this.div_0(divisor, this._scale_0, roundingMode.oldMode_8be2vx$);
  };
  BigDecimal.prototype.div = function (divisor) {
    if (divisor.signum === 0) {
      if (this.signum === 0)
        throw new ArithmeticException('Division undefined');
      throw new ArithmeticException('Division by zero');
    }var preferredScale = BigDecimal$Companion_getInstance().saturateLong_0(Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(divisor._scale_0)));
    if (this.signum === 0)
      return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(preferredScale);
    else {
      var tmp$ = Kotlin.Long.fromInt(this.precision);
      var x = 10.0 * divisor.precision / 3.0;
      var a = tmp$.add(Kotlin.Long.fromNumber(Math_0.ceil(x)));
      var b = L2147483647;
      var mc = new MathContext((a.compareTo_11rb$(b) <= 0 ? a : b).toInt(), RoundingMode$UNNECESSARY_getInstance());
      var quotient;
      try {
        quotient = this.divWithContext(divisor, mc);
      } catch (e) {
        if (Kotlin.isType(e, ArithmeticException)) {
          throw new ArithmeticException('Non-terminating decimal expansion; ' + 'no exact representable decimal result.');
        } else
          throw e;
      }
      var quotientScale = ensureNotNull(quotient).scale;
      return preferredScale > quotientScale ? quotient.setScale_0(preferredScale, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$) : quotient;
    }
  };
  BigDecimal.prototype.divWithContext = function (divisor, mc) {
    var tmp$;
    var mcp = mc.precision;
    if (mcp === 0)
      return this.div(divisor);
    var dividend = this;
    var preferredScale = Kotlin.Long.fromInt(dividend._scale_0).subtract(Kotlin.Long.fromInt(divisor._scale_0));
    if (divisor.signum === 0) {
      if (dividend.signum === 0)
        throw new ArithmeticException('Division undefined');
      throw new ArithmeticException('Division by zero');
    }if (dividend.signum === 0)
      return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(BigDecimal$Companion_getInstance().saturateLong_0(preferredScale));
    var xscale = dividend.precision;
    var yscale = divisor.precision;
    if (!equals(dividend._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (!equals(divisor._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().divide_4(dividend._intCompact_0, xscale, divisor._intCompact_0, yscale, preferredScale, mc);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().divide_5(dividend._intCompact_0, xscale, divisor._intVal_0, yscale, preferredScale, mc);
      }
    } else {
      if (!equals(divisor._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = BigDecimal$Companion_getInstance().divide_6(dividend._intVal_0, xscale, divisor._intCompact_0, yscale, preferredScale, mc);
      } else {
        tmp$ = BigDecimal$Companion_getInstance().divide_7(dividend._intVal_0, xscale, divisor._intVal_0, yscale, preferredScale, mc);
      }
    }
    return tmp$;
  };
  BigDecimal.prototype.divideToIntegralValue = function (divisor) {
    var preferredScale = BigDecimal$Companion_getInstance().saturateLong_0(Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(divisor._scale_0)));
    if (this.compareMagnitude_0(divisor) < 0) {
      return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(preferredScale);
    }if (this.signum === 0 && divisor.signum !== 0)
      return this.setScale_0(preferredScale, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$);
    var tmp$ = Kotlin.Long.fromInt(this.precision);
    var x = 10.0 * divisor.precision / 3.0;
    var a = tmp$.add(Kotlin.Long.fromNumber(Math_0.ceil(x))).add(abs(Kotlin.Long.fromInt(this.scale).subtract(Kotlin.Long.fromInt(divisor.scale)))).add(Kotlin.Long.fromInt(2));
    var b = L2147483647;
    var maxDigits = (a.compareTo_11rb$(b) <= 0 ? a : b).toInt();
    var quotient = this.divWithContext(divisor, new MathContext(maxDigits, RoundingMode$DOWN_getInstance()));
    if (ensureNotNull(quotient)._scale_0 > 0) {
      quotient = quotient.setScaleRounding(0, RoundingMode$DOWN_getInstance());
      quotient = BigDecimal$Companion_getInstance().stripZerosToMatchScale_0(quotient._intVal_0, quotient._intCompact_0, quotient._scale_0, preferredScale);
    }if (quotient._scale_0 < preferredScale) {
      quotient = quotient.setScale_0(preferredScale, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$);
    }return quotient;
  };
  BigDecimal.prototype.divideToIntegralValueWithContext = function (divisor, mc) {
    if (mc.precision === 0 || this.compareMagnitude_0(divisor) < 0)
      return this.divideToIntegralValue(divisor);
    var preferredScale = BigDecimal$Companion_getInstance().saturateLong_0(Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(divisor._scale_0)));
    var result = this.divWithContext(divisor, new MathContext(mc.precision, RoundingMode$DOWN_getInstance()));
    if (ensureNotNull(result).scale < 0) {
      var product = result.times(divisor);
      if (this.minus(product).compareMagnitude_0(divisor) >= 0) {
        throw new ArithmeticException('Division impossible');
      }} else if (result.scale > 0) {
      result = result.setScaleRounding(0, RoundingMode$DOWN_getInstance());
    }var precisionDiff;
    if (preferredScale > result.scale) {
      precisionDiff = mc.precision - result.precision | 0;
      if (precisionDiff > 0) {
        var tmp$ = result;
        var tmp$_0 = result.scale;
        var b = preferredScale - result._scale_0 | 0;
        return tmp$.setScale(tmp$_0 + Math_0.min(precisionDiff, b) | 0);
      }}return BigDecimal$Companion_getInstance().stripZerosToMatchScale_0(result._intVal_0, result._intCompact_0, result._scale_0, preferredScale);
  };
  BigDecimal.prototype.rem = function (divisor) {
    var divrem = this.divideAndRemainder(divisor);
    return divrem.second;
  };
  BigDecimal.prototype.remWithContext = function (divisor, mc) {
    var divrem = this.divideAndRemainderWithContext(divisor, mc);
    return divrem.second;
  };
  BigDecimal.prototype.divideAndRemainder = function (divisor) {
    var temp = ensureNotNull(this.divideToIntegralValue(divisor));
    return new Pair(temp, temp.times(divisor));
  };
  BigDecimal.prototype.divideAndRemainderWithContext = function (divisor, mc) {
    if (mc.precision === 0)
      return this.divideAndRemainder(divisor);
    var lhs = this;
    var temp = ensureNotNull(lhs.divideToIntegralValueWithContext(divisor, mc));
    return new Pair(temp, lhs.minus(temp.times(divisor)));
  };
  BigDecimal.prototype.sqrt = function (mc) {
    if (mc === void 0)
      mc = new MathContext();
    var signum = this.signum;
    if (signum === 1) {
      var preferredScale = this.scale / 2 | 0;
      var zeroWithFinalPreferredScale = BigDecimal$Companion_getInstance().of_yhmem3$(L0, preferredScale);
      var stripped = this.stripTrailingZeros();
      var strippedScale = stripped.scale;
      if (stripped.isPowerOfTen_0 && strippedScale % 2 === 0) {
        var result = BigDecimal$Companion_getInstance().of_yhmem3$(L1, strippedScale / 2 | 0);
        if (result.scale !== preferredScale) {
          result = result.plusWithContext(zeroWithFinalPreferredScale, mc);
        }return result;
      }var scaleAdjust;
      var scale = stripped.scale - stripped.precision + 1 | 0;
      if (scale % 2 === 0) {
        scaleAdjust = scale;
      } else {
        scaleAdjust = scale - 1 | 0;
      }
      var working = stripped.scaleByPowerOfTen(scaleAdjust);
      if (!(BigDecimal$Companion_getInstance().ONE_TENTH.compareTo_11rb$(working) <= 0 && working.compareTo_11rb$(BigDecimal$Companion_getInstance().TEN) < 0)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init(message.toString());
      }var x = working.toDouble();
      var guess = BigDecimal_init_4(Math_0.sqrt(x));
      var guessPrecision = 15;
      var originalPrecision = mc.precision;
      var targetPrecision;
      if (originalPrecision === 0) {
        targetPrecision = (stripped.precision / 2 | 0) + 1 | 0;
      } else {
        targetPrecision = originalPrecision;
      }
      var approx = guess;
      var workingPrecision = working.precision;
      do {
        var a = guessPrecision;
        var b = targetPrecision + 2 | 0;
        var a_0 = Math_0.max(a, b);
        var tmpPrecision = Math_0.max(a_0, workingPrecision);
        var mcTmp = new MathContext(tmpPrecision, RoundingMode$HALF_EVEN_getInstance());
        approx = BigDecimal$Companion_getInstance().ONE_HALF.times(approx.plusWithContext(working.divWithContext(approx, mcTmp), mcTmp));
        guessPrecision = guessPrecision * 2 | 0;
      }
       while (guessPrecision < (targetPrecision + 2 | 0));
      var result_0;
      var targetRm = mc.roundingMode;
      if (targetRm === RoundingMode$UNNECESSARY_getInstance() || originalPrecision === 0) {
        var tmpRm = targetRm === RoundingMode$UNNECESSARY_getInstance() ? RoundingMode$DOWN_getInstance() : targetRm;
        var mcTmp_0 = new MathContext(targetPrecision, tmpRm);
        result_0 = approx.scaleByPowerOfTen((-scaleAdjust | 0) / 2 | 0).round(mcTmp_0);
        if (this.minus(ensureNotNull(result_0).times(result_0)).compareTo_11rb$(BigDecimal$Companion_getInstance().ZERO) !== 0) {
          throw new ArithmeticException('Computed square root not exact.');
        }} else {
        result_0 = approx.scaleByPowerOfTen((-scaleAdjust | 0) / 2 | 0).round(mc);
      }
      if (ensureNotNull(result_0).scale !== preferredScale) {
        result_0 = result_0.stripTrailingZeros().plusWithContext(zeroWithFinalPreferredScale, new MathContext(originalPrecision, RoundingMode$UNNECESSARY_getInstance()));
      }if (!this.squareRootResultAssertions_0(result_0, mc)) {
        var message_0 = 'Failed requirement.';
        throw IllegalArgumentException_init(message_0.toString());
      }return result_0;
    } else {
      switch (signum) {
        case -1:
          throw new ArithmeticException('Attempted square root ' + 'of negative BigDecimal');
        case 0:
          return BigDecimal$Companion_getInstance().of_yhmem3$(L0, this.scale / 2 | 0);
        default:throw AssertionError_init('Bad value from _signum');
      }
    }
  };
  BigDecimal.prototype.squareRootResultAssertions_0 = function (result, mc) {
    if (result.signum === 0) {
      return this.squareRootZeroResultAssertions_0(result, mc);
    } else {
      var rm = mc.roundingMode;
      var ulp = result.ulp();
      var neighborUp = result.plus(ulp);
      if (this.isPowerOfTen_0) {
        ulp = ulp.div(BigDecimal$Companion_getInstance().TEN);
      }var neighborDown = result.minus(ulp);
      if (result.signum !== 1 || this.signum !== 1) {
        return false;
      }switch (rm.name) {
        case 'DOWN':
        case 'FLOOR':
          return result.times(result).compareTo_11rb$(this) <= 0 && neighborUp.times(neighborUp).compareTo_11rb$(this) > 0;
        case 'UP':
        case 'CEILING':
          return result.times(result).compareTo_11rb$(this) >= 0 && neighborDown.times(neighborDown).compareTo_11rb$(this) < 0;
        case 'HALF_DOWN':
        case 'HALF_EVEN':
        case 'HALF_UP':
          var err = result.times(result).minus(this).absoluteValue;
          var errUp = neighborUp.times(neighborUp).minus(this);
          var errDown = this.minus(neighborDown.times(neighborDown));
          var err_comp_errUp = err.compareTo_11rb$(errUp);
          var err_comp_errDown = err.compareTo_11rb$(errDown);
          return errUp.signum === 1 && errDown.signum === 1 && err_comp_errUp <= 0 && err_comp_errDown <= 0 && (err_comp_errUp === 0 ? err_comp_errDown < 0 : true) && (err_comp_errDown === 0 ? err_comp_errUp < 0 : true);
        default:return true;
      }
    }
  };
  BigDecimal.prototype.squareRootZeroResultAssertions_0 = function (result, mc) {
    return this.compareTo_11rb$(BigDecimal$Companion_getInstance().ZERO) === 0;
  };
  BigDecimal.prototype.pow = function (n) {
    if (n < 0 || n > 999999999)
      throw new ArithmeticException('Invalid operation');
    var newScale = this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).multiply(Kotlin.Long.fromInt(n)));
    return BigDecimal_init_7(this.inflated_0().pow(n), newScale);
  };
  BigDecimal.prototype.powWithContext = function (n, mc) {
    if (mc.precision === 0)
      return this.pow(n);
    if (n < -999999999 || n > 999999999)
      throw new ArithmeticException('Invalid operation');
    if (n === 0)
      return BigDecimal$Companion_getInstance().ONE;
    var lhs = this;
    var workmc = mc;
    var mag = abs_0(n);
    if (mc.precision > 0) {
      var elength = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(Kotlin.Long.fromInt(mag));
      if (elength > mc.precision)
        throw new ArithmeticException('Invalid operation');
      workmc = new MathContext(mc.precision + elength + 1 | 0, mc.roundingMode);
    }var acc = BigDecimal$Companion_getInstance().ONE;
    var seenbit = false;
    var i = 1;
    while (true) {
      mag = mag + mag | 0;
      if (mag < 0) {
        seenbit = true;
        acc = acc.timesWithContext(lhs, workmc);
      }if (i === 31)
        break;
      if (seenbit)
        acc = acc.timesWithContext(acc, workmc);
      i = i + 1 | 0;
    }
    if (n < 0)
      acc = ensureNotNull(BigDecimal$Companion_getInstance().ONE.divWithContext(acc, workmc));
    return BigDecimal$Companion_getInstance().doRound_0(acc, mc);
  };
  Object.defineProperty(BigDecimal.prototype, 'absoluteValue', {
    get: function () {
      return this.signum < 0 ? this.unaryMinus() : this;
    }
  });
  BigDecimal.prototype.absoluteValueWithContext = function (mc) {
    return this.signum < 0 ? this.unaryMinusWithContext(mc) : this.unaryPlusWithContext(mc);
  };
  BigDecimal.prototype.unaryMinus = function () {
    var tmp$;
    if (equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      tmp$ = BigDecimal_init(ensureNotNull(this._intVal_0).unaryMinus(), BigDecimal$Companion_getInstance().INFLATED_8be2vx$, this._scale_0, this._precision_0);
    } else {
      tmp$ = BigDecimal$Companion_getInstance().of_2cjn0$(this._intCompact_0.unaryMinus(), this._scale_0, this._precision_0);
    }
    return tmp$;
  };
  BigDecimal.prototype.unaryMinusWithContext = function (mc) {
    return this.unaryMinus().unaryPlusWithContext(mc);
  };
  BigDecimal.prototype.unaryPlus = function () {
    return this;
  };
  BigDecimal.prototype.unaryPlusWithContext = function (mc) {
    return mc.precision === 0 ? this : BigDecimal$Companion_getInstance().doRound_0(this, mc);
  };
  Object.defineProperty(BigDecimal.prototype, 'signum', {
    get: function () {
      return !equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? get_sign(this._intCompact_0) : ensureNotNull(this._intVal_0).signum;
    }
  });
  Object.defineProperty(BigDecimal.prototype, 'scale', {
    get: function () {
      return this._scale_0;
    }
  });
  Object.defineProperty(BigDecimal.prototype, 'precision', {
    get: function () {
      var result = this._precision_0;
      if (result === 0) {
        var s = this._intCompact_0;
        if (!equals(s, BigDecimal$Companion_getInstance().INFLATED_8be2vx$))
          result = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(s);
        else
          result = BigDecimal$Companion_getInstance().bigDigitLength_0(ensureNotNull(this._intVal_0));
        this._precision_0 = result;
      }return result;
    }
  });
  Object.defineProperty(BigDecimal.prototype, 'unscaledValue', {
    get: function () {
      return this.inflated_0();
    }
  });
  BigDecimal.prototype.round = function (mc) {
    return this.unaryPlusWithContext(mc);
  };
  BigDecimal.prototype.setScaleRounding = function (newScale, roundingMode) {
    return this.setScale_0(newScale, roundingMode.oldMode_8be2vx$);
  };
  BigDecimal.prototype.setScale_0 = function (newScale, roundingMode) {
    var tmp$;
    if (roundingMode < BigDecimal$Companion_getInstance().ROUND_UP_8be2vx$ || roundingMode > BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$)
      throw IllegalArgumentException_init('Invalid rounding mode');
    var oldScale = this._scale_0;
    if (newScale === oldScale)
      return this;
    if (this.signum === 0)
      return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(newScale);
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      var rs = this._intCompact_0;
      if (newScale > oldScale) {
        var raise = this.checkScale_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(oldScale)));
        rs = BigDecimal$Companion_getInstance().longMultiplyPowerTen_0(rs, raise);
        if (!equals(rs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
          return BigDecimal$Companion_getInstance().of_yhmem3$(rs, newScale);
        }var rb = this.bigMultiplyPowerTen_0(raise);
        return BigDecimal_init(rb, BigDecimal$Companion_getInstance().INFLATED_8be2vx$, newScale, this._precision_0 > 0 ? this._precision_0 + raise | 0 : 0);
      } else {
        var drop = this.checkScale_0(Kotlin.Long.fromInt(oldScale).subtract(Kotlin.Long.fromInt(newScale)));
        if (drop < BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0.length) {
          tmp$ = BigDecimal$Companion_getInstance().divideAndRound_0(rs, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop], newScale, roundingMode, newScale);
        } else {
          tmp$ = BigDecimal$Companion_getInstance().divideAndRound_1(this.inflated_0(), BigDecimal$Companion_getInstance().bigTenToThe_0(drop), newScale, roundingMode, newScale);
        }
        return tmp$;
      }
    } else {
      if (newScale > oldScale) {
        var raise_0 = this.checkScale_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(oldScale)));
        var rb_0 = BigDecimal$Companion_getInstance().bigMultiplyPowerTen_0(this._intVal_0, raise_0);
        return BigDecimal_init(ensureNotNull(rb_0), BigDecimal$Companion_getInstance().INFLATED_8be2vx$, newScale, this._precision_0 > 0 ? this._precision_0 + raise_0 | 0 : 0);
      } else {
        var drop_0 = this.checkScale_0(Kotlin.Long.fromInt(oldScale).subtract(Kotlin.Long.fromInt(newScale)));
        return drop_0 < BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0.length ? BigDecimal$Companion_getInstance().divideAndRound_2(ensureNotNull(this._intVal_0), BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop_0], newScale, roundingMode, newScale) : BigDecimal$Companion_getInstance().divideAndRound_1(ensureNotNull(this._intVal_0), BigDecimal$Companion_getInstance().bigTenToThe_0(drop_0), newScale, roundingMode, newScale);
      }
    }
  };
  BigDecimal.prototype.setScale = function (newScale) {
    return this.setScale_0(newScale, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$);
  };
  BigDecimal.prototype.movePointLeft = function (n) {
    var newScale = this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).add(Kotlin.Long.fromInt(n)));
    var num = BigDecimal_init(ensureNotNull(this._intVal_0), this._intCompact_0, newScale, 0);
    return num._scale_0 < 0 ? num.setScale_0(0, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$) : num;
  };
  BigDecimal.prototype.movePointRight = function (n) {
    var newScale = this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(n)));
    var num = BigDecimal_init(ensureNotNull(this._intVal_0), this._intCompact_0, newScale, 0);
    return num._scale_0 < 0 ? num.setScale_0(0, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$) : num;
  };
  BigDecimal.prototype.scaleByPowerOfTen = function (n) {
    return BigDecimal_init(this._intVal_0, this._intCompact_0, this.checkScale_0(Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(n))), this._precision_0);
  };
  BigDecimal.prototype.stripTrailingZeros = function () {
    var tmp$;
    if (equals(this._intCompact_0, L0) || (this._intVal_0 != null && this._intVal_0.signum === 0)) {
      tmp$ = BigDecimal$Companion_getInstance().ZERO;
    } else if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      tmp$ = BigDecimal$Companion_getInstance().createAndStripZerosToMatchScale_0(this._intCompact_0, this._scale_0, Long$Companion$MIN_VALUE);
    } else {
      tmp$ = BigDecimal$Companion_getInstance().createAndStripZerosToMatchScale_1(ensureNotNull(this._intVal_0), this._scale_0, Long$Companion$MIN_VALUE);
    }
    return tmp$;
  };
  BigDecimal.prototype.compareTo_11rb$ = function (other) {
    if (this._scale_0 === other._scale_0) {
      var xs = this._intCompact_0;
      var ys = other._intCompact_0;
      if (!equals(xs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) && !equals(ys, BigDecimal$Companion_getInstance().INFLATED_8be2vx$))
        return !equals(xs, ys) ? xs.compareTo_11rb$(ys) > 0 ? 1 : -1 : 0;
    }var xsign = this.signum;
    var ysign = other.signum;
    if (xsign !== ysign)
      return xsign > ysign ? 1 : -1;
    if (xsign === 0)
      return 0;
    var cmp = this.compareMagnitude_0(other);
    return xsign > 0 ? cmp : -cmp | 0;
  };
  BigDecimal.prototype.compareMagnitude_0 = function (val) {
    var ys = {v: val._intCompact_0};
    var xs = {v: this._intCompact_0};
    if (equals(xs.v, L0))
      return equals(ys.v, L0) ? 0 : -1;
    if (equals(ys.v, L0))
      return 1;
    var sdiff = Kotlin.Long.fromInt(this._scale_0).subtract(Kotlin.Long.fromInt(val._scale_0));
    if (!equals(sdiff, L0)) {
      var xae = Kotlin.Long.fromInt(this.precision).subtract(Kotlin.Long.fromInt(this._scale_0));
      var yae = Kotlin.Long.fromInt(val.precision).subtract(Kotlin.Long.fromInt(val._scale_0));
      if (xae.compareTo_11rb$(yae) < 0)
        return -1;
      if (xae.compareTo_11rb$(yae) > 0)
        return 1;
      if (sdiff.toNumber() < 0) {
        var tmp$ = sdiff.toNumber() > -2147483648;
        if (tmp$) {
          var tmp$_0 = equals(xs.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$);
          if (!tmp$_0) {
            xs.v = BigDecimal$Companion_getInstance().longMultiplyPowerTen_0(xs.v, sdiff.unaryMinus().toInt());
            tmp$_0 = equals(xs.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$);
          }tmp$ = tmp$_0;
        }if (tmp$ && equals(ys.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
          var rb = this.bigMultiplyPowerTen_0(sdiff.unaryMinus().toInt());
          return rb.compareMagnitude_kiw147$(ensureNotNull(val._intVal_0));
        }} else {
        var tmp$_1 = sdiff.toNumber() <= 2147483647;
        if (tmp$_1) {
          var tmp$_2 = equals(ys.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$);
          if (!tmp$_2) {
            ys.v = BigDecimal$Companion_getInstance().longMultiplyPowerTen_0(ys.v, sdiff.toInt());
            tmp$_2 = equals(ys.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$);
          }tmp$_1 = tmp$_2;
        }if (tmp$_1 && equals(xs.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
          var rb_0 = val.bigMultiplyPowerTen_0(sdiff.toInt());
          return ensureNotNull(this._intVal_0).compareMagnitude_kiw147$(rb_0);
        }}
    }return !equals(xs.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? !equals(ys.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().longCompareMagnitude_0(xs.v, ys.v) : -1 : !equals(ys.v, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? 1 : ensureNotNull(this._intVal_0).compareMagnitude_kiw147$(ensureNotNull(val._intVal_0));
  };
  BigDecimal.prototype.equals = function (other) {
    var tmp$, tmp$_0;
    if (!Kotlin.isType(other, BigDecimal))
      return false;
    var xDec = (tmp$ = other) == null || Kotlin.isType(tmp$, BigDecimal) ? tmp$ : throwCCE();
    if (other === this)
      return true;
    if (this._scale_0 !== ensureNotNull(xDec)._scale_0)
      return false;
    var s = this._intCompact_0;
    var xs = xDec._intCompact_0;
    if (!equals(s, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (equals(xs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$))
        xs = BigDecimal$Companion_getInstance().compactValFor_0(ensureNotNull(xDec._intVal_0));
      return equals(xs, s);
    } else if (!equals(xs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$))
      return equals(xs, BigDecimal$Companion_getInstance().compactValFor_0(ensureNotNull(this._intVal_0)));
    return (tmp$_0 = this.inflated_0()) != null ? tmp$_0.equals(xDec.inflated_0()) : null;
  };
  BigDecimal.prototype.min = function (val) {
    return this.compareTo_11rb$(val) <= 0 ? this : val;
  };
  BigDecimal.prototype.max = function (val) {
    return this.compareTo_11rb$(val) >= 0 ? this : val;
  };
  BigDecimal.prototype.hashCode = function () {
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      var val2 = this._intCompact_0.toNumber() < 0 ? this._intCompact_0.unaryMinus() : this._intCompact_0;
      var temp = Kotlin.Long.fromInt(val2.shiftRightUnsigned(32).toInt() * 31 | 0).add(val2.and(BigInteger$Companion_getInstance().LONG_MASK)).toInt();
      return (31 * (this._intCompact_0.toNumber() < 0 ? -temp | 0 : temp) | 0) + this._scale_0 | 0;
    } else
      return (31 * ensureNotNull(this._intVal_0).hashCode() | 0) + this._scale_0 | 0;
  };
  BigDecimal.prototype.toString = function () {
    var sc = this._stringCache_0;
    if (sc == null) {
      sc = this.layoutChars_0(true);
      this._stringCache_0 = sc;
    }return sc;
  };
  BigDecimal.prototype.toEngineeringString = function () {
    return this.layoutChars_0(false);
  };
  BigDecimal.prototype.toPlainString = function () {
    var tmp$;
    if (this._scale_0 === 0) {
      if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        tmp$ = this._intCompact_0.toString();
      } else {
        tmp$ = ensureNotNull(this._intVal_0).toString();
      }
      return tmp$;
    }if (this._scale_0 < 0) {
      if (this.signum === 0) {
        return '0';
      }var trailingZeros = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(this._scale_0).unaryMinus());
      var buf;
      if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        buf = StringBuilder_init(20 + trailingZeros | 0);
        buf.append_s8jyv4$(this._intCompact_0);
      } else {
        var str = ensureNotNull(this._intVal_0).toString();
        buf = StringBuilder_init(str.length + trailingZeros | 0);
        buf.append_61zpoe$(str);
      }
      for (var i = 0; i < trailingZeros; i++) {
        buf.append_s8itvh$(48);
      }
      return buf.toString();
    }var str_0;
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      str_0 = abs(this._intCompact_0).toString();
    } else {
      str_0 = ensureNotNull(this._intVal_0).absoluteValue.toString();
    }
    return this.getValueString_0(this.signum, str_0, this._scale_0);
  };
  BigDecimal.prototype.getValueString_0 = function (signum, intString, scale) {
    var tmp$;
    var buf;
    var insertionPoint = intString.length - scale | 0;
    if (insertionPoint === 0) {
      return (signum < 0 ? '-0.' : '0.') + intString;
    } else if (insertionPoint > 0) {
      buf = new StringBuilder(intString);
      insertChar(buf, insertionPoint, 46);
      if (signum < 0)
        insertChar(buf, 0, 45);
    } else {
      buf = StringBuilder_init(3 - insertionPoint + intString.length | 0);
      buf.append_61zpoe$(signum < 0 ? '-0.' : '0.');
      tmp$ = -insertionPoint | 0;
      for (var i = 0; i < tmp$; i++) {
        buf.append_s8itvh$(48);
      }
      buf.append_61zpoe$(intString);
    }
    return buf.toString();
  };
  BigDecimal.prototype.toBigInteger = function () {
    return this.setScale_0(0, BigDecimal$Companion_getInstance().ROUND_DOWN_8be2vx$).inflated_0();
  };
  BigDecimal.prototype.toBigIntegerExact = function () {
    return this.setScale_0(0, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$).inflated_0();
  };
  BigDecimal.prototype.toLong = function () {
    return !equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) && this._scale_0 === 0 ? this._intCompact_0 : this.toBigInteger().toLong();
  };
  BigDecimal.prototype.toLongExact = function () {
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) && this._scale_0 === 0)
      return this._intCompact_0;
    if ((this.precision - this._scale_0 | 0) > 19)
      throw new ArithmeticException('Overflow');
    if (this.signum === 0)
      return L0;
    if ((this.precision - this._scale_0 | 0) <= 0)
      throw new ArithmeticException('Rounding necessary');
    var num = this.setScale_0(0, BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$);
    if (num.precision >= 19)
      BigDecimal$LongOverflow_getInstance().check_p5fqpd$(num);
    return num.inflated_0().toLong();
  };
  function BigDecimal$LongOverflow() {
    BigDecimal$LongOverflow_instance = this;
    this.LONGMIN_0 = BigInteger$Companion_getInstance().ofLong(Long$Companion$MIN_VALUE);
    this.LONGMAX_0 = BigInteger$Companion_getInstance().ofLong(Long$Companion$MAX_VALUE);
  }
  BigDecimal$LongOverflow.prototype.check_p5fqpd$ = function (num) {
    var intVal = num.inflated_0();
    if (intVal.compareTo_11rb$(this.LONGMIN_0) < 0 || intVal.compareTo_11rb$(this.LONGMAX_0) > 0)
      throw new ArithmeticException('Overflow');
  };
  BigDecimal$LongOverflow.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'LongOverflow',
    interfaces: []
  };
  var BigDecimal$LongOverflow_instance = null;
  function BigDecimal$LongOverflow_getInstance() {
    if (BigDecimal$LongOverflow_instance === null) {
      new BigDecimal$LongOverflow();
    }return BigDecimal$LongOverflow_instance;
  }
  BigDecimal.prototype.toInt = function () {
    return !equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) && this._scale_0 === 0 ? this._intCompact_0.toInt() : this.toBigInteger().toInt();
  };
  BigDecimal.prototype.toByte = function () {
    return toByte(this.toInt());
  };
  BigDecimal.prototype.toChar = function () {
    return toBoxedChar(toChar(this.toInt()));
  };
  BigDecimal.prototype.toShort = function () {
    return toShort(this.toInt());
  };
  BigDecimal.prototype.toIntExact = function () {
    var num = this.toLongExact();
    if (!equals(Kotlin.Long.fromInt(num.toInt()), num))
      throw new ArithmeticException('Overflow');
    return num.toInt();
  };
  BigDecimal.prototype.toShortExact = function () {
    var num = this.toLongExact();
    if (!equals(Kotlin.Long.fromInt(toShort(num.toInt())), num))
      throw new ArithmeticException('Overflow');
    return toShort(num.toInt());
  };
  BigDecimal.prototype.toByteExact = function () {
    var num = this.toLongExact();
    if (!equals(Kotlin.Long.fromInt(toByte(num.toInt())), num))
      throw new ArithmeticException('Overflow');
    return toByte(num.toInt());
  };
  BigDecimal.prototype.toFloat = function () {
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (this._scale_0 === 0) {
        return this._intCompact_0.toNumber();
      } else {
        if (abs(this._intCompact_0).compareTo_11rb$(L4194304) < 0) {
          if (this._scale_0 > 0 && this._scale_0 < BigDecimal$Companion_getInstance().FLOAT_10_POW_0.length) {
            return this._intCompact_0.toNumber() / BigDecimal$Companion_getInstance().FLOAT_10_POW_0[this._scale_0];
          } else if (this._scale_0 < 0 && this._scale_0 > (-BigDecimal$Companion_getInstance().FLOAT_10_POW_0.length | 0)) {
            return this._intCompact_0.toNumber() * BigDecimal$Companion_getInstance().FLOAT_10_POW_0[-this._scale_0 | 0];
          }}}
    }return toDouble(this.toString());
  };
  BigDecimal.prototype.toDouble = function () {
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (this._scale_0 === 0) {
        return this._intCompact_0.toNumber();
      } else {
        if (abs(this._intCompact_0).compareTo_11rb$(L4503599627370496) < 0) {
          if (this._scale_0 > 0 && this._scale_0 < BigDecimal$Companion_getInstance().DOUBLE_10_POW_0.length) {
            return this._intCompact_0.toNumber() / BigDecimal$Companion_getInstance().DOUBLE_10_POW_0[this._scale_0];
          } else if (this._scale_0 < 0 && this._scale_0 > (-BigDecimal$Companion_getInstance().DOUBLE_10_POW_0.length | 0)) {
            return this._intCompact_0.toNumber() * BigDecimal$Companion_getInstance().DOUBLE_10_POW_0[-this._scale_0 | 0];
          }}}
    }return toDouble(this.toString());
  };
  BigDecimal.prototype.ulp = function () {
    return BigDecimal$Companion_getInstance().of_2cjn0$(L1, this.scale, 1);
  };
  function BigDecimal$StringBuilderHelper(sb, compactCharArray) {
    BigDecimal$StringBuilderHelper$Companion_getInstance();
    if (sb === void 0)
      sb = StringBuilder_init_0();
    if (compactCharArray === void 0)
      compactCharArray = Kotlin.charArray(19);
    this.sb = sb;
    this.compactCharArray = compactCharArray;
  }
  Object.defineProperty(BigDecimal$StringBuilderHelper.prototype, 'stringBuilder', {
    get: function () {
      removeRange(this.sb, 0, this.sb.length);
      return this.sb;
    }
  });
  BigDecimal$StringBuilderHelper.prototype.putIntCompact_s8cxhz$ = function (intCompact) {
    var intCompact_0 = intCompact;
    if (!(intCompact_0.toNumber() >= 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var q;
    var r;
    var charPos = this.compactCharArray.length;
    while (intCompact_0.toNumber() > 2147483647) {
      q = intCompact_0.div(Kotlin.Long.fromInt(100));
      r = intCompact_0.subtract(q.multiply(Kotlin.Long.fromInt(100))).toInt();
      intCompact_0 = q;
      this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_ONES[r];
      this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_TENS[r];
    }
    var q2;
    var i2 = intCompact_0.toInt();
    while (i2 >= 100) {
      q2 = i2 / 100 | 0;
      r = i2 - (q2 * 100 | 0) | 0;
      i2 = q2;
      this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_ONES[r];
      this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_TENS[r];
    }
    this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_ONES[i2];
    if (i2 >= 10)
      this.compactCharArray[charPos = charPos - 1 | 0, charPos] = BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_TENS[i2];
    return charPos;
  };
  function BigDecimal$StringBuilderHelper$Companion() {
    BigDecimal$StringBuilderHelper$Companion_instance = this;
    this.DIGIT_TENS = Kotlin.charArrayOf(48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57);
    this.DIGIT_ONES = Kotlin.charArrayOf(48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57);
  }
  BigDecimal$StringBuilderHelper$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BigDecimal$StringBuilderHelper$Companion_instance = null;
  function BigDecimal$StringBuilderHelper$Companion_getInstance() {
    if (BigDecimal$StringBuilderHelper$Companion_instance === null) {
      new BigDecimal$StringBuilderHelper$Companion();
    }return BigDecimal$StringBuilderHelper$Companion_instance;
  }
  BigDecimal$StringBuilderHelper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StringBuilderHelper',
    interfaces: []
  };
  BigDecimal.prototype.layoutChars_0 = function (sci) {
    if (this._scale_0 === 0)
      return !equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? this._intCompact_0.toString() : ensureNotNull(this._intVal_0).toString();
    if (this._scale_0 === 2 && this._intCompact_0.toNumber() >= 0 && this._intCompact_0.toNumber() < 2147483647) {
      var lowInt = this._intCompact_0.toInt() % 100;
      var highInt = this._intCompact_0.toInt() / 100 | 0;
      return highInt.toString() + String.fromCharCode(46) + String.fromCharCode(toBoxedChar(BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_TENS[lowInt])) + String.fromCharCode(toBoxedChar(BigDecimal$StringBuilderHelper$Companion_getInstance().DIGIT_ONES[lowInt]));
    }var sbHelper = new BigDecimal$StringBuilderHelper();
    var coeff;
    var offset;
    if (!equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      offset = sbHelper.putIntCompact_s8cxhz$(abs(this._intCompact_0));
      coeff = sbHelper.compactCharArray;
    } else {
      offset = 0;
      coeff = toCharArray(ensureNotNull(this._intVal_0).absoluteValue.toString());
    }
    var buf = sbHelper.stringBuilder;
    if (this.signum < 0)
      buf.append_s8itvh$(45);
    var coeffLen = coeff.length - offset | 0;
    var adjusted = Kotlin.Long.fromInt(this._scale_0).unaryMinus().add(Kotlin.Long.fromInt(coeffLen - 1 | 0));
    if (this._scale_0 >= 0 && adjusted.toNumber() >= -6) {
      var pad = this._scale_0 - coeffLen | 0;
      if (pad >= 0) {
        buf.append_s8itvh$(48);
        buf.append_s8itvh$(46);
        while (pad > 0) {
          buf.append_s8itvh$(48);
          pad = pad - 1 | 0;
        }
        append(buf, coeff, offset, coeffLen);
      } else {
        append(buf, coeff, offset, -pad | 0);
        buf.append_s8itvh$(46);
        append(buf, coeff, (-pad | 0) + offset | 0, this._scale_0);
      }
    } else {
      if (sci) {
        buf.append_s8itvh$(coeff[offset]);
        if (coeffLen > 1) {
          buf.append_s8itvh$(46);
          append(buf, coeff, offset + 1 | 0, coeffLen - 1 | 0);
        }} else {
        var sig = adjusted.modulo(Kotlin.Long.fromInt(3)).toInt();
        if (sig < 0)
          sig = sig + 3 | 0;
        adjusted = adjusted.subtract(Kotlin.Long.fromInt(sig));
        sig = sig + 1 | 0;
        if (this.signum === 0) {
          switch (sig) {
            case 1:
              buf.append_s8itvh$(48);
              break;
            case 2:
              buf.append_61zpoe$('0.00');
              adjusted = adjusted.add(Kotlin.Long.fromInt(3));
              break;
            case 3:
              buf.append_61zpoe$('0.0');
              adjusted = adjusted.add(Kotlin.Long.fromInt(3));
              break;
            default:throw AssertionError_init('Unexpected sig value ' + sig);
          }
        } else if (sig >= coeffLen) {
          append(buf, coeff, offset, coeffLen);
          for (var i = sig - coeffLen | 0; i >= 1; i--) {
            buf.append_s8itvh$(48);
          }
        } else {
          append(buf, coeff, offset, sig);
          buf.append_s8itvh$(46);
          append(buf, coeff, offset + sig | 0, coeffLen - sig | 0);
        }
      }
      if (!equals(adjusted, L0)) {
        buf.append_s8itvh$(69);
        if (adjusted.toNumber() > 0)
          buf.append_s8itvh$(43);
        buf.append_s8jyv4$(adjusted);
      }}
    return buf.toString();
  };
  BigDecimal.prototype.bigMultiplyPowerTen_0 = function (n) {
    if (n <= 0)
      return this.inflated_0();
    return !equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().bigTenToThe_0(n).timesLong_8e33dg$(this._intCompact_0) : ensureNotNull(this._intVal_0).times(BigDecimal$Companion_getInstance().bigTenToThe_0(n));
  };
  BigDecimal.prototype.inflated_0 = function () {
    var tmp$;
    return (tmp$ = this._intVal_0) != null ? tmp$ : BigInteger$Companion_getInstance().ofLong(this._intCompact_0);
  };
  BigDecimal.prototype.checkScale_0 = function (val) {
    var asInt = val.toInt();
    if (!equals(Kotlin.Long.fromInt(asInt), val)) {
      asInt = val.toNumber() > 2147483647 ? 2147483647 : -2147483648;
      var b = {v: null};
      var tmp$ = !equals(this._intCompact_0, L0);
      if (tmp$) {
        b.v = this._intVal_0;
        tmp$ = b.v == null || ensureNotNull(b.v).signum !== 0;
      }if (tmp$)
        throw new ArithmeticException(asInt > 0 ? 'Underflow' : 'Overflow');
    }return asInt;
  };
  BigDecimal.prototype.audit_0 = function () {
    if (equals(this._intCompact_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      if (this._intVal_0 == null) {
        BigDecimal$Companion_getInstance().print_0('audit', this);
        throw AssertionError_init('null _intVal');
      }if (this._precision_0 > 0 && this._precision_0 !== BigDecimal$Companion_getInstance().bigDigitLength_0(this._intVal_0)) {
        BigDecimal$Companion_getInstance().print_0('audit', this);
        throw AssertionError_init('_precision mismatch');
      }} else {
      if (this._intVal_0 != null) {
        var val = this._intVal_0.toLong();
        if (!equals(val, this._intCompact_0)) {
          BigDecimal$Companion_getInstance().print_0('audit', this);
          throw AssertionError_init('Inconsistent state, _intCompact=' + toString(this._intCompact_0) + '\t _intVal=' + toString(val));
        }}if (this._precision_0 > 0 && this._precision_0 !== BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(this._intCompact_0)) {
        BigDecimal$Companion_getInstance().print_0('audit', this);
        throw AssertionError_init('_precision mismatch');
      }}
    return this;
  };
  function BigDecimal$Companion() {
    BigDecimal$Companion_instance = this;
    this.INFLATED_8be2vx$ = Long$Companion$MIN_VALUE;
    this.INFLATED_BIGINT_0 = BigInteger$Companion_getInstance().ofLong(this.INFLATED_8be2vx$);
    this.MAX_COMPACT_DIGITS_0 = 18;
    this.ZERO_THROUGH_TEN_0 = [BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().ONE, L1, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().TWO, L2, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(3), L3, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(4), L4, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(5), L5, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(6), L6, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(7), L7, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(8), L8, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().of(9), L9, 0, 1), BigDecimal_init(BigInteger$Companion_getInstance().TEN, L10, 0, 2)];
    this.ZERO_SCALED_BY_0 = [this.ZERO_THROUGH_TEN_0[0], BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 1, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 2, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 3, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 4, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 5, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 6, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 7, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 8, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 9, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 10, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 11, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 12, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 13, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 14, 1), BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, 15, 1)];
    this.HALF_LONG_MAX_VALUE_0 = L4611686018427387903;
    this.HALF_LONG_MIN_VALUE_0 = L_4611686018427387904;
    this.ZERO = this.ZERO_THROUGH_TEN_0[0];
    this.ONE = this.ZERO_THROUGH_TEN_0[1];
    this.TWO = this.ZERO_THROUGH_TEN_0[2];
    this.TEN = this.ZERO_THROUGH_TEN_0[10];
    this.ONE_TENTH = this.of_yhmem3$(L1, 1);
    this.ONE_HALF = this.of_yhmem3$(L5, 1);
    this.PI = this.of_etek2s$('3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648');
    this.E = this.of_etek2s$('2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264');
    this.ROUND_UP_8be2vx$ = 0;
    this.ROUND_DOWN_8be2vx$ = 1;
    this.ROUND_CEILING_8be2vx$ = 2;
    this.ROUND_FLOOR_8be2vx$ = 3;
    this.ROUND_HALF_UP_8be2vx$ = 4;
    this.ROUND_HALF_DOWN_8be2vx$ = 5;
    this.ROUND_HALF_EVEN_8be2vx$ = 6;
    this.ROUND_UNNECESSARY_8be2vx$ = 7;
    this.DOUBLE_10_POW_0 = new Float64Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10, 1.0E11, 1.0E12, 1.0E13, 1.0E14, 1.0E15, 1.0E16, 1.0E17, 1.0E18, 1.0E19, 1.0E20, 1.0E21, 1.0E22]);
    this.FLOAT_10_POW_0 = new Float32Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10]);
    this.LONG_TEN_POWERS_TABLE_0 = Kotlin.longArrayOf(L1, L10, L100, L1000, L10000, L100000, L1000000, L10000000, L100000000, L1000000000, L10000000000, L100000000000, L1000000000000, L10000000000000, L100000000000000, L1000000000000000, L10000000000000000, L100000000000000000, L1000000000000000000);
    this.BIG_TEN_POWERS_TABLE_0 = [BigInteger$Companion_getInstance().ONE, BigInteger$Companion_getInstance().of(10), BigInteger$Companion_getInstance().of(100), BigInteger$Companion_getInstance().of(1000), BigInteger$Companion_getInstance().of(10000), BigInteger$Companion_getInstance().of(100000), BigInteger$Companion_getInstance().of(1000000), BigInteger$Companion_getInstance().of(10000000), BigInteger$Companion_getInstance().of(100000000), BigInteger$Companion_getInstance().of(1000000000), BigInteger$Companion_getInstance().ofLong(L10000000000), BigInteger$Companion_getInstance().ofLong(L100000000000), BigInteger$Companion_getInstance().ofLong(L1000000000000), BigInteger$Companion_getInstance().ofLong(L10000000000000), BigInteger$Companion_getInstance().ofLong(L100000000000000), BigInteger$Companion_getInstance().ofLong(L1000000000000000), BigInteger$Companion_getInstance().ofLong(L10000000000000000), BigInteger$Companion_getInstance().ofLong(L100000000000000000), BigInteger$Companion_getInstance().ofLong(L1000000000000000000)];
    this.BIG_TEN_POWERS_TABLE_INITLEN_0 = this.BIG_TEN_POWERS_TABLE_0.length;
    this.BIG_TEN_POWERS_TABLE_MAX_0 = 16 * this.BIG_TEN_POWERS_TABLE_INITLEN_0 | 0;
    this.THRESHOLDS_TABLE_0 = Kotlin.longArrayOf(Long$Companion$MAX_VALUE, L922337203685477580, L92233720368547758, L9223372036854775, L922337203685477, L92233720368547, L9223372036854, L922337203685, L92233720368, L9223372036, L922337203, L92233720, L9223372, L922337, L92233, L9223, L922, L92, L9);
    this.DIV_NUM_BASE_0 = L4294967296;
    this.LONGLONG_TEN_POWERS_TABLE_0 = [Kotlin.longArrayOf(L0, L_8446744073709551616), Kotlin.longArrayOf(L5, L7766279631452241920), Kotlin.longArrayOf(L54, L3875820019684212736), Kotlin.longArrayOf(L542, L1864712049423024128), Kotlin.longArrayOf(L5421, L200376420520689664), Kotlin.longArrayOf(L54210, L2003764205206896640), Kotlin.longArrayOf(L542101, L1590897978359414784), Kotlin.longArrayOf(L5421010, L_2537764290115403776), Kotlin.longArrayOf(L54210108, L_6930898827444486144), Kotlin.longArrayOf(L542101086, L4477988020393345024), Kotlin.longArrayOf(L5421010862, L7886392056514347008), Kotlin.longArrayOf(L54210108624, L5076944270305263616), Kotlin.longArrayOf(L542101086242, L_4570789518076018688), Kotlin.longArrayOf(L5421010862427, L_8814407033341083648), Kotlin.longArrayOf(L54210108624275, L4089650035136921600), Kotlin.longArrayOf(L542101086242752, L4003012203950112768), Kotlin.longArrayOf(L5421010862427522, L3136633892082024448), Kotlin.longArrayOf(L54210108624275221, L_5527149226598858752), Kotlin.longArrayOf(L542101086242752217, L68739955140067328), Kotlin.longArrayOf(L5421010862427522170, L687399551400673280)];
  }
  BigDecimal$Companion.prototype.parseExp_0 = function (in_0, offset, len) {
    var offset_0 = offset;
    var len_0 = len;
    var exp = L0;
    offset_0 = offset_0 + 1 | 0;
    var c = in_0[offset_0];
    len_0 = len_0 - 1 | 0;
    var negexp = c === 45;
    if (negexp || c === 43) {
      offset_0 = offset_0 + 1 | 0;
      c = in_0[offset_0];
      len_0 = len_0 - 1 | 0;
    }if (len_0 <= 0)
      throw new NumberFormatException('No exponent digits.');
    while (len_0 > 10 && (c === 48 || toDigit_0(c, 10) === 0)) {
      offset_0 = offset_0 + 1 | 0;
      c = in_0[offset_0];
      len_0 = len_0 - 1 | 0;
    }
    if (len_0 > 10)
      throw new NumberFormatException('Too many nonzero exponent digits.');
    while (true) {
      var v;
      if ((new CharRange(48, 57)).contains_mef7kx$(c)) {
        v = c - 48;
      } else {
        v = toDigit_0(c, 10);
        if (v < 0)
          throw new NumberFormatException('Not a digit.');
      }
      exp = exp.multiply(Kotlin.Long.fromInt(10)).add(Kotlin.Long.fromInt(v));
      if (len_0 === 1)
        break;
      offset_0 = offset_0 + 1 | 0;
      c = in_0[offset_0];
      len_0 = len_0 - 1 | 0;
    }
    if (negexp)
      exp = exp.unaryMinus();
    return exp;
  };
  BigDecimal$Companion.prototype.of_yhmem3$ = function (unscaledVal, scale) {
    if (scale === 0)
      return this.of_s8cxhz$(unscaledVal);
    else if (equals(unscaledVal, L0)) {
      return this.zeroValueOf_kcn2v3$(scale);
    }return BigDecimal_init(equals(unscaledVal, this.INFLATED_8be2vx$) ? this.INFLATED_BIGINT_0 : null, unscaledVal, scale, 0);
  };
  BigDecimal$Companion.prototype.of_2cjn0$ = function (unscaledVal, scale, prec) {
    var tmp$;
    if (scale === 0 && unscaledVal.toNumber() >= 0 && unscaledVal.toNumber() < this.ZERO_THROUGH_TEN_0.length) {
      tmp$ = this.ZERO_THROUGH_TEN_0[unscaledVal.toInt()];
    } else if (equals(unscaledVal, L0)) {
      tmp$ = this.zeroValueOf_kcn2v3$(scale);
    } else {
      tmp$ = BigDecimal_init(equals(unscaledVal, this.INFLATED_8be2vx$) ? this.INFLATED_BIGINT_0 : null, unscaledVal, scale, prec);
    }
    return tmp$;
  };
  BigDecimal$Companion.prototype.of_za3lpa$ = function (val) {
    return this.of_s8cxhz$(Kotlin.Long.fromInt(val));
  };
  BigDecimal$Companion.prototype.of_s8cxhz$ = function (val) {
    var tmp$, tmp$_0;
    if (val.compareTo_11rb$(L0) >= 0 && val.compareTo_11rb$(Kotlin.Long.fromInt(this.ZERO_THROUGH_TEN_0.length)) < 0) {
      tmp$_0 = this.ZERO_THROUGH_TEN_0[val.toInt()];
    } else {
      if (!equals(val, this.INFLATED_8be2vx$)) {
        tmp$_0 = BigDecimal_init((tmp$ = null) == null || Kotlin.isType(tmp$, BigInteger) ? tmp$ : throwCCE(), val, 0, 0);
      } else
        tmp$_0 = BigDecimal_init(this.INFLATED_BIGINT_0, val, 0, 0);
    }
    return tmp$_0;
  };
  BigDecimal$Companion.prototype.of_9ljy93$ = function (intVal, scale, prec) {
    var val = this.compactValFor_0(intVal);
    if (equals(val, L0)) {
      return this.zeroValueOf_kcn2v3$(scale);
    } else if (scale === 0 && val.toNumber() >= 0 && val.toNumber() < this.ZERO_THROUGH_TEN_0.length) {
      return this.ZERO_THROUGH_TEN_0[val.toInt()];
    }return BigDecimal_init(intVal, val, scale, prec);
  };
  BigDecimal$Companion.prototype.zeroValueOf_kcn2v3$ = function (scale) {
    return scale >= 0 && scale < this.ZERO_SCALED_BY_0.length ? this.ZERO_SCALED_BY_0[scale] : BigDecimal_init(BigInteger$Companion_getInstance().ZERO, L0, scale, 1);
  };
  BigDecimal$Companion.prototype.of_59slkr$ = function (val, ctx) {
    if (ctx === void 0)
      ctx = MathContext$Companion_getInstance().UNLIMITED;
    return BigDecimal_init_3(val.toString(), ctx);
  };
  BigDecimal$Companion.prototype.of_jt1o38$ = function (val, ctx) {
    if (ctx === void 0)
      ctx = MathContext$Companion_getInstance().UNLIMITED;
    return this.of_59slkr$(val, ctx);
  };
  BigDecimal$Companion.prototype.of_etek2s$ = function (val, ctx) {
    if (ctx === void 0)
      ctx = null;
    var tmp$;
    if (ctx === null) {
      tmp$ = BigDecimal_init_2(val);
    } else {
      tmp$ = BigDecimal_init_3(val, ctx);
    }
    return tmp$;
  };
  BigDecimal$Companion.prototype.of_aa07kq$ = function (val, ctx) {
    if (ctx === void 0)
      ctx = null;
    var tmp$;
    if (ctx === null) {
      tmp$ = BigDecimal_init_5(val);
    } else {
      tmp$ = BigDecimal_init_6(val, ctx);
    }
    return tmp$;
  };
  BigDecimal$Companion.prototype.of_t0mj8h$ = function (val, ctx) {
    return BigDecimal_init_12(Kotlin.Long.fromInt(val), ctx);
  };
  BigDecimal$Companion.prototype.of_mixntm$ = function (val, ctx) {
    return BigDecimal_init_12(val, ctx);
  };
  BigDecimal$Companion.prototype.bigTenToThe_0 = function (n) {
    if (n < 0)
      return BigInteger$Companion_getInstance().ZERO;
    if (n < this.BIG_TEN_POWERS_TABLE_MAX_0) {
      var pows = this.BIG_TEN_POWERS_TABLE_0;
      return n < pows.length ? ensureNotNull(pows[n]) : this.expandBigIntegerTenPowers_0(n);
    }return BigInteger$Companion_getInstance().TEN.pow(n);
  };
  BigDecimal$Companion.prototype.expandBigIntegerTenPowers_0 = function (n) {
    var tmp$;
    var pows = this.BIG_TEN_POWERS_TABLE_0;
    var curLen = pows.length;
    if (curLen <= n) {
      var newLen = curLen << 1;
      while (newLen <= n) {
        newLen = newLen << 1;
      }
      pows = copyOf(pows, newLen);
      tmp$ = newLen;
      for (var i = curLen; i < tmp$; i++) {
        pows[i] = ensureNotNull(pows[i - 1 | 0]).times(BigInteger$Companion_getInstance().TEN);
      }
      this.BIG_TEN_POWERS_TABLE_0 = pows;
    }return ensureNotNull(pows[n]);
  };
  BigDecimal$Companion.prototype.longMultiplyPowerTen_0 = function (val, n) {
    if (equals(val, L0) || n <= 0)
      return val;
    var tab = this.LONG_TEN_POWERS_TABLE_0;
    var bounds = this.THRESHOLDS_TABLE_0;
    if (n < tab.length && n < bounds.length) {
      var tenpower = tab[n];
      if (equals(val, L1))
        return tenpower;
      if (abs(val).compareTo_11rb$(bounds[n]) <= 0)
        return val.multiply(tenpower);
    }return this.INFLATED_8be2vx$;
  };
  BigDecimal$Companion.prototype.matchScale_0 = function (val) {
    if (val[0]._scale_0 < val[1]._scale_0) {
      val[0] = val[0].setScale_0(val[1]._scale_0, this.ROUND_UNNECESSARY_8be2vx$);
    } else if (val[1]._scale_0 < val[0]._scale_0) {
      val[1] = val[1].setScale_0(val[0]._scale_0, this.ROUND_UNNECESSARY_8be2vx$);
    }};
  BigDecimal$Companion.prototype.longDigitLength_8e33dg$ = function (x) {
    var x_0 = x;
    if (!!equals(x_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }if (x_0.toNumber() < 0)
      x_0 = x_0.unaryMinus();
    if (x_0.toNumber() < 10)
      return 1;
    var r = ((64 - numberOfLeadingZeros(x_0) + 1 | 0) * 1233 | 0) >>> 12;
    var tab = this.LONG_TEN_POWERS_TABLE_0;
    return r >= tab.length || x_0.compareTo_11rb$(tab[r]) < 0 ? r : r + 1 | 0;
  };
  BigDecimal$Companion.prototype.bigDigitLength_0 = function (b) {
    if (b._signum_8be2vx$ === 0)
      return 1;
    var r = Kotlin.Long.fromInt(b.bitLength).add(Kotlin.Long.fromInt(1)).multiply(Kotlin.Long.fromInt(646456993)).shiftRightUnsigned(31).toInt();
    return b.compareMagnitude_kiw147$(this.bigTenToThe_0(r)) < 0 ? r : r + 1 | 0;
  };
  BigDecimal$Companion.prototype.compactValFor_0 = function (b) {
    var m = b._mag_8be2vx$;
    var len = m.length;
    if (len === 0)
      return L0;
    var d = m[0];
    if (len > 2 || (len === 2 && d < 0))
      return this.INFLATED_8be2vx$;
    var u = len === 2 ? Kotlin.Long.fromInt(m[1]).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(d).shiftLeft(32)) : Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK);
    return b._signum_8be2vx$ < 0 ? u.unaryMinus() : u;
  };
  BigDecimal$Companion.prototype.longCompareMagnitude_0 = function (x, y) {
    var x_0 = x;
    var y_0 = y;
    if (x_0.toNumber() < 0)
      x_0 = x_0.unaryMinus();
    if (y_0.toNumber() < 0)
      y_0 = y_0.unaryMinus();
    return x_0.compareTo_11rb$(y_0) < 0 ? -1 : equals(x_0, y_0) ? 0 : 1;
  };
  BigDecimal$Companion.prototype.saturateLong_0 = function (s) {
    var i = s.toInt();
    return equals(s, Kotlin.Long.fromInt(i)) ? i : s.toNumber() < 0 ? -2147483648 : 2147483647;
  };
  BigDecimal$Companion.prototype.print_0 = function (name, bd) {
    println(name + ':' + '\t' + '_intCompact ' + bd._intCompact_0.toString() + '\t' + '_intVal ' + toString(bd._intVal_0) + '\t' + '_scale ' + bd._scale_0 + '\t' + '_precision ' + bd._precision_0);
  };
  BigDecimal$Companion.prototype.checkScaleNonZero_0 = function (val) {
    var asInt = val.toInt();
    if (!equals(Kotlin.Long.fromInt(asInt), val)) {
      throw new ArithmeticException(asInt > 0 ? 'Underflow' : 'Overflow');
    }return asInt;
  };
  BigDecimal$Companion.prototype.checkScale_0 = function (intCompact, val) {
    var asInt = val.toInt();
    if (!equals(Kotlin.Long.fromInt(asInt), val)) {
      asInt = val.toNumber() > 2147483647 ? 2147483647 : -2147483648;
      if (!equals(intCompact, L0))
        throw new ArithmeticException(asInt > 0 ? 'Underflow' : 'Overflow');
    }return asInt;
  };
  BigDecimal$Companion.prototype.checkScale_1 = function (intVal, val) {
    var asInt = val.toInt();
    if (!equals(Kotlin.Long.fromInt(asInt), val)) {
      asInt = val.toNumber() > 2147483647 ? 2147483647 : -2147483648;
      if (ensureNotNull(intVal).signum !== 0)
        throw new ArithmeticException(asInt > 0 ? 'Underflow' : 'Overflow');
    }return asInt;
  };
  BigDecimal$Companion.prototype.doRound_0 = function (val, mc) {
    var mcp = mc.precision;
    var wasDivided = false;
    if (mcp > 0) {
      var intVal = ensureNotNull(val)._intVal_0;
      var compactVal = val._intCompact_0;
      var scale = val._scale_0;
      var prec = val.precision;
      var mode = mc.roundingMode.oldMode_8be2vx$;
      var drop;
      if (equals(compactVal, this.INFLATED_8be2vx$)) {
        drop = prec - mcp | 0;
        while (drop > 0) {
          scale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale).subtract(Kotlin.Long.fromInt(drop)));
          intVal = this.divideAndRoundByTenPow_0(ensureNotNull(intVal), drop, mode);
          wasDivided = true;
          compactVal = this.compactValFor_0(intVal);
          if (!equals(compactVal, this.INFLATED_8be2vx$)) {
            prec = this.longDigitLength_8e33dg$(compactVal);
            break;
          }prec = this.bigDigitLength_0(intVal);
          drop = prec - mcp | 0;
        }
      }if (!equals(compactVal, this.INFLATED_8be2vx$)) {
        drop = prec - mcp | 0;
        while (drop > 0) {
          scale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale).subtract(Kotlin.Long.fromInt(drop)));
          compactVal = this.divideAndRound_3(compactVal, this.LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
          wasDivided = true;
          prec = this.longDigitLength_8e33dg$(compactVal);
          drop = prec - mcp | 0;
          intVal = null;
        }
      }return wasDivided ? BigDecimal_init(intVal, compactVal, scale, prec) : val;
    }return val;
  };
  BigDecimal$Companion.prototype.doRound_2 = function (compactVal, scale, mc) {
    var compactVal_0 = compactVal;
    var scale_0 = scale;
    var mcp = mc.precision;
    if (mcp > 0 && mcp < 19) {
      var prec = this.longDigitLength_8e33dg$(compactVal_0);
      var drop = prec - mcp | 0;
      while (drop > 0) {
        scale_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop)));
        compactVal_0 = this.divideAndRound_3(compactVal_0, this.LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
        prec = this.longDigitLength_8e33dg$(compactVal_0);
        drop = prec - mcp | 0;
      }
      return this.of_2cjn0$(compactVal_0, scale_0, prec);
    }return this.of_yhmem3$(compactVal_0, scale_0);
  };
  BigDecimal$Companion.prototype.doRound_1 = function (intVal, scale, mc) {
    var intVal_0 = intVal;
    var scale_0 = scale;
    var mcp = mc.precision;
    var prec = 0;
    if (mcp > 0) {
      var compactVal = this.compactValFor_0(intVal_0);
      var mode = mc.roundingMode.oldMode_8be2vx$;
      var drop;
      if (equals(compactVal, this.INFLATED_8be2vx$)) {
        prec = this.bigDigitLength_0(intVal_0);
        drop = prec - mcp | 0;
        while (drop > 0) {
          scale_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop)));
          intVal_0 = this.divideAndRoundByTenPow_0(intVal_0, drop, mode);
          compactVal = this.compactValFor_0(intVal_0);
          if (!equals(compactVal, this.INFLATED_8be2vx$)) {
            break;
          }prec = this.bigDigitLength_0(intVal_0);
          drop = prec - mcp | 0;
        }
      }if (!equals(compactVal, this.INFLATED_8be2vx$)) {
        prec = this.longDigitLength_8e33dg$(compactVal);
        drop = prec - mcp | 0;
        while (drop > 0) {
          scale_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop)));
          compactVal = this.divideAndRound_3(compactVal, this.LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
          prec = this.longDigitLength_8e33dg$(compactVal);
          drop = prec - mcp | 0;
        }
        return this.of_2cjn0$(compactVal, scale_0, prec);
      }}return BigDecimal_init(intVal_0, this.INFLATED_8be2vx$, scale_0, prec);
  };
  BigDecimal$Companion.prototype.divideAndRoundByTenPow_0 = function (intVal, tenPow, roundingMode) {
    var intVal_0 = intVal;
    if (tenPow < this.LONG_TEN_POWERS_TABLE_0.length)
      intVal_0 = this.divideAndRound_4(intVal_0, this.LONG_TEN_POWERS_TABLE_0[tenPow], roundingMode);
    else
      intVal_0 = this.divideAndRound_5(intVal_0, this.bigTenToThe_0(tenPow), roundingMode);
    return intVal_0;
  };
  BigDecimal$Companion.prototype.divideAndRound_0 = function (ldividend, ldivisor, scale, roundingMode, preferredScale) {
    var qsign;
    var q = ldividend.div(ldivisor);
    if (roundingMode === this.ROUND_DOWN_8be2vx$ && scale === preferredScale)
      return this.of_yhmem3$(q, scale);
    var r = ldividend.modulo(ldivisor);
    qsign = ldividend.toNumber() < 0 === ldivisor.toNumber() < 0 ? 1 : -1;
    if (!equals(r, L0)) {
      var increment = this.needIncrement_0(ldivisor, roundingMode, qsign, q, r);
      return this.of_yhmem3$(increment ? q.add(Kotlin.Long.fromInt(qsign)) : q, scale);
    } else {
      return preferredScale !== scale ? this.createAndStripZerosToMatchScale_0(q, scale, Kotlin.Long.fromInt(preferredScale)) : this.of_yhmem3$(q, scale);
    }
  };
  BigDecimal$Companion.prototype.divideAndRound_3 = function (ldividend, ldivisor, roundingMode) {
    var qsign;
    var q = ldividend.div(ldivisor);
    if (roundingMode === this.ROUND_DOWN_8be2vx$)
      return q;
    var r = ldividend.modulo(ldivisor);
    qsign = ldividend.toNumber() < 0 === ldivisor.toNumber() < 0 ? 1 : -1;
    if (!equals(r, L0)) {
      var increment = this.needIncrement_0(ldivisor, roundingMode, qsign, q, r);
      return increment ? q.add(Kotlin.Long.fromInt(qsign)) : q;
    } else {
      return q;
    }
  };
  BigDecimal$Companion.prototype.commonNeedIncrement_0 = function (roundingMode, qsign, cmpFracHalf, oddQuot) {
    switch (roundingMode) {
      case 7:
        throw new ArithmeticException('Rounding necessary');
      case 0:
        return true;
      case 1:
        return false;
      case 2:
        return qsign > 0;
      case 3:
        return qsign < 0;
      default:if (!(roundingMode >= this.ROUND_HALF_UP_8be2vx$ && roundingMode <= this.ROUND_HALF_EVEN_8be2vx$)) {
          var message = 'Unexpected rounding mode' + toString(RoundingMode$Companion_getInstance().valueOf_za3lpa$(roundingMode));
          throw IllegalArgumentException_init(message.toString());
        }
        if (cmpFracHalf < 0)
          return false;
        else if (cmpFracHalf > 0)
          return true;
        else {
          if (!(cmpFracHalf === 0)) {
            var message_0 = 'Failed requirement.';
            throw IllegalArgumentException_init(message_0.toString());
          }switch (roundingMode) {
            case 5:
              return false;
            case 4:
              return true;
            case 6:
              return oddQuot;
            default:throw AssertionError_init('Unexpected rounding mode' + roundingMode);
          }
        }

    }
  };
  BigDecimal$Companion.prototype.needIncrement_0 = function (ldivisor, roundingMode, qsign, q, r) {
    if (!!equals(r, L0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var cmpFracHalf;
    if (r.compareTo_11rb$(this.HALF_LONG_MIN_VALUE_0) <= 0 || r.compareTo_11rb$(this.HALF_LONG_MAX_VALUE_0) > 0) {
      cmpFracHalf = 1;
    } else {
      cmpFracHalf = this.longCompareMagnitude_0(Kotlin.Long.fromInt(2).multiply(r), ldivisor);
    }
    return this.commonNeedIncrement_0(roundingMode, qsign, cmpFracHalf, !equals(q.and(L1), L0));
  };
  BigDecimal$Companion.prototype.divideAndRound_4 = function (bdividend, ldivisor, roundingMode) {
    var mdividend = MutableBigInteger_init_1(bdividend._mag_8be2vx$);
    var mq = MutableBigInteger_init();
    var r = mdividend.divide_heuojh$(ldivisor, mq);
    var isRemainderZero = equals(r, L0);
    var qsign = ldivisor.toNumber() < 0 ? -bdividend._signum_8be2vx$ | 0 : bdividend._signum_8be2vx$;
    if (!isRemainderZero) {
      if (this.needIncrement_1(ldivisor, roundingMode, qsign, mq, r)) {
        mq.add_bex516$(MutableBigInteger$Companion_getInstance().ONE);
      }}return mq.toBigInteger_za3lpa$(qsign);
  };
  BigDecimal$Companion.prototype.divideAndRound_2 = function (bdividend, ldivisor, scale, roundingMode, preferredScale) {
    var mdividend = MutableBigInteger_init_1(bdividend._mag_8be2vx$);
    var mq = MutableBigInteger_init();
    var r = mdividend.divide_heuojh$(ldivisor, mq);
    var isRemainderZero = equals(r, L0);
    var qsign = ldivisor.toNumber() < 0 ? -bdividend._signum_8be2vx$ | 0 : bdividend._signum_8be2vx$;
    if (!isRemainderZero) {
      if (this.needIncrement_1(ldivisor, roundingMode, qsign, mq, r)) {
        mq.add_bex516$(MutableBigInteger$Companion_getInstance().ONE);
      }return mq.toBigDecimal_vux9f0$(qsign, scale);
    } else {
      if (preferredScale !== scale) {
        var compactVal = mq.toCompactValue_za3lpa$(qsign);
        if (!equals(compactVal, this.INFLATED_8be2vx$)) {
          return this.createAndStripZerosToMatchScale_0(compactVal, scale, Kotlin.Long.fromInt(preferredScale));
        }var intVal = mq.toBigInteger_za3lpa$(qsign);
        return this.createAndStripZerosToMatchScale_1(intVal, scale, Kotlin.Long.fromInt(preferredScale));
      } else {
        return mq.toBigDecimal_vux9f0$(qsign, scale);
      }
    }
  };
  BigDecimal$Companion.prototype.needIncrement_1 = function (ldivisor, roundingMode, qsign, mq, r) {
    if (!!equals(r, L0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var cmpFracHalf;
    if (r.compareTo_11rb$(this.HALF_LONG_MIN_VALUE_0) <= 0 || r.compareTo_11rb$(this.HALF_LONG_MAX_VALUE_0) > 0) {
      cmpFracHalf = 1;
    } else {
      cmpFracHalf = this.longCompareMagnitude_0(Kotlin.Long.fromInt(2).multiply(r), ldivisor);
    }
    return this.commonNeedIncrement_0(roundingMode, qsign, cmpFracHalf, mq.isOdd);
  };
  BigDecimal$Companion.prototype.divideAndRound_5 = function (bdividend, bdivisor, roundingMode) {
    var isRemainderZero;
    var qsign;
    var mdividend = MutableBigInteger_init_1(bdividend._mag_8be2vx$);
    var mq = MutableBigInteger_init();
    var mdivisor = MutableBigInteger_init_1(bdivisor._mag_8be2vx$);
    var mr = mdividend.divide_rxel95$(mdivisor, mq);
    isRemainderZero = ensureNotNull(mr).isZero;
    qsign = bdividend._signum_8be2vx$ !== bdivisor._signum_8be2vx$ ? -1 : 1;
    if (!isRemainderZero) {
      if (this.needIncrement_2(mdivisor, roundingMode, qsign, mq, mr)) {
        mq.add_bex516$(MutableBigInteger$Companion_getInstance().ONE);
      }}return mq.toBigInteger_za3lpa$(qsign);
  };
  BigDecimal$Companion.prototype.divideAndRound_1 = function (bdividend, bdivisor, scale, roundingMode, preferredScale) {
    var isRemainderZero;
    var qsign;
    var mdividend = MutableBigInteger_init_1(bdividend._mag_8be2vx$);
    var mq = MutableBigInteger_init();
    var mdivisor = MutableBigInteger_init_1(bdivisor._mag_8be2vx$);
    var mr = mdividend.divide_rxel95$(mdivisor, mq);
    isRemainderZero = ensureNotNull(mr).isZero;
    qsign = bdividend._signum_8be2vx$ !== bdivisor._signum_8be2vx$ ? -1 : 1;
    if (!isRemainderZero) {
      if (this.needIncrement_2(mdivisor, roundingMode, qsign, mq, mr)) {
        mq.add_bex516$(MutableBigInteger$Companion_getInstance().ONE);
      }return mq.toBigDecimal_vux9f0$(qsign, scale);
    } else {
      if (preferredScale !== scale) {
        var compactVal = mq.toCompactValue_za3lpa$(qsign);
        if (!equals(compactVal, this.INFLATED_8be2vx$)) {
          return this.createAndStripZerosToMatchScale_0(compactVal, scale, Kotlin.Long.fromInt(preferredScale));
        }var intVal = mq.toBigInteger_za3lpa$(qsign);
        return this.createAndStripZerosToMatchScale_1(intVal, scale, Kotlin.Long.fromInt(preferredScale));
      } else {
        return mq.toBigDecimal_vux9f0$(qsign, scale);
      }
    }
  };
  BigDecimal$Companion.prototype.needIncrement_2 = function (mdivisor, roundingMode, qsign, mq, mr) {
    if (!!mr.isZero) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var cmpFracHalf = mr.compareHalf_bex516$(mdivisor);
    return this.commonNeedIncrement_0(roundingMode, qsign, cmpFracHalf, mq.isOdd);
  };
  BigDecimal$Companion.prototype.createAndStripZerosToMatchScale_1 = function (intVal, scale, preferredScale) {
    var intVal_0 = intVal;
    var scale_0 = scale;
    var qr;
    while (intVal_0.compareMagnitude_kiw147$(BigInteger$Companion_getInstance().TEN) >= 0 && scale_0 > preferredScale.toNumber() && !intVal_0.testBit(0)) {
      qr = intVal_0.divideAndRemainder(BigInteger$Companion_getInstance().TEN);
      if (qr[1].signum !== 0)
        break;
      intVal_0 = qr[0];
      scale_0 = this.checkScale_1(intVal_0, Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(1)));
    }
    return this.of_9ljy93$(intVal_0, scale_0, 0);
  };
  BigDecimal$Companion.prototype.createAndStripZerosToMatchScale_0 = function (compactVal, scale, preferredScale) {
    var compactVal_0 = compactVal;
    var scale_0 = scale;
    while (abs(compactVal_0).compareTo_11rb$(L10) >= 0 && scale_0 > preferredScale.toNumber() && equals(compactVal_0.and(L1), L0)) {
      var r = compactVal_0.modulo(L10);
      if (!equals(r, L0))
        break;
      compactVal_0 = compactVal_0.div(Kotlin.Long.fromInt(10));
      scale_0 = this.checkScale_0(compactVal_0, Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(1)));
    }
    return this.of_yhmem3$(compactVal_0, scale_0);
  };
  BigDecimal$Companion.prototype.stripZerosToMatchScale_0 = function (intVal, intCompact, scale, preferredScale) {
    var tmp$;
    if (!equals(intCompact, this.INFLATED_8be2vx$)) {
      tmp$ = this.createAndStripZerosToMatchScale_0(intCompact, scale, Kotlin.Long.fromInt(preferredScale));
    } else {
      tmp$ = this.createAndStripZerosToMatchScale_1(intVal != null ? intVal : this.INFLATED_BIGINT_0, scale, Kotlin.Long.fromInt(preferredScale));
    }
    return tmp$;
  };
  BigDecimal$Companion.prototype.sum_3 = function (xs, ys) {
    var tmp$;
    var sum = xs.add(ys);
    if (sum.xor(xs).and(sum.xor(ys)).compareTo_11rb$(L0) >= 0) {
      tmp$ = sum;
    } else
      tmp$ = this.INFLATED_8be2vx$;
    return tmp$;
  };
  BigDecimal$Companion.prototype.sum_4 = function (xs, ys, scale) {
    var sum = this.sum_3(xs, ys);
    return !equals(sum, this.INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().of_yhmem3$(sum, scale) : BigDecimal_init_7(BigInteger$Companion_getInstance().ofLong(xs).plusLong_8e33dg$(ys), scale);
  };
  BigDecimal$Companion.prototype.sum_0 = function (xs, scale1, ys, scale2) {
    var sdiff = Kotlin.Long.fromInt(scale1).subtract(Kotlin.Long.fromInt(scale2));
    if (equals(sdiff, L0)) {
      return this.sum_4(xs, ys, scale1);
    } else if (sdiff.toNumber() < 0) {
      var raise = this.checkScale_0(xs, sdiff.unaryMinus());
      var scaledX = this.longMultiplyPowerTen_0(xs, raise);
      if (!equals(scaledX, this.INFLATED_8be2vx$)) {
        return this.sum_4(scaledX, ys, scale2);
      } else {
        var bigsum = this.bigMultiplyPowerTen_1(xs, raise).plusLong_8e33dg$(ys);
        return xs.xor(ys).toNumber() >= 0 ? BigDecimal_init(bigsum, this.INFLATED_8be2vx$, scale2, 0) : this.of_9ljy93$(bigsum, scale2, 0);
      }
    } else {
      var raise_0 = this.checkScale_0(ys, sdiff);
      var scaledY = this.longMultiplyPowerTen_0(ys, raise_0);
      if (!equals(scaledY, this.INFLATED_8be2vx$)) {
        return this.sum_4(xs, scaledY, scale1);
      } else {
        var bigsum_0 = this.bigMultiplyPowerTen_1(ys, raise_0).plusLong_8e33dg$(xs);
        return xs.xor(ys).toNumber() >= 0 ? BigDecimal_init(bigsum_0, this.INFLATED_8be2vx$, scale1, 0) : this.of_9ljy93$(bigsum_0, scale1, 0);
      }
    }
  };
  BigDecimal$Companion.prototype.sum_1 = function (xs, scale1, snd, scale2) {
    var snd_0 = snd;
    var rscale = scale1;
    var sdiff = Kotlin.Long.fromInt(rscale).subtract(Kotlin.Long.fromInt(scale2));
    var sameSigns = get_sign(xs) === snd_0._signum_8be2vx$;
    var sum;
    if (sdiff.toNumber() < 0) {
      var raise = this.checkScale_0(xs, sdiff.unaryMinus());
      rscale = scale2;
      var scaledX = this.longMultiplyPowerTen_0(xs, raise);
      if (equals(scaledX, this.INFLATED_8be2vx$)) {
        sum = snd_0.plus(this.bigMultiplyPowerTen_1(xs, raise));
      } else {
        sum = snd_0.plusLong_8e33dg$(scaledX);
      }
    } else {
      var raise_0 = this.checkScale_1(snd_0, sdiff);
      snd_0 = ensureNotNull(this.bigMultiplyPowerTen_0(snd_0, raise_0));
      sum = snd_0.plusLong_8e33dg$(xs);
    }
    return sameSigns ? BigDecimal_init(sum, this.INFLATED_8be2vx$, rscale, 0) : this.of_9ljy93$(sum, rscale, 0);
  };
  BigDecimal$Companion.prototype.sum_2 = function (fst, scale1, snd, scale2) {
    var fst_0 = fst;
    var snd_0 = snd;
    var rscale = scale1;
    var sdiff = Kotlin.Long.fromInt(rscale).subtract(Kotlin.Long.fromInt(scale2));
    if (!equals(sdiff, L0)) {
      if (sdiff.toNumber() < 0) {
        var raise = this.checkScale_1(fst_0, sdiff.unaryMinus());
        rscale = scale2;
        fst_0 = this.bigMultiplyPowerTen_0(fst_0, raise);
      } else {
        var raise_0 = this.checkScale_1(snd_0, sdiff);
        snd_0 = this.bigMultiplyPowerTen_0(snd_0, raise_0);
      }
    }var sum = ensureNotNull(fst_0).plus(ensureNotNull(snd_0));
    return fst_0._signum_8be2vx$ === snd_0._signum_8be2vx$ ? BigDecimal_init(sum, this.INFLATED_8be2vx$, rscale, 0) : this.of_9ljy93$(sum, rscale, 0);
  };
  BigDecimal$Companion.prototype.bigMultiplyPowerTen_1 = function (value, n) {
    return n <= 0 ? BigInteger$Companion_getInstance().ofLong(value) : this.bigTenToThe_0(n).timesLong_8e33dg$(value);
  };
  BigDecimal$Companion.prototype.bigMultiplyPowerTen_0 = function (value, n) {
    var tmp$;
    if (n <= 0)
      return value;
    if (n < this.LONG_TEN_POWERS_TABLE_0.length) {
      tmp$ = ensureNotNull(value).timesLong_8e33dg$(this.LONG_TEN_POWERS_TABLE_0[n]);
    } else
      tmp$ = ensureNotNull(value).times(this.bigTenToThe_0(n));
    return tmp$;
  };
  BigDecimal$Companion.prototype.divideSmallFastPath_0 = function (xs, xscale, ys, yscale, preferredScale, mc) {
    var yscale_0 = yscale;
    var mcp = mc.precision;
    var roundingMode = mc.roundingMode.oldMode_8be2vx$;
    if (!(xscale <= yscale_0 && yscale_0 < 18 && mcp < 18)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var xraise = yscale_0 - xscale | 0;
    var scaledX = xraise === 0 ? xs : this.longMultiplyPowerTen_0(xs, xraise);
    var quotient;
    var cmp = this.longCompareMagnitude_0(scaledX, ys);
    if (cmp > 0) {
      yscale_0 = yscale_0 - 1 | 0;
      var scl = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
      if (this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale))) > 0) {
        var raise = this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)));
        var scaledXs;
        scaledXs = this.longMultiplyPowerTen_0(xs, raise);
        if (equals(scaledXs, this.INFLATED_8be2vx$)) {
          quotient = null;
          if ((mcp - 1 | 0) >= 0 && (mcp - 1 | 0) < this.LONG_TEN_POWERS_TABLE_0.length) {
            quotient = this.multiplyDivideAndRound_0(this.LONG_TEN_POWERS_TABLE_0[mcp - 1 | 0], scaledX, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
          }if (quotient == null) {
            var rb = this.bigMultiplyPowerTen_1(scaledX, mcp - 1 | 0);
            quotient = this.divideAndRound_2(rb, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
          }} else {
          quotient = this.divideAndRound_0(scaledXs, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        }
      } else {
        var newScale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(xscale).subtract(Kotlin.Long.fromInt(mcp)));
        if (newScale === yscale_0) {
          quotient = this.divideAndRound_0(xs, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        } else {
          var raise_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(yscale_0)));
          var scaledYs = this.longMultiplyPowerTen_0(ys, raise_0);
          if (equals(scaledYs, this.INFLATED_8be2vx$)) {
            var rb_0 = this.bigMultiplyPowerTen_1(ys, raise_0);
            quotient = this.divideAndRound_1(BigInteger$Companion_getInstance().ofLong(xs), rb_0, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
          } else {
            quotient = this.divideAndRound_0(xs, scaledYs, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
          }
        }
      }
    } else {
      var scl_0 = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
      if (cmp === 0) {
        quotient = this.roundedTenPower_0(scaledX.toNumber() < 0 === ys.toNumber() < 0 ? 1 : -1, mcp, scl_0, this.checkScaleNonZero_0(preferredScale));
      } else {
        var scaledXs_0 = this.longMultiplyPowerTen_0(scaledX, mcp);
        if (equals(scaledXs_0, this.INFLATED_8be2vx$)) {
          quotient = null;
          if (mcp < this.LONG_TEN_POWERS_TABLE_0.length) {
            quotient = this.multiplyDivideAndRound_0(this.LONG_TEN_POWERS_TABLE_0[mcp], scaledX, ys, scl_0, roundingMode, this.checkScaleNonZero_0(preferredScale));
          }if (quotient == null) {
            var rb_1 = this.bigMultiplyPowerTen_1(scaledX, mcp);
            quotient = this.divideAndRound_2(rb_1, ys, scl_0, roundingMode, this.checkScaleNonZero_0(preferredScale));
          }} else {
          quotient = this.divideAndRound_0(scaledXs_0, ys, scl_0, roundingMode, this.checkScaleNonZero_0(preferredScale));
        }
      }
    }
    return this.doRound_0(quotient, mc);
  };
  BigDecimal$Companion.prototype.divide_4 = function (xs, xscale, ys, yscale, preferredScale, mc) {
    var yscale_0 = yscale;
    var mcp = mc.precision;
    if (xscale <= yscale_0 && yscale_0 < 18 && mcp < 18) {
      return this.divideSmallFastPath_0(xs, xscale, ys, yscale_0, preferredScale, mc);
    }if (this.compareMagnitudeNormalized_0(xs, xscale, ys, yscale_0) > 0) {
      yscale_0 = yscale_0 - 1 | 0;
    }var roundingMode = mc.roundingMode.oldMode_8be2vx$;
    var scl = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
    var quotient;
    if (this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale))) > 0) {
      var raise = this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)));
      var scaledXs = this.longMultiplyPowerTen_0(xs, raise);
      if (equals(scaledXs, this.INFLATED_8be2vx$)) {
        var rb = this.bigMultiplyPowerTen_1(xs, raise);
        quotient = this.divideAndRound_2(rb, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
      } else {
        quotient = this.divideAndRound_0(scaledXs, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
      }
    } else {
      var newScale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(xscale).subtract(Kotlin.Long.fromInt(mcp)));
      if (newScale === yscale_0) {
        quotient = this.divideAndRound_0(xs, ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
      } else {
        var raise_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(yscale_0)));
        var scaledYs = this.longMultiplyPowerTen_0(ys, raise_0);
        if (equals(scaledYs, this.INFLATED_8be2vx$)) {
          var rb_0 = this.bigMultiplyPowerTen_1(ys, raise_0);
          quotient = this.divideAndRound_1(BigInteger$Companion_getInstance().ofLong(xs), rb_0, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        } else {
          quotient = this.divideAndRound_0(xs, scaledYs, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        }
      }
    }
    return this.doRound_0(quotient, mc);
  };
  BigDecimal$Companion.prototype.divide_6 = function (xs, xscale, ys, yscale, preferredScale, mc) {
    var yscale_0 = yscale;
    if ((-this.compareMagnitudeNormalized_1(ys, yscale_0, xs, xscale) | 0) > 0) {
      yscale_0 = yscale_0 - 1 | 0;
    }var mcp = mc.precision;
    var roundingMode = mc.roundingMode.oldMode_8be2vx$;
    var quotient;
    var scl = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
    if (this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale))) > 0) {
      var raise = this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)));
      var rb = this.bigMultiplyPowerTen_0(xs, raise);
      quotient = this.divideAndRound_2(ensureNotNull(rb), ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
    } else {
      var newScale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(xscale).subtract(Kotlin.Long.fromInt(mcp)));
      if (newScale === yscale_0) {
        quotient = this.divideAndRound_2(ensureNotNull(xs), ys, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
      } else {
        var raise_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(yscale_0)));
        var scaledYs = this.longMultiplyPowerTen_0(ys, raise_0);
        if (equals(scaledYs, this.INFLATED_8be2vx$)) {
          var rb_0 = this.bigMultiplyPowerTen_1(ys, raise_0);
          quotient = this.divideAndRound_1(ensureNotNull(xs), rb_0, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        } else {
          quotient = this.divideAndRound_2(ensureNotNull(xs), scaledYs, scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
        }
      }
    }
    return this.doRound_0(quotient, mc);
  };
  function BigDecimal$Companion$divide$lambda$lambda(closure$it) {
    return function () {
      return closure$it;
    };
  }
  BigDecimal$Companion.prototype.divide_5 = function (xs, xscale, ys, yscale, preferredScale, mc) {
    var yscale_0 = yscale;
    if (this.compareMagnitudeNormalized_1(xs, xscale, ys, yscale_0) > 0) {
      yscale_0 = yscale_0 - 1 | 0;
    }var mcp = mc.precision;
    var $receiver = mc.roundingMode;
    log(BigDecimal$Companion$divide$lambda$lambda($receiver));
    var roundingMode = $receiver.oldMode_8be2vx$;
    var quotient;
    var scl = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
    if (this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale))) > 0) {
      var raise = this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)));
      var rb = this.bigMultiplyPowerTen_1(xs, raise);
      quotient = this.divideAndRound_1(rb, ensureNotNull(ys), scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
    } else {
      var newScale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(xscale).subtract(Kotlin.Long.fromInt(mcp)));
      var raise_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(yscale_0)));
      var rb_0 = this.bigMultiplyPowerTen_0(ys, raise_0);
      quotient = this.divideAndRound_1(BigInteger$Companion_getInstance().ofLong(xs), ensureNotNull(rb_0), scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
    }
    return this.doRound_0(quotient, mc);
  };
  BigDecimal$Companion.prototype.divide_7 = function (xs, xscale, ys, yscale, preferredScale, mc) {
    var yscale_0 = yscale;
    if (this.compareMagnitudeNormalized_2(xs, xscale, ys, yscale_0) > 0) {
      yscale_0 = yscale_0 - 1 | 0;
    }var mcp = mc.precision;
    var roundingMode = mc.roundingMode.oldMode_8be2vx$;
    var quotient;
    var scl = this.checkScaleNonZero_0(preferredScale.add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)).add(Kotlin.Long.fromInt(mcp)));
    if (this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale))) > 0) {
      var raise = this.checkScaleNonZero_0(Kotlin.Long.fromInt(mcp).add(Kotlin.Long.fromInt(yscale_0)).subtract(Kotlin.Long.fromInt(xscale)));
      var rb = this.bigMultiplyPowerTen_0(xs, raise);
      quotient = this.divideAndRound_1(ensureNotNull(rb), ensureNotNull(ys), scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
    } else {
      var newScale = this.checkScaleNonZero_0(Kotlin.Long.fromInt(xscale).subtract(Kotlin.Long.fromInt(mcp)));
      var raise_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(newScale).subtract(Kotlin.Long.fromInt(yscale_0)));
      var rb_0 = this.bigMultiplyPowerTen_0(ys, raise_0);
      quotient = this.divideAndRound_1(ensureNotNull(xs), ensureNotNull(rb_0), scl, roundingMode, this.checkScaleNonZero_0(preferredScale));
    }
    return this.doRound_0(quotient, mc);
  };
  BigDecimal$Companion.prototype.multiplyDivideAndRound_0 = function (dividend0, dividend1, divisor, scale, roundingMode, preferredScale) {
    var dividend0_0 = dividend0;
    var dividend1_0 = dividend1;
    var divisor_0 = divisor;
    var qsign = Kotlin.imul(Kotlin.imul(get_sign(dividend0_0), get_sign(dividend1_0)), get_sign(divisor_0));
    dividend0_0 = abs(dividend0_0);
    dividend1_0 = abs(dividend1_0);
    divisor_0 = abs(divisor_0);
    var d0_hi = dividend0_0.shiftRightUnsigned(32);
    var d0_lo = dividend0_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    var d1_hi = dividend1_0.shiftRightUnsigned(32);
    var d1_lo = dividend1_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    var product = d0_lo.multiply(d1_lo);
    var d0 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    var d1 = product.shiftRightUnsigned(32);
    product = d0_hi.multiply(d1_lo).add(d1);
    d1 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    var d2 = product.shiftRightUnsigned(32);
    product = d0_lo.multiply(d1_hi).add(d1);
    d1 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    d2 = d2.add(product.shiftRightUnsigned(32));
    var d3 = d2.shiftRightUnsigned(32);
    d2 = d2.and(BigInteger$Companion_getInstance().LONG_MASK);
    product = d0_hi.multiply(d1_hi).add(d2);
    d2 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    d3 = product.shiftRightUnsigned(32).add(d3).and(BigInteger$Companion_getInstance().LONG_MASK);
    var dividendHi = this.make64_0(d3, d2);
    var dividendLo = this.make64_0(d1, d0);
    return this.divideAndRound128_0(dividendHi, dividendLo, divisor_0, qsign, scale, roundingMode, preferredScale);
  };
  BigDecimal$Companion.prototype.divideAndRound128_0 = function (dividendHi, dividendLo, divisor, sign, scale, roundingMode, preferredScale) {
    var tmp$;
    var divisor_0 = divisor;
    if (dividendHi.compareTo_11rb$(divisor_0) >= 0) {
      return null;
    }var shift = numberOfLeadingZeros(divisor_0);
    divisor_0 = divisor_0.shiftLeft(shift);
    var v1 = divisor_0.shiftRightUnsigned(32);
    var v0 = divisor_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    var tmp = dividendLo.shiftLeft(shift);
    var u1 = tmp.shiftRightUnsigned(32);
    var u0 = tmp.and(BigInteger$Companion_getInstance().LONG_MASK);
    tmp = dividendHi.shiftLeft(shift).or(dividendLo.shiftRightUnsigned(64 - shift | 0));
    var u2 = tmp.and(BigInteger$Companion_getInstance().LONG_MASK);
    var q1;
    var r_tmp;
    if (equals(v1, L1)) {
      q1 = tmp;
      r_tmp = L0;
    } else if (tmp.toNumber() >= 0) {
      q1 = tmp.div(v1);
      r_tmp = tmp.subtract(q1.multiply(v1));
    } else {
      var rq = this.divRemNegativeLong_0(tmp, v1);
      q1 = rq[1];
      r_tmp = rq[0];
    }
    while (q1.compareTo_11rb$(this.DIV_NUM_BASE_0) >= 0 || this.unsignedLongCompare_0(q1.multiply(v0), this.make64_0(r_tmp, u1))) {
      q1 = q1.dec();
      r_tmp = r_tmp.add(v1);
      if (r_tmp.compareTo_11rb$(this.DIV_NUM_BASE_0) >= 0)
        break;
    }
    tmp = this.mulsub_0(u2, u1, v1, v0, q1);
    u1 = tmp.and(BigInteger$Companion_getInstance().LONG_MASK);
    var q0;
    if (equals(v1, L1)) {
      q0 = tmp;
      r_tmp = L0;
    } else if (tmp.toNumber() >= 0) {
      q0 = tmp.div(v1);
      r_tmp = tmp.subtract(q0.multiply(v1));
    } else {
      var rq_0 = this.divRemNegativeLong_0(tmp, v1);
      q0 = rq_0[1];
      r_tmp = rq_0[0];
    }
    while (q0.compareTo_11rb$(this.DIV_NUM_BASE_0) >= 0 || this.unsignedLongCompare_0(q0.multiply(v0), this.make64_0(r_tmp, u0))) {
      q0 = q0.dec();
      r_tmp = r_tmp.add(v1);
      if (r_tmp.compareTo_11rb$(this.DIV_NUM_BASE_0) >= 0)
        break;
    }
    if (q1.toInt() < 0) {
      var mq = MutableBigInteger_init_1(new Int32Array([q1.toInt(), q0.toInt()]));
      if (roundingMode === this.ROUND_DOWN_8be2vx$ && scale === preferredScale) {
        return mq.toBigDecimal_vux9f0$(sign, scale);
      }var r = this.mulsub_0(u1, u0, v1, v0, q0).shiftRightUnsigned(shift);
      if (!equals(r, L0)) {
        if (this.needIncrement_1(divisor_0.shiftRightUnsigned(shift), roundingMode, sign, mq, r)) {
          mq.add_bex516$(MutableBigInteger$Companion_getInstance().ONE);
        }return mq.toBigDecimal_vux9f0$(sign, scale);
      } else {
        if (preferredScale !== scale) {
          var intVal = mq.toBigInteger_za3lpa$(sign);
          return this.createAndStripZerosToMatchScale_1(intVal, scale, Kotlin.Long.fromInt(preferredScale));
        } else {
          return mq.toBigDecimal_vux9f0$(sign, scale);
        }
      }
    }var q = this.make64_0(q1, q0);
    q = q.multiply(Kotlin.Long.fromInt(sign));
    if (roundingMode === this.ROUND_DOWN_8be2vx$ && scale === preferredScale)
      return this.of_yhmem3$(q, scale);
    var r_0 = this.mulsub_0(u1, u0, v1, v0, q0).shiftRightUnsigned(shift);
    if (!equals(r_0, L0)) {
      var increment = this.needIncrement_0(divisor_0.shiftRightUnsigned(shift), roundingMode, sign, q, r_0);
      return this.of_yhmem3$(increment ? q.add(Kotlin.Long.fromInt(sign)) : q, scale);
    } else {
      if (preferredScale !== scale) {
        tmp$ = this.createAndStripZerosToMatchScale_0(q, scale, Kotlin.Long.fromInt(preferredScale));
      } else {
        tmp$ = this.of_yhmem3$(q, scale);
      }
      return tmp$;
    }
  };
  BigDecimal$Companion.prototype.roundedTenPower_0 = function (qsign, raise, scale, preferredScale) {
    var tmp$;
    if (scale > preferredScale) {
      var diff = scale - preferredScale | 0;
      if (diff < raise) {
        tmp$ = this.scaledTenPow_cub51b$(raise - diff | 0, qsign, preferredScale);
      } else {
        tmp$ = this.of_yhmem3$(Kotlin.Long.fromInt(qsign), scale - raise | 0);
      }
      return tmp$;
    } else {
      return this.scaledTenPow_cub51b$(raise, qsign, scale);
    }
  };
  BigDecimal$Companion.prototype.scaledTenPow_cub51b$ = function (n, sign, scale) {
    if (n < this.LONG_TEN_POWERS_TABLE_0.length)
      return this.of_yhmem3$(Kotlin.Long.fromInt(sign).multiply(this.LONG_TEN_POWERS_TABLE_0[n]), scale);
    else {
      var unscaledVal = this.bigTenToThe_0(n);
      if (sign === -1) {
        unscaledVal = unscaledVal.unaryMinus();
      }return BigDecimal_init(unscaledVal, this.INFLATED_8be2vx$, scale, n + 1 | 0);
    }
  };
  BigDecimal$Companion.prototype.divRemNegativeLong_0 = function (n, d) {
    if (!(n.toNumber() < 0)) {
      var message = 'Non-negative numerator ' + n.toString();
      throw IllegalArgumentException_init(message.toString());
    }if (!!equals(d, L1)) {
      var message_0 = 'Unity denominator';
      throw IllegalArgumentException_init(message_0.toString());
    }var q = n.shiftRightUnsigned(1).div(d.shiftRightUnsigned(1));
    var r = n.subtract(q.multiply(d));
    while (r.toNumber() < 0) {
      r = r.add(d);
      q = q.dec();
    }
    while (r.compareTo_11rb$(d) >= 0) {
      r = r.subtract(d);
      q = q.inc();
    }
    return Kotlin.longArrayOf(r, q);
  };
  BigDecimal$Companion.prototype.make64_0 = function (hi, lo) {
    return hi.shiftLeft(32).or(lo);
  };
  BigDecimal$Companion.prototype.mulsub_0 = function (u1, u0, v1, v0, q0) {
    var tmp = u0.subtract(q0.multiply(v0));
    return this.make64_0(u1.add(tmp.shiftRightUnsigned(32)).subtract(q0.multiply(v1)), tmp.and(BigInteger$Companion_getInstance().LONG_MASK));
  };
  BigDecimal$Companion.prototype.unsignedLongCompare_0 = function (one, two) {
    return one.add(Long$Companion$MIN_VALUE).compareTo_11rb$(two.add(Long$Companion$MIN_VALUE)) > 0;
  };
  BigDecimal$Companion.prototype.unsignedLongCompareEq_0 = function (one, two) {
    return one.add(Long$Companion$MIN_VALUE).compareTo_11rb$(two.add(Long$Companion$MIN_VALUE)) >= 0;
  };
  BigDecimal$Companion.prototype.compareMagnitudeNormalized_0 = function (xs, xscale, ys, yscale) {
    var xs_0 = xs;
    var ys_0 = ys;
    var sdiff = xscale - yscale | 0;
    if (sdiff !== 0) {
      if (sdiff < 0) {
        xs_0 = this.longMultiplyPowerTen_0(xs_0, -sdiff | 0);
      } else {
        ys_0 = this.longMultiplyPowerTen_0(ys_0, sdiff);
      }
    }return !equals(xs_0, this.INFLATED_8be2vx$) ? !equals(ys_0, this.INFLATED_8be2vx$) ? this.longCompareMagnitude_0(xs_0, ys_0) : -1 : 1;
  };
  BigDecimal$Companion.prototype.compareMagnitudeNormalized_1 = function (xs, xscale, ys, yscale) {
    if (equals(xs, L0))
      return -1;
    var sdiff = xscale - yscale | 0;
    if (sdiff < 0) {
      if (equals(this.longMultiplyPowerTen_0(xs, -sdiff | 0), this.INFLATED_8be2vx$)) {
        return this.bigMultiplyPowerTen_1(xs, -sdiff | 0).compareMagnitude_kiw147$(ensureNotNull(ys));
      }}return -1;
  };
  BigDecimal$Companion.prototype.compareMagnitudeNormalized_2 = function (xs, xscale, ys, yscale) {
    var tmp$;
    var sdiff = xscale - yscale | 0;
    if (sdiff < 0) {
      tmp$ = ensureNotNull(this.bigMultiplyPowerTen_0(xs, -sdiff | 0)).compareMagnitude_kiw147$(ensureNotNull(ys));
    } else {
      tmp$ = ensureNotNull(xs).compareMagnitude_kiw147$(ensureNotNull(this.bigMultiplyPowerTen_0(ys, sdiff)));
    }
    return tmp$;
  };
  BigDecimal$Companion.prototype.multiply_3 = function (x, y) {
    var tmp$;
    var product = x.multiply(y);
    var ax = abs(x);
    var ay = abs(y);
    if (equals(ax.or(ay).shiftRightUnsigned(31), L0) || equals(y, L0) || equals(product.div(y), x)) {
      tmp$ = product;
    } else
      tmp$ = this.INFLATED_8be2vx$;
    return tmp$;
  };
  BigDecimal$Companion.prototype.multiply_0 = function (x, y, scale) {
    var tmp$;
    var product = this.multiply_3(x, y);
    if (!equals(product, this.INFLATED_8be2vx$)) {
      tmp$ = this.of_yhmem3$(product, scale);
    } else
      tmp$ = BigDecimal_init(BigInteger$Companion_getInstance().ofLong(x).timesLong_8e33dg$(y), this.INFLATED_8be2vx$, scale, 0);
    return tmp$;
  };
  BigDecimal$Companion.prototype.multiply_1 = function (x, y, scale) {
    var tmp$;
    if (equals(x, L0)) {
      tmp$ = this.zeroValueOf_kcn2v3$(scale);
    } else
      tmp$ = BigDecimal_init(ensureNotNull(y).timesLong_8e33dg$(x), this.INFLATED_8be2vx$, scale, 0);
    return tmp$;
  };
  BigDecimal$Companion.prototype.multiply_2 = function (x, y, scale) {
    return BigDecimal_init(x.times(ensureNotNull(y)), this.INFLATED_8be2vx$, scale, 0);
  };
  BigDecimal$Companion.prototype.multiplyAndRound_0 = function (x, y, scale, mc) {
    var x_0 = x;
    var y_0 = y;
    var product = this.multiply_3(x_0, y_0);
    if (!equals(product, this.INFLATED_8be2vx$)) {
      return this.doRound_2(product, scale, mc);
    }var rsign = 1;
    if (x_0.toNumber() < 0) {
      x_0 = x_0.unaryMinus();
      rsign = -1;
    }if (y_0.toNumber() < 0) {
      y_0 = y_0.unaryMinus();
      rsign = rsign * -1 | 0;
    }var m0_hi = x_0.shiftRightUnsigned(32);
    var m0_lo = x_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    var m1_hi = y_0.shiftRightUnsigned(32);
    var m1_lo = y_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    product = m0_lo.multiply(m1_lo);
    var m0 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    var m1 = product.shiftRightUnsigned(32);
    product = m0_hi.multiply(m1_lo).add(m1);
    m1 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    var m2 = product.shiftRightUnsigned(32);
    product = m0_lo.multiply(m1_hi).add(m1);
    m1 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    m2 = m2.add(product.shiftRightUnsigned(32));
    var m3 = m2.shiftRightUnsigned(32);
    m2 = m2.and(BigInteger$Companion_getInstance().LONG_MASK);
    product = m0_hi.multiply(m1_hi).add(m2);
    m2 = product.and(BigInteger$Companion_getInstance().LONG_MASK);
    m3 = product.shiftRightUnsigned(32).add(m3).and(BigInteger$Companion_getInstance().LONG_MASK);
    var mHi = this.make64_0(m3, m2);
    var mLo = this.make64_0(m1, m0);
    var res = this.doRound128_0(mHi, mLo, rsign, scale, mc);
    if (res != null) {
      return res;
    }res = BigDecimal_init(BigInteger$Companion_getInstance().ofLong(x_0).timesLong_8e33dg$(y_0.multiply(Kotlin.Long.fromInt(rsign))), this.INFLATED_8be2vx$, scale, 0);
    return ensureNotNull(this.doRound_0(res, mc));
  };
  BigDecimal$Companion.prototype.multiplyAndRound_1 = function (x, y, scale, mc) {
    var tmp$;
    if (equals(x, L0)) {
      tmp$ = this.zeroValueOf_kcn2v3$(scale);
    } else
      tmp$ = this.doRound_1(ensureNotNull(y).timesLong_8e33dg$(x), scale, mc);
    return tmp$;
  };
  BigDecimal$Companion.prototype.multiplyAndRound_2 = function (x, y, scale, mc) {
    return this.doRound_1(x.times(ensureNotNull(y)), scale, mc);
  };
  BigDecimal$Companion.prototype.doRound128_0 = function (hi, lo, sign, scale, mc) {
    var tmp$;
    var scale_0 = scale;
    var mcp = mc.precision;
    var drop = this.precision_0(hi, lo) - mcp | 0;
    var res = null;
    if (drop > 0 && drop < this.LONG_TEN_POWERS_TABLE_0.length) {
      scale_0 = this.checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop)));
      res = this.divideAndRound128_0(hi, lo, this.LONG_TEN_POWERS_TABLE_0[drop], sign, scale_0, mc.roundingMode.oldMode_8be2vx$, scale_0);
    }if (res != null) {
      tmp$ = this.doRound_0(res, mc);
    } else
      tmp$ = null;
    return tmp$;
  };
  BigDecimal$Companion.prototype.precision_0 = function (hi, lo) {
    if (equals(hi, L0)) {
      if (lo.toNumber() >= 0) {
        return this.longDigitLength_8e33dg$(lo);
      }return this.unsignedLongCompareEq_0(lo, this.LONGLONG_TEN_POWERS_TABLE_0[0][1]) ? 20 : 19;
    }var r = ((128 - numberOfLeadingZeros(hi) + 1 | 0) * 1233 | 0) >>> 12;
    var idx = r - 19 | 0;
    return idx >= this.LONGLONG_TEN_POWERS_TABLE_0.length || this.longLongCompareMagnitude_0(hi, lo, this.LONGLONG_TEN_POWERS_TABLE_0[idx][0], this.LONGLONG_TEN_POWERS_TABLE_0[idx][1]) ? r : r + 1 | 0;
  };
  BigDecimal$Companion.prototype.longLongCompareMagnitude_0 = function (hi0, lo0, hi1, lo1) {
    var tmp$;
    if (!equals(hi0, hi1)) {
      tmp$ = hi0.compareTo_11rb$(hi1) < 0;
    } else
      tmp$ = lo0.add(Long$Companion$MIN_VALUE).compareTo_11rb$(lo1.add(Long$Companion$MIN_VALUE)) < 0;
    return tmp$;
  };
  BigDecimal$Companion.prototype.divide_0 = function (dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
    if (this.checkScale_0(dividend, Kotlin.Long.fromInt(scale).add(Kotlin.Long.fromInt(divisorScale))) > dividendScale) {
      var newScale = scale + divisorScale | 0;
      var raise = newScale - dividendScale | 0;
      if (raise < this.LONG_TEN_POWERS_TABLE_0.length) {
        var xs = dividend;
        xs = this.longMultiplyPowerTen_0(xs, raise);
        if (!equals(xs, this.INFLATED_8be2vx$)) {
          return this.divideAndRound_0(xs, divisor, scale, roundingMode, scale);
        }var q = this.multiplyDivideAndRound_0(this.LONG_TEN_POWERS_TABLE_0[raise], dividend, divisor, scale, roundingMode, scale);
        if (q != null) {
          return q;
        }}var scaledDividend = this.bigMultiplyPowerTen_1(dividend, raise);
      return this.divideAndRound_2(scaledDividend, divisor, scale, roundingMode, scale);
    } else {
      var newScale_0 = this.checkScale_0(divisor, Kotlin.Long.fromInt(dividendScale).subtract(Kotlin.Long.fromInt(scale)));
      var raise_0 = newScale_0 - divisorScale | 0;
      if (raise_0 < this.LONG_TEN_POWERS_TABLE_0.length) {
        var ys = divisor;
        ys = this.longMultiplyPowerTen_0(ys, raise_0);
        if (!equals(ys, this.INFLATED_8be2vx$)) {
          return this.divideAndRound_0(dividend, ys, scale, roundingMode, scale);
        }}var scaledDivisor = this.bigMultiplyPowerTen_1(divisor, raise_0);
      return this.divideAndRound_1(BigInteger$Companion_getInstance().ofLong(dividend), scaledDivisor, scale, roundingMode, scale);
    }
  };
  BigDecimal$Companion.prototype.divide_2 = function (dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
    if (this.checkScale_1(dividend, Kotlin.Long.fromInt(scale).add(Kotlin.Long.fromInt(divisorScale))) > dividendScale) {
      var newScale = scale + divisorScale | 0;
      var raise = newScale - dividendScale | 0;
      var scaledDividend = this.bigMultiplyPowerTen_0(dividend, raise);
      return this.divideAndRound_2(ensureNotNull(scaledDividend), divisor, scale, roundingMode, scale);
    } else {
      var newScale_0 = this.checkScale_0(divisor, Kotlin.Long.fromInt(dividendScale).subtract(Kotlin.Long.fromInt(scale)));
      var raise_0 = newScale_0 - divisorScale | 0;
      if (raise_0 < this.LONG_TEN_POWERS_TABLE_0.length) {
        var ys = divisor;
        ys = this.longMultiplyPowerTen_0(ys, raise_0);
        if (!equals(ys, this.INFLATED_8be2vx$)) {
          return this.divideAndRound_2(ensureNotNull(dividend), ys, scale, roundingMode, scale);
        }}var scaledDivisor = this.bigMultiplyPowerTen_1(divisor, raise_0);
      return this.divideAndRound_1(ensureNotNull(dividend), scaledDivisor, scale, roundingMode, scale);
    }
  };
  BigDecimal$Companion.prototype.divide_1 = function (dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
    if (this.checkScale_0(dividend, Kotlin.Long.fromInt(scale).add(Kotlin.Long.fromInt(divisorScale))) > dividendScale) {
      var newScale = scale + divisorScale | 0;
      var raise = newScale - dividendScale | 0;
      var scaledDividend = this.bigMultiplyPowerTen_1(dividend, raise);
      return this.divideAndRound_1(scaledDividend, ensureNotNull(divisor), scale, roundingMode, scale);
    } else {
      var newScale_0 = this.checkScale_1(divisor, Kotlin.Long.fromInt(dividendScale).subtract(Kotlin.Long.fromInt(scale)));
      var raise_0 = newScale_0 - divisorScale | 0;
      var scaledDivisor = this.bigMultiplyPowerTen_0(divisor, raise_0);
      return this.divideAndRound_1(BigInteger$Companion_getInstance().ofLong(dividend), ensureNotNull(scaledDivisor), scale, roundingMode, scale);
    }
  };
  BigDecimal$Companion.prototype.divide_3 = function (dividend, dividendScale, divisor, divisorScale, scale, roundingMode) {
    if (this.checkScale_1(dividend, Kotlin.Long.fromInt(scale).add(Kotlin.Long.fromInt(divisorScale))) > dividendScale) {
      var newScale = scale + divisorScale | 0;
      var raise = newScale - dividendScale | 0;
      var scaledDividend = this.bigMultiplyPowerTen_0(dividend, raise);
      return this.divideAndRound_1(ensureNotNull(scaledDividend), ensureNotNull(divisor), scale, roundingMode, scale);
    } else {
      var newScale_0 = this.checkScale_1(divisor, Kotlin.Long.fromInt(dividendScale).subtract(Kotlin.Long.fromInt(scale)));
      var raise_0 = newScale_0 - divisorScale | 0;
      var scaledDivisor = this.bigMultiplyPowerTen_0(divisor, raise_0);
      return this.divideAndRound_1(ensureNotNull(dividend), ensureNotNull(scaledDivisor), scale, roundingMode, scale);
    }
  };
  BigDecimal$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BigDecimal$Companion_instance = null;
  function BigDecimal$Companion_getInstance() {
    if (BigDecimal$Companion_instance === null) {
      new BigDecimal$Companion();
    }return BigDecimal$Companion_instance;
  }
  BigDecimal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BigDecimal',
    interfaces: [Comparable]
  };
  function BigDecimal_init(intVal, val, scale, prec, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    $this._scale_0 = scale;
    $this._precision_0 = prec;
    $this._intCompact_0 = val;
    $this._intVal_0 = intVal;
    return $this;
  }
  function BigDecimal_init_0(in_0, offset, len, mc, $this) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = in_0.length;
    if (mc === void 0)
      mc = MathContext$Companion_getInstance().UNLIMITED;
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    var tmp$, tmp$_0, tmp$_1;
    var offset_0 = offset;
    var len_0 = len;
    if ((offset_0 + len_0 | 0) > in_0.length || offset_0 < 0)
      throw new NumberFormatException('Bad offset or len arguments for char[] input.');
    var prec = 0;
    var scl = 0;
    var rs = L0;
    var rb = null;
    try {
      var isneg = false;
      if (in_0[offset_0] === 45) {
        isneg = true;
        offset_0 = offset_0 + 1 | 0;
        len_0 = len_0 - 1 | 0;
      } else if (in_0[offset_0] === 43) {
        offset_0 = offset_0 + 1 | 0;
        tmp$ = len_0, len_0 = tmp$ - 1 | 0;
      }var dot = false;
      var exp = L0;
      var c;
      var isCompact = len_0 <= 18;
      var idx = 0;
      if (isCompact) {
        while (len_0 > 0) {
          c = in_0[offset_0];
          if (c === 48) {
            if (prec === 0)
              prec = 1;
            else if (!equals(rs, L0)) {
              rs = rs.multiply(Kotlin.Long.fromInt(10));
              prec = prec + 1 | 0;
            }if (dot)
              scl = scl + 1 | 0;
          } else if ((new CharRange(49, 57)).contains_mef7kx$(c)) {
            var digit = c - 48;
            if (prec !== 1 || !equals(rs, L0))
              prec = prec + 1 | 0;
            rs = rs.multiply(Kotlin.Long.fromInt(10)).add(Kotlin.Long.fromInt(digit));
            if (dot)
              scl = scl + 1 | 0;
          } else if (c === 46) {
            if (dot)
              throw new NumberFormatException('Character array' + ' contains more than one decimal point.');
            dot = true;
          } else if (isDigit(c)) {
            var digit_0 = toDigit_0(c, 10);
            if (digit_0 === 0) {
              if (prec === 0)
                prec = 1;
              else if (!equals(rs, L0)) {
                rs = rs.multiply(Kotlin.Long.fromInt(10));
                prec = prec + 1 | 0;
              }} else {
              if (prec !== 1 || !equals(rs, L0))
                prec = prec + 1 | 0;
              rs = rs.multiply(Kotlin.Long.fromInt(10)).add(Kotlin.Long.fromInt(digit_0));
            }
            if (dot)
              scl = scl + 1 | 0;
          } else if (c === 101 || c === 69) {
            exp = BigDecimal$Companion_getInstance().parseExp_0(in_0, offset_0, len_0);
            if (!equals(Kotlin.Long.fromInt(exp.toInt()), exp))
              throw new NumberFormatException('Exponent overflow.');
            break;
          } else {
            throw new NumberFormatException('Character ' + String.fromCharCode(toBoxedChar(c)) + ' is neither a decimal digit number, decimal point, nor' + ' "e" notation exponential mark.');
          }
          offset_0 = offset_0 + 1 | 0;
          len_0 = len_0 - 1 | 0;
        }
        if (prec === 0)
          throw new NumberFormatException('No digits found.');
        if (!equals(exp, L0)) {
          scl = $this.adjustScale_0(scl, exp);
        }rs = isneg ? rs.unaryMinus() : rs;
        var mcp = mc.precision;
        var drop = prec - mcp | 0;
        if (mcp > 0 && drop > 0) {
          while (drop > 0) {
            scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop)));
            rs = BigDecimal$Companion_getInstance().divideAndRound_3(rs, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
            prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(rs);
            drop = prec - mcp | 0;
          }
        }} else {
        var coeff = Kotlin.charArray(len_0);
        while (len_0 > 0) {
          c = in_0[offset_0];
          if ((new CharRange(48, 57)).contains_mef7kx$(c) || isDigit(c)) {
            if (c === 48 || toDigit_0(c, 10) === 0) {
              if (prec === 0) {
                coeff[idx] = c;
                prec = 1;
              } else if (idx !== 0) {
                coeff[tmp$_0 = idx, idx = tmp$_0 + 1 | 0, tmp$_0] = c;
                prec = prec + 1 | 0;
              }} else {
              if (prec !== 1 || idx !== 0)
                prec = prec + 1 | 0;
              coeff[tmp$_1 = idx, idx = tmp$_1 + 1 | 0, tmp$_1] = c;
            }
            if (dot)
              scl = scl + 1 | 0;
            offset_0 = offset_0 + 1 | 0;
            len_0 = len_0 - 1 | 0;
            continue;
          }if (c === 46) {
            if (dot)
              throw new NumberFormatException('Character array' + ' contains more than one decimal point.');
            dot = true;
            offset_0 = offset_0 + 1 | 0;
            len_0 = len_0 - 1 | 0;
            continue;
          }if (c !== 101 && c !== 69)
            throw new NumberFormatException('Character array' + ' is missing "e" notation exponential mark.');
          exp = BigDecimal$Companion_getInstance().parseExp_0(in_0, offset_0, len_0);
          if (!equals(Kotlin.Long.fromInt(exp.toInt()), exp))
            throw new NumberFormatException('Exponent overflow.');
          break;
        }
        if (prec === 0)
          throw new NumberFormatException('No digits found.');
        if (!equals(exp, L0)) {
          scl = $this.adjustScale_0(scl, exp);
        }rb = BigInteger_init_4(coeff, isneg ? -1 : 1, prec);
        rs = BigDecimal$Companion_getInstance().compactValFor_0(rb);
        var mcp_0 = mc.precision;
        if (1 <= mcp_0 && mcp_0 < prec) {
          if (equals(rs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
            var drop_0 = prec - mcp_0 | 0;
            while (drop_0 > 0) {
              scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop_0)));
              rb = BigDecimal$Companion_getInstance().divideAndRoundByTenPow_0(ensureNotNull(rb), drop_0, mc.roundingMode.oldMode_8be2vx$);
              rs = BigDecimal$Companion_getInstance().compactValFor_0(rb);
              if (!equals(rs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
                prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(rs);
                break;
              }prec = BigDecimal$Companion_getInstance().bigDigitLength_0(rb);
              drop_0 = prec - mcp_0 | 0;
            }
          }if (!equals(rs, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
            var drop_1 = prec - mcp_0 | 0;
            while (drop_1 > 0) {
              scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop_1)));
              rs = BigDecimal$Companion_getInstance().divideAndRound_3(rs, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop_1], mc.roundingMode.oldMode_8be2vx$);
              prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(rs);
              drop_1 = prec - mcp_0 | 0;
            }
            rb = null;
          }}}
    } catch (e) {
      if (Kotlin.isType(e, IndexOutOfBoundsException)) {
        var nfe = NumberFormatException_init();
        throw nfe;
      } else if (Kotlin.isType(e, RuntimeException)) {
        var nfe_0 = NumberFormatException_init();
        throw nfe_0;
      } else
        throw e;
    }
    $this._scale_0 = scl;
    $this._precision_0 = prec;
    $this._intCompact_0 = rs;
    $this._intVal_0 = rb;
    return $this;
  }
  function BigDecimal_init_1(in_0, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal_init_0(in_0, 0, in_0.length, mc, $this);
    return $this;
  }
  function BigDecimal_init_2(val, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal_init_0(toCharArray(val), 0, val.length, void 0, $this);
    return $this;
  }
  function BigDecimal_init_3(val, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal_init_0(toCharArray(val), 0, val.length, mc, $this);
    return $this;
  }
  function BigDecimal_init_4(val, mc, $this) {
    if (mc === void 0)
      mc = MathContext$Companion_getInstance().UNLIMITED;
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    if (isInfinite(val) || isInfinite(val))
      throw new NumberFormatException('Infinite or NaN');
    var valBits = toBits(val);
    var sign = equals(valBits.shiftRight(63), L0) ? 1 : -1;
    var exponent = valBits.shiftRight(52).and(L2047).toInt();
    var significand = exponent === 0 ? valBits.and(L4503599627370495).shiftLeft(1) : valBits.and(L4503599627370495).or(L4503599627370496);
    exponent = exponent - 1075 | 0;
    if (equals(significand, L0)) {
      $this._intVal_0 = BigInteger$Companion_getInstance().ZERO;
      $this._scale_0 = 0;
      $this._intCompact_0 = L0;
      $this._precision_0 = 1;
      return $this;
    }while (equals(significand.and(L1), L0)) {
      significand = significand.shiftRight(1);
      exponent = exponent + 1 | 0;
    }
    var scl = 0;
    var rb;
    var compactVal = Kotlin.Long.fromInt(sign).multiply(significand);
    if (exponent === 0) {
      rb = equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().INFLATED_BIGINT_0 : null;
    } else {
      if (exponent < 0) {
        rb = BigInteger$Companion_getInstance().of(5).pow(-exponent | 0).timesLong_8e33dg$(compactVal);
        scl = -exponent | 0;
      } else {
        rb = BigInteger$Companion_getInstance().TWO.pow(exponent).timesLong_8e33dg$(compactVal);
      }
      compactVal = BigDecimal$Companion_getInstance().compactValFor_0(rb);
    }
    var prec = 0;
    var mcp = mc.precision;
    if (mcp > 0) {
      var mode = mc.roundingMode.oldMode_8be2vx$;
      var drop;
      if (equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = BigDecimal$Companion_getInstance().bigDigitLength_0(ensureNotNull(rb));
        drop = prec - mcp | 0;
        while (drop > 0) {
          scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop)));
          rb = BigDecimal$Companion_getInstance().divideAndRoundByTenPow_0(ensureNotNull(rb), drop, mode);
          compactVal = BigDecimal$Companion_getInstance().compactValFor_0(rb);
          if (!equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
            break;
          }prec = BigDecimal$Companion_getInstance().bigDigitLength_0(rb);
          drop = prec - mcp | 0;
        }
      }if (!equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
        drop = prec - mcp | 0;
        while (drop > 0) {
          scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop)));
          compactVal = BigDecimal$Companion_getInstance().divideAndRound_3(compactVal, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
          prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
          drop = prec - mcp | 0;
        }
        rb = null;
      }}$this._intVal_0 = rb;
    $this._intCompact_0 = compactVal;
    $this._scale_0 = scl;
    $this._precision_0 = prec;
    return $this;
  }
  function BigDecimal_init_5(val, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    $this._scale_0 = 0;
    $this._intVal_0 = val;
    $this._intCompact_0 = BigDecimal$Companion_getInstance().compactValFor_0(val);
    return $this;
  }
  function BigDecimal_init_6(val, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal_init_8(val, 0, mc, $this);
    return $this;
  }
  function BigDecimal_init_7(unscaledVal, scale, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    $this._intVal_0 = unscaledVal;
    $this._intCompact_0 = BigDecimal$Companion_getInstance().compactValFor_0(unscaledVal);
    $this._scale_0 = scale;
    return $this;
  }
  function BigDecimal_init_8(unscaledVal, scale, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    var unscaledVal_0 = unscaledVal;
    var scale_0 = scale;
    var compactVal = BigDecimal$Companion_getInstance().compactValFor_0(ensureNotNull(unscaledVal_0));
    var mcp = mc.precision;
    var prec = 0;
    if (mcp > 0) {
      var mode = mc.roundingMode.oldMode_8be2vx$;
      if (equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = BigDecimal$Companion_getInstance().bigDigitLength_0(unscaledVal_0);
        var drop = prec - mcp | 0;
        while (drop > 0) {
          scale_0 = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop)));
          unscaledVal_0 = BigDecimal$Companion_getInstance().divideAndRoundByTenPow_0(ensureNotNull(unscaledVal_0), drop, mode);
          compactVal = BigDecimal$Companion_getInstance().compactValFor_0(unscaledVal_0);
          if (!equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
            break;
          }prec = BigDecimal$Companion_getInstance().bigDigitLength_0(unscaledVal_0);
          drop = prec - mcp | 0;
        }
      }if (!equals(compactVal, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
        var drop_0 = prec - mcp | 0;
        while (drop_0 > 0) {
          scale_0 = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scale_0).subtract(Kotlin.Long.fromInt(drop_0)));
          compactVal = BigDecimal$Companion_getInstance().divideAndRound_3(compactVal, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop_0], mode);
          prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
          drop_0 = prec - mcp | 0;
        }
        unscaledVal_0 = null;
      }}$this._intVal_0 = unscaledVal_0;
    $this._intCompact_0 = compactVal;
    $this._scale_0 = scale_0;
    $this._precision_0 = prec;
    return $this;
  }
  function BigDecimal_init_9(val, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    $this._intCompact_0 = Kotlin.Long.fromInt(val);
    $this._scale_0 = 0;
    $this._intVal_0 = null;
    return $this;
  }
  function BigDecimal_init_10(val, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    var mcp = mc.precision;
    var compactVal = Kotlin.Long.fromInt(val);
    var scl = 0;
    var prec = 0;
    if (mcp > 0) {
      prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
      var drop = prec - mcp | 0;
      while (drop > 0) {
        scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop)));
        compactVal = BigDecimal$Companion_getInstance().divideAndRound_3(compactVal, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop], mc.roundingMode.oldMode_8be2vx$);
        prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(compactVal);
        drop = prec - mcp | 0;
      }
    }$this._intVal_0 = null;
    $this._intCompact_0 = compactVal;
    $this._scale_0 = scl;
    $this._precision_0 = prec;
    return $this;
  }
  function BigDecimal_init_11(val, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    $this._intCompact_0 = val;
    $this._intVal_0 = equals(val, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().INFLATED_BIGINT_0 : null;
    $this._scale_0 = 0;
    return $this;
  }
  function BigDecimal_init_12(val, mc, $this) {
    $this = $this || Object.create(BigDecimal.prototype);
    BigDecimal.call($this);
    var val_0 = val;
    var mcp = mc.precision;
    var mode = mc.roundingMode.oldMode_8be2vx$;
    var prec = 0;
    var scl = 0;
    var rb = equals(val_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$) ? BigDecimal$Companion_getInstance().INFLATED_BIGINT_0 : null;
    if (mcp > 0) {
      if (equals(val_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = 19;
        var drop = prec - mcp | 0;
        while (drop > 0) {
          scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop)));
          rb = BigDecimal$Companion_getInstance().divideAndRoundByTenPow_0(ensureNotNull(rb), drop, mode);
          val_0 = BigDecimal$Companion_getInstance().compactValFor_0(rb);
          if (!equals(val_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
            break;
          }prec = BigDecimal$Companion_getInstance().bigDigitLength_0(rb);
          drop = prec - mcp | 0;
        }
      }if (!equals(val_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$)) {
        prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(val_0);
        var drop_0 = prec - mcp | 0;
        while (drop_0 > 0) {
          scl = BigDecimal$Companion_getInstance().checkScaleNonZero_0(Kotlin.Long.fromInt(scl).subtract(Kotlin.Long.fromInt(drop_0)));
          val_0 = BigDecimal$Companion_getInstance().divideAndRound_3(val_0, BigDecimal$Companion_getInstance().LONG_TEN_POWERS_TABLE_0[drop_0], mc.roundingMode.oldMode_8be2vx$);
          prec = BigDecimal$Companion_getInstance().longDigitLength_8e33dg$(val_0);
          drop_0 = prec - mcp | 0;
        }
        rb = null;
      }}$this._intVal_0 = rb;
    $this._intCompact_0 = val_0;
    $this._scale_0 = scl;
    $this._precision_0 = prec;
    return $this;
  }
  function BigInteger() {
    BigInteger$Companion_getInstance();
    this._signum_8be2vx$ = 0;
    this._mag_8be2vx$ = null;
    this._bitCountPlusOne_0 = 0;
    this._bitLengthPlusOne_0 = 0;
    this._lowestSetBitPlusTwo_0 = 0;
    this._firstNonzeroIntNumPlusTwo_0 = 0;
  }
  Object.defineProperty(BigInteger.prototype, 'lowestSetBit_0', {
    get: function () {
      var lsb = this._lowestSetBitPlusTwo_0 - 2 | 0;
      if (lsb === -2) {
        lsb = 0;
        if (this._signum_8be2vx$ === 0) {
          lsb = lsb - 1 | 0;
        } else {
          var i;
          var b;
          i = 0;
          b = this.getInt_0(i);
          while (b === 0) {
            i = i + 1 | 0;
            b = this.getInt_0(i);
          }
          lsb = lsb + ((i << 5) + numberOfTrailingZeros(b)) | 0;
        }
        this._lowestSetBitPlusTwo_0 = lsb + 2 | 0;
      }return lsb;
    }
  });
  BigInteger.prototype.parseInt_0 = function (source, start, end) {
    var result = toDigit_0(source[start], 10);
    if (result === -1)
      throw new NumberFormatException(String_0(source));
    for (var index = start + 1 | 0; index < end; index++) {
      var nextVal = toDigit_0(source[index], 10);
      if (nextVal === -1)
        throw new NumberFormatException(String_0(source));
      result = (10 * result | 0) + nextVal | 0;
    }
    return result;
  };
  BigInteger.prototype.nextProbablePrime = function () {
    if (this._signum_8be2vx$ < 0)
      throw new ArithmeticException('start < 0: ' + this);
    if (this._signum_8be2vx$ === 0 || (this != null ? this.equals(BigInteger$Companion_getInstance().ONE) : null))
      return BigInteger$Companion_getInstance().TWO;
    var result = this.plus(BigInteger$Companion_getInstance().ONE);
    if (result.bitLength < 95) {
      if (!result.testBit(0))
        result = result.plus(BigInteger$Companion_getInstance().ONE);
      while (true) {
        if (result.bitLength > 6) {
          var r = result.reminder(BigInteger$Companion_getInstance().SMALL_PRIME_PRODUCT_0).toLong();
          if (equals(r.modulo(Kotlin.Long.fromInt(3)), L0) || equals(r.modulo(Kotlin.Long.fromInt(5)), L0) || equals(r.modulo(Kotlin.Long.fromInt(7)), L0) || equals(r.modulo(Kotlin.Long.fromInt(11)), L0) || equals(r.modulo(Kotlin.Long.fromInt(13)), L0) || equals(r.modulo(Kotlin.Long.fromInt(17)), L0) || equals(r.modulo(Kotlin.Long.fromInt(19)), L0) || equals(r.modulo(Kotlin.Long.fromInt(23)), L0) || equals(r.modulo(Kotlin.Long.fromInt(29)), L0) || equals(r.modulo(Kotlin.Long.fromInt(31)), L0) || equals(r.modulo(Kotlin.Long.fromInt(37)), L0) || equals(r.modulo(Kotlin.Long.fromInt(41)), L0)) {
            result = result.plus(BigInteger$Companion_getInstance().TWO);
            continue;
          }}if (result.bitLength < 4)
          return result;
        if (result.primeToCertainty_wrv3ht$(100, null))
          return result;
        result = result.plus(BigInteger$Companion_getInstance().TWO);
      }
    }if (result.testBit(0))
      result = result.minus(BigInteger$Companion_getInstance().ONE);
    var searchLen = BigInteger$Companion_getInstance().getPrimeSearchLen_0(result.bitLength);
    while (true) {
      var searchSieve = BitSieve_init_0(result, searchLen);
      var candidate = searchSieve.retrieve_v75eud$(result, 100, ensureNotNull(null));
      if (candidate != null)
        return candidate;
      result = result.plus(BigInteger$Companion_getInstance().ofLong(Kotlin.Long.fromInt(2 * searchLen | 0)));
    }
  };
  BigInteger.prototype.primeToCertainty_wrv3ht$ = function (certainty, random) {
    var rounds = 0;
    var b = 2147483646;
    var n = (Math_0.max(certainty, b) + 1 | 0) / 2 | 0;
    var sizeInBits = this.bitLength;
    if (sizeInBits < 100) {
      rounds = 50;
      rounds = n < rounds ? n : rounds;
      return this.passesMillerRabin_0(rounds, random);
    }if (sizeInBits < 256) {
      rounds = 27;
    } else if (sizeInBits < 512) {
      rounds = 15;
    } else if (sizeInBits < 768) {
      rounds = 8;
    } else if (sizeInBits < 1024) {
      rounds = 4;
    } else {
      rounds = 2;
    }
    rounds = n < rounds ? n : rounds;
    return this.passesMillerRabin_0(rounds, random) && this.passesLucasLehmer_0();
  };
  BigInteger.prototype.passesLucasLehmer_0 = function () {
    var tmp$;
    var thisPlusOne = this.plus(BigInteger$Companion_getInstance().ONE);
    var d = 5;
    while (BigInteger$Companion_getInstance().jacobiSymbol_0(d, this) !== -1) {
      d = d < 0 ? abs_0(d) + 2 | 0 : -(d + 2 | 0) | 0;
    }
    var u = BigInteger$Companion_getInstance().lucasLehmerSequence_0(d, thisPlusOne, this);
    return (tmp$ = u.rem(this)) != null ? tmp$.equals(BigInteger$Companion_getInstance().ZERO) : null;
  };
  BigInteger.prototype.passesMillerRabin_0 = function (iterations, rnd) {
    var rnd_0 = rnd;
    var thisMinusOne = this.minus(BigInteger$Companion_getInstance().ONE);
    var m = thisMinusOne;
    var a = m.lowestSetBit_0;
    m = m.shr(a);
    if (rnd_0 == null)
      rnd_0 = Random.Default;
    for (var i = 0; i < iterations; i++) {
      var b;
      do {
        b = BigInteger_init_5(this.bitLength, rnd_0);
      }
       while (b.compareTo_11rb$(BigInteger$Companion_getInstance().ONE) <= 0 || b.compareTo_11rb$(this) >= 0);
      var j = 0;
      var z = b.modPow(m, this);
      while (!(j === 0 && (z != null ? z.equals(BigInteger$Companion_getInstance().ONE) : null) || (z != null ? z.equals(thisMinusOne) : null))) {
        if (j > 0 && (z != null ? z.equals(BigInteger$Companion_getInstance().ONE) : null) || (j = j + 1 | 0, j) === a)
          return false;
        z = z.modPow(BigInteger$Companion_getInstance().TWO, this);
      }
    }
    return true;
  };
  BigInteger.prototype.checkRange_0 = function () {
    if (this._mag_8be2vx$.length > 67108864 || (this._mag_8be2vx$.length === 67108864 && this._mag_8be2vx$[0] < 0)) {
      BigInteger$Companion_getInstance().reportOverflow_0();
    }};
  BigInteger.prototype.plus = function (val) {
    if (val._signum_8be2vx$ === 0)
      return this;
    if (this._signum_8be2vx$ === 0)
      return val;
    if (val._signum_8be2vx$ === this._signum_8be2vx$)
      return BigInteger_init_7(BigInteger$Companion_getInstance().sum_0(this._mag_8be2vx$, val._mag_8be2vx$), this._signum_8be2vx$);
    var cmp = this.compareMagnitude_kiw147$(val);
    if (cmp === 0)
      return BigInteger$Companion_getInstance().ZERO;
    var resultMag = cmp > 0 ? BigInteger$Companion_getInstance().subtract_0(this._mag_8be2vx$, val._mag_8be2vx$) : BigInteger$Companion_getInstance().subtract_0(val._mag_8be2vx$, this._mag_8be2vx$);
    resultMag = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(resultMag);
    return BigInteger_init_7(resultMag, cmp === this._signum_8be2vx$ ? 1 : -1);
  };
  BigInteger.prototype.plusLong_8e33dg$ = function (val) {
    if (equals(val, L0))
      return this;
    if (this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ofLong(val);
    if (get_sign(val) === this._signum_8be2vx$) {
      return BigInteger_init_7(BigInteger$Companion_getInstance().sum_1(this._mag_8be2vx$, abs(val)), this._signum_8be2vx$);
    }var cmp = this.compareMagnitude_8e33dg$(val);
    if (cmp === 0)
      return BigInteger$Companion_getInstance().ZERO;
    var resultMag = cmp > 0 ? BigInteger$Companion_getInstance().subtract_1(this._mag_8be2vx$, abs(val)) : BigInteger$Companion_getInstance().subtract_2(abs(val), this._mag_8be2vx$);
    resultMag = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(resultMag);
    return BigInteger_init_7(resultMag, cmp === this._signum_8be2vx$ ? 1 : -1);
  };
  BigInteger.prototype.minus = function (val) {
    if (val._signum_8be2vx$ === 0)
      return this;
    if (this._signum_8be2vx$ === 0)
      return val.unaryMinus();
    if (val._signum_8be2vx$ !== this._signum_8be2vx$)
      return BigInteger_init_7(BigInteger$Companion_getInstance().sum_0(this._mag_8be2vx$, val._mag_8be2vx$), this._signum_8be2vx$);
    var cmp = this.compareMagnitude_kiw147$(val);
    if (cmp === 0)
      return BigInteger$Companion_getInstance().ZERO;
    var resultMag = cmp > 0 ? BigInteger$Companion_getInstance().subtract_0(this._mag_8be2vx$, val._mag_8be2vx$) : BigInteger$Companion_getInstance().subtract_0(val._mag_8be2vx$, this._mag_8be2vx$);
    resultMag = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(resultMag);
    return BigInteger_init_7(resultMag, cmp === this._signum_8be2vx$ ? 1 : -1);
  };
  BigInteger.prototype.times = function (val) {
    var tmp$;
    if (val._signum_8be2vx$ === 0 || this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ZERO;
    var xlen = this._mag_8be2vx$.length;
    if (val === this && xlen > 20) {
      return this.square_0();
    }var ylen = val._mag_8be2vx$.length;
    if (xlen < 80 || ylen < 80) {
      var resultSign = this._signum_8be2vx$ === val._signum_8be2vx$ ? 1 : -1;
      if (val._mag_8be2vx$.length === 1) {
        return BigInteger$Companion_getInstance().multiplyByInt_0(this._mag_8be2vx$, val._mag_8be2vx$[0], resultSign);
      }if (this._mag_8be2vx$.length === 1) {
        return BigInteger$Companion_getInstance().multiplyByInt_0(val._mag_8be2vx$, this._mag_8be2vx$[0], resultSign);
      }var result = BigInteger$Companion_getInstance().multiplyToLen_0(this._mag_8be2vx$, xlen, val._mag_8be2vx$, ylen, null);
      result = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(result);
      return BigInteger_init_7(result, resultSign);
    } else {
      if (xlen < 240 && ylen < 240) {
        tmp$ = BigInteger$Companion_getInstance().multiplyKaratsuba_0(this, val);
      } else {
        tmp$ = BigInteger$Companion_getInstance().multiplyToomCook3_0(this, val);
      }
      return tmp$;
    }
  };
  BigInteger.prototype.timesLong_8e33dg$ = function (v) {
    var tmp$, tmp$_0;
    var v_0 = v;
    if (equals(v_0, L0) || this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ZERO;
    if (equals(v_0, BigDecimal$Companion_getInstance().INFLATED_8be2vx$))
      return this.times(BigInteger$Companion_getInstance().ofLong(v_0));
    var rsign = v_0.toNumber() > 0 ? this._signum_8be2vx$ : -this._signum_8be2vx$ | 0;
    if (v_0.toNumber() < 0)
      v_0 = v_0.unaryMinus();
    var dh = v_0.shiftRightUnsigned(32);
    var dl = v_0.and(BigInteger$Companion_getInstance().LONG_MASK);
    var xlen = this._mag_8be2vx$.length;
    var value = this._mag_8be2vx$;
    var rmag = equals(dh, L0) ? new Int32Array(xlen + 1 | 0) : new Int32Array(xlen + 2 | 0);
    var carry = L0;
    var rstart = rmag.length - 1 | 0;
    for (var i = xlen - 1 | 0; i >= 0; i--) {
      var product = Kotlin.Long.fromInt(value[i]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(dl).add(carry);
      rmag[tmp$ = rstart, rstart = tmp$ - 1 | 0, tmp$] = product.toInt();
      carry = product.shiftRightUnsigned(32);
    }
    rmag[rstart] = carry.toInt();
    if (!equals(dh, L0)) {
      carry = L0;
      rstart = rmag.length - 2 | 0;
      for (var i_0 = xlen - 1 | 0; i_0 >= 0; i_0--) {
        var product_0 = Kotlin.Long.fromInt(value[i_0]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(dh).add(Kotlin.Long.fromInt(rmag[rstart]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
        rmag[tmp$_0 = rstart, rstart = tmp$_0 - 1 | 0, tmp$_0] = product_0.toInt();
        carry = product_0.shiftRightUnsigned(32);
      }
      rmag[0] = carry.toInt();
    }if (equals(carry, L0))
      rmag = copyOfRange(rmag, 1, rmag.length);
    return BigInteger_init_7(rmag, rsign);
  };
  BigInteger.prototype.getToomSlice_0 = function (lowerSize, upperSize, slice, fullsize) {
    var start;
    var end;
    var sliceSize;
    var len;
    var offset;
    len = this._mag_8be2vx$.length;
    offset = fullsize - len | 0;
    if (slice === 0) {
      start = 0 - offset | 0;
      end = upperSize - 1 - offset | 0;
    } else {
      start = upperSize + Kotlin.imul(slice - 1 | 0, lowerSize) - offset | 0;
      end = start + lowerSize - 1 | 0;
    }
    if (start < 0) {
      start = 0;
    }if (end < 0) {
      return BigInteger$Companion_getInstance().ZERO;
    }sliceSize = end - start + 1 | 0;
    if (sliceSize <= 0) {
      return BigInteger$Companion_getInstance().ZERO;
    }if (start === 0 && sliceSize >= len) {
      return this.absoluteValue;
    }var intSlice = new Int32Array(sliceSize);
    arrayCopy_0(this._mag_8be2vx$, start, intSlice, 0, sliceSize);
    return BigInteger_init_7(BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(intSlice), 1);
  };
  BigInteger.prototype.exactDivideBy3_0 = function () {
    var len = this._mag_8be2vx$.length;
    var result = new Int32Array(len);
    var x;
    var w;
    var q;
    var borrow;
    borrow = L0;
    for (var i = len - 1 | 0; i >= 0; i--) {
      x = Kotlin.Long.fromInt(this._mag_8be2vx$[i]).and(BigInteger$Companion_getInstance().LONG_MASK);
      w = x.subtract(borrow);
      if (borrow.compareTo_11rb$(x) > 0) {
        borrow = L1;
      } else {
        borrow = L0;
      }
      q = w.multiply(L2863311531).and(BigInteger$Companion_getInstance().LONG_MASK);
      result[i] = q.toInt();
      if (q.compareTo_11rb$(L1431655766) >= 0) {
        borrow = borrow.inc();
        if (q.compareTo_11rb$(L2863311531) >= 0) {
          borrow = borrow.inc();
        }}}
    result = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(result);
    return BigInteger_init_7(result, this._signum_8be2vx$);
  };
  BigInteger.prototype.getLower_0 = function (n) {
    var len = this._mag_8be2vx$.length;
    if (len <= n) {
      return this.absoluteValue;
    }var lowerInts = new Int32Array(n);
    arrayCopy_0(this._mag_8be2vx$, len - n | 0, lowerInts, 0, n);
    return BigInteger_init_7(BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(lowerInts), 1);
  };
  BigInteger.prototype.getUpper_0 = function (n) {
    var len = this._mag_8be2vx$.length;
    if (len <= n) {
      return BigInteger$Companion_getInstance().ZERO;
    }var upperLen = len - n | 0;
    var upperInts = new Int32Array(upperLen);
    arrayCopy_0(this._mag_8be2vx$, 0, upperInts, 0, upperLen);
    return BigInteger_init_7(BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(upperInts), 1);
  };
  BigInteger.prototype.square_0 = function () {
    var tmp$;
    if (this._signum_8be2vx$ === 0) {
      return BigInteger$Companion_getInstance().ZERO;
    }var len = this._mag_8be2vx$.length;
    if (len < 128) {
      var z = BigInteger$Companion_getInstance().squareToLen_0(this._mag_8be2vx$, len, null);
      return BigInteger_init_7(BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(z), 1);
    } else {
      if (len < 216) {
        tmp$ = this.squareKaratsuba_0();
      } else {
        tmp$ = this.squareToomCook3_0();
      }
      return tmp$;
    }
  };
  BigInteger.prototype.squareKaratsuba_0 = function () {
    var half = (this._mag_8be2vx$.length + 1 | 0) / 2 | 0;
    var xl = this.getLower_0(half);
    var xh = this.getUpper_0(half);
    var xhs = xh.square_0();
    var xls = xl.square_0();
    return xhs.shl(half * 32 | 0).plus(xl.plus(xh).square_0().minus(xhs.plus(xls))).shl(half * 32 | 0).plus(xls);
  };
  BigInteger.prototype.squareToomCook3_0 = function () {
    var len = this._mag_8be2vx$.length;
    var k = (len + 2 | 0) / 3 | 0;
    var r = len - (2 * k | 0) | 0;
    var a0;
    var a1;
    var a2;
    a2 = this.getToomSlice_0(k, r, 0, len);
    a1 = this.getToomSlice_0(k, r, 1, len);
    a0 = this.getToomSlice_0(k, r, 2, len);
    var v0;
    var v1;
    var v2;
    var vm1;
    var vinf;
    var t1;
    var t2;
    var tm1;
    var da1;
    v0 = a0.square_0();
    da1 = a2.plus(a0);
    vm1 = da1.minus(a1).square_0();
    da1 = da1.plus(a1);
    v1 = da1.square_0();
    vinf = a2.square_0();
    v2 = da1.plus(a2).shl(1).minus(a0).square_0();
    t2 = v2.minus(vm1).exactDivideBy3_0();
    tm1 = v1.minus(vm1).shr(1);
    t1 = v1.minus(v0);
    t2 = t2.minus(t1).shr(1);
    t1 = t1.minus(tm1).minus(vinf);
    t2 = t2.minus(vinf.shl(1));
    tm1 = tm1.minus(t2);
    var ss = k * 32 | 0;
    return vinf.shl(ss).plus(t2).shl(ss).plus(t1).shl(ss).plus(tm1).shl(ss).plus(v0);
  };
  BigInteger.prototype.div = function (val) {
    var tmp$;
    if (val._mag_8be2vx$.length < 80 || (this._mag_8be2vx$.length - val._mag_8be2vx$.length | 0) < 40) {
      tmp$ = this.divideKnuth_0(val);
    } else {
      tmp$ = this.divideBurnikelZiegler_0(val);
    }
    return tmp$;
  };
  BigInteger.prototype.divideKnuth_0 = function (val) {
    var q = MutableBigInteger_init();
    var a = MutableBigInteger_init_1(this._mag_8be2vx$);
    var b = MutableBigInteger_init_1(val._mag_8be2vx$);
    a.divideKnuth_rxel95$(b, q, false);
    return q.toBigInteger_za3lpa$(Kotlin.imul(this._signum_8be2vx$, val._signum_8be2vx$));
  };
  BigInteger.prototype.divideAndRemainder = function (val) {
    var tmp$;
    if (val._mag_8be2vx$.length < 80 || (this._mag_8be2vx$.length - val._mag_8be2vx$.length | 0) < 40) {
      tmp$ = this.divideAndRemainderKnuth_0(val);
    } else {
      tmp$ = this.divideAndRemainderBurnikelZiegler_0(val);
    }
    return tmp$;
  };
  BigInteger.prototype.divideAndRemainderKnuth_0 = function (val) {
    var q = MutableBigInteger_init();
    var a = MutableBigInteger_init_1(this._mag_8be2vx$);
    var b = MutableBigInteger_init_1(val._mag_8be2vx$);
    var r = a.divideKnuth_rxel95$(b, q);
    return [q.toBigInteger_za3lpa$(this._signum_8be2vx$ === val._signum_8be2vx$ ? 1 : -1), ensureNotNull(r).toBigInteger_za3lpa$(this._signum_8be2vx$)];
  };
  BigInteger.prototype.reminder = function (val) {
    var tmp$;
    if (val._mag_8be2vx$.length < 80 || (this._mag_8be2vx$.length - val._mag_8be2vx$.length | 0) < 40) {
      tmp$ = this.remainderKnuth_0(val);
    } else {
      tmp$ = this.remainderBurnikelZiegler_0(val);
    }
    return tmp$;
  };
  BigInteger.prototype.remainderKnuth_0 = function (val) {
    var q = MutableBigInteger_init();
    var a = MutableBigInteger_init_1(this._mag_8be2vx$);
    var b = MutableBigInteger_init_1(val._mag_8be2vx$);
    return ensureNotNull(a.divideKnuth_rxel95$(b, q)).toBigInteger_za3lpa$(this._signum_8be2vx$);
  };
  BigInteger.prototype.divideBurnikelZiegler_0 = function (val) {
    return this.divideAndRemainderBurnikelZiegler_0(val)[0];
  };
  BigInteger.prototype.remainderBurnikelZiegler_0 = function (val) {
    return this.divideAndRemainderBurnikelZiegler_0(val)[1];
  };
  BigInteger.prototype.divideAndRemainderBurnikelZiegler_0 = function (val) {
    var q = MutableBigInteger_init();
    var r = MutableBigInteger_init_2(this).divideAndRemainderBurnikelZiegler_88c880$(MutableBigInteger_init_2(val), q);
    var qBigInt = q.isZero ? BigInteger$Companion_getInstance().ZERO : q.toBigInteger_za3lpa$(Kotlin.imul(this._signum_8be2vx$, val._signum_8be2vx$));
    var rBigInt = r.isZero ? BigInteger$Companion_getInstance().ZERO : r.toBigInteger_za3lpa$(this._signum_8be2vx$);
    return [qBigInt, rBigInt];
  };
  BigInteger.prototype.pow = function (exponent) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (exponent < 0) {
      throw new ArithmeticException('Negative exponent');
    }if (this._signum_8be2vx$ === 0) {
      return exponent === 0 ? BigInteger$Companion_getInstance().ONE : this;
    }var partToSquare = this.absoluteValue;
    var powersOfTwo = partToSquare.lowestSetBit_0;
    var bitsToShift = Kotlin.Long.fromInt(powersOfTwo).multiply(Kotlin.Long.fromInt(exponent));
    if (bitsToShift.toNumber() > 2147483647) {
      BigInteger$Companion_getInstance().reportOverflow_0();
    }var remainingBits;
    if (powersOfTwo > 0) {
      partToSquare = partToSquare.shr(powersOfTwo);
      remainingBits = partToSquare.bitLength;
      if (remainingBits === 1) {
        if (this._signum_8be2vx$ < 0 && (exponent & 1) === 1) {
          tmp$ = BigInteger$Companion_getInstance().NEGATIVE_ONE_0.shl(Kotlin.imul(powersOfTwo, exponent));
        } else {
          tmp$ = BigInteger$Companion_getInstance().ONE.shl(Kotlin.imul(powersOfTwo, exponent));
        }
        return tmp$;
      }} else {
      remainingBits = partToSquare.bitLength;
      if (remainingBits === 1) {
        if (this._signum_8be2vx$ < 0 && (exponent & 1) === 1) {
          tmp$_0 = BigInteger$Companion_getInstance().NEGATIVE_ONE_0;
        } else {
          tmp$_0 = BigInteger$Companion_getInstance().ONE;
        }
        return tmp$_0;
      }}
    var scaleFactor = Kotlin.Long.fromInt(remainingBits).multiply(Kotlin.Long.fromInt(exponent));
    if (partToSquare._mag_8be2vx$.length === 1 && scaleFactor.toNumber() <= 62) {
      var newSign = this._signum_8be2vx$ < 0 && (exponent & 1) === 1 ? -1 : 1;
      var result = L1;
      var baseToPow2 = Kotlin.Long.fromInt(partToSquare._mag_8be2vx$[0]).and(BigInteger$Companion_getInstance().LONG_MASK);
      var workingExponent = exponent;
      while (workingExponent !== 0) {
        if ((workingExponent & 1) === 1) {
          result = result.multiply(baseToPow2);
        }workingExponent = workingExponent >>> 1;
        if (workingExponent !== 0) {
          baseToPow2 = baseToPow2.multiply(baseToPow2);
        }}
      if (powersOfTwo > 0) {
        if (bitsToShift.add(scaleFactor).toNumber() <= 62) {
          tmp$_1 = BigInteger$Companion_getInstance().ofLong(result.shiftLeft(bitsToShift.toInt()).multiply(Kotlin.Long.fromInt(newSign)));
        } else {
          tmp$_1 = BigInteger$Companion_getInstance().ofLong(result.multiply(Kotlin.Long.fromInt(newSign))).shl(bitsToShift.toInt());
        }
      } else {
        tmp$_1 = BigInteger$Companion_getInstance().ofLong(result.multiply(Kotlin.Long.fromInt(newSign)));
      }
      return tmp$_1;
    } else {
      var answer = BigInteger$Companion_getInstance().ONE;
      var workingExponent_0 = exponent;
      while (workingExponent_0 !== 0) {
        if ((workingExponent_0 & 1) === 1) {
          answer = answer.times(partToSquare);
        }workingExponent_0 = workingExponent_0 >>> 1;
        if (workingExponent_0 !== 0) {
          partToSquare = partToSquare.square_0();
        }}
      if (powersOfTwo > 0) {
        answer = answer.shl(Kotlin.imul(powersOfTwo, exponent));
      }if (this._signum_8be2vx$ < 0 && (exponent & 1) === 1) {
        tmp$_2 = answer.unaryMinus();
      } else {
        tmp$_2 = answer;
      }
      return tmp$_2;
    }
  };
  BigInteger.prototype.sqrt = function () {
    if (this._signum_8be2vx$ < 0) {
      throw new ArithmeticException('Negative BigInteger');
    }return MutableBigInteger_init_1(this._mag_8be2vx$).sqrt().toBigInteger();
  };
  BigInteger.prototype.sqrtAndRemainder = function () {
    var s = this.sqrt();
    var r = this.minus(s.square_0());
    if (!(r.compareTo_11rb$(BigInteger$Companion_getInstance().ZERO) >= 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }return [s, r];
  };
  BigInteger.prototype.gcd = function (val) {
    if (val._signum_8be2vx$ === 0)
      return this.absoluteValue;
    else if (this._signum_8be2vx$ === 0)
      return val.absoluteValue;
    var a = MutableBigInteger_init_2(this);
    var b = MutableBigInteger_init_2(val);
    var result = a.hybridGCD_1b0xx5$(b);
    return result.toBigInteger_za3lpa$(1);
  };
  Object.defineProperty(BigInteger.prototype, 'absoluteValue', {
    get: function () {
      return this._signum_8be2vx$ >= 0 ? this : this.unaryMinus();
    }
  });
  BigInteger.prototype.unaryMinus = function () {
    return BigInteger_init_7(this._mag_8be2vx$, -this._signum_8be2vx$ | 0);
  };
  BigInteger.prototype.unaryPlus = function () {
    return this;
  };
  Object.defineProperty(BigInteger.prototype, 'signum', {
    get: function () {
      return this._signum_8be2vx$;
    }
  });
  BigInteger.prototype.rem = function (m) {
    if (m._signum_8be2vx$ <= 0)
      throw new ArithmeticException('BigInteger: modulus not positive');
    var result = this.reminder(m);
    return result._signum_8be2vx$ >= 0 ? result : result.plus(m);
  };
  BigInteger.prototype.modPow = function (exponent, m) {
    var exponent_0 = exponent;
    if (m._signum_8be2vx$ <= 0)
      throw new ArithmeticException('BigInteger: modulus not positive');
    if (exponent_0._signum_8be2vx$ === 0)
      return (m != null ? m.equals(BigInteger$Companion_getInstance().ONE) : null) ? BigInteger$Companion_getInstance().ZERO : BigInteger$Companion_getInstance().ONE;
    if (this != null ? this.equals(BigInteger$Companion_getInstance().ONE) : null)
      return (m != null ? m.equals(BigInteger$Companion_getInstance().ONE) : null) ? BigInteger$Companion_getInstance().ZERO : BigInteger$Companion_getInstance().ONE;
    if ((this != null ? this.equals(BigInteger$Companion_getInstance().ZERO) : null) && exponent_0._signum_8be2vx$ >= 0)
      return BigInteger$Companion_getInstance().ZERO;
    if (equals(this, BigInteger$Companion_getInstance().negConst_0[1]) && !exponent_0.testBit(0))
      return (m != null ? m.equals(BigInteger$Companion_getInstance().ONE) : null) ? BigInteger$Companion_getInstance().ZERO : BigInteger$Companion_getInstance().ONE;
    var invertResult = exponent_0._signum_8be2vx$ < 0;
    if (invertResult)
      exponent_0 = exponent_0.unaryMinus();
    var base = this._signum_8be2vx$ < 0 || this.compareTo_11rb$(m) >= 0 ? this.rem(m) : this;
    var result;
    if (m.testBit(0)) {
      result = base.oddModPow_0(exponent_0, m);
    } else {
      var p = m.lowestSetBit_0;
      var m1 = m.shr(p);
      var m2 = BigInteger$Companion_getInstance().ONE.shl(p);
      var base2 = this._signum_8be2vx$ < 0 || this.compareTo_11rb$(m1) >= 0 ? this.rem(m1) : this;
      var a1 = (m1 != null ? m1.equals(BigInteger$Companion_getInstance().ONE) : null) ? BigInteger$Companion_getInstance().ZERO : base2.oddModPow_0(exponent_0, m1);
      var a2 = base.modPow2_0(exponent_0, p);
      var y1 = m2.modInverse(m1);
      var y2 = m1.modInverse(m2);
      if (m._mag_8be2vx$.length < 33554432) {
        result = a1.times(m2).times(y1).plus(a2.times(m1).times(y2)).rem(m);
      } else {
        var t1 = MutableBigInteger_init();
        MutableBigInteger_init_2(a1.times(m2)).multiply_88c880$(MutableBigInteger_init_2(y1), t1);
        var t2 = MutableBigInteger_init();
        MutableBigInteger_init_2(a2.times(m1)).multiply_88c880$(MutableBigInteger_init_2(y2), t2);
        t1.add_bex516$(t2);
        var q = MutableBigInteger_init();
        result = ensureNotNull(t1.divide_rxel95$(MutableBigInteger_init_2(m), q)).toBigInteger();
      }
    }
    return invertResult ? result.modInverse(m) : result;
  };
  BigInteger.prototype.oddModPow_0 = function (y, z) {
    var tmp$;
    if (y != null ? y.equals(BigInteger$Companion_getInstance().ONE) : null)
      return this;
    if (this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ZERO;
    var base = clone_0(this._mag_8be2vx$);
    var exp = y._mag_8be2vx$;
    var mod = z._mag_8be2vx$;
    var modLen = {v: mod.length};
    if ((modLen.v & 1) !== 0) {
      var x = new Int32Array(modLen.v + 1 | 0);
      arrayCopy_0(mod, 0, x, 1, modLen.v);
      mod = x;
      modLen.v = modLen.v + 1 | 0;
    }var wbits = 0;
    var ebits = BigInteger$Companion_getInstance().bitLength_0(exp, exp.length);
    if (ebits !== 17 || exp[0] !== 65537) {
      while (ebits > BigInteger$Companion_getInstance().bnExpModThreshTable_8be2vx$[wbits]) {
        wbits = wbits + 1 | 0;
      }
    }var tblmask = 1 << wbits;
    var $receiver = until(0, tblmask);
    var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination.add_11rb$(new Int32Array(modLen.v));
    }
    var table = copyToArray(destination);
    var n0 = Kotlin.Long.fromInt(mod[modLen.v - 1 | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(mod[modLen.v - 2 | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32));
    var inv = MutableBigInteger$Companion_getInstance().inverseMod64_s8cxhz$(n0).unaryMinus();
    var a = BigInteger$Companion_getInstance().leftShift_0(base, base.length, modLen.v << 5);
    var q = MutableBigInteger_init();
    var a2 = MutableBigInteger_init_1(a);
    var b2 = MutableBigInteger_init_1(mod);
    b2.normalize();
    var r = a2.divide_rxel95$(b2, q);
    table[0] = ensureNotNull(r).toIntArray();
    if (table[0].length < modLen.v) {
      var offset = modLen.v - table[0].length | 0;
      var t2 = new Int32Array(modLen.v);
      arrayCopy_0(table[0], 0, t2, offset, table[0].length);
      table[0] = t2;
    }var b = BigInteger$Companion_getInstance().montgomerySquare_0(table[0], mod, modLen.v, inv, null);
    var t = copyOf_0(b, modLen.v);
    for (var i = 1; i < tblmask; i++) {
      table[i] = BigInteger$Companion_getInstance().montgomeryMultiply_0(t, table[i - 1 | 0], mod, modLen.v, inv, null);
    }
    var bitpos = 1 << (ebits - 1 & 31);
    var buf = 0;
    var elen = exp.length;
    var eIndex = 0;
    tmp$ = wbits;
    for (var i_0 = 0; i_0 <= tmp$; i_0++) {
      buf = buf << 1 | ((exp[eIndex] & bitpos) !== 0 ? 1 : 0);
      bitpos = bitpos >>> 1;
      if (bitpos === 0) {
        eIndex = eIndex + 1 | 0;
        bitpos = -2147483648;
        elen = elen - 1 | 0;
      }}
    var multpos = ebits;
    ebits = ebits - 1 | 0;
    var isone = true;
    multpos = ebits - wbits | 0;
    while ((buf & 1) === 0) {
      buf = buf >>> 1;
      multpos = multpos + 1 | 0;
    }
    var mult = table[buf >>> 1];
    buf = 0;
    if (multpos === ebits)
      isone = false;
    while (true) {
      ebits = ebits - 1 | 0;
      buf = buf << 1;
      if (elen !== 0) {
        buf = buf | ((exp[eIndex] & bitpos) !== 0 ? 1 : 0);
        bitpos = bitpos >>> 1;
        if (bitpos === 0) {
          eIndex = eIndex + 1 | 0;
          bitpos = -2147483648;
          elen = elen - 1 | 0;
        }}if ((buf & tblmask) !== 0) {
        multpos = ebits - wbits | 0;
        while ((buf & 1) === 0) {
          buf = buf >>> 1;
          multpos = multpos + 1 | 0;
        }
        mult = table[buf >>> 1];
        buf = 0;
      }if (ebits === multpos) {
        if (isone) {
          b = clone_0(mult);
          isone = false;
        } else {
          t = b;
          a = BigInteger$Companion_getInstance().montgomeryMultiply_0(t, mult, mod, modLen.v, inv, a);
          t = a;
          a = b;
          b = t;
        }
      }if (ebits === 0)
        break;
      if (!isone) {
        t = b;
        a = BigInteger$Companion_getInstance().montgomerySquare_0(t, mod, modLen.v, inv, a);
        t = a;
        a = b;
        b = t;
      }}
    var t2_0 = new Int32Array(2 * modLen.v | 0);
    arrayCopy_0(b, 0, t2_0, modLen.v, modLen.v);
    b = BigInteger$Companion_getInstance().montReduce_0(t2_0, mod, modLen.v, inv.toInt());
    t2_0 = copyOf_0(b, modLen.v);
    return BigInteger_init_2(1, t2_0);
  };
  BigInteger.prototype.modPow2_0 = function (exponent, p) {
    var result = BigInteger$Companion_getInstance().ONE;
    var baseToPow2 = this.mod2_0(p);
    var expOffset = 0;
    var limit = exponent.bitLength;
    if (this.testBit(0))
      limit = (p - 1 | 0) < limit ? p - 1 | 0 : limit;
    while (expOffset < limit) {
      if (exponent.testBit(expOffset))
        result = result.times(baseToPow2).mod2_0(p);
      expOffset = expOffset + 1 | 0;
      if (expOffset < limit)
        baseToPow2 = baseToPow2.square_0().mod2_0(p);
    }
    return result;
  };
  BigInteger.prototype.mod2_0 = function (p) {
    if (this.bitLength <= p)
      return this;
    var numInts = p + 31 >>> 5;
    var mag = new Int32Array(numInts);
    arrayCopy_0(this._mag_8be2vx$, this._mag_8be2vx$.length - numInts | 0, mag, 0, numInts);
    var excessBits = (numInts << 5) - p | 0;
    mag[0] = mag[0] & L1.shiftLeft(32 - excessBits | 0).subtract(Kotlin.Long.fromInt(1)).toInt();
    return mag[0] === 0 ? BigInteger_init_2(1, mag) : BigInteger_init_7(mag, 1);
  };
  BigInteger.prototype.modInverse = function (m) {
    if (m._signum_8be2vx$ !== 1)
      throw new ArithmeticException('BigInteger: modulus not positive');
    if (m != null ? m.equals(BigInteger$Companion_getInstance().ONE) : null)
      return BigInteger$Companion_getInstance().ZERO;
    var modVal = this;
    if (this._signum_8be2vx$ < 0 || this.compareMagnitude_kiw147$(m) >= 0)
      modVal = this.rem(m);
    if (modVal != null ? modVal.equals(BigInteger$Companion_getInstance().ONE) : null)
      return BigInteger$Companion_getInstance().ONE;
    var a = MutableBigInteger_init_2(modVal);
    var b = MutableBigInteger_init_2(m);
    var result = a.mutableModInverse_bex516$(b);
    return ensureNotNull(result).toBigInteger_za3lpa$(1);
  };
  BigInteger.prototype.shl = function (n) {
    var tmp$;
    if (this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ZERO;
    if (n > 0) {
      tmp$ = BigInteger_init_7(BigInteger$Companion_getInstance().shl_0(this._mag_8be2vx$, n), this._signum_8be2vx$);
    } else if (n === 0) {
      tmp$ = this;
    } else {
      tmp$ = this.shiftRightImpl_0(-n | 0);
    }
    return tmp$;
  };
  BigInteger.prototype.shr = function (n) {
    var tmp$;
    if (this._signum_8be2vx$ === 0)
      return BigInteger$Companion_getInstance().ZERO;
    if (n > 0) {
      tmp$ = this.shiftRightImpl_0(n);
    } else if (n === 0) {
      tmp$ = this;
    } else {
      tmp$ = BigInteger_init_7(BigInteger$Companion_getInstance().shl_0(this._mag_8be2vx$, -n | 0), this._signum_8be2vx$);
    }
    return tmp$;
  };
  BigInteger.prototype.shiftRightImpl_0 = function (n) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var nInts = n >>> 5;
    var nBits = n & 31;
    var magLen = this._mag_8be2vx$.length;
    var newMag = null;
    if (nInts >= magLen) {
      if (this._signum_8be2vx$ >= 0)
        tmp$_0 = BigInteger$Companion_getInstance().ZERO;
      else {
        tmp$ = BigInteger$Companion_getInstance().negConst_0[1];
        if (tmp$ == null) {
          throw IllegalStateException_init();
        }tmp$_0 = tmp$;
      }
      return tmp$_0;
    }if (nBits === 0) {
      var newMagLen = magLen - nInts | 0;
      newMag = copyOf_0(this._mag_8be2vx$, newMagLen);
    } else {
      var i = 0;
      var highBits = this._mag_8be2vx$[0] >>> nBits;
      if (highBits !== 0) {
        newMag = new Int32Array(magLen - nInts | 0);
        newMag[tmp$_1 = i, i = tmp$_1 + 1 | 0, tmp$_1] = highBits;
      } else {
        newMag = new Int32Array(magLen - nInts - 1 | 0);
      }
      var nBits2 = 32 - nBits | 0;
      var j = 0;
      while (j < (magLen - nInts - 1 | 0)) {
        newMag[tmp$_3 = i, i = tmp$_3 + 1 | 0, tmp$_3] = this._mag_8be2vx$[tmp$_2 = j, j = tmp$_2 + 1 | 0, tmp$_2] << nBits2 | this._mag_8be2vx$[j] >>> nBits;
      }
    }
    if (this._signum_8be2vx$ < 0) {
      var onesLost = false;
      var i_0 = magLen - 1 | 0;
      var j_0 = magLen - nInts | 0;
      while (i_0 >= j_0 && !onesLost) {
        onesLost = this._mag_8be2vx$[i_0] !== 0;
        i_0 = i_0 - 1 | 0;
      }
      if (!onesLost && nBits !== 0)
        onesLost = this._mag_8be2vx$[magLen - nInts - 1 | 0] << 32 - nBits !== 0;
      if (onesLost)
        newMag = this.javaIncrement_0(newMag);
    }return BigInteger_init_7(newMag, this._signum_8be2vx$);
  };
  BigInteger.prototype.javaIncrement_0 = function (val) {
    var tmp$;
    var result = val;
    var lastSum = 0;
    var i = result.length - 1 | 0;
    while (i >= 0 && lastSum === 0) {
      lastSum = (tmp$ = result[i], result[i] = tmp$ + 1 | 0, tmp$);
      i = i - 1 | 0;
    }
    if (lastSum === 0) {
      result = new Int32Array(result.length + 1 | 0);
      result[0] = 1;
    }return result;
  };
  BigInteger.prototype.and = function (val) {
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = val.intLength_0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[i] = this.getInt_0(result.length - i - 1 | 0) & val.getInt_0(result.length - i - 1 | 0);
    }
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.or = function (val) {
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = val.intLength_0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[i] = this.getInt_0(result.length - i - 1 | 0) | val.getInt_0(result.length - i - 1 | 0);
    }
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.xor = function (val) {
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = val.intLength_0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[i] = this.getInt_0(result.length - i - 1 | 0) ^ val.getInt_0(result.length - i - 1 | 0);
    }
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.not = function () {
    var result = new Int32Array(this.intLength_0);
    for (var i = 0; i !== result.length; ++i) {
      result[i] = ~this.getInt_0(result.length - i - 1 | 0);
    }
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.andNot = function (val) {
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = val.intLength_0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[i] = this.getInt_0(result.length - i - 1 | 0) & ~val.getInt_0(result.length - i - 1 | 0);
    }
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.testBit = function (n) {
    if (n < 0)
      throw new ArithmeticException('Negative bit address');
    return (this.getInt_0(n >>> 5) & 1 << (n & 31)) !== 0;
  };
  BigInteger.prototype.get = function (n) {
    return this.testBit(n);
  };
  BigInteger.prototype.set = function (n, b) {
    if (b)
      this.setBit(n);
    else
      this.clearBit(n);
  };
  BigInteger.prototype.setBit = function (n) {
    if (n < 0)
      throw new ArithmeticException('Negative bit address');
    var intNum = n >>> 5;
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = intNum + 2 | 0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[result.length - i - 1 | 0] = this.getInt_0(i);
    }
    result[result.length - intNum - 1 | 0] = result[result.length - intNum - 1 | 0] | 1 << (n & 31);
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.clearBit = function (n) {
    if (n < 0)
      throw new ArithmeticException('Negative bit address');
    var intNum = n >>> 5;
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = (n + 1 >>> 5) + 1 | 0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[result.length - i - 1 | 0] = this.getInt_0(i);
    }
    result[result.length - intNum - 1 | 0] = result[result.length - intNum - 1 | 0] & ~(1 << (n & 31));
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  BigInteger.prototype.flipBit = function (n) {
    if (n < 0)
      throw new ArithmeticException('Negative bit address');
    var intNum = n >>> 5;
    var tmp$ = Int32Array;
    var a = this.intLength_0;
    var b = intNum + 2 | 0;
    var result = new tmp$(Math_0.max(a, b));
    for (var i = 0; i !== result.length; ++i) {
      result[result.length - i - 1 | 0] = this.getInt_0(i);
    }
    result[result.length - intNum - 1 | 0] = result[result.length - intNum - 1 | 0] ^ 1 << (n & 31);
    return BigInteger$Companion_getInstance().ofIntArray(result);
  };
  Object.defineProperty(BigInteger.prototype, 'bitLength', {
    get: function () {
      var n = this._bitLengthPlusOne_0 - 1 | 0;
      if (n === -1) {
        var m = this._mag_8be2vx$;
        var len = m.length;
        if (len === 0) {
          n = 0;
        } else {
          var magBitLength = (len - 1 << 5) + BigInteger$Companion_getInstance().bitLengthForInt_kcn2v3$(this._mag_8be2vx$[0]) | 0;
          if (this._signum_8be2vx$ < 0) {
            var pow2 = bitCount(this._mag_8be2vx$[0]) === 1;
            var i = 1;
            while (i < len && pow2) {
              pow2 = this._mag_8be2vx$[i] === 0;
              i = i + 1 | 0;
            }
            n = pow2 ? magBitLength - 1 | 0 : magBitLength;
          } else {
            n = magBitLength;
          }
        }
        this._bitLengthPlusOne_0 = n + 1 | 0;
      }return n;
    }
  });
  Object.defineProperty(BigInteger.prototype, 'bitCount', {
    get: function () {
      var tmp$;
      var bc = this._bitCountPlusOne_0 - 1 | 0;
      if (bc === -1) {
        bc = 0;
        tmp$ = this._mag_8be2vx$;
        for (var i = 0; i !== tmp$.length; ++i) {
          bc = bc + bitCount(this._mag_8be2vx$[i]) | 0;
        }
        if (this._signum_8be2vx$ < 0) {
          var magTrailingZeroCount = 0;
          var j;
          j = this._mag_8be2vx$.length - 1 | 0;
          while (this._mag_8be2vx$[j] === 0) {
            magTrailingZeroCount = magTrailingZeroCount + 32 | 0;
            j = j - 1 | 0;
          }
          magTrailingZeroCount = magTrailingZeroCount + numberOfTrailingZeros(this._mag_8be2vx$[j]) | 0;
          bc = bc + (magTrailingZeroCount - 1) | 0;
        }this._bitCountPlusOne_0 = bc + 1 | 0;
      }return bc;
    }
  });
  BigInteger.prototype.isProbablePrime = function (certainty) {
    if (certainty <= 0)
      return true;
    var w = this.absoluteValue;
    if (w != null ? w.equals(BigInteger$Companion_getInstance().TWO) : null)
      return true;
    return !w.testBit(0) || (w != null ? w.equals(BigInteger$Companion_getInstance().ONE) : null) ? false : w.primeToCertainty_wrv3ht$(certainty, null);
  };
  BigInteger.prototype.compareTo_11rb$ = function (other) {
    if (this._signum_8be2vx$ === other._signum_8be2vx$) {
      switch (this._signum_8be2vx$) {
        case 1:
          return this.compareMagnitude_kiw147$(other);
        case -1:
          return other.compareMagnitude_kiw147$(this);
        default:return 0;
      }
    }return this._signum_8be2vx$ > other._signum_8be2vx$ ? 1 : -1;
  };
  BigInteger.prototype.compareMagnitude_kiw147$ = function (val) {
    var m1 = this._mag_8be2vx$;
    var len1 = m1.length;
    var m2 = val._mag_8be2vx$;
    var len2 = m2.length;
    if (len1 < len2)
      return -1;
    if (len1 > len2)
      return 1;
    for (var i = 0; i < len1; i++) {
      var a = m1[i];
      var b = m2[i];
      if (a !== b)
        return Kotlin.Long.fromInt(a).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(b).and(BigInteger$Companion_getInstance().LONG_MASK)) < 0 ? -1 : 1;
    }
    return 0;
  };
  BigInteger.prototype.compareMagnitude_8e33dg$ = function (val) {
    var tmp$, tmp$_0;
    var val_0 = val;
    if (!!equals(val_0, Long$Companion$MIN_VALUE)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }var m1 = this._mag_8be2vx$;
    var len = m1.length;
    if (len > 2) {
      return 1;
    }if (val_0.toNumber() < 0) {
      val_0 = val_0.unaryMinus();
    }var highWord = val_0.shiftRightUnsigned(32).toInt();
    if (highWord === 0) {
      if (len < 1)
        return -1;
      if (len > 1)
        return 1;
      var a = m1[0];
      var b = val_0.toInt();
      if (a !== b) {
        tmp$ = Kotlin.Long.fromInt(a).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(b).and(BigInteger$Companion_getInstance().LONG_MASK)) < 0 ? -1 : 1;
      } else
        tmp$ = 0;
      return tmp$;
    } else {
      if (len < 2)
        return -1;
      var a_0 = m1[0];
      var b_0 = highWord;
      if (a_0 !== b_0) {
        return Kotlin.Long.fromInt(a_0).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(b_0).and(BigInteger$Companion_getInstance().LONG_MASK)) < 0 ? -1 : 1;
      }a_0 = m1[1];
      b_0 = val_0.toInt();
      if (a_0 !== b_0) {
        tmp$_0 = Kotlin.Long.fromInt(a_0).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(b_0).and(BigInteger$Companion_getInstance().LONG_MASK)) < 0 ? -1 : 1;
      } else
        tmp$_0 = 0;
      return tmp$_0;
    }
  };
  BigInteger.prototype.equals = function (other) {
    var tmp$;
    if (other === this)
      return true;
    if (!Kotlin.isType(other, BigInteger))
      return false;
    var xInt = (tmp$ = other) == null || Kotlin.isType(tmp$, BigInteger) ? tmp$ : throwCCE();
    if (ensureNotNull(xInt)._signum_8be2vx$ !== this._signum_8be2vx$)
      return false;
    var m = this._mag_8be2vx$;
    var len = m.length;
    var xm = xInt._mag_8be2vx$;
    if (len !== xm.length)
      return false;
    for (var i = 0; i < len; i++)
      if (xm[i] !== m[i])
        return false;
    return true;
  };
  BigInteger.prototype.min = function (val) {
    return this.compareTo_11rb$(val) < 0 ? this : val;
  };
  BigInteger.prototype.max = function (val) {
    return this.compareTo_11rb$(val) > 0 ? this : val;
  };
  BigInteger.prototype.hashCode = function () {
    var tmp$;
    var hashCode = 0;
    tmp$ = this._mag_8be2vx$;
    for (var i = 0; i !== tmp$.length; ++i) {
      hashCode = (31 * hashCode | 0) + Kotlin.Long.fromInt(this._mag_8be2vx$[i]).and(BigInteger$Companion_getInstance().LONG_MASK).toInt() | 0;
    }
    return Kotlin.imul(hashCode, this._signum_8be2vx$);
  };
  BigInteger.prototype.toStringWithRadix = function (radix) {
    var radix_0 = radix;
    if (this._signum_8be2vx$ === 0)
      return '0';
    if (radix_0 < 2 || radix_0 > 36)
      radix_0 = 10;
    if (this._mag_8be2vx$.length <= 20)
      return this.smallToString_0(radix_0);
    var sb = StringBuilder_init_0();
    if (this._signum_8be2vx$ < 0) {
      BigInteger$Companion_getInstance().toString_0(this.unaryMinus(), sb, radix_0, 0);
      sb = insertChar(sb, 0, 45);
    } else
      BigInteger$Companion_getInstance().toString_0(this, sb, radix_0, 0);
    return sb.toString();
  };
  BigInteger.prototype.smallToString_0 = function (radix) {
    var tmp$;
    if (this._signum_8be2vx$ === 0) {
      return '0';
    }var maxNumDigitGroups = ((4 * this._mag_8be2vx$.length | 0) + 6 | 0) / 7 | 0;
    var digitGroup = Kotlin.newArray(maxNumDigitGroups, null);
    var tmp = this.absoluteValue;
    var numGroups = 0;
    while (tmp._signum_8be2vx$ !== 0) {
      var d = BigInteger$Companion_getInstance().longRadix_0[radix];
      var q = MutableBigInteger_init();
      var a = MutableBigInteger_init_1(tmp._mag_8be2vx$);
      var b = MutableBigInteger_init_1(ensureNotNull(d)._mag_8be2vx$);
      var r = a.divide_rxel95$(b, q);
      var q2 = q.toBigInteger_za3lpa$(Kotlin.imul(tmp._signum_8be2vx$, d._signum_8be2vx$));
      var r2 = ensureNotNull(r).toBigInteger_za3lpa$(Kotlin.imul(tmp._signum_8be2vx$, d._signum_8be2vx$));
      digitGroup[tmp$ = numGroups, numGroups = tmp$ + 1 | 0, tmp$] = toString_0(r2.toLong(), radix);
      tmp = q2;
    }
    var buf = StringBuilder_init(Kotlin.imul(numGroups, BigInteger$Companion_getInstance().digitsPerLong_0[radix]) + 1 | 0);
    if (this._signum_8be2vx$ < 0) {
      buf.append_s8itvh$(45);
    }buf.append_gw00v9$(digitGroup[numGroups - 1 | 0]);
    for (var i = numGroups - 2 | 0; i >= 0; i--) {
      var numLeadingZeros = BigInteger$Companion_getInstance().digitsPerLong_0[radix] - ensureNotNull(digitGroup[i]).length | 0;
      if (numLeadingZeros !== 0) {
        buf.append_gw00v9$(BigInteger$Companion_getInstance().zeros_0[numLeadingZeros]);
      }buf.append_gw00v9$(digitGroup[i]);
    }
    return buf.toString();
  };
  BigInteger.prototype.toString = function () {
    return this.toStringWithRadix(10);
  };
  BigInteger.prototype.toByteArray = function () {
    var tmp$;
    var byteLen = (this.bitLength / 8 | 0) + 1 | 0;
    var byteArray = new Int8Array(byteLen);
    var i = byteLen - 1 | 0;
    var bytesCopied = 4;
    var nextInt = 0;
    var intIndex = 0;
    while (i >= 0) {
      if (bytesCopied === 4) {
        nextInt = this.getInt_0((tmp$ = intIndex, intIndex = tmp$ + 1 | 0, tmp$));
        bytesCopied = 1;
      } else {
        nextInt = nextInt >>> 8;
        bytesCopied = bytesCopied + 1 | 0;
      }
      byteArray[i] = toByte(nextInt);
      i = i - 1 | 0;
    }
    return byteArray;
  };
  BigInteger.prototype.toInt = function () {
    var result = 0;
    result = this.getInt_0(0);
    return result;
  };
  BigInteger.prototype.toLong = function () {
    var result = L0;
    for (var i = 1; i >= 0; i--)
      result = result.shiftLeft(32).add(Kotlin.Long.fromInt(this.getInt_0(i)).and(BigInteger$Companion_getInstance().LONG_MASK));
    return result;
  };
  BigInteger.prototype.toByte = function () {
    return toByte(this.toInt());
  };
  BigInteger.prototype.toChar = function () {
    return toBoxedChar(toChar(this.toInt()));
  };
  BigInteger.prototype.toShort = function () {
    return toShort(this.toInt());
  };
  BigInteger.prototype.toFloat = function () {
    return this.toInt();
  };
  BigInteger.prototype.toDouble = function () {
    return this.toLong().toNumber();
  };
  Object.defineProperty(BigInteger.prototype, 'intLength_0', {
    get: function () {
      return (this.bitLength >>> 5) + 1 | 0;
    }
  });
  Object.defineProperty(BigInteger.prototype, 'signBit_0', {
    get: function () {
      return this._signum_8be2vx$ < 0 ? 1 : 0;
    }
  });
  Object.defineProperty(BigInteger.prototype, 'signInt_0', {
    get: function () {
      return this._signum_8be2vx$ < 0 ? -1 : 0;
    }
  });
  BigInteger.prototype.getInt_0 = function (n) {
    if (n < 0)
      return 0;
    if (n >= this._mag_8be2vx$.length)
      return this.signInt_0;
    var magInt = this._mag_8be2vx$[this._mag_8be2vx$.length - n - 1 | 0];
    return this._signum_8be2vx$ >= 0 ? magInt : n <= this.firstNonzeroIntNum_0() ? -magInt | 0 : ~magInt;
  };
  BigInteger.prototype.firstNonzeroIntNum_0 = function () {
    var fn = this._firstNonzeroIntNumPlusTwo_0 - 2 | 0;
    if (fn === -2) {
      var i;
      var mlen = this._mag_8be2vx$.length;
      i = mlen - 1 | 0;
      while (i >= 0 && this._mag_8be2vx$[i] === 0) {
        i = i - 1 | 0;
      }
      fn = mlen - i - 1 | 0;
      this._firstNonzeroIntNumPlusTwo_0 = fn + 2 | 0;
    }return fn;
  };
  BigInteger.prototype.magSerializedForm_0 = function () {
    var tmp$;
    var len = this._mag_8be2vx$.length;
    var bitLen = len === 0 ? 0 : (len - 1 << 5) + BigInteger$Companion_getInstance().bitLengthForInt_kcn2v3$(this._mag_8be2vx$[0]) | 0;
    var byteLen = bitLen + 7 >>> 3;
    var result = new Int8Array(byteLen);
    var i = byteLen - 1 | 0;
    var bytesCopied = 4;
    var intIndex = len - 1 | 0;
    var nextInt = 0;
    while (i >= 0) {
      if (bytesCopied === 4) {
        nextInt = this._mag_8be2vx$[tmp$ = intIndex, intIndex = tmp$ - 1 | 0, tmp$];
        bytesCopied = 1;
      } else {
        nextInt = nextInt >>> 8;
        bytesCopied = bytesCopied + 1 | 0;
      }
      result[i] = toByte(nextInt);
      i = i - 1 | 0;
    }
    return result;
  };
  BigInteger.prototype.toLongExact = function () {
    var tmp$;
    if (this._mag_8be2vx$.length <= 2 && this.bitLength <= 63)
      tmp$ = this.toLong();
    else
      throw new ArithmeticException('BigInteger out of long range');
    return tmp$;
  };
  BigInteger.prototype.toIntExact = function () {
    var tmp$;
    if (this._mag_8be2vx$.length <= 1 && this.bitLength <= 31)
      tmp$ = this.toInt();
    else
      throw new ArithmeticException('BigInteger out of int range');
    return tmp$;
  };
  BigInteger.prototype.toShortExact = function () {
    if (this._mag_8be2vx$.length <= 1 && this.bitLength <= 31) {
      var value = this.toInt();
      if (value >= kotlin_js_internal_ShortCompanionObject.MIN_VALUE && value <= kotlin_js_internal_ShortCompanionObject.MAX_VALUE)
        return this.toShort();
    }throw new ArithmeticException('BigInteger out of short range');
  };
  BigInteger.prototype.toByteExact = function () {
    if (this._mag_8be2vx$.length <= 1 && this.bitLength <= 31) {
      var value = this.toInt();
      if (value >= kotlin_js_internal_ByteCompanionObject.MIN_VALUE && value <= kotlin_js_internal_ByteCompanionObject.MAX_VALUE)
        return this.toByte();
    }throw new ArithmeticException('BigInteger out of byte range');
  };
  function BigInteger$Companion() {
    BigInteger$Companion_instance = this;
    this.LONG_MASK = L4294967295;
    this.MAX_MAG_LENGTH_0 = 67108864;
    this.PRIME_SEARCH_BIT_LENGTH_LIMIT_0 = 500000000;
    this.KARATSUBA_THRESHOLD_0 = 80;
    this.TOOM_COOK_THRESHOLD_0 = 240;
    this.KARATSUBA_SQUARE_THRESHOLD_0 = 128;
    this.TOOM_COOK_SQUARE_THRESHOLD_0 = 216;
    this.BURNIKEL_ZIEGLER_THRESHOLD_8be2vx$ = 80;
    this.BURNIKEL_ZIEGLER_OFFSET_8be2vx$ = 40;
    this.SCHOENHAGE_BASE_CONVERSION_THRESHOLD_0 = 20;
    this.MULTIPLY_SQUARE_THRESHOLD_0 = 20;
    this.MONTGOMERY_INTRINSIC_THRESHOLD_0 = 512;
    this.bitsPerDigit_0 = Kotlin.longArrayOf(L0, L0, L1024, L1624, L2048, L2378, L2648, L2875, L3072, L3247, L3402, L3543, L3672, L3790, L3899, L4001, L4096, L4186, L4271, L4350, L4426, L4498, L4567, L4633, L4696, L4756, L4814, L4870, L4923, L4975, L5025, L5074, L5120, L5166, L5210, L5253, L5295);
    this.SMALL_PRIME_THRESHOLD_0 = 95;
    this.DEFAULT_PRIME_CERTAINTY_0 = 100;
    this.SMALL_PRIME_PRODUCT_0 = this.ofLong(L152125131763605);
    this.MAX_CONSTANT_0 = 16;
    this.posConst_0 = Kotlin.newArray(this.MAX_CONSTANT_0 + 1 | 0, null);
    this.negConst_0 = Kotlin.newArray(this.MAX_CONSTANT_0 + 1 | 0, null);
    this.powerCache_0 = Kotlin.newArray(0, null);
    this.logCache_0 = null;
    this.LOG_TWO_0 = Math_0.log(2.0);
    var tmp$;
    tmp$ = this.MAX_CONSTANT_0;
    for (var i = 1; i <= tmp$; i++) {
      var magnitude = new Int32Array(1);
      magnitude[0] = i;
      this.posConst_0[i] = BigInteger_init_7(magnitude, 1);
      this.negConst_0[i] = BigInteger_init_7(magnitude, -1);
    }
    this.powerCache_0 = Kotlin.newArray(37, null);
    this.logCache_0 = new Float64Array(37);
    for (var i_0 = 2; i_0 <= 36; i_0++) {
      this.powerCache_0[i_0] = [this.ofLong(Kotlin.Long.fromInt(i_0))];
      this.logCache_0[i_0] = Math_0.log(i_0);
    }
    this.ZERO = BigInteger_init_7(new Int32Array(0), 0);
    this.ONE = this.of(1);
    this.TWO = this.of(2);
    this.NEGATIVE_ONE_0 = this.of(-1);
    this.TEN = this.of(10);
    this.bnExpModThreshTable_8be2vx$ = new Int32Array([7, 25, 81, 241, 673, 1793, 2147483647]);
    this.zeros_0 = Kotlin.newArray(64, null);
    this.zeros_0[63] = '000000000000000000000000000000000000000000000000000000000000000';
    for (var i_1 = 0; i_1 <= 62; i_1++) {
      this.zeros_0[i_1] = ensureNotNull(this.zeros_0[63]).substring(0, i_1);
    }
    this.digitsPerLong_0 = new Int32Array([0, 0, 62, 39, 31, 27, 24, 22, 20, 19, 18, 18, 17, 17, 16, 16, 15, 15, 15, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12]);
    this.longRadix_0 = [null, null, this.ofLong(L4611686018427387904), this.ofLong(L4052555153018976267), this.ofLong(L4611686018427387904), this.ofLong(L7450580596923828125), this.ofLong(L4738381338321616896), this.ofLong(L3909821048582988049), this.ofLong(L1152921504606846976), this.ofLong(L1350851717672992089), this.ofLong(L1000000000000000000), this.ofLong(L5559917313492231481), this.ofLong(L2218611106740436992), this.ofLong(L8650415919381337933), this.ofLong(L2177953337809371136), this.ofLong(L6568408355712890625), this.ofLong(L1152921504606846976), this.ofLong(L2862423051509815793), this.ofLong(L6746640616477458432), this.ofLong(L799006685782884121), this.ofLong(L1638400000000000000), this.ofLong(L3243919932521508681), this.ofLong(L6221821273427820544), this.ofLong(L504036361936467383), this.ofLong(L876488338465357824), this.ofLong(L1490116119384765625), this.ofLong(L2481152873203736576), this.ofLong(L4052555153018976267), this.ofLong(L6502111422497947648), this.ofLong(L353814783205469041), this.ofLong(L531441000000000000), this.ofLong(L787662783788549761), this.ofLong(L1152921504606846976), this.ofLong(L1667889514952984961), this.ofLong(L2386420683693101056), this.ofLong(L3379220508056640625), this.ofLong(L4738381338321616896)];
    this.digitsPerInt_0 = new Int32Array([0, 0, 30, 19, 15, 13, 11, 11, 10, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5]);
    this.intRadix_0 = new Int32Array([0, 0, 1073741824, 1162261467, 1073741824, 1220703125, 362797056, 1977326743, 1073741824, 387420489, 1000000000, 214358881, 429981696, 815730721, 1475789056, 170859375, 268435456, 410338673, 612220032, 893871739, 1280000000, 1801088541, 113379904, 148035889, 191102976, 244140625, 308915776, 387420489, 481890304, 594823321, 729000000, 887503681, 1073741824, 1291467969, 1544804416, 1838265625, 60466176]);
  }
  BigInteger$Companion.prototype.destructiveMulAdd_0 = function (x, y, z) {
    var ylong = Kotlin.Long.fromInt(y).and(this.LONG_MASK);
    var zlong = Kotlin.Long.fromInt(z).and(this.LONG_MASK);
    var len = x.length;
    var product = L0;
    var carry = L0;
    for (var i = len - 1 | 0; i >= 0; i--) {
      product = ylong.multiply(Kotlin.Long.fromInt(x[i]).and(this.LONG_MASK)).add(carry);
      x[i] = product.toInt();
      carry = product.shiftRightUnsigned(32);
    }
    var sum = Kotlin.Long.fromInt(x[len - 1 | 0]).and(this.LONG_MASK).add(zlong);
    x[len - 1 | 0] = sum.toInt();
    carry = sum.shiftRightUnsigned(32);
    for (var i_0 = len - 2 | 0; i_0 >= 0; i_0--) {
      sum = Kotlin.Long.fromInt(x[i_0]).and(this.LONG_MASK).add(carry);
      x[i_0] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
  };
  BigInteger$Companion.prototype.randomBits_0 = function (numBits, rnd) {
    if (numBits < 0)
      throw IllegalArgumentException_init('numBits must be non-negative');
    var numBytes = Kotlin.Long.fromInt(numBits).add(Kotlin.Long.fromInt(7)).div(Kotlin.Long.fromInt(8)).toInt();
    var randomBits = new Int8Array(numBytes);
    if (numBytes > 0) {
      rnd.nextBytes_fqrh44$(randomBits);
      var excessBits = (8 * numBytes | 0) - numBits | 0;
      randomBits[0] = toByte(randomBits[0] & toByte((1 << 8 - excessBits) - 1 | 0));
    }return randomBits;
  };
  BigInteger$Companion.prototype.probablePrime_dixwej$ = function (bitLength, rnd) {
    if (bitLength < 2)
      throw new ArithmeticException('bitLength < 2');
    return bitLength < 95 ? this.smallPrime_0(bitLength, 100, rnd) : this.largePrime_0(bitLength, 100, rnd);
  };
  BigInteger$Companion.prototype.smallPrime_0 = function (bitLength, certainty, rnd) {
    var magLen = bitLength + 31 >>> 5;
    var temp = new Int32Array(magLen);
    var highBit = 1 << (bitLength + 31 & 31);
    var highMask = (highBit << 1) - 1 | 0;
    while (true) {
      for (var i = 0; i < magLen; i++)
        temp[i] = rnd.nextInt();
      temp[0] = temp[0] & highMask | highBit;
      if (bitLength > 2)
        temp[magLen - 1 | 0] = temp[magLen - 1 | 0] | 1;
      var p = BigInteger_init_7(temp, 1);
      if (bitLength > 6) {
        var r = p.reminder(this.SMALL_PRIME_PRODUCT_0).toLong();
        if (equals(r.modulo(Kotlin.Long.fromInt(3)), L0) || equals(r.modulo(Kotlin.Long.fromInt(5)), L0) || equals(r.modulo(Kotlin.Long.fromInt(7)), L0) || equals(r.modulo(Kotlin.Long.fromInt(11)), L0) || equals(r.modulo(Kotlin.Long.fromInt(13)), L0) || equals(r.modulo(Kotlin.Long.fromInt(17)), L0) || equals(r.modulo(Kotlin.Long.fromInt(19)), L0) || equals(r.modulo(Kotlin.Long.fromInt(23)), L0) || equals(r.modulo(Kotlin.Long.fromInt(29)), L0) || equals(r.modulo(Kotlin.Long.fromInt(31)), L0) || equals(r.modulo(Kotlin.Long.fromInt(37)), L0) || equals(r.modulo(Kotlin.Long.fromInt(41)), L0))
          continue;
      }if (bitLength < 4)
        return p;
      if (p.primeToCertainty_wrv3ht$(certainty, rnd))
        return p;
    }
  };
  BigInteger$Companion.prototype.largePrime_0 = function (bitLength, certainty, rnd) {
    var p;
    p = BigInteger_init_5(bitLength, rnd).setBit(bitLength - 1 | 0);
    p._mag_8be2vx$[p._mag_8be2vx$.length - 1 | 0] = p._mag_8be2vx$[p._mag_8be2vx$.length - 1 | 0] & -2;
    var searchLen = this.getPrimeSearchLen_0(bitLength);
    var searchSieve = BitSieve_init_0(p, searchLen);
    var candidate = searchSieve.retrieve_v75eud$(p, certainty, rnd);
    while (candidate == null || candidate.bitLength !== bitLength) {
      p = p.plus(this.ofLong(Kotlin.Long.fromInt(2 * searchLen | 0)));
      if (p.bitLength !== bitLength)
        p = BigInteger_init_5(bitLength, rnd).setBit(bitLength - 1 | 0);
      p._mag_8be2vx$[p._mag_8be2vx$.length - 1 | 0] = p._mag_8be2vx$[p._mag_8be2vx$.length - 1 | 0] & -2;
      searchSieve = BitSieve_init_0(p, searchLen);
      candidate = searchSieve.retrieve_v75eud$(p, certainty, rnd);
    }
    return candidate;
  };
  BigInteger$Companion.prototype.getPrimeSearchLen_0 = function (bitLength) {
    if (bitLength > 500000001) {
      throw new ArithmeticException('Prime search implementation restriction on bitLength');
    }return (bitLength / 20 | 0) * 64 | 0;
  };
  BigInteger$Companion.prototype.jacobiSymbol_0 = function (p, n) {
    var p_0 = p;
    if (p_0 === 0)
      return 0;
    var j = 1;
    var u = n._mag_8be2vx$[n._mag_8be2vx$.length - 1 | 0];
    if (p_0 < 0) {
      p_0 = -p_0 | 0;
      var n8 = u & 7;
      if (n8 === 3 || n8 === 7)
        j = -j | 0;
    }while ((p_0 & 3) === 0)
      p_0 = p_0 >> 2;
    if ((p_0 & 1) === 0) {
      p_0 = p_0 >> 1;
      if (((u ^ u >> 1) & 2) !== 0)
        j = -j | 0;
    }if (p_0 === 1)
      return j;
    if ((p_0 & u & 2) !== 0)
      j = -j | 0;
    u = n.rem(this.ofLong(Kotlin.Long.fromInt(p_0))).toInt();
    while (u !== 0) {
      while ((u & 3) === 0)
        u = u >> 2;
      if ((u & 1) === 0) {
        u = u >> 1;
        if (((p_0 ^ p_0 >> 1) & 2) !== 0)
          j = -j | 0;
      }if (u === 1)
        return j;
      if (!(u < p_0)) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init(message.toString());
      }var t = u;
      u = p_0;
      p_0 = t;
      if ((u & p_0 & 2) !== 0)
        j = -j | 0;
      u = u % p_0;
    }
    return 0;
  };
  BigInteger$Companion.prototype.lucasLehmerSequence_0 = function (z, k, n) {
    var d = this.ofLong(Kotlin.Long.fromInt(z));
    var u = this.ONE;
    var u2;
    var v = this.ONE;
    var v2;
    for (var i = k.bitLength - 2 | 0; i >= 0; i--) {
      u2 = u.times(v).rem(n);
      v2 = v.square_0().plus(d.times(u.square_0())).rem(n);
      if (v2.testBit(0))
        v2 = v2.minus(n);
      v2 = v2.shr(1);
      u = u2;
      v = v2;
      if (k.testBit(i)) {
        u2 = u.plus(v).rem(n);
        if (u2.testBit(0))
          u2 = u2.minus(n);
        u2 = u2.shr(1);
        v2 = v.plus(d.times(u)).rem(n);
        if (v2.testBit(0))
          v2 = v2.minus(n);
        v2 = v2.shr(1);
        u = u2;
        v = v2;
      }}
    return u;
  };
  BigInteger$Companion.prototype.reportOverflow_0 = function () {
    throw new ArithmeticException('BigInteger would overflow supported range');
  };
  BigInteger$Companion.prototype.ofLong = function (val) {
    var tmp$, tmp$_0;
    if (equals(val, L0))
      return this.ZERO;
    if (contains(new IntRange(1, this.MAX_CONSTANT_0), val)) {
      tmp$ = this.posConst_0[val.toInt()];
      if (tmp$ == null) {
        throw IllegalStateException_init();
      }return tmp$;
    } else if (val.toNumber() < 0 && val.toNumber() >= (-this.MAX_CONSTANT_0 | 0)) {
      tmp$_0 = this.negConst_0[val.unaryMinus().toInt()];
      if (tmp$_0 == null) {
        throw IllegalStateException_init();
      }return tmp$_0;
    }return BigInteger_init_9(val);
  };
  BigInteger$Companion.prototype.of = function (value) {
    return this.ofLong(Kotlin.Long.fromInt(value));
  };
  BigInteger$Companion.prototype.getRadix_0 = function ($receiver) {
    var tmp$;
    if (contains_0($receiver, '0B', true))
      tmp$ = new Pair(2, replaceFirst(replaceFirst($receiver, '0B', ''), '0b', ''));
    else if (contains_0($receiver, '0O', true))
      tmp$ = new Pair(8, replaceFirst(replaceFirst($receiver, '0O', ''), '0o', ''));
    else if (contains_0($receiver, '0X', true))
      tmp$ = new Pair(16, replaceFirst(replaceFirst($receiver, '0X', ''), '0x', ''));
    else
      tmp$ = new Pair(10, $receiver);
    return tmp$;
  };
  BigInteger$Companion.prototype.parse = function (value) {
    var radixed = this.getRadix_0(value);
    return BigInteger_init_3(radixed.second, radixed.first);
  };
  BigInteger$Companion.prototype.parseWithRadix = function (value, radix) {
    return BigInteger_init_3(value, radix);
  };
  BigInteger$Companion.prototype.ofIntArray = function (val) {
    return val[0] > 0 ? BigInteger_init_7(val, 1) : BigInteger_init_0(val);
  };
  BigInteger$Companion.prototype.sum_1 = function (x, val) {
    var sum = L0;
    var xIndex = x.length;
    var result;
    var highWord = val.shiftRightUnsigned(32).toInt();
    if (highWord === 0) {
      result = new Int32Array(xIndex);
      sum = Kotlin.Long.fromInt(x[xIndex = xIndex - 1 | 0, xIndex]).and(this.LONG_MASK).add(val);
      result[xIndex] = sum.toInt();
    } else {
      if (xIndex === 1) {
        result = new Int32Array(2);
        sum = val.add(Kotlin.Long.fromInt(x[0]).and(this.LONG_MASK));
        result[1] = sum.toInt();
        result[0] = sum.shiftRightUnsigned(32).toInt();
        return result;
      } else {
        result = new Int32Array(xIndex);
        sum = Kotlin.Long.fromInt(x[xIndex = xIndex - 1 | 0, xIndex]).and(this.LONG_MASK).add(val.and(this.LONG_MASK));
        result[xIndex] = sum.toInt();
        sum = Kotlin.Long.fromInt(x[xIndex = xIndex - 1 | 0, xIndex]).and(this.LONG_MASK).add(Kotlin.Long.fromInt(highWord).and(this.LONG_MASK)).add(sum.shiftRightUnsigned(32));
        result[xIndex] = sum.toInt();
      }
    }
    var carry = !equals(sum.shiftRightUnsigned(32), L0);
    while (xIndex > 0 && carry) {
      result[xIndex - 1 | 0] = x[xIndex] + 1 | 0;
      carry = result[xIndex = xIndex - 1 | 0, xIndex] === 0;
    }
    while (xIndex > 0)
      result[xIndex = xIndex - 1 | 0, xIndex] = x[xIndex];
    if (carry) {
      var bigger = new Int32Array(result.length + 1 | 0);
      arrayCopy_0(result, 0, bigger, 1, result.length);
      bigger[0] = 1;
      return bigger;
    }return result;
  };
  BigInteger$Companion.prototype.sum_0 = function (x, y) {
    var x_0 = x;
    var y_0 = y;
    if (x_0.length < y_0.length) {
      var tmp = x_0;
      x_0 = y_0;
      y_0 = tmp;
    }var xIndex = x_0.length;
    var yIndex = y_0.length;
    var result = new Int32Array(xIndex);
    var sum = L0;
    if (yIndex === 1) {
      xIndex = xIndex - 1 | 0;
      sum = Kotlin.Long.fromInt(x_0[xIndex]).and(this.LONG_MASK).add(Kotlin.Long.fromInt(y_0[0]).and(this.LONG_MASK));
      result[xIndex] = sum.toInt();
    } else {
      while (yIndex > 0) {
        sum = Kotlin.Long.fromInt(x_0[xIndex = xIndex - 1 | 0, xIndex]).and(this.LONG_MASK).add(Kotlin.Long.fromInt(y_0[yIndex = yIndex - 1 | 0, yIndex]).and(this.LONG_MASK)).add(sum.shiftRightUnsigned(32));
        result[xIndex] = sum.toInt();
      }
    }
    var carry = !equals(sum.shiftRightUnsigned(32), L0);
    while (xIndex > 0 && carry) {
      result[xIndex = xIndex - 1 | 0, xIndex] = x_0[xIndex] + 1 | 0;
      carry = result[xIndex] === 0;
    }
    while (xIndex > 0)
      result[xIndex = xIndex - 1 | 0, xIndex] = x_0[xIndex];
    if (carry) {
      var bigger = new Int32Array(result.length + 1 | 0);
      arrayCopy_0(result, 0, bigger, 1, result.length);
      bigger[0] = 1;
      return bigger;
    }return result;
  };
  BigInteger$Companion.prototype.subtract_2 = function (val, little) {
    var highWord = val.shiftRightUnsigned(32).toInt();
    if (highWord === 0) {
      var result = new Int32Array(1);
      result[0] = val.subtract(Kotlin.Long.fromInt(little[0]).and(this.LONG_MASK)).toInt();
      return result;
    } else {
      var result_0 = new Int32Array(2);
      if (little.length === 1) {
        var difference = Kotlin.Long.fromInt(val.toInt()).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(little[0]).and(this.LONG_MASK));
        result_0[1] = difference.toInt();
        var borrow = !equals(difference.shiftRight(32), L0);
        if (borrow) {
          result_0[0] = highWord - 1 | 0;
        } else {
          result_0[0] = highWord;
        }
        return result_0;
      } else {
        var difference_0 = Kotlin.Long.fromInt(val.toInt()).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(little[1]).and(this.LONG_MASK));
        result_0[1] = difference_0.toInt();
        difference_0 = Kotlin.Long.fromInt(highWord).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(little[0]).and(this.LONG_MASK)).add(difference_0.shiftRight(32));
        result_0[0] = difference_0.toInt();
        return result_0;
      }
    }
  };
  BigInteger$Companion.prototype.subtract_1 = function (big, val) {
    var highWord = val.shiftRightUnsigned(32).toInt();
    var bigIndex = big.length;
    var result = new Int32Array(bigIndex);
    var difference = L0;
    if (highWord === 0) {
      difference = Kotlin.Long.fromInt(big[bigIndex = bigIndex - 1 | 0, bigIndex]).and(this.LONG_MASK).subtract(val);
      result[bigIndex] = difference.toInt();
    } else {
      difference = Kotlin.Long.fromInt(big[bigIndex = bigIndex - 1 | 0, bigIndex]).and(this.LONG_MASK).subtract(val.and(this.LONG_MASK));
      result[bigIndex] = difference.toInt();
      difference = Kotlin.Long.fromInt(big[bigIndex = bigIndex - 1 | 0, bigIndex]).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(highWord).and(this.LONG_MASK)).add(difference.shiftRight(32));
      result[bigIndex] = difference.toInt();
    }
    var borrow = !equals(difference.shiftRight(32), L0);
    while (bigIndex > 0 && borrow) {
      result[bigIndex = bigIndex - 1 | 0, bigIndex] = big[bigIndex] - 1 | 0;
      borrow = result[bigIndex] === -1;
    }
    while (bigIndex > 0)
      result[bigIndex = bigIndex - 1 | 0, bigIndex] = big[bigIndex];
    return result;
  };
  BigInteger$Companion.prototype.subtract_0 = function (big, little) {
    var bigIndex = big.length;
    var result = new Int32Array(bigIndex);
    var littleIndex = little.length;
    var difference = L0;
    while (littleIndex > 0) {
      difference = Kotlin.Long.fromInt(big[bigIndex = bigIndex - 1 | 0, bigIndex]).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(little[littleIndex = littleIndex - 1 | 0, littleIndex]).and(this.LONG_MASK)).add(difference.shiftRight(32));
      result[bigIndex] = difference.toInt();
    }
    var borrow = !equals(difference.shiftRight(32), L0);
    while (bigIndex > 0 && borrow) {
      result[bigIndex = bigIndex - 1 | 0, bigIndex] = big[bigIndex] - 1 | 0;
      borrow = result[bigIndex] === -1;
    }
    while (bigIndex > 0)
      result[bigIndex = bigIndex - 1 | 0, bigIndex] = big[bigIndex];
    return result;
  };
  BigInteger$Companion.prototype.multiplyByInt_0 = function (x, y, sign) {
    var tmp$;
    if (bitCount(y) === 1) {
      return BigInteger_init_7(this.shl_0(x, numberOfTrailingZeros(y)), sign);
    }var xlen = x.length;
    var rmag = new Int32Array(xlen + 1 | 0);
    var carry = L0;
    var yl = Kotlin.Long.fromInt(y).and(this.LONG_MASK);
    var rstart = rmag.length - 1 | 0;
    for (var i = xlen - 1 | 0; i >= 0; i--) {
      var product = Kotlin.Long.fromInt(x[i]).and(this.LONG_MASK).multiply(yl).add(carry);
      rmag[tmp$ = rstart, rstart = tmp$ - 1 | 0, tmp$] = product.toInt();
      carry = product.shiftRightUnsigned(32);
    }
    if (equals(carry, L0)) {
      rmag = copyOfRange(rmag, 1, rmag.length);
    } else {
      rmag[rstart] = carry.toInt();
    }
    return BigInteger_init_7(rmag, sign);
  };
  BigInteger$Companion.prototype.multiplyToLen_0 = function (x, xlen, y, ylen, z) {
    this.multiplyToLenCheck_0(x, xlen);
    this.multiplyToLenCheck_0(y, ylen);
    return this.implMultiplyToLen_0(x, xlen, y, ylen, z);
  };
  BigInteger$Companion.prototype.implMultiplyToLen_0 = function (x, xlen, y, ylen, z) {
    var z_0 = {v: z};
    var xstart = xlen - 1 | 0;
    var ystart = ylen - 1 | 0;
    if (z_0.v == null || z_0.v.length < (xlen + ylen | 0))
      z_0.v = new Int32Array(xlen + ylen | 0);
    var carry = {v: L0};
    var j = ystart;
    var k = ystart + 1 + xstart | 0;
    while (j >= 0) {
      var product = Kotlin.Long.fromInt(y[j]).and(this.LONG_MASK).multiply(Kotlin.Long.fromInt(x[xstart]).and(this.LONG_MASK)).add(carry.v);
      z_0.v[k] = product.toInt();
      carry.v = product.shiftRightUnsigned(32);
      j = j - 1 | 0;
      k = k - 1 | 0;
    }
    z_0.v[xstart] = carry.v.toInt();
    for (var i = xstart - 1 | 0; i >= 0; i--) {
      carry.v = L0;
      var j_0 = ystart;
      var k_0 = ystart + 1 + i | 0;
      while (j_0 >= 0) {
        var product_0 = Kotlin.Long.fromInt(y[j_0]).and(this.LONG_MASK).multiply(Kotlin.Long.fromInt(x[i]).and(this.LONG_MASK)).add(Kotlin.Long.fromInt(z_0.v[k_0]).and(this.LONG_MASK)).add(carry.v);
        z_0.v[k_0] = product_0.toInt();
        carry.v = product_0.shiftRightUnsigned(32);
        j_0 = j_0 - 1 | 0;
        k_0 = k_0 - 1 | 0;
      }
      z_0.v[i] = carry.v.toInt();
    }
    return z_0.v;
  };
  BigInteger$Companion.prototype.multiplyToLenCheck_0 = function (array, length) {
    if (length <= 0) {
      return;
    }if (length > array.length) {
      throw new IndexOutOfBoundsException((length - 1 | 0).toString());
    }};
  BigInteger$Companion.prototype.multiplyKaratsuba_0 = function (x, y) {
    var tmp$;
    var xlen = x._mag_8be2vx$.length;
    var ylen = y._mag_8be2vx$.length;
    var half = (Math_0.max(xlen, ylen) + 1 | 0) / 2 | 0;
    var xl = x.getLower_0(half);
    var xh = x.getUpper_0(half);
    var yl = y.getLower_0(half);
    var yh = y.getUpper_0(half);
    var p1 = xh.times(yh);
    var p2 = xl.times(yl);
    var p3 = xh.plus(xl).times(yh.plus(yl));
    var result = p1.shl(32 * half | 0).plus(p3.minus(p1).minus(p2)).shl(32 * half | 0).plus(p2);
    if (x._signum_8be2vx$ !== y._signum_8be2vx$) {
      tmp$ = result.unaryMinus();
    } else {
      tmp$ = result;
    }
    return tmp$;
  };
  BigInteger$Companion.prototype.multiplyToomCook3_0 = function (a, b) {
    var tmp$;
    var alen = a._mag_8be2vx$.length;
    var blen = b._mag_8be2vx$.length;
    var largest = Math_0.max(alen, blen);
    var k = (largest + 2 | 0) / 3 | 0;
    var r = largest - (2 * k | 0) | 0;
    var a0;
    var a1;
    var a2;
    var b0;
    var b1;
    var b2;
    a2 = a.getToomSlice_0(k, r, 0, largest);
    a1 = a.getToomSlice_0(k, r, 1, largest);
    a0 = a.getToomSlice_0(k, r, 2, largest);
    b2 = b.getToomSlice_0(k, r, 0, largest);
    b1 = b.getToomSlice_0(k, r, 1, largest);
    b0 = b.getToomSlice_0(k, r, 2, largest);
    var v0;
    var v1;
    var v2;
    var vm1;
    var vinf;
    var t1;
    var t2;
    var tm1;
    var da1;
    var db1;
    v0 = a0.times(b0);
    da1 = a2.plus(a0);
    db1 = b2.plus(b0);
    vm1 = da1.minus(a1).times(db1.minus(b1));
    da1 = da1.plus(a1);
    db1 = db1.plus(b1);
    v1 = da1.times(db1);
    v2 = da1.plus(a2).shl(1).minus(a0).times(db1.plus(b2).shl(1).minus(b0));
    vinf = a2.times(b2);
    t2 = v2.minus(vm1).exactDivideBy3_0();
    tm1 = v1.minus(vm1).shr(1);
    t1 = v1.minus(v0);
    t2 = t2.minus(t1).shr(1);
    t1 = t1.minus(tm1).minus(vinf);
    t2 = t2.minus(vinf.shl(1));
    tm1 = tm1.minus(t2);
    var ss = k * 32 | 0;
    var result = vinf.shl(ss).plus(t2).shl(ss).plus(t1).shl(ss).plus(tm1).shl(ss).plus(v0);
    if (a._signum_8be2vx$ !== b._signum_8be2vx$) {
      tmp$ = result.unaryMinus();
    } else {
      tmp$ = result;
    }
    return tmp$;
  };
  BigInteger$Companion.prototype.squareToLen_0 = function (x, len, z) {
    var z_0 = z;
    var zlen = len << 1;
    if (z_0 == null || z_0.length < zlen)
      z_0 = new Int32Array(zlen);
    this.implSquareToLenChecks_0(x, len, z_0, zlen);
    return this.implSquareToLen_0(x, len, z_0, zlen);
  };
  BigInteger$Companion.prototype.implSquareToLenChecks_0 = function (x, len, z, zlen) {
    if (len < 1) {
      throw IllegalArgumentException_init('invalid input length: ' + len);
    }if (len > x.length) {
      throw IllegalArgumentException_init('input length out of bound: ' + toString(len) + ' > ' + toString(x.length));
    }if ((len * 2 | 0) > z.length) {
      throw IllegalArgumentException_init('input length out of bound: ' + toString(len * 2 | 0) + ' > ' + toString(z.length));
    }if (zlen < 1) {
      throw IllegalArgumentException_init('invalid input length: ' + zlen);
    }if (zlen > z.length) {
      throw IllegalArgumentException_init('input length out of bound: ' + toString(len) + ' > ' + toString(z.length));
    }};
  BigInteger$Companion.prototype.implSquareToLen_0 = function (x, len, z, zlen) {
    var lastProductLowWord = {v: 0};
    var tmp$, tmp$_0;
    var j = 0;
    var i = 0;
    while (j < len) {
      var piece = Kotlin.Long.fromInt(x[j]).and(this.LONG_MASK);
      var product = piece.multiply(piece);
      z[tmp$ = i, i = tmp$ + 1 | 0, tmp$] = lastProductLowWord.v << 31 | product.shiftRightUnsigned(33).toInt();
      z[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0] = product.shiftRightUnsigned(1).toInt();
      lastProductLowWord.v = product.toInt();
      j = j + 1 | 0;
    }
    var i_0 = len;
    var offset = 1;
    while (i_0 > 0) {
      var t = x[i_0 - 1 | 0];
      t = this.mulAdd_ntl0rt$(z, x, offset, i_0 - 1 | 0, t);
      this.addOne_6z8lro$(z, offset - 1 | 0, i_0, t);
      i_0 = i_0 - 1 | 0;
      offset = offset + 2 | 0;
    }
    this.primitiveLeftShift_dhoe8q$(z, zlen, 1);
    z[zlen - 1 | 0] = z[zlen - 1 | 0] | x[len - 1 | 0] & 1;
    return z;
  };
  BigInteger$Companion.prototype.bitLengthForInt_kcn2v3$ = function (n) {
    return 32 - numberOfLeadingZeros_0(n) | 0;
  };
  BigInteger$Companion.prototype.leftShift_0 = function (a, len, n) {
    var nInts = n >>> 5;
    var nBits = n & 31;
    var bitsInHighWord = this.bitLengthForInt_kcn2v3$(a[0]);
    if (n <= (32 - bitsInHighWord | 0)) {
      this.primitiveLeftShift_dhoe8q$(a, len, nBits);
      return a;
    } else {
      if (nBits <= (32 - bitsInHighWord | 0)) {
        var result = new Int32Array(nInts + len | 0);
        arrayCopy_0(a, 0, result, 0, len);
        this.primitiveLeftShift_dhoe8q$(result, result.length, nBits);
        return result;
      } else {
        var result_0 = new Int32Array(nInts + len + 1 | 0);
        arrayCopy_0(a, 0, result_0, 0, len);
        this.primitiveRightShift_dhoe8q$(result_0, result_0.length, 32 - nBits | 0);
        return result_0;
      }
    }
  };
  BigInteger$Companion.prototype.primitiveRightShift_dhoe8q$ = function (a, len, n) {
    var n2 = 32 - n | 0;
    var i = len - 1 | 0;
    var c = a[i];
    while (i > 0) {
      var b = c;
      c = a[i - 1 | 0];
      a[i] = c << n2 | b >>> n;
      i = i - 1 | 0;
    }
    a[0] = a[0] >>> n;
  };
  BigInteger$Companion.prototype.primitiveLeftShift_dhoe8q$ = function (a, len, n) {
    if (len === 0 || n === 0)
      return;
    var n2 = 32 - n | 0;
    var i = 0;
    var c = a[i];
    var m = i + len - 1 | 0;
    while (i < m) {
      var b = c;
      c = a[i + 1 | 0];
      a[i] = b << n | c >>> n2;
      i = i + 1 | 0;
    }
    a[len - 1 | 0] = a[len - 1 | 0] << n;
  };
  BigInteger$Companion.prototype.bitLength_0 = function (val, len) {
    return len === 0 ? 0 : (len - 1 << 5) + this.bitLengthForInt_kcn2v3$(val[0]) | 0;
  };
  BigInteger$Companion.prototype.montgomeryMultiply_0 = function (a, b, n, len, inv, product) {
    var product_0 = product;
    this.implMontgomeryMultiplyChecks_0(a, b, n, len, product_0);
    if (len > 512) {
      product_0 = this.multiplyToLen_0(a, len, b, len, product_0);
      return this.montReduce_0(product_0, n, len, inv.toInt());
    } else {
      return this.implMontgomeryMultiply_0(a, b, n, len, inv, this.materialize_0(product_0, len));
    }
  };
  BigInteger$Companion.prototype.montgomerySquare_0 = function (a, n, len, inv, product) {
    var product_0 = product;
    this.implMontgomeryMultiplyChecks_0(a, a, n, len, product_0);
    if (len > 512) {
      product_0 = this.squareToLen_0(a, len, product_0);
      return this.montReduce_0(product_0, n, len, inv.toInt());
    } else {
      return this.implMontgomerySquare_0(a, n, len, inv, this.materialize_0(product_0, len));
    }
  };
  BigInteger$Companion.prototype.implMontgomeryMultiplyChecks_0 = function (a, b, n, len, product) {
    if (len % 2 !== 0) {
      throw IllegalArgumentException_init('input array length must be even: ' + len);
    }if (len < 1) {
      throw IllegalArgumentException_init('invalid input length: ' + len);
    }if (len > a.length || len > b.length || len > n.length || (product != null && len > product.length)) {
      throw IllegalArgumentException_init('input array length out of bound: ' + len);
    }};
  BigInteger$Companion.prototype.materialize_0 = function (z, len) {
    var z_0 = z;
    if (z_0 == null || z_0.length < len)
      z_0 = new Int32Array(len);
    return z_0;
  };
  BigInteger$Companion.prototype.implMontgomeryMultiply_0 = function (a, b, n, len, inv, product) {
    var product_0 = product;
    product_0 = this.multiplyToLen_0(a, len, b, len, product_0);
    return this.montReduce_0(product_0, n, len, inv.toInt());
  };
  BigInteger$Companion.prototype.implMontgomerySquare_0 = function (a, n, len, inv, product) {
    var product_0 = product;
    product_0 = this.squareToLen_0(a, len, product_0);
    return this.montReduce_0(product_0, n, len, inv.toInt());
  };
  BigInteger$Companion.prototype.montReduce_0 = function (n, mod, mlen, inv) {
    var c = 0;
    var len = mlen;
    var offset = 0;
    do {
      var nEnd = n[n.length - 1 - offset | 0];
      var carry = this.mulAdd_ntl0rt$(n, mod, offset, mlen, Kotlin.imul(inv, nEnd));
      c = c + this.addOne_6z8lro$(n, offset, mlen, carry) | 0;
      offset = offset + 1 | 0;
    }
     while ((len = len - 1 | 0, len) > 0);
    while (c > 0)
      c = c + this.subN_0(n, mod, mlen) | 0;
    while (this.intArrayCmpToLen_0(n, mod, mlen) >= 0)
      this.subN_0(n, mod, mlen);
    return n;
  };
  BigInteger$Companion.prototype.intArrayCmpToLen_0 = function (arg1, arg2, len) {
    for (var i = 0; i < len; i++) {
      var b1 = Kotlin.Long.fromInt(arg1[i]).and(this.LONG_MASK);
      var b2 = Kotlin.Long.fromInt(arg2[i]).and(this.LONG_MASK);
      if (b1.compareTo_11rb$(b2) < 0)
        return -1;
      if (b1.compareTo_11rb$(b2) > 0)
        return 1;
    }
    return 0;
  };
  BigInteger$Companion.prototype.subN_0 = function (a, b, len) {
    var len_0 = len;
    var sum = L0;
    while ((len_0 = len_0 - 1 | 0, len_0) >= 0) {
      sum = Kotlin.Long.fromInt(a[len_0]).and(this.LONG_MASK).subtract(Kotlin.Long.fromInt(b[len_0]).and(this.LONG_MASK)).add(sum.shiftRight(32));
      a[len_0] = sum.toInt();
    }
    return sum.shiftRight(32).toInt();
  };
  BigInteger$Companion.prototype.mulAdd_ntl0rt$ = function (out, in_0, offset, len, k) {
    this.implMulAddCheck_0(out, in_0, offset, len, k);
    return this.implMulAdd_0(out, in_0, offset, len, k);
  };
  BigInteger$Companion.prototype.implMulAddCheck_0 = function (out, in_0, offset, len, k) {
    if (len > in_0.length) {
      throw IllegalArgumentException_init('input length is out of bound: ' + toString(len) + ' > ' + toString(in_0.length));
    }if (offset < 0) {
      throw IllegalArgumentException_init('input offset is invalid: ' + offset);
    }if (offset > (out.length - 1 | 0)) {
      throw IllegalArgumentException_init('input offset is out of bound: ' + toString(offset) + ' > ' + toString(out.length - 1 | 0));
    }if (len > (out.length - offset | 0)) {
      throw IllegalArgumentException_init('input len is out of bound: ' + toString(len) + ' > ' + toString(out.length - offset | 0));
    }};
  BigInteger$Companion.prototype.implMulAdd_0 = function (out, in_0, offset, len, k) {
    var tmp$;
    var offset_0 = offset;
    var kLong = Kotlin.Long.fromInt(k).and(this.LONG_MASK);
    var carry = L0;
    offset_0 = out.length - offset_0 - 1 | 0;
    for (var j = len - 1 | 0; j >= 0; j--) {
      var product = Kotlin.Long.fromInt(in_0[j]).and(this.LONG_MASK).multiply(kLong).add(Kotlin.Long.fromInt(out[offset_0]).and(this.LONG_MASK)).add(carry);
      out[tmp$ = offset_0, offset_0 = tmp$ - 1 | 0, tmp$] = product.toInt();
      carry = product.shiftRightUnsigned(32);
    }
    return carry.toInt();
  };
  BigInteger$Companion.prototype.addOne_6z8lro$ = function (a, offset, mlen, carry) {
    var offset_0 = offset;
    var mlen_0 = mlen;
    offset_0 = a.length - 1 - mlen_0 - offset_0 | 0;
    var t = Kotlin.Long.fromInt(a[offset_0]).and(this.LONG_MASK).add(Kotlin.Long.fromInt(carry).and(this.LONG_MASK));
    a[offset_0] = t.toInt();
    if (equals(t.shiftRightUnsigned(32), L0))
      return 0;
    while ((mlen_0 = mlen_0 - 1 | 0, mlen_0) >= 0) {
      if ((offset_0 = offset_0 - 1 | 0, offset_0) < 0) {
        return 1;
      } else {
        a[offset_0] = a[offset_0] + 1 | 0;
        if (a[offset_0] !== 0)
          return 0;
      }
    }
    return 1;
  };
  BigInteger$Companion.prototype.shl_0 = function (mag, n) {
    var tmp$, tmp$_0, tmp$_1;
    var nInts = n >>> 5;
    var nBits = n & 31;
    var magLen = mag.length;
    var newMag = null;
    if (nBits === 0) {
      newMag = new Int32Array(magLen + nInts | 0);
      arrayCopy_0(mag, 0, newMag, 0, magLen);
    } else {
      var i = 0;
      var nBits2 = 32 - nBits | 0;
      var highBits = mag[0] >>> nBits2;
      if (highBits !== 0) {
        newMag = new Int32Array(magLen + nInts + 1 | 0);
        newMag[tmp$ = i, i = tmp$ + 1 | 0, tmp$] = highBits;
      } else {
        newMag = new Int32Array(magLen + nInts | 0);
      }
      var j = 0;
      while (j < (magLen - 1 | 0)) {
        newMag[tmp$_1 = i, i = tmp$_1 + 1 | 0, tmp$_1] = mag[tmp$_0 = j, j = tmp$_0 + 1 | 0, tmp$_0] << nBits | mag[j] >>> nBits2;
      }
      newMag[i] = mag[j] << nBits;
    }
    return newMag;
  };
  BigInteger$Companion.prototype.toString_0 = function (u, sb, radix, digits) {
    if (u._mag_8be2vx$.length <= 20) {
      var s = u.smallToString_0(radix);
      if (s.length < digits && sb.length > 0) {
        for (var i = s.length; i < digits; i++) {
          sb.append_s8itvh$(48);
        }
      }sb.append_61zpoe$(s);
      return;
    }var b;
    var n;
    b = u.bitLength;
    var x = b * this.LOG_TWO_0 / this.logCache_0[radix];
    n = numberToInt(round(Math_0.log(x) / this.LOG_TWO_0 - 1.0));
    var v = this.getRadixConversionCache_0(radix, n);
    var results;
    results = u.divideAndRemainder(v);
    var expectedDigits = 1 << n;
    this.toString_0(results[0], sb, radix, digits - expectedDigits | 0);
    this.toString_0(results[1], sb, radix, expectedDigits);
  };
  BigInteger$Companion.prototype.getRadixConversionCache_0 = function (radix, exponent) {
    var cacheLine = this.powerCache_0[radix];
    if (exponent < ensureNotNull(cacheLine).length) {
      return cacheLine[exponent];
    }var oldLength = cacheLine.length;
    var cacheLine2 = copyOf(cacheLine, exponent + 1 | 0);
    for (var i = oldLength; i <= exponent; i++) {
      cacheLine2[i] = ensureNotNull(cacheLine2[i - 1 | 0]).pow(2);
    }
    var pc = this.powerCache_0;
    if (exponent >= ensureNotNull(pc[radix]).length) {
      var $receiver = pc;
      var array = Array_0($receiver.length);
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i_0 = 0; i_0 <= tmp$; i_0++) {
        array[i_0] = $receiver[i_0];
      }
      pc = array;
      pc[radix] = requireNoNulls(cacheLine2);
      this.powerCache_0 = pc;
    }return ensureNotNull(cacheLine2[exponent]);
  };
  BigInteger$Companion.prototype.stripLeadingZeroInts_0 = function (val) {
    var vlen = val.length;
    var keep;
    keep = 0;
    while (keep < vlen && val[keep] === 0) {
      keep = keep + 1 | 0;
    }
    return copyOfRange(val, keep, vlen);
  };
  BigInteger$Companion.prototype.trustedStripLeadingZeroInts_0 = function (val) {
    var vlen = val.length;
    var keep;
    keep = 0;
    while (keep < vlen && val[keep] === 0) {
      keep = keep + 1 | 0;
    }
    return keep === 0 ? val : copyOfRange(val, keep, vlen);
  };
  BigInteger$Companion.prototype.stripLeadingZeroBytes_0 = function (a, off, len) {
    var tmp$, tmp$_0;
    var indexBound = off + len | 0;
    var keep;
    keep = off;
    while (keep < indexBound && a[keep] === 0) {
      keep = keep + 1 | 0;
    }
    var intLength = indexBound - keep + 3 >>> 2;
    var result = new Int32Array(intLength);
    var b = indexBound - 1 | 0;
    for (var i = intLength - 1 | 0; i >= 0; i--) {
      result[i] = a[tmp$ = b, b = tmp$ - 1 | 0, tmp$] & 255;
      var bytesRemaining = b - keep + 1 | 0;
      var bytesToTransfer = Math_0.min(3, bytesRemaining);
      var j = 8;
      while (j <= bytesToTransfer << 3) {
        result[i] = result[i] | (a[tmp$_0 = b, b = tmp$_0 - 1 | 0, tmp$_0] & 255) << j;
        j = j + 8 | 0;
      }
    }
    return result;
  };
  BigInteger$Companion.prototype.makePositive_0 = function (a, off, len) {
    var tmp$, tmp$_0, tmp$_1;
    var keep;
    var k;
    var indexBound = off + len | 0;
    keep = off;
    while (keep < indexBound && a[keep] === -1) {
      keep = keep + 1 | 0;
    }
    k = keep;
    while (k < indexBound && a[k] === 0) {
      k = k + 1 | 0;
    }
    var extraByte = k === indexBound ? 1 : 0;
    var intLength = indexBound - keep + extraByte + 3 >>> 2;
    var result = new Int32Array(intLength);
    var b = indexBound - 1 | 0;
    for (var i = intLength - 1 | 0; i >= 0; i--) {
      result[i] = a[tmp$ = b, b = tmp$ - 1 | 0, tmp$] & 255;
      var b_0 = b - keep + 1 | 0;
      var numBytesToTransfer = Math_0.min(3, b_0);
      if (numBytesToTransfer < 0)
        numBytesToTransfer = 0;
      var j = 8;
      while (j <= (8 * numBytesToTransfer | 0)) {
        result[i] = result[i] | (a[tmp$_0 = b, b = tmp$_0 - 1 | 0, tmp$_0] & 255) << j;
        j = j + 8 | 0;
      }
      var mask = -1 >>> (8 * (3 - numBytesToTransfer | 0) | 0);
      result[i] = ~result[i] & mask;
    }
    tmp$_1 = reversed(get_indices(result)).iterator();
    while (tmp$_1.hasNext()) {
      var i_0 = tmp$_1.next();
      result[i_0] = Kotlin.Long.fromInt(result[i_0]).and(this.LONG_MASK).add(L1).toInt();
      if (result[i_0] !== 0)
        break;
    }
    return result;
  };
  BigInteger$Companion.prototype.makePositive_1 = function (a) {
    var keep;
    var j;
    keep = 0;
    while (keep < a.length && a[keep] === -1) {
      keep = keep + 1 | 0;
    }
    j = keep;
    while (j < a.length && a[j] === 0) {
      j = j + 1 | 0;
    }
    var extraInt = j === a.length ? 1 : 0;
    var result = new Int32Array(a.length - keep + extraInt | 0);
    for (var i = keep; i < a.length; i++)
      result[i - keep + extraInt | 0] = ~a[i];
    var i_0 = result.length - 1 | 0;
    while ((result[i_0] = result[i_0] + 1 | 0, result[i_0]) === 0) {
      i_0 = i_0 - 1 | 0;
    }
    return result;
  };
  BigInteger$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BigInteger$Companion_instance = null;
  function BigInteger$Companion_getInstance() {
    if (BigInteger$Companion_instance === null) {
      new BigInteger$Companion();
    }return BigInteger$Companion_instance;
  }
  BigInteger.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BigInteger',
    interfaces: [Comparable]
  };
  function BigInteger_init(val, off, len, $this) {
    if (off === void 0)
      off = 0;
    if (len === void 0)
      len = val.length;
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    if (val.length === 0) {
      throw new NumberFormatException('Zero length BigInteger');
    } else if (off < 0 || off >= val.length || len < 0 || len > (val.length - off | 0)) {
      throw IndexOutOfBoundsException_init();
    }if (val[off] < 0) {
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().makePositive_0(val, off, len);
      $this._signum_8be2vx$ = -1;
    } else {
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().stripLeadingZeroBytes_0(val, off, len);
      $this._signum_8be2vx$ = $this._mag_8be2vx$.length === 0 ? 0 : 1;
    }
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_0(val, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    if (val.length === 0)
      throw new NumberFormatException('Zero length BigInteger');
    if (val[0] < 0) {
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().makePositive_1(val);
      $this._signum_8be2vx$ = -1;
    } else {
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(val);
      $this._signum_8be2vx$ = $this._mag_8be2vx$.length === 0 ? 0 : 1;
    }
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_1(signum, magnitude, off, len, $this) {
    if (off === void 0)
      off = 0;
    if (len === void 0)
      len = magnitude.length;
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    if (signum < -1 || signum > 1) {
      throw new NumberFormatException('Invalid _signum value');
    } else if (off < 0 || len < 0 || (len > 0 && (off >= magnitude.length || len > (magnitude.length - off | 0)))) {
      throw IndexOutOfBoundsException_init();
    }$this._mag_8be2vx$ = BigInteger$Companion_getInstance().stripLeadingZeroBytes_0(magnitude, off, len);
    if ($this._mag_8be2vx$.length === 0) {
      $this._signum_8be2vx$ = 0;
    } else {
      if (signum === 0)
        throw new NumberFormatException('_signum-magnitude mismatch');
      $this._signum_8be2vx$ = signum;
    }
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_2(signum, magnitude, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    $this._mag_8be2vx$ = BigInteger$Companion_getInstance().stripLeadingZeroInts_0(magnitude);
    if (signum < -1 || signum > 1)
      throw new NumberFormatException('Invalid _signum value');
    if ($this._mag_8be2vx$.length === 0) {
      $this._signum_8be2vx$ = 0;
    } else {
      if (signum === 0)
        throw new NumberFormatException('_signum-magnitude mismatch');
      $this._signum_8be2vx$ = signum;
    }
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_3(val, radix, $this) {
    if (radix === void 0)
      radix = 10;
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    var cursor = 0;
    var numDigits;
    var len = val.length;
    if (radix < 2 || radix > 36)
      throw new NumberFormatException('Radix out of range');
    if (len === 0)
      throw new NumberFormatException('Zero length BigInteger');
    var sign = 1;
    var index1 = lastIndexOf(val, 45);
    var index2 = lastIndexOf(val, 43);
    if (index1 >= 0) {
      if (index1 !== 0 || index2 >= 0) {
        throw new NumberFormatException('Illegal embedded sign character');
      }sign = -1;
      cursor = 1;
    } else if (index2 >= 0) {
      if (index2 !== 0) {
        throw new NumberFormatException('Illegal embedded sign character');
      }cursor = 1;
    }if (cursor === len)
      throw new NumberFormatException('Zero length BigInteger');
    while (cursor < len && toDigit_0(val.charCodeAt(cursor), radix) === 0) {
      cursor = cursor + 1 | 0;
    }
    if (cursor === len) {
      $this._signum_8be2vx$ = 0;
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().ZERO._mag_8be2vx$;
      return $this;
    }numDigits = len - cursor | 0;
    $this._signum_8be2vx$ = sign;
    var numBits = Kotlin.Long.fromInt(numDigits).multiply(BigInteger$Companion_getInstance().bitsPerDigit_0[radix]).shiftRightUnsigned(10).add(Kotlin.Long.fromInt(1));
    if (numBits.add(Kotlin.Long.fromInt(31)).compareTo_11rb$(L4294967296) >= 0) {
      BigInteger$Companion_getInstance().reportOverflow_0();
    }var numWords = numBits.add(Kotlin.Long.fromInt(31)).toInt() >>> 5;
    var magnitude = new Int32Array(numWords);
    var firstGroupLen = numDigits % BigInteger$Companion_getInstance().digitsPerInt_0[radix];
    if (firstGroupLen === 0)
      firstGroupLen = BigInteger$Companion_getInstance().digitsPerInt_0[radix];
    var startIndex = cursor;
    var endIndex = cursor + firstGroupLen | 0;
    var group = val.substring(startIndex, endIndex);
    cursor = cursor + firstGroupLen | 0;
    magnitude[numWords - 1 | 0] = toInt(group, radix);
    if (magnitude[numWords - 1 | 0] < 0)
      throw new NumberFormatException('Illegal digit');
    var superRadix = BigInteger$Companion_getInstance().intRadix_0[radix];
    var groupVal = 0;
    while (cursor < len) {
      var startIndex_0 = cursor;
      var endIndex_0 = cursor + BigInteger$Companion_getInstance().digitsPerInt_0[radix] | 0;
      group = val.substring(startIndex_0, endIndex_0);
      cursor = cursor + BigInteger$Companion_getInstance().digitsPerInt_0[radix] | 0;
      groupVal = toInt(group, radix);
      if (groupVal < 0)
        throw new NumberFormatException('Illegal digit');
      BigInteger$Companion_getInstance().destructiveMulAdd_0(magnitude, superRadix, groupVal);
    }
    $this._mag_8be2vx$ = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(magnitude);
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_4(val, sign, len, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    var cursor = 0;
    var numDigits;
    while (cursor < len && toDigit_0(val[cursor], 10) === 0) {
      cursor = cursor + 1 | 0;
    }
    if (cursor === len) {
      $this._signum_8be2vx$ = 0;
      $this._mag_8be2vx$ = BigInteger$Companion_getInstance().ZERO._mag_8be2vx$;
      return $this;
    }numDigits = len - cursor | 0;
    $this._signum_8be2vx$ = sign;
    var numWords;
    if (len < 10) {
      numWords = 1;
    } else {
      var numBits = Kotlin.Long.fromInt(numDigits).multiply(BigInteger$Companion_getInstance().bitsPerDigit_0[10]).shiftRightUnsigned(10).add(Kotlin.Long.fromInt(1));
      if (numBits.add(Kotlin.Long.fromInt(31)).compareTo_11rb$(L4294967296) >= 0) {
        BigInteger$Companion_getInstance().reportOverflow_0();
      }numWords = numBits.add(Kotlin.Long.fromInt(31)).toInt() >>> 5;
    }
    var magnitude = new Int32Array(numWords);
    var firstGroupLen = numDigits % BigInteger$Companion_getInstance().digitsPerInt_0[10];
    if (firstGroupLen === 0)
      firstGroupLen = BigInteger$Companion_getInstance().digitsPerInt_0[10];
    magnitude[numWords - 1 | 0] = $this.parseInt_0(val, cursor, cursor + firstGroupLen | 0);
    cursor = cursor + firstGroupLen | 0;
    while (cursor < len) {
      var groupVal = $this.parseInt_0(val, cursor, cursor + BigInteger$Companion_getInstance().digitsPerInt_0[10] | 0);
      cursor = cursor + BigInteger$Companion_getInstance().digitsPerInt_0[10] | 0;
      BigInteger$Companion_getInstance().destructiveMulAdd_0(magnitude, BigInteger$Companion_getInstance().intRadix_0[10], groupVal);
    }
    $this._mag_8be2vx$ = BigInteger$Companion_getInstance().trustedStripLeadingZeroInts_0(magnitude);
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_5(numBits, rnd, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger_init_1(1, BigInteger$Companion_getInstance().randomBits_0(numBits, rnd), void 0, void 0, $this);
    return $this;
  }
  function BigInteger_init_6(bitLength, certainty, rnd, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    var prime;
    if (bitLength < 2)
      throw new ArithmeticException('bitLength < 2');
    prime = bitLength < 95 ? BigInteger$Companion_getInstance().smallPrime_0(bitLength, certainty, rnd) : BigInteger$Companion_getInstance().largePrime_0(bitLength, certainty, rnd);
    $this._signum_8be2vx$ = 1;
    $this._mag_8be2vx$ = prime._mag_8be2vx$;
    return $this;
  }
  function BigInteger_init_7(magnitude, signum, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    $this._signum_8be2vx$ = magnitude.length === 0 ? 0 : signum;
    $this._mag_8be2vx$ = magnitude;
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_8(magnitude, signum, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    $this._signum_8be2vx$ = magnitude.length === 0 ? 0 : signum;
    $this._mag_8be2vx$ = BigInteger$Companion_getInstance().stripLeadingZeroBytes_0(magnitude, 0, magnitude.length);
    if ($this._mag_8be2vx$.length >= 67108864) {
      $this.checkRange_0();
    }return $this;
  }
  function BigInteger_init_9(val, $this) {
    $this = $this || Object.create(BigInteger.prototype);
    BigInteger.call($this);
    var val_0 = val;
    if (val_0.toNumber() < 0) {
      val_0 = val_0.unaryMinus();
      $this._signum_8be2vx$ = -1;
    } else {
      $this._signum_8be2vx$ = 1;
    }
    var highWord = val_0.shiftRightUnsigned(32).toInt();
    if (highWord === 0) {
      $this._mag_8be2vx$ = new Int32Array(1);
      $this._mag_8be2vx$[0] = val_0.toInt();
    } else {
      $this._mag_8be2vx$ = new Int32Array(2);
      $this._mag_8be2vx$[0] = highWord;
      $this._mag_8be2vx$[1] = val_0.toInt();
    }
    return $this;
  }
  function BitSieve() {
    BitSieve$Companion_getInstance();
    this.bits_0 = null;
    this.length_0 = 0;
  }
  BitSieve.prototype.get_0 = function (bitIndex) {
    var unitIndex = BitSieve$Companion_getInstance().unitIndex_0(bitIndex);
    return !equals(ensureNotNull(this.bits_0)[unitIndex].and(BitSieve$Companion_getInstance().bit_0(bitIndex)), L0);
  };
  BitSieve.prototype.set_0 = function (bitIndex) {
    var unitIndex = BitSieve$Companion_getInstance().unitIndex_0(bitIndex);
    ensureNotNull(this.bits_0)[unitIndex] = ensureNotNull(this.bits_0)[unitIndex].or(BitSieve$Companion_getInstance().bit_0(bitIndex));
  };
  BitSieve.prototype.sieveSearch_0 = function (limit, start) {
    if (start >= limit)
      return -1;
    var index = start;
    do {
      if (!this.get_0(index))
        return index;
      index = index + 1 | 0;
    }
     while (index < (limit - 1 | 0));
    return -1;
  };
  BitSieve.prototype.sieveSingle_0 = function (limit, start, step) {
    var start_0 = start;
    while (start_0 < limit) {
      this.set_0(start_0);
      start_0 = start_0 + step | 0;
    }
  };
  BitSieve.prototype.retrieve_v75eud$ = function (initValue, certainty, random) {
    var tmp$;
    var offset = 1;
    tmp$ = ensureNotNull(this.bits_0);
    for (var i = 0; i !== tmp$.length; ++i) {
      var nextLong = ensureNotNull(this.bits_0)[i].inv();
      for (var j = 0; j <= 63; j++) {
        if (equals(nextLong.and(L1), L1)) {
          var candidate = initValue.plus(BigInteger$Companion_getInstance().ofLong(Kotlin.Long.fromInt(offset)));
          if (candidate.primeToCertainty_wrv3ht$(certainty, random))
            return candidate;
        }nextLong = nextLong.shiftRightUnsigned(1);
        offset = offset + 2 | 0;
      }
    }
    return null;
  };
  function BitSieve$Companion() {
    BitSieve$Companion_instance = this;
    this.smallSieve_0 = BitSieve_init();
  }
  BitSieve$Companion.prototype.unitIndex_0 = function (bitIndex) {
    return bitIndex >>> 6;
  };
  BitSieve$Companion.prototype.bit_0 = function (bitIndex) {
    return L1.shiftLeft(bitIndex & 63);
  };
  BitSieve$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BitSieve$Companion_instance = null;
  function BitSieve$Companion_getInstance() {
    if (BitSieve$Companion_instance === null) {
      new BitSieve$Companion();
    }return BitSieve$Companion_instance;
  }
  BitSieve.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitSieve',
    interfaces: []
  };
  function BitSieve_init($this) {
    $this = $this || Object.create(BitSieve.prototype);
    BitSieve.call($this);
    $this.length_0 = 9600;
    $this.bits_0 = Kotlin.longArray(BitSieve$Companion_getInstance().unitIndex_0($this.length_0 - 1 | 0) + 1 | 0);
    $this.set_0(0);
    var nextIndex = 1;
    var nextPrime = 3;
    do {
      $this.sieveSingle_0($this.length_0, nextIndex + nextPrime | 0, nextPrime);
      nextIndex = $this.sieveSearch_0($this.length_0, nextIndex + 1 | 0);
      nextPrime = (2 * nextIndex | 0) + 1 | 0;
    }
     while (nextIndex > 0 && nextPrime < $this.length_0);
    return $this;
  }
  function BitSieve_init_0(base, searchLen, $this) {
    $this = $this || Object.create(BitSieve.prototype);
    BitSieve.call($this);
    $this.bits_0 = Kotlin.longArray(BitSieve$Companion_getInstance().unitIndex_0(searchLen - 1 | 0) + 1 | 0);
    $this.length_0 = searchLen;
    var start = 0;
    var step = BitSieve$Companion_getInstance().smallSieve_0.sieveSearch_0(BitSieve$Companion_getInstance().smallSieve_0.length_0, start);
    var convertedStep = (step * 2 | 0) + 1 | 0;
    var b = MutableBigInteger_init_2(base);
    var q = MutableBigInteger_init();
    do {
      start = b.divideOneWord_nkkrr0$(convertedStep, q);
      start = convertedStep - start | 0;
      if (start % 2 === 0)
        start = start + convertedStep | 0;
      $this.sieveSingle_0(searchLen, (start - 1 | 0) / 2 | 0, convertedStep);
      step = BitSieve$Companion_getInstance().smallSieve_0.sieveSearch_0(BitSieve$Companion_getInstance().smallSieve_0.length_0, step + 1 | 0);
      convertedStep = (step * 2 | 0) + 1 | 0;
    }
     while (step > 0);
    return $this;
  }
  function DoubleConsts() {
    DoubleConsts_instance = this;
    this.SIGNIFICAND_WIDTH = 53;
    this.EXP_BIAS = 1023;
    this.SIGN_BIT_MASK = Long$Companion$MIN_VALUE;
    this.EXP_BIT_MASK = L9218868437227405312;
    this.SIGNIF_BIT_MASK = L4503599627370495;
  }
  DoubleConsts.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'DoubleConsts',
    interfaces: []
  };
  var DoubleConsts_instance = null;
  function DoubleConsts_getInstance() {
    if (DoubleConsts_instance === null) {
      new DoubleConsts();
    }return DoubleConsts_instance;
  }
  function FloatConsts() {
    FloatConsts_instance = this;
    this.SIGNIFICAND_WIDTH = 24;
    this.EXP_BIAS = 127;
    this.SIGN_BIT_MASK = -2147483648;
    this.EXP_BIT_MASK = 2139095040;
    this.SIGNIF_BIT_MASK = 8388607;
  }
  FloatConsts.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'FloatConsts',
    interfaces: []
  };
  var FloatConsts_instance = null;
  function FloatConsts_getInstance() {
    if (FloatConsts_instance === null) {
      new FloatConsts();
    }return FloatConsts_instance;
  }
  function MathContext(precision, roundingMode) {
    MathContext$Companion_getInstance();
    if (precision === void 0)
      precision = 9;
    if (roundingMode === void 0)
      roundingMode = RoundingMode$HALF_UP_getInstance();
    this.precision = precision;
    this.roundingMode = roundingMode;
    if (!(this.precision >= 0)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }}
  function MathContext$Companion() {
    MathContext$Companion_instance = this;
    this.UNLIMITED = new MathContext(0, RoundingMode$HALF_UP_getInstance());
    this.DECIMAL32 = new MathContext(7, RoundingMode$HALF_EVEN_getInstance());
    this.DECIMAL64 = new MathContext(16, RoundingMode$HALF_EVEN_getInstance());
    this.DECIMAL128 = new MathContext(34, RoundingMode$HALF_EVEN_getInstance());
  }
  MathContext$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MathContext$Companion_instance = null;
  function MathContext$Companion_getInstance() {
    if (MathContext$Companion_instance === null) {
      new MathContext$Companion();
    }return MathContext$Companion_instance;
  }
  MathContext.prototype.toString = function () {
    return 'precision=' + toString(this.precision) + ' ' + 'roundingMode=' + this.roundingMode.toString();
  };
  MathContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MathContext',
    interfaces: []
  };
  MathContext.prototype.component1 = function () {
    return this.precision;
  };
  MathContext.prototype.component2 = function () {
    return this.roundingMode;
  };
  MathContext.prototype.copy_emtpz3$ = function (precision, roundingMode) {
    return new MathContext(precision === void 0 ? this.precision : precision, roundingMode === void 0 ? this.roundingMode : roundingMode);
  };
  MathContext.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.precision) | 0;
    result = result * 31 + Kotlin.hashCode(this.roundingMode) | 0;
    return result;
  };
  MathContext.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.precision, other.precision) && Kotlin.equals(this.roundingMode, other.roundingMode)))));
  };
  function MutableBigInteger() {
    MutableBigInteger$Companion_getInstance();
    this.value = null;
    this.intLen = 0;
    this.offset = 0;
  }
  Object.defineProperty(MutableBigInteger.prototype, 'magnitudeArray_0', {
    get: function () {
      return this.offset > 0 || this.value.length !== this.intLen ? copyOfRange(this.value, this.offset, this.offset + this.intLen | 0) : this.value;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'lowestSetBit_0', {
    get: function () {
      if (this.intLen === 0)
        return -1;
      var j;
      var b;
      j = this.intLen - 1 | 0;
      while (j > 0 && this.value[j + this.offset | 0] === 0) {
        j = j - 1 | 0;
      }
      b = this.value[j + this.offset | 0];
      return b === 0 ? -1 : (this.intLen - 1 - j << 5) + numberOfTrailingZeros(b) | 0;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'isOne', {
    get: function () {
      return this.intLen === 1 && this.value[this.offset] === 1;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'isZero', {
    get: function () {
      return this.intLen === 0;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'isEven', {
    get: function () {
      return this.intLen === 0 || (this.value[this.offset + this.intLen - 1 | 0] & 1) === 0;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'isOdd', {
    get: function () {
      return this.isZero ? false : (this.value[this.offset + this.intLen - 1 | 0] & 1) === 1;
    }
  });
  Object.defineProperty(MutableBigInteger.prototype, 'isNormal', {
    get: function () {
      if ((this.intLen + this.offset | 0) > this.value.length)
        return false;
      return this.intLen === 0 ? true : this.value[this.offset] !== 0;
    }
  });
  MutableBigInteger.prototype.ones_0 = function (n) {
    if (n > this.value.length)
      this.value = new Int32Array(n);
    fill(this.value, -1);
    this.offset = 0;
    this.intLen = n;
  };
  MutableBigInteger.prototype.toLong_0 = function () {
    if (!(this.intLen <= 2)) {
      var message = 'this MutableBigInteger exceeds the range of long';
      throw IllegalArgumentException_init(message.toString());
    }if (this.intLen === 0)
      return L0;
    var d = Kotlin.Long.fromInt(this.value[this.offset]).and(BigInteger$Companion_getInstance().LONG_MASK);
    return this.intLen === 2 ? d.shiftLeft(32).or(Kotlin.Long.fromInt(this.value[this.offset + 1 | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)) : d;
  };
  MutableBigInteger.prototype.toBigInteger_za3lpa$ = function (sign) {
    return this.intLen === 0 || sign === 0 ? BigInteger$Companion_getInstance().ZERO : BigInteger_init_7(this.magnitudeArray_0, sign);
  };
  MutableBigInteger.prototype.toBigInteger = function () {
    this.normalize();
    return this.toBigInteger_za3lpa$(this.isZero ? 0 : 1);
  };
  MutableBigInteger.prototype.toBigDecimal_vux9f0$ = function (sign, scale) {
    if (this.intLen === 0 || sign === 0)
      return BigDecimal$Companion_getInstance().zeroValueOf_kcn2v3$(scale);
    var mag = this.magnitudeArray_0;
    var len = mag.length;
    var d = mag[0];
    if (len > 2 || (d < 0 && len === 2))
      return BigDecimal_init(BigInteger_init_7(mag, sign), BigDecimal$Companion_getInstance().INFLATED_8be2vx$, scale, 0);
    var v = len === 2 ? Kotlin.Long.fromInt(mag[1]).and(BigInteger$Companion_getInstance().LONG_MASK).or(Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32)) : Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK);
    return BigDecimal$Companion_getInstance().of_yhmem3$(sign === -1 ? v.unaryMinus() : v, scale);
  };
  MutableBigInteger.prototype.toCompactValue_za3lpa$ = function (sign) {
    if (this.intLen === 0 || sign === 0)
      return L0;
    var mag = this.magnitudeArray_0;
    var len = mag.length;
    var d = mag[0];
    if (len > 2 || (d < 0 && len === 2))
      return BigDecimal$Companion_getInstance().INFLATED_8be2vx$;
    var v = len === 2 ? Kotlin.Long.fromInt(mag[1]).and(BigInteger$Companion_getInstance().LONG_MASK).or(Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32)) : Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK);
    return sign === -1 ? v.unaryMinus() : v;
  };
  MutableBigInteger.prototype.clear = function () {
    this.intLen = 0;
    this.offset = this.intLen;
    var index = 0;
    var n = this.value.length;
    while (index < n) {
      this.value[index] = 0;
      index = index + 1 | 0;
    }
  };
  MutableBigInteger.prototype.reset = function () {
    this.intLen = 0;
    this.offset = this.intLen;
  };
  MutableBigInteger.prototype.compare_bex516$ = function (b) {
    var blen = b.intLen;
    if (this.intLen < blen)
      return -1;
    if (this.intLen > blen)
      return 1;
    var bval = b.value;
    var i = this.offset;
    var j = b.offset;
    while (i < (this.intLen + this.offset | 0)) {
      var b1 = this.value[i] + -2147483648 | 0;
      var b2 = bval[j] + -2147483648 | 0;
      if (b1 < b2)
        return -1;
      if (b1 > b2)
        return 1;
      i = i + 1 | 0;
      j = j + 1 | 0;
    }
    return 0;
  };
  MutableBigInteger.prototype.compareShifted_0 = function (b, ints) {
    var blen = b.intLen;
    var alen = this.intLen - ints | 0;
    if (alen < blen)
      return -1;
    if (alen > blen)
      return 1;
    var bval = b.value;
    var i = this.offset;
    var j = b.offset;
    while (i < (alen + this.offset | 0)) {
      var b1 = this.value[i] + -2147483648 | 0;
      var b2 = bval[j] + -2147483648 | 0;
      if (b1 < b2)
        return -1;
      if (b1 > b2)
        return 1;
      i = i + 1 | 0;
      j = j + 1 | 0;
    }
    return 0;
  };
  MutableBigInteger.prototype.compareHalf_bex516$ = function (b) {
    var tmp$, tmp$_0;
    var blen = b.intLen;
    var len = this.intLen;
    if (len <= 0)
      return blen <= 0 ? 0 : -1;
    if (len > blen)
      return 1;
    if (len < (blen - 1 | 0))
      return -1;
    var bval = b.value;
    var bstart = 0;
    var carry = 0;
    if (len !== blen) {
      if (bval[bstart] === 1) {
        bstart = bstart + 1 | 0;
        carry = -2147483648;
      } else
        return -1;
    }var val = this.value;
    var i = this.offset;
    var j = bstart;
    while (i < (len + this.offset | 0)) {
      var bv = bval[tmp$ = j, j = tmp$ + 1 | 0, tmp$];
      var hb = Kotlin.Long.fromInt(bv >>> 1).add(Kotlin.Long.fromInt(carry)).and(BigInteger$Companion_getInstance().LONG_MASK);
      var v = Kotlin.Long.fromInt(val[tmp$_0 = i, i = tmp$_0 + 1 | 0, tmp$_0]).and(BigInteger$Companion_getInstance().LONG_MASK);
      if (!equals(v, hb))
        return v.compareTo_11rb$(hb) < 0 ? -1 : 1;
      carry = (bv & 1) << 31;
    }
    return carry === 0 ? 0 : -1;
  };
  MutableBigInteger.prototype.getInt_0 = function (index) {
    return this.value[this.offset + index | 0];
  };
  MutableBigInteger.prototype.getLong_0 = function (index) {
    return Kotlin.Long.fromInt(this.value[this.offset + index | 0]).and(BigInteger$Companion_getInstance().LONG_MASK);
  };
  MutableBigInteger.prototype.normalize = function () {
    if (this.intLen === 0) {
      this.offset = 0;
      return;
    }var index = this.offset;
    if (this.value[index] !== 0)
      return;
    var indexBound = index + this.intLen | 0;
    do {
      index = index + 1 | 0;
    }
     while (index < indexBound && this.value[index] === 0);
    var numZeros = index - this.offset | 0;
    this.intLen = this.intLen - numZeros | 0;
    this.offset = this.intLen === 0 ? 0 : this.offset + numZeros | 0;
  };
  MutableBigInteger.prototype.ensureCapacity_0 = function (len) {
    if (this.value.length < len) {
      this.value = new Int32Array(len);
      this.offset = 0;
      this.intLen = len;
    }};
  MutableBigInteger.prototype.toIntArray = function () {
    var tmp$;
    var result = new Int32Array(this.intLen);
    tmp$ = this.intLen;
    for (var i = 0; i < tmp$; i++)
      result[i] = this.value[this.offset + i | 0];
    return result;
  };
  MutableBigInteger.prototype.setInt_vux9f0$ = function (index, val) {
    this.value[this.offset + index | 0] = val;
  };
  MutableBigInteger.prototype.setValue_u4kcgn$ = function (val, length) {
    this.value = val;
    this.intLen = length;
    this.offset = 0;
  };
  MutableBigInteger.prototype.copyValue_bex516$ = function (src) {
    var len = src.intLen;
    if (this.value.length < len)
      this.value = new Int32Array(len);
    arrayCopy_0(src.value, src.offset, this.value, 0, len);
    this.intLen = len;
    this.offset = 0;
  };
  MutableBigInteger.prototype.copyValue_q5rwfd$ = function (val) {
    var len = val.length;
    if (this.value.length < len)
      this.value = new Int32Array(len);
    arrayCopy_0(val, 0, this.value, 0, len);
    this.intLen = len;
    this.offset = 0;
  };
  MutableBigInteger.prototype.toString = function () {
    var b = this.toBigInteger_za3lpa$(1);
    return b.toString();
  };
  MutableBigInteger.prototype.safeRightShift_za3lpa$ = function (n) {
    if ((n / 32 | 0) >= this.intLen) {
      this.reset();
    } else {
      this.rightShift_za3lpa$(n);
    }
  };
  MutableBigInteger.prototype.rightShift_za3lpa$ = function (n) {
    if (this.intLen === 0)
      return;
    var nInts = n >>> 5;
    var nBits = n & 31;
    this.intLen = this.intLen - nInts | 0;
    if (nBits === 0)
      return;
    var bitsInHighWord = BigInteger$Companion_getInstance().bitLengthForInt_kcn2v3$(this.value[this.offset]);
    if (nBits >= bitsInHighWord) {
      this.primitiveLeftShift_0(32 - nBits | 0);
      this.intLen = this.intLen - 1 | 0;
    } else {
      this.primitiveRightShift_0(nBits);
    }
  };
  MutableBigInteger.prototype.safeLeftShift_za3lpa$ = function (n) {
    if (n > 0) {
      this.leftShift_za3lpa$(n);
    }};
  MutableBigInteger.prototype.leftShift_za3lpa$ = function (n) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (this.intLen === 0)
      return;
    var nInts = n >>> 5;
    var nBits = n & 31;
    var bitsInHighWord = BigInteger$Companion_getInstance().bitLengthForInt_kcn2v3$(this.value[this.offset]);
    if (n <= (32 - bitsInHighWord | 0)) {
      this.primitiveLeftShift_0(nBits);
      return;
    }var newLen = this.intLen + nInts + 1 | 0;
    if (nBits <= (32 - bitsInHighWord | 0)) {
      newLen = newLen - 1 | 0;
    }if (this.value.length < newLen) {
      var result = new Int32Array(newLen);
      tmp$ = this.intLen;
      for (var i = 0; i < tmp$; i++)
        result[i] = this.value[this.offset + i | 0];
      this.setValue_u4kcgn$(result, newLen);
    } else if ((this.value.length - this.offset | 0) >= newLen) {
      tmp$_0 = newLen - this.intLen | 0;
      for (var i_0 = 0; i_0 < tmp$_0; i_0++)
        this.value[this.offset + this.intLen + i_0 | 0] = 0;
    } else {
      tmp$_1 = this.intLen;
      for (var i_1 = 0; i_1 < tmp$_1; i_1++)
        this.value[i_1] = this.value[this.offset + i_1 | 0];
      tmp$_2 = this.intLen;
      tmp$_3 = newLen;
      for (var i_2 = tmp$_2; i_2 < tmp$_3; i_2++)
        this.value[i_2] = 0;
      this.offset = 0;
    }
    this.intLen = newLen;
    if (nBits === 0)
      return;
    if (nBits <= (32 - bitsInHighWord | 0))
      this.primitiveLeftShift_0(nBits);
    else
      this.primitiveRightShift_0(32 - nBits | 0);
  };
  MutableBigInteger.prototype.divadd_0 = function (a, result, offset) {
    var tmp$;
    var carry = L0;
    tmp$ = reversed(get_indices(a)).iterator();
    while (tmp$.hasNext()) {
      var j = tmp$.next();
      var sum = Kotlin.Long.fromInt(a[j]).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(result[j + offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
      result[j + offset | 0] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    return carry.toInt();
  };
  MutableBigInteger.prototype.mulsub_0 = function (q, a, x, len, offset) {
    var tmp$;
    var offset_0 = offset;
    var xLong = Kotlin.Long.fromInt(x).and(BigInteger$Companion_getInstance().LONG_MASK);
    var carry = L0;
    offset_0 = offset_0 + len | 0;
    for (var j = len - 1 | 0; j >= 0; j--) {
      var product = Kotlin.Long.fromInt(a[j]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(xLong).add(carry);
      var difference = Kotlin.Long.fromInt(q[offset_0]).subtract(product);
      q[tmp$ = offset_0, offset_0 = tmp$ - 1 | 0, tmp$] = difference.toInt();
      carry = product.shiftRightUnsigned(32).add(Kotlin.Long.fromInt(difference.and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(~product.toInt()).and(BigInteger$Companion_getInstance().LONG_MASK)) > 0 ? 1 : 0));
    }
    return carry.toInt();
  };
  MutableBigInteger.prototype.mulsubBorrow_0 = function (q, a, x, len, offset) {
    var tmp$;
    var offset_0 = offset;
    var xLong = Kotlin.Long.fromInt(x).and(BigInteger$Companion_getInstance().LONG_MASK);
    var carry = L0;
    offset_0 = offset_0 + len | 0;
    for (var j = len - 1 | 0; j >= 0; j--) {
      var product = Kotlin.Long.fromInt(a[j]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(xLong).add(carry);
      var difference = Kotlin.Long.fromInt(q[tmp$ = offset_0, offset_0 = tmp$ - 1 | 0, tmp$]).subtract(product);
      carry = product.shiftRightUnsigned(32).add(Kotlin.Long.fromInt(difference.and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(Kotlin.Long.fromInt(~product.toInt()).and(BigInteger$Companion_getInstance().LONG_MASK)) > 0 ? 1 : 0));
    }
    return carry.toInt();
  };
  MutableBigInteger.prototype.primitiveRightShift_0 = function (n) {
    var val = this.value;
    var n2 = 32 - n | 0;
    var i = this.offset + this.intLen - 1 | 0;
    var c = val[i];
    while (i > this.offset) {
      var b = c;
      c = val[i - 1 | 0];
      val[i] = c << n2 | b >>> n;
      i = i - 1 | 0;
    }
    val[this.offset] = val[this.offset] >>> n;
  };
  MutableBigInteger.prototype.primitiveLeftShift_0 = function (n) {
    var val = this.value;
    var n2 = 32 - n | 0;
    var i = this.offset;
    var c = val[i];
    var m = i + this.intLen - 1 | 0;
    while (i < m) {
      var b = c;
      c = val[i + 1 | 0];
      val[i] = b << n | c >>> n2;
      i = i + 1 | 0;
    }
    val[this.offset + this.intLen - 1 | 0] = val[this.offset + this.intLen - 1 | 0] << n;
  };
  MutableBigInteger.prototype.getLower_0 = function (n) {
    if (this.isZero) {
      return BigInteger$Companion_getInstance().ZERO;
    } else if (this.intLen < n) {
      return this.toBigInteger_za3lpa$(1);
    } else {
      var len = n;
      while (len > 0 && this.value[this.offset + this.intLen - len | 0] === 0) {
        len = len - 1 | 0;
      }
      var sign = len > 0 ? 1 : 0;
      return BigInteger_init_7(copyOfRange(this.value, this.offset + this.intLen - len | 0, this.offset + this.intLen | 0), sign);
    }
  };
  MutableBigInteger.prototype.keepLower_0 = function (n) {
    if (this.intLen >= n) {
      this.offset = this.offset + (this.intLen - n) | 0;
      this.intLen = n;
    }};
  MutableBigInteger.prototype.add_bex516$ = function (addend) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var x = this.intLen;
    var y = addend.intLen;
    var resultLen = this.intLen > addend.intLen ? this.intLen : addend.intLen;
    var result = this.value.length < resultLen ? new Int32Array(resultLen) : this.value;
    var rstart = result.length - 1 | 0;
    var sum;
    var carry = L0;
    while (x > 0 && y > 0) {
      x = x - 1 | 0;
      y = y - 1 | 0;
      sum = Kotlin.Long.fromInt(this.value[x + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(addend.value[y + addend.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
      result[tmp$ = rstart, rstart = tmp$ - 1 | 0, tmp$] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    while (x > 0) {
      x = x - 1 | 0;
      if (equals(carry, L0) && equals(result, this.value) && rstart === (x + this.offset | 0))
        return;
      sum = Kotlin.Long.fromInt(this.value[x + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(carry);
      result[tmp$_0 = rstart, rstart = tmp$_0 - 1 | 0, tmp$_0] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    while (y > 0) {
      y = y - 1 | 0;
      sum = Kotlin.Long.fromInt(addend.value[y + addend.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(carry);
      result[tmp$_1 = rstart, rstart = tmp$_1 - 1 | 0, tmp$_1] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    if (carry.toNumber() > 0) {
      resultLen = resultLen + 1 | 0;
      if (result.length < resultLen) {
        var temp = new Int32Array(resultLen);
        arrayCopy_0(result, 0, temp, 1, result.length);
        temp[0] = 1;
        result = temp;
      } else {
        result[tmp$_2 = rstart, rstart = tmp$_2 - 1 | 0, tmp$_2] = 1;
      }
    }this.value = result;
    this.intLen = resultLen;
    this.offset = result.length - resultLen | 0;
  };
  MutableBigInteger.prototype.addShifted_iw80i0$ = function (addend, n) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (addend.isZero) {
      return;
    }var x = this.intLen;
    var y = addend.intLen + n | 0;
    var resultLen = this.intLen > y ? this.intLen : y;
    var result = this.value.length < resultLen ? new Int32Array(resultLen) : this.value;
    var rstart = result.length - 1 | 0;
    var sum;
    var carry = L0;
    while (x > 0 && y > 0) {
      x = x - 1 | 0;
      y = y - 1 | 0;
      var bval = (y + addend.offset | 0) < addend.value.length ? addend.value[y + addend.offset | 0] : 0;
      sum = Kotlin.Long.fromInt(this.value[x + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(bval).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
      result[tmp$ = rstart, rstart = tmp$ - 1 | 0, tmp$] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    while (x > 0) {
      x = x - 1 | 0;
      if (equals(carry, L0) && equals(result, this.value) && rstart === (x + this.offset | 0)) {
        return;
      }sum = Kotlin.Long.fromInt(this.value[x + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).add(carry);
      result[tmp$_0 = rstart, rstart = tmp$_0 - 1 | 0, tmp$_0] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    while (y > 0) {
      y = y - 1 | 0;
      var bval_0 = (y + addend.offset | 0) < addend.value.length ? addend.value[y + addend.offset | 0] : 0;
      sum = Kotlin.Long.fromInt(bval_0).and(BigInteger$Companion_getInstance().LONG_MASK).add(carry);
      result[tmp$_1 = rstart, rstart = tmp$_1 - 1 | 0, tmp$_1] = sum.toInt();
      carry = sum.shiftRightUnsigned(32);
    }
    if (carry.toNumber() > 0) {
      resultLen = resultLen + 1 | 0;
      if (result.length < resultLen) {
        var temp = new Int32Array(resultLen);
        arrayCopy_0(result, 0, temp, 1, result.length);
        temp[0] = 1;
        result = temp;
      } else {
        result[tmp$_2 = rstart, rstart = tmp$_2 - 1 | 0, tmp$_2] = 1;
      }
    }this.value = result;
    this.intLen = resultLen;
    this.offset = result.length - resultLen | 0;
  };
  MutableBigInteger.prototype.addDisjoint_lyrl85$ = function (addend, n) {
    var tmp$;
    if (ensureNotNull(addend).isZero)
      return;
    var x = this.intLen;
    var y = addend.intLen + n | 0;
    var resultLen = this.intLen > y ? this.intLen : y;
    var result;
    if (this.value.length < resultLen)
      result = new Int32Array(resultLen);
    else {
      result = this.value;
      fill_0(this.value, this.offset + this.intLen | 0, this.value.length, 0);
    }
    var rstart = result.length - 1 | 0;
    arrayCopy_0(this.value, this.offset, result, rstart + 1 - x | 0, x);
    y = y - x | 0;
    rstart = rstart - x | 0;
    var a = y;
    var b = addend.value.length - addend.offset | 0;
    var len = Math_0.min(a, b);
    arrayCopy_0(addend.value, addend.offset, result, rstart + 1 - y | 0, len);
    tmp$ = rstart + 1 | 0;
    for (var i = rstart + 1 - y + len | 0; i < tmp$; i++)
      result[i] = 0;
    this.value = result;
    this.intLen = resultLen;
    this.offset = result.length - resultLen | 0;
  };
  MutableBigInteger.prototype.addLower_iw80i0$ = function (addend, n) {
    var a = MutableBigInteger_init_3(addend);
    if ((a.offset + a.intLen | 0) >= n) {
      a.offset = a.offset + a.intLen - n | 0;
      a.intLen = n;
    }a.normalize();
    this.add_bex516$(a);
  };
  MutableBigInteger.prototype.subtract_bex516$ = function (b) {
    var tmp$, tmp$_0;
    var b_0 = b;
    var a = this;
    var result = this.value;
    var sign = a.compare_bex516$(b_0);
    if (sign === 0) {
      this.reset();
      return 0;
    }if (sign < 0) {
      var tmp = a;
      a = b_0;
      b_0 = tmp;
    }var resultLen = a.intLen;
    if (result.length < resultLen)
      result = new Int32Array(resultLen);
    var diff = L0;
    var x = a.intLen;
    var y = b_0.intLen;
    var rstart = result.length - 1 | 0;
    while (y > 0) {
      x = x - 1 | 0;
      y = y - 1 | 0;
      diff = Kotlin.Long.fromInt(a.value[x + a.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).subtract(Kotlin.Long.fromInt(b_0.value[y + b_0.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).subtract(Kotlin.Long.fromInt(diff.shiftRight(32).unaryMinus().toInt()));
      result[tmp$ = rstart, rstart = tmp$ - 1 | 0, tmp$] = diff.toInt();
    }
    while (x > 0) {
      x = x - 1 | 0;
      diff = Kotlin.Long.fromInt(a.value[x + a.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).subtract(Kotlin.Long.fromInt(diff.shiftRight(32).unaryMinus().toInt()));
      result[tmp$_0 = rstart, rstart = tmp$_0 - 1 | 0, tmp$_0] = diff.toInt();
    }
    this.value = result;
    this.intLen = resultLen;
    this.offset = this.value.length - resultLen | 0;
    this.normalize();
    return sign;
  };
  MutableBigInteger.prototype.difference_0 = function (b) {
    var b_0 = b;
    var a = this;
    var sign = a.compare_bex516$(b_0);
    if (sign === 0)
      return 0;
    if (sign < 0) {
      var tmp = a;
      a = b_0;
      b_0 = tmp;
    }var diff = L0;
    var x = a.intLen;
    var y = b_0.intLen;
    while (y > 0) {
      x = x - 1 | 0;
      y = y - 1 | 0;
      diff = Kotlin.Long.fromInt(a.value[a.offset + x | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).subtract(Kotlin.Long.fromInt(b_0.value[b_0.offset + y | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).subtract(Kotlin.Long.fromInt(diff.shiftRight(32).unaryMinus().toInt()));
      a.value[a.offset + x | 0] = diff.toInt();
    }
    while (x > 0) {
      x = x - 1 | 0;
      diff = Kotlin.Long.fromInt(a.value[a.offset + x | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).subtract(Kotlin.Long.fromInt(diff.shiftRight(32).unaryMinus().toInt()));
      a.value[a.offset + x | 0] = diff.toInt();
    }
    a.normalize();
    return sign;
  };
  MutableBigInteger.prototype.multiply_88c880$ = function (y, z) {
    var xLen = this.intLen;
    var yLen = y.intLen;
    var newLen = xLen + yLen | 0;
    if (z.value.length < newLen)
      z.value = new Int32Array(newLen);
    z.offset = 0;
    z.intLen = newLen;
    var carry = {v: L0};
    var j = yLen - 1 | 0;
    var k = yLen + xLen - 1 | 0;
    while (j >= 0) {
      var product = Kotlin.Long.fromInt(y.value[j + y.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(Kotlin.Long.fromInt(this.value[xLen - 1 + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry.v);
      z.value[k] = product.toInt();
      carry.v = product.shiftRightUnsigned(32);
      j = j - 1 | 0;
      k = k - 1 | 0;
    }
    z.value[xLen - 1 | 0] = carry.v.toInt();
    for (var i = xLen - 2 | 0; i >= 0; i--) {
      carry.v = L0;
      var j_0 = yLen - 1 | 0;
      var k_0 = yLen + i | 0;
      while (j_0 >= 0) {
        var product_0 = Kotlin.Long.fromInt(y.value[j_0 + y.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(Kotlin.Long.fromInt(this.value[i + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(Kotlin.Long.fromInt(z.value[k_0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry.v);
        z.value[k_0] = product_0.toInt();
        carry.v = product_0.shiftRightUnsigned(32);
        j_0 = j_0 - 1 | 0;
        k_0 = k_0 - 1 | 0;
      }
      z.value[i] = carry.v.toInt();
    }
    z.normalize();
  };
  MutableBigInteger.prototype.mul_nkkrr0$ = function (y, z) {
    if (y === 1) {
      z.copyValue_bex516$(this);
      return;
    }if (y === 0) {
      z.clear();
      return;
    }var ylong = Kotlin.Long.fromInt(y).and(BigInteger$Companion_getInstance().LONG_MASK);
    var zval = z.value.length < (this.intLen + 1 | 0) ? new Int32Array(this.intLen + 1 | 0) : z.value;
    var carry = L0;
    for (var i = this.intLen - 1 | 0; i >= 0; i--) {
      var product = ylong.multiply(Kotlin.Long.fromInt(this.value[i + this.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
      zval[i + 1 | 0] = product.toInt();
      carry = product.shiftRightUnsigned(32);
    }
    if (equals(carry, L0)) {
      z.offset = 1;
      z.intLen = this.intLen;
    } else {
      z.offset = 0;
      z.intLen = this.intLen + 1 | 0;
      zval[0] = carry.toInt();
    }
    z.value = zval;
  };
  MutableBigInteger.prototype.divideOneWord_nkkrr0$ = function (divisor, quotient) {
    var divisorLong = Kotlin.Long.fromInt(divisor).and(BigInteger$Companion_getInstance().LONG_MASK);
    if (this.intLen === 1) {
      var dividendValue = Kotlin.Long.fromInt(this.value[this.offset]).and(BigInteger$Companion_getInstance().LONG_MASK);
      var q = dividendValue.div(divisorLong).toInt();
      var r = dividendValue.subtract(Kotlin.Long.fromInt(q).multiply(divisorLong)).toInt();
      quotient.value[0] = q;
      quotient.intLen = q === 0 ? 0 : 1;
      quotient.offset = 0;
      return r;
    }if (quotient.value.length < this.intLen)
      quotient.value = new Int32Array(this.intLen);
    quotient.offset = 0;
    quotient.intLen = this.intLen;
    var shift = numberOfLeadingZeros_0(divisor);
    var rem = this.value[this.offset];
    var remLong = Kotlin.Long.fromInt(rem).and(BigInteger$Companion_getInstance().LONG_MASK);
    if (remLong.compareTo_11rb$(divisorLong) < 0) {
      quotient.value[0] = 0;
    } else {
      quotient.value[0] = remLong.div(divisorLong).toInt();
      rem = remLong.subtract(Kotlin.Long.fromInt(quotient.value[0]).multiply(divisorLong)).toInt();
      remLong = Kotlin.Long.fromInt(rem).and(BigInteger$Companion_getInstance().LONG_MASK);
    }
    var xlen = this.intLen;
    while ((xlen = xlen - 1 | 0, xlen) > 0) {
      var dividendEstimate = remLong.shiftLeft(32).or(Kotlin.Long.fromInt(this.value[this.offset + this.intLen - xlen | 0]).and(BigInteger$Companion_getInstance().LONG_MASK));
      var q_0;
      if (dividendEstimate.toNumber() >= 0) {
        q_0 = dividendEstimate.div(divisorLong).toInt();
        rem = dividendEstimate.subtract(Kotlin.Long.fromInt(q_0).multiply(divisorLong)).toInt();
      } else {
        var tmp = MutableBigInteger$Companion_getInstance().divWord_yhmem3$(dividendEstimate, divisor);
        q_0 = tmp.and(BigInteger$Companion_getInstance().LONG_MASK).toInt();
        rem = tmp.shiftRightUnsigned(32).toInt();
      }
      quotient.value[this.intLen - xlen | 0] = q_0;
      remLong = Kotlin.Long.fromInt(rem).and(BigInteger$Companion_getInstance().LONG_MASK);
    }
    quotient.normalize();
    return shift > 0 ? rem % divisor : rem;
  };
  MutableBigInteger.prototype.divide_rxel95$ = function (b, quotient, needRemainder) {
    if (needRemainder === void 0)
      needRemainder = true;
    var tmp$;
    if (b.intLen < 80 || (this.intLen - b.intLen | 0) < 40) {
      tmp$ = this.divideKnuth_rxel95$(b, quotient, needRemainder);
    } else {
      tmp$ = this.divideAndRemainderBurnikelZiegler_88c880$(b, quotient);
    }
    return tmp$;
  };
  MutableBigInteger.prototype.divideKnuth_rxel95$ = function (b, quotient, needRemainder) {
    if (needRemainder === void 0)
      needRemainder = true;
    var tmp$;
    var b_0 = b;
    if (b_0.intLen === 0)
      throw new ArithmeticException('BigInteger div by zero');
    if (this.intLen === 0) {
      quotient.offset = 0;
      quotient.intLen = quotient.offset;
      return needRemainder ? MutableBigInteger_init() : null;
    }var cmp = this.compare_bex516$(b_0);
    if (cmp < 0) {
      quotient.offset = 0;
      quotient.intLen = quotient.offset;
      return needRemainder ? MutableBigInteger_init_3(this) : null;
    }if (cmp === 0) {
      quotient.intLen = 1;
      quotient.value[0] = quotient.intLen;
      quotient.offset = 0;
      return needRemainder ? MutableBigInteger_init() : null;
    }quotient.clear();
    if (b_0.intLen === 1) {
      var r = this.divideOneWord_nkkrr0$(b_0.value[b_0.offset], quotient);
      if (needRemainder) {
        tmp$ = r === 0 ? MutableBigInteger_init() : MutableBigInteger_init_0(r);
      } else {
        tmp$ = null;
      }
      return tmp$;
    }if (this.intLen >= MutableBigInteger$Companion_getInstance().KNUTH_POW2_THRESH_LEN) {
      var a = this.lowestSetBit_0;
      var b_1 = b_0.lowestSetBit_0;
      var trailingZeroBits = Math_0.min(a, b_1);
      if (trailingZeroBits >= (MutableBigInteger$Companion_getInstance().KNUTH_POW2_THRESH_ZEROS * 32 | 0)) {
        var a_0 = MutableBigInteger_init_3(this);
        b_0 = MutableBigInteger_init_3(b_0);
        a_0.rightShift_za3lpa$(trailingZeroBits);
        b_0.rightShift_za3lpa$(trailingZeroBits);
        var r_0 = a_0.divideKnuth_rxel95$(b_0, quotient);
        ensureNotNull(r_0).leftShift_za3lpa$(trailingZeroBits);
        return r_0;
      }}return this.divideMagnitude_0(b_0, quotient, needRemainder);
  };
  MutableBigInteger.prototype.divideAndRemainderBurnikelZiegler_88c880$ = function (b, quotient) {
    var r = this.intLen;
    var s = b.intLen;
    quotient.intLen = 0;
    quotient.offset = quotient.intLen;
    if (r < s) {
      return this;
    } else {
      var m = 1 << 32 - numberOfLeadingZeros_0(s / 80 | 0);
      var j = (s + m - 1 | 0) / m | 0;
      var n = Kotlin.imul(j, m);
      var n32 = L32.multiply(Kotlin.Long.fromInt(n));
      var a = L0;
      var b_0 = n32.subtract(b.bitLength());
      var sigma = (a.compareTo_11rb$(b_0) >= 0 ? a : b_0).toInt();
      var bShifted = MutableBigInteger_init_3(b);
      bShifted.safeLeftShift_za3lpa$(sigma);
      var aShifted = MutableBigInteger_init_3(this);
      aShifted.safeLeftShift_za3lpa$(sigma);
      var t = aShifted.bitLength().add(n32).div(n32).toInt();
      if (t < 2) {
        t = 2;
      }var a1 = aShifted.getBlock_0(t - 1 | 0, t, n);
      var z = aShifted.getBlock_0(t - 2 | 0, t, n);
      z.addDisjoint_lyrl85$(a1, n);
      var qi = MutableBigInteger_init();
      var ri;
      for (var i = t - 2 | 0; i >= 1; i--) {
        ri = z.divide2n1n_0(bShifted, qi);
        z = aShifted.getBlock_0(i - 1 | 0, t, n);
        z.addDisjoint_lyrl85$(ri, n);
        quotient.addShifted_iw80i0$(qi, Kotlin.imul(i, n));
      }
      ri = z.divide2n1n_0(bShifted, qi);
      quotient.add_bex516$(qi);
      ensureNotNull(ri).rightShift_za3lpa$(sigma);
      return ri;
    }
  };
  MutableBigInteger.prototype.divide2n1n_0 = function (b, quotient) {
    var n = b.intLen;
    if (n % 2 !== 0 || n < 80) {
      return this.divideKnuth_rxel95$(b, quotient);
    }var aUpper = MutableBigInteger_init_3(this);
    aUpper.safeRightShift_za3lpa$(32 * (n / 2 | 0) | 0);
    this.keepLower_0(n / 2 | 0);
    var q1 = MutableBigInteger_init();
    var r1 = aUpper.divide3n2n_0(b, q1);
    this.addDisjoint_lyrl85$(r1, n / 2 | 0);
    var r2 = this.divide3n2n_0(b, quotient);
    quotient.addDisjoint_lyrl85$(q1, n / 2 | 0);
    return r2;
  };
  MutableBigInteger.prototype.divide3n2n_0 = function (b, quotient) {
    var n = b.intLen / 2 | 0;
    var a12 = MutableBigInteger_init_3(this);
    a12.safeRightShift_za3lpa$(32 * n | 0);
    var b1 = MutableBigInteger_init_3(b);
    b1.safeRightShift_za3lpa$(n * 32 | 0);
    var b2 = b.getLower_0(n);
    var r;
    var d;
    if (this.compareShifted_0(b, n) < 0) {
      r = a12.divide2n1n_0(b1, quotient);
      d = MutableBigInteger_init_2(quotient.toBigInteger().times(b2));
    } else {
      quotient.ones_0(n);
      a12.add_bex516$(b1);
      b1.leftShift_za3lpa$(32 * n | 0);
      a12.subtract_bex516$(b1);
      r = a12;
      d = MutableBigInteger_init_2(b2);
      d.leftShift_za3lpa$(32 * n | 0);
      d.subtract_bex516$(MutableBigInteger_init_2(b2));
    }
    ensureNotNull(r).leftShift_za3lpa$(32 * n | 0);
    r.addLower_iw80i0$(this, n);
    while (r.compare_bex516$(d) < 0) {
      r.add_bex516$(b);
      quotient.subtract_bex516$(MutableBigInteger$Companion_getInstance().ONE);
    }
    r.subtract_bex516$(d);
    return r;
  };
  MutableBigInteger.prototype.getBlock_0 = function (index, numBlocks, blockLength) {
    var blockStart = Kotlin.imul(index, blockLength);
    if (blockStart >= this.intLen) {
      return MutableBigInteger_init();
    }var blockEnd;
    if (index === (numBlocks - 1 | 0)) {
      blockEnd = this.intLen;
    } else {
      blockEnd = Kotlin.imul(index + 1 | 0, blockLength);
    }
    if (blockEnd > this.intLen) {
      return MutableBigInteger_init();
    }var newVal = copyOfRange(this.value, this.offset + this.intLen - blockEnd | 0, this.offset + this.intLen - blockStart | 0);
    return MutableBigInteger_init_1(newVal);
  };
  MutableBigInteger.prototype.bitLength = function () {
    return this.intLen === 0 ? L0 : Kotlin.Long.fromInt(this.intLen).multiply(L32).subtract(Kotlin.Long.fromInt(numberOfLeadingZeros_0(this.value[this.offset])));
  };
  MutableBigInteger.prototype.divide_heuojh$ = function (v, quotient) {
    var tmp$;
    var v_0 = v;
    if (equals(v_0, L0))
      throw new ArithmeticException('BigInteger div by zero');
    if (this.intLen === 0) {
      quotient.offset = 0;
      quotient.intLen = quotient.offset;
      return L0;
    }if (v_0.toNumber() < 0)
      v_0 = v_0.unaryMinus();
    var d = v_0.shiftRightUnsigned(32).toInt();
    quotient.clear();
    if (d === 0)
      tmp$ = Kotlin.Long.fromInt(this.divideOneWord_nkkrr0$(v_0.toInt(), quotient)).and(BigInteger$Companion_getInstance().LONG_MASK);
    else {
      tmp$ = this.divideLongMagnitude_0(v_0, quotient).toLong_0();
    }
    return tmp$;
  };
  MutableBigInteger.prototype.divideMagnitude_0 = function (div, quotient, needRemainder) {
    var tmp$;
    var shift = numberOfLeadingZeros_0(div.value[div.offset]);
    var dlen = div.intLen;
    var divisor;
    var rem;
    if (shift > 0) {
      divisor = new Int32Array(dlen);
      MutableBigInteger$Companion_getInstance().copyAndShift_0(div.value, div.offset, dlen, divisor, 0, shift);
      if (numberOfLeadingZeros_0(this.value[this.offset]) >= shift) {
        var remarr = new Int32Array(this.intLen + 1 | 0);
        rem = MutableBigInteger_init_1(remarr);
        rem.intLen = this.intLen;
        rem.offset = 1;
        MutableBigInteger$Companion_getInstance().copyAndShift_0(this.value, this.offset, this.intLen, remarr, 1, shift);
      } else {
        var remarr_0 = new Int32Array(this.intLen + 2 | 0);
        rem = MutableBigInteger_init_1(remarr_0);
        rem.intLen = this.intLen + 1 | 0;
        rem.offset = 1;
        var rFrom = this.offset;
        var c = 0;
        var n2 = 32 - shift | 0;
        var i = 1;
        while (i < (this.intLen + 1 | 0)) {
          var b = c;
          c = this.value[rFrom];
          remarr_0[i] = b << shift | c >>> n2;
          i = i + 1 | 0;
          rFrom = rFrom + 1 | 0;
        }
        remarr_0[this.intLen + 1 | 0] = c << shift;
      }
    } else {
      divisor = copyOfRange(div.value, div.offset, div.offset + div.intLen | 0);
      rem = MutableBigInteger_init_1(new Int32Array(this.intLen + 1 | 0));
      arrayCopy_0(this.value, this.offset, rem.value, 1, this.intLen);
      rem.intLen = this.intLen;
      rem.offset = 1;
    }
    var nlen = rem.intLen;
    var limit = nlen - dlen + 1 | 0;
    if (quotient.value.length < limit) {
      quotient.value = new Int32Array(limit);
      quotient.offset = 0;
    }quotient.intLen = limit;
    var q = quotient.value;
    if (rem.intLen === nlen) {
      rem.offset = 0;
      rem.value[0] = 0;
      rem.intLen = rem.intLen + 1 | 0;
    }var dh = divisor[0];
    var dhLong = Kotlin.Long.fromInt(dh).and(BigInteger$Companion_getInstance().LONG_MASK);
    var dl = divisor[1];
    tmp$ = limit - 1 | 0;
    for (var j = 0; j < tmp$; j++) {
      var qhat = 0;
      var qrem = 0;
      var skipCorrection = false;
      var nh = rem.value[j + rem.offset | 0];
      var nh2 = nh + -2147483648 | 0;
      var nm = rem.value[j + 1 + rem.offset | 0];
      if (nh === dh) {
        qhat = -1;
        qrem = nh + nm | 0;
        skipCorrection = (qrem + -2147483648 | 0) < nh2;
      } else {
        var nChunk = Kotlin.Long.fromInt(nh).shiftLeft(32).or(Kotlin.Long.fromInt(nm).and(BigInteger$Companion_getInstance().LONG_MASK));
        if (nChunk.toNumber() >= 0) {
          qhat = nChunk.div(dhLong).toInt();
          qrem = nChunk.subtract(Kotlin.Long.fromInt(qhat).multiply(dhLong)).toInt();
        } else {
          var tmp = MutableBigInteger$Companion_getInstance().divWord_yhmem3$(nChunk, dh);
          qhat = tmp.and(BigInteger$Companion_getInstance().LONG_MASK).toInt();
          qrem = tmp.shiftRightUnsigned(32).toInt();
        }
      }
      if (qhat === 0)
        continue;
      if (!skipCorrection) {
        var nl = Kotlin.Long.fromInt(rem.value[j + 2 + rem.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK);
        var rs = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl);
        var estProduct = Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(Kotlin.Long.fromInt(qhat).and(BigInteger$Companion_getInstance().LONG_MASK));
        if (this.unsignedLongCompare_0(estProduct, rs)) {
          qhat = qhat - 1 | 0;
          qrem = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).add(dhLong).toInt();
          if (Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(dhLong) >= 0) {
            estProduct = estProduct.subtract(Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK));
            rs = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl);
            if (this.unsignedLongCompare_0(estProduct, rs)) {
              qhat = qhat - 1 | 0;
            }}}}rem.value[j + rem.offset | 0] = 0;
      var borrow = this.mulsub_0(rem.value, divisor, qhat, dlen, j + rem.offset | 0);
      if ((borrow + -2147483648 | 0) > nh2) {
        this.divadd_0(divisor, rem.value, j + 1 + rem.offset | 0);
        qhat = qhat - 1 | 0;
      }q[j] = qhat;
    }
    var qhat_0 = 0;
    var qrem_0 = 0;
    var skipCorrection_0 = false;
    var nh_0 = rem.value[limit - 1 + rem.offset | 0];
    var nh2_0 = nh_0 + -2147483648 | 0;
    var nm_0 = rem.value[limit + rem.offset | 0];
    if (nh_0 === dh) {
      qhat_0 = -1;
      qrem_0 = nh_0 + nm_0 | 0;
      skipCorrection_0 = (qrem_0 + -2147483648 | 0) < nh2_0;
    } else {
      var nChunk_0 = Kotlin.Long.fromInt(nh_0).shiftLeft(32).or(Kotlin.Long.fromInt(nm_0).and(BigInteger$Companion_getInstance().LONG_MASK));
      if (nChunk_0.toNumber() >= 0) {
        qhat_0 = nChunk_0.div(dhLong).toInt();
        qrem_0 = nChunk_0.subtract(Kotlin.Long.fromInt(qhat_0).multiply(dhLong)).toInt();
      } else {
        var tmp_0 = MutableBigInteger$Companion_getInstance().divWord_yhmem3$(nChunk_0, dh);
        qhat_0 = tmp_0.and(BigInteger$Companion_getInstance().LONG_MASK).toInt();
        qrem_0 = tmp_0.shiftRightUnsigned(32).toInt();
      }
    }
    if (qhat_0 !== 0) {
      if (!skipCorrection_0) {
        var nl_0 = Kotlin.Long.fromInt(rem.value[limit + 1 + rem.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK);
        var rs_0 = Kotlin.Long.fromInt(qrem_0).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl_0);
        var estProduct_0 = Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(Kotlin.Long.fromInt(qhat_0).and(BigInteger$Companion_getInstance().LONG_MASK));
        if (this.unsignedLongCompare_0(estProduct_0, rs_0)) {
          qhat_0 = qhat_0 - 1 | 0;
          qrem_0 = Kotlin.Long.fromInt(qrem_0).and(BigInteger$Companion_getInstance().LONG_MASK).add(dhLong).toInt();
          if (Kotlin.Long.fromInt(qrem_0).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(dhLong) >= 0) {
            estProduct_0 = estProduct_0.subtract(Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK));
            rs_0 = Kotlin.Long.fromInt(qrem_0).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl_0);
            if (this.unsignedLongCompare_0(estProduct_0, rs_0)) {
              qhat_0 = qhat_0 - 1 | 0;
            }}}}var borrow_0;
      rem.value[limit - 1 + rem.offset | 0] = 0;
      if (needRemainder)
        borrow_0 = this.mulsub_0(rem.value, divisor, qhat_0, dlen, limit - 1 + rem.offset | 0);
      else
        borrow_0 = this.mulsubBorrow_0(rem.value, divisor, qhat_0, dlen, limit - 1 + rem.offset | 0);
      if ((borrow_0 + -2147483648 | 0) > nh2_0) {
        if (needRemainder)
          this.divadd_0(divisor, rem.value, limit - 1 + 1 + rem.offset | 0);
        qhat_0 = qhat_0 - 1 | 0;
      }q[limit - 1 | 0] = qhat_0;
    }if (needRemainder) {
      if (shift > 0)
        rem.rightShift_za3lpa$(shift);
      rem.normalize();
    }quotient.normalize();
    return needRemainder ? rem : null;
  };
  MutableBigInteger.prototype.divideLongMagnitude_0 = function (ldivisor, quotient) {
    var ldivisor_0 = ldivisor;
    var rem = MutableBigInteger_init_1(new Int32Array(this.intLen + 1 | 0));
    arrayCopy_0(this.value, this.offset, rem.value, 1, this.intLen);
    rem.intLen = this.intLen;
    rem.offset = 1;
    var nlen = rem.intLen;
    var limit = nlen - 2 + 1 | 0;
    if (quotient.value.length < limit) {
      quotient.value = new Int32Array(limit);
      quotient.offset = 0;
    }quotient.intLen = limit;
    var q = quotient.value;
    var shift = numberOfLeadingZeros(ldivisor_0);
    if (shift > 0) {
      ldivisor_0 = ldivisor_0.shiftLeft(shift);
      rem.leftShift_za3lpa$(shift);
    }if (rem.intLen === nlen) {
      rem.offset = 0;
      rem.value[0] = 0;
      rem.intLen = rem.intLen + 1 | 0;
    }var dh = ldivisor_0.shiftRightUnsigned(32).toInt();
    var dhLong = Kotlin.Long.fromInt(dh).and(BigInteger$Companion_getInstance().LONG_MASK);
    var dl = ldivisor_0.and(BigInteger$Companion_getInstance().LONG_MASK).toInt();
    for (var j = 0; j < limit; j++) {
      var qhat = 0;
      var qrem = 0;
      var skipCorrection = false;
      var nh = rem.value[j + rem.offset | 0];
      var nh2 = nh + -2147483648 | 0;
      var nm = rem.value[j + 1 + rem.offset | 0];
      if (nh === dh) {
        qhat = -1;
        qrem = nh + nm | 0;
        skipCorrection = (qrem + -2147483648 | 0) < nh2;
      } else {
        var nChunk = Kotlin.Long.fromInt(nh).shiftLeft(32).or(Kotlin.Long.fromInt(nm).and(BigInteger$Companion_getInstance().LONG_MASK));
        if (nChunk.toNumber() >= 0) {
          qhat = nChunk.div(dhLong).toInt();
          qrem = nChunk.subtract(Kotlin.Long.fromInt(qhat).multiply(dhLong)).toInt();
        } else {
          var tmp = MutableBigInteger$Companion_getInstance().divWord_yhmem3$(nChunk, dh);
          qhat = tmp.and(BigInteger$Companion_getInstance().LONG_MASK).toInt();
          qrem = tmp.shiftRightUnsigned(32).toInt();
        }
      }
      if (qhat === 0)
        continue;
      if (!skipCorrection) {
        var nl = Kotlin.Long.fromInt(rem.value[j + 2 + rem.offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK);
        var rs = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl);
        var estProduct = Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(Kotlin.Long.fromInt(qhat).and(BigInteger$Companion_getInstance().LONG_MASK));
        if (this.unsignedLongCompare_0(estProduct, rs)) {
          qhat = qhat - 1 | 0;
          qrem = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).add(dhLong).toInt();
          if (Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(dhLong) >= 0) {
            estProduct = estProduct.subtract(Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK));
            rs = Kotlin.Long.fromInt(qrem).and(BigInteger$Companion_getInstance().LONG_MASK).shiftLeft(32).or(nl);
            if (this.unsignedLongCompare_0(estProduct, rs)) {
              qhat = qhat - 1 | 0;
            }}}}rem.value[j + rem.offset | 0] = 0;
      var borrow = this.mulsubLong_0(rem.value, dh, dl, qhat, j + rem.offset | 0);
      if ((borrow + -2147483648 | 0) > nh2) {
        this.divaddLong_0(dh, dl, rem.value, j + 1 + rem.offset | 0);
        qhat = qhat - 1 | 0;
      }q[j] = qhat;
    }
    if (shift > 0)
      rem.rightShift_za3lpa$(shift);
    quotient.normalize();
    rem.normalize();
    return rem;
  };
  MutableBigInteger.prototype.divaddLong_0 = function (dh, dl, result, offset) {
    var carry = L0;
    var sum = Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(result[1 + offset | 0]).and(BigInteger$Companion_getInstance().LONG_MASK));
    result[1 + offset | 0] = sum.toInt();
    sum = Kotlin.Long.fromInt(dh).and(BigInteger$Companion_getInstance().LONG_MASK).add(Kotlin.Long.fromInt(result[offset]).and(BigInteger$Companion_getInstance().LONG_MASK)).add(carry);
    result[offset] = sum.toInt();
    carry = sum.shiftRightUnsigned(32);
    return carry.toInt();
  };
  MutableBigInteger.prototype.mulsubLong_0 = function (q, dh, dl, x, offset) {
    var tmp$, tmp$_0;
    var offset_0 = offset;
    var xLong = Kotlin.Long.fromInt(x).and(BigInteger$Companion_getInstance().LONG_MASK);
    offset_0 = offset_0 + 2 | 0;
    var product = Kotlin.Long.fromInt(dl).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(xLong);
    var difference = Kotlin.Long.fromInt(q[offset_0]).subtract(product);
    q[tmp$ = offset_0, offset_0 = tmp$ - 1 | 0, tmp$] = difference.toInt();
    var carry = product.shiftRightUnsigned(32).add(Kotlin.Long.fromInt(difference.and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(product.inv().and(BigInteger$Companion_getInstance().LONG_MASK)) > 0 ? 1 : 0));
    product = Kotlin.Long.fromInt(dh).and(BigInteger$Companion_getInstance().LONG_MASK).multiply(xLong).add(carry);
    difference = Kotlin.Long.fromInt(q[offset_0]).subtract(product);
    q[tmp$_0 = offset_0, offset_0 = tmp$_0 - 1 | 0, tmp$_0] = difference.toInt();
    carry = product.shiftRightUnsigned(32).add(Kotlin.Long.fromInt(difference.and(BigInteger$Companion_getInstance().LONG_MASK).compareTo_11rb$(product.inv().and(BigInteger$Companion_getInstance().LONG_MASK)) > 0 ? 1 : 0));
    return carry.toInt();
  };
  MutableBigInteger.prototype.unsignedLongCompare_0 = function (one, two) {
    return one.add(Long$Companion$MIN_VALUE).compareTo_11rb$(two.add(Long$Companion$MIN_VALUE)) > 0;
  };
  MutableBigInteger.prototype.sqrt = function () {
    if (this.isZero) {
      return MutableBigInteger_init_0(0);
    } else if (this.value.length === 1 && Kotlin.Long.fromInt(this.value[0]).and(BigInteger$Companion_getInstance().LONG_MASK).toNumber() < 4) {
      return MutableBigInteger$Companion_getInstance().ONE;
    }if (this.bitLength().toNumber() <= 63) {
      var v = BigInteger_init_7(this.value, 1).toLongExact();
      var x = v.toNumber();
      var x_0 = Math_0.sqrt(x);
      var xk = Kotlin.Long.fromNumber(Math_0.floor(x_0));
      do {
        var xk1 = xk.add(v.div(xk)).div(Kotlin.Long.fromInt(2));
        if (xk1.compareTo_11rb$(xk) >= 0) {
          return MutableBigInteger_init_1(new Int32Array([xk.shiftRightUnsigned(32).toInt(), xk.and(BigInteger$Companion_getInstance().LONG_MASK).toInt()]));
        }xk = xk1;
      }
       while (true);
    } else {
      var bitLength = this.bitLength().toInt();
      if (!equals(Kotlin.Long.fromInt(bitLength), this.bitLength())) {
        throw new ArithmeticException('bitLength() integer overflow');
      }var shift = bitLength - 63 | 0;
      if (shift % 2 === 1) {
        shift = shift + 1 | 0;
      }var xk_0 = MutableBigInteger_init_3(this);
      xk_0.rightShift_za3lpa$(shift);
      xk_0.normalize();
      var d = BigInteger_init_7(xk_0.value, 1).toDouble();
      var tmp$ = BigInteger$Companion_getInstance();
      var x_1 = Math_0.sqrt(d);
      var bi = tmp$.ofLong(Kotlin.Long.fromNumber(Math_0.ceil(x_1)));
      xk_0 = MutableBigInteger_init_1(bi._mag_8be2vx$);
      xk_0.leftShift_za3lpa$(shift / 2 | 0);
      var xk1_0 = MutableBigInteger_init();
      do {
        this.divide_rxel95$(xk_0, xk1_0, false);
        xk1_0.add_bex516$(xk_0);
        xk1_0.rightShift_za3lpa$(1);
        if (xk1_0.compare_bex516$(xk_0) >= 0) {
          return xk_0;
        }xk_0.copyValue_bex516$(xk1_0);
        xk1_0.reset();
      }
       while (true);
    }
  };
  MutableBigInteger.prototype.hybridGCD_1b0xx5$ = function (b) {
    var b_0 = b;
    var a = this;
    var q = MutableBigInteger_init();
    while (ensureNotNull(b_0).intLen !== 0) {
      if (abs_0(a.intLen - b_0.intLen | 0) < 2)
        return a.binaryGCD_0(b_0);
      var r = a.divide_rxel95$(b_0, q);
      a = b_0;
      b_0 = r;
    }
    return a;
  };
  MutableBigInteger.prototype.binaryGCD_0 = function (v) {
    var v_0 = v;
    var u = this;
    var r = MutableBigInteger_init();
    var s1 = u.lowestSetBit_0;
    var s2 = v_0.lowestSetBit_0;
    var k = s1 < s2 ? s1 : s2;
    if (k !== 0) {
      u.rightShift_za3lpa$(k);
      v_0.rightShift_za3lpa$(k);
    }var uOdd = k === s1;
    var t = uOdd ? v_0 : u;
    var tsign = uOdd ? -1 : 1;
    var lb = t.lowestSetBit_0;
    while (lb >= 0) {
      t.rightShift_za3lpa$(lb);
      if (tsign > 0)
        u = t;
      else
        v_0 = t;
      if (u.intLen < 2 && v_0.intLen < 2) {
        var x = u.value[u.offset];
        var y = v_0.value[v_0.offset];
        x = MutableBigInteger$Companion_getInstance().binaryGcd_vux9f0$(x, y);
        r.value[0] = x;
        r.intLen = 1;
        r.offset = 0;
        if (k > 0)
          r.leftShift_za3lpa$(k);
        return r;
      }tsign = u.difference_0(v_0);
      if (tsign === 0) {
        lb = t.lowestSetBit_0;
        break;
      }t = tsign >= 0 ? u : v_0;
      lb = t.lowestSetBit_0;
    }
    if (k > 0)
      u.leftShift_za3lpa$(k);
    return u;
  };
  MutableBigInteger.prototype.mutableModInverse_bex516$ = function (p) {
    if (p.isOdd)
      return this.modInverse_0(p);
    if (this.isEven)
      throw new ArithmeticException('BigInteger not invertible.');
    var powersOf2 = p.lowestSetBit_0;
    var oddMod = MutableBigInteger_init_3(p);
    oddMod.rightShift_za3lpa$(powersOf2);
    if (oddMod.isOne)
      return this.modInverseMP2_za3lpa$(powersOf2);
    var oddPart = this.modInverse_0(oddMod);
    var evenPart = this.modInverseMP2_za3lpa$(powersOf2);
    var y1 = MutableBigInteger$Companion_getInstance().modInverseBP2_iw80i0$(oddMod, powersOf2);
    var y2 = oddMod.modInverseMP2_za3lpa$(powersOf2);
    var temp1 = MutableBigInteger_init();
    var temp2 = MutableBigInteger_init();
    var result = MutableBigInteger_init();
    oddPart.leftShift_za3lpa$(powersOf2);
    oddPart.multiply_88c880$(y1, result);
    evenPart.multiply_88c880$(oddMod, temp1);
    temp1.multiply_88c880$(y2, temp2);
    result.add_bex516$(temp2);
    return result.divide_rxel95$(p, temp1);
  };
  MutableBigInteger.prototype.modInverseMP2_za3lpa$ = function (k) {
    if (this.isEven)
      throw new ArithmeticException('Non-invertible. (GCD != 1)');
    if (k > 64)
      return this.euclidModInverse_za3lpa$(k);
    var t = MutableBigInteger$Companion_getInstance().inverseMod32_za3lpa$(this.value[this.offset + this.intLen - 1 | 0]);
    if (k < 33) {
      t = k === 32 ? t : t & (1 << k) - 1;
      return MutableBigInteger_init_0(t);
    }var pLong = Kotlin.Long.fromInt(this.value[this.offset + this.intLen - 1 | 0]).and(BigInteger$Companion_getInstance().LONG_MASK);
    if (this.intLen > 1)
      pLong = pLong.or(Kotlin.Long.fromInt(this.value[this.offset + this.intLen - 2 | 0]).shiftLeft(32));
    var tLong = Kotlin.Long.fromInt(t).and(BigInteger$Companion_getInstance().LONG_MASK);
    tLong = tLong.multiply(Kotlin.Long.fromInt(2).subtract(pLong.multiply(tLong)));
    tLong = k === 64 ? tLong : tLong.and(L1.shiftLeft(k).subtract(Kotlin.Long.fromInt(1)));
    var result = MutableBigInteger_init_1(new Int32Array(2));
    result.value[0] = tLong.shiftRightUnsigned(32).toInt();
    result.value[1] = tLong.toInt();
    result.intLen = 2;
    result.normalize();
    return result;
  };
  MutableBigInteger.prototype.modInverse_0 = function (mod) {
    var p = MutableBigInteger_init_3(mod);
    var f = MutableBigInteger_init_3(this);
    var g = MutableBigInteger_init_3(p);
    var c = SignedMutableBigInteger_init_0(1);
    var d = SignedMutableBigInteger_init();
    var temp;
    var sTemp;
    var k = 0;
    if (f.isEven) {
      var trailingZeros = f.lowestSetBit_0;
      f.rightShift_za3lpa$(trailingZeros);
      d.leftShift_za3lpa$(trailingZeros);
      k = trailingZeros;
    }while (!f.isOne) {
      if (f.isZero)
        throw new ArithmeticException('BigInteger not invertible.');
      if (f.compare_bex516$(g) < 0) {
        temp = f;
        f = g;
        g = temp;
        sTemp = d;
        d = c;
        c = sTemp;
      }if (((f.value[f.offset + f.intLen - 1 | 0] ^ g.value[g.offset + g.intLen - 1 | 0]) & 3) === 0) {
        f.subtract_bex516$(g);
        c.signedSubtract_v7swl2$(d);
      } else {
        f.add_bex516$(g);
        c.signedAdd_v7swl2$(d);
      }
      var trailingZeros_0 = f.lowestSetBit_0;
      f.rightShift_za3lpa$(trailingZeros_0);
      d.leftShift_za3lpa$(trailingZeros_0);
      k = k + trailingZeros_0 | 0;
    }
    while (c.sign < 0)
      c.signedAdd_bex516$(p);
    return MutableBigInteger$Companion_getInstance().fixup_3142lq$(c, p, k);
  };
  MutableBigInteger.prototype.euclidModInverse_za3lpa$ = function (k) {
    var b = MutableBigInteger_init_0(1);
    ensureNotNull(b).leftShift_za3lpa$(k);
    var mod = MutableBigInteger_init_3(b);
    var a = MutableBigInteger_init_3(this);
    var q = MutableBigInteger_init();
    var r = b.divide_rxel95$(a, q);
    var swapper = b;
    b = r;
    r = swapper;
    var t1 = MutableBigInteger_init_3(q);
    var t0 = MutableBigInteger_init_0(1);
    var temp = MutableBigInteger_init();
    while (!ensureNotNull(b).isOne) {
      r = a.divide_rxel95$(b, q);
      if (ensureNotNull(r).intLen === 0)
        throw new ArithmeticException('BigInteger not invertible.');
      swapper = r;
      a = swapper;
      if (q.intLen === 1)
        t1.mul_nkkrr0$(q.value[q.offset], temp);
      else
        q.multiply_88c880$(t1, temp);
      swapper = q;
      q = temp;
      temp = swapper;
      t0.add_bex516$(q);
      if (a.isOne)
        return t0;
      r = b.divide_rxel95$(a, q);
      if (ensureNotNull(r).intLen === 0)
        throw new ArithmeticException('BigInteger not invertible.');
      swapper = b;
      b = r;
      if (q.intLen === 1)
        t0.mul_nkkrr0$(q.value[q.offset], temp);
      else
        q.multiply_88c880$(t0, temp);
      swapper = q;
      q = temp;
      temp = swapper;
      t1.add_bex516$(q);
    }
    mod.subtract_bex516$(t1);
    return mod;
  };
  function MutableBigInteger$Companion() {
    MutableBigInteger$Companion_instance = this;
    this.ONE = MutableBigInteger_init_0(1);
    this.KNUTH_POW2_THRESH_LEN = 6;
    this.KNUTH_POW2_THRESH_ZEROS = 3;
  }
  MutableBigInteger$Companion.prototype.copyAndShift_0 = function (src, srcFrom, srcLen, dst, dstFrom, shift) {
    var tmp$;
    var srcFrom_0 = srcFrom;
    var n2 = 32 - shift | 0;
    var c = src[srcFrom_0];
    tmp$ = srcLen - 1 | 0;
    for (var i = 0; i < tmp$; i++) {
      var b = c;
      c = src[srcFrom_0 = srcFrom_0 + 1 | 0, srcFrom_0];
      dst[dstFrom + i | 0] = b << shift | c >>> n2;
    }
    dst[dstFrom + srcLen - 1 | 0] = c << shift;
  };
  MutableBigInteger$Companion.prototype.divWord_yhmem3$ = function (n, d) {
    var dLong = Kotlin.Long.fromInt(d).and(BigInteger$Companion_getInstance().LONG_MASK);
    var r;
    var q;
    if (equals(dLong, L1)) {
      q = Kotlin.Long.fromInt(n.toInt());
      r = L0;
      return r.shiftLeft(32).or(q.and(BigInteger$Companion_getInstance().LONG_MASK));
    }q = n.shiftRightUnsigned(1).div(dLong.shiftRightUnsigned(1));
    r = n.subtract(q.multiply(dLong));
    while (r.toNumber() < 0) {
      r = r.add(dLong);
      q = q.dec();
    }
    while (r.compareTo_11rb$(dLong) >= 0) {
      r = r.subtract(dLong);
      q = q.inc();
    }
    return r.shiftLeft(32).or(q.and(BigInteger$Companion_getInstance().LONG_MASK));
  };
  MutableBigInteger$Companion.prototype.binaryGcd_vux9f0$ = function (a, b) {
    var a_0 = a;
    var b_0 = b;
    if (b_0 === 0)
      return a_0;
    if (a_0 === 0)
      return b_0;
    var aZeros = numberOfTrailingZeros(a_0);
    var bZeros = numberOfTrailingZeros(b_0);
    a_0 = a_0 >>> aZeros;
    b_0 = b_0 >>> bZeros;
    var t = aZeros < bZeros ? aZeros : bZeros;
    while (a_0 !== b_0) {
      if ((a_0 + -2147483648 | 0) > (b_0 + -2147483648 | 0)) {
        a_0 = a_0 - b_0 | 0;
        a_0 = a_0 >>> numberOfTrailingZeros(a_0);
      } else {
        b_0 = b_0 - a_0 | 0;
        b_0 = b_0 >>> numberOfTrailingZeros(b_0);
      }
    }
    return a_0 << t;
  };
  MutableBigInteger$Companion.prototype.inverseMod32_za3lpa$ = function (val) {
    var t = val;
    t = Kotlin.imul(t, 2 - Kotlin.imul(val, t) | 0);
    t = Kotlin.imul(t, 2 - Kotlin.imul(val, t) | 0);
    t = Kotlin.imul(t, 2 - Kotlin.imul(val, t) | 0);
    t = Kotlin.imul(t, 2 - Kotlin.imul(val, t) | 0);
    return t;
  };
  MutableBigInteger$Companion.prototype.inverseMod64_s8cxhz$ = function (val) {
    var t = val;
    t = t.multiply(Kotlin.Long.fromInt(2).subtract(val.multiply(t)));
    t = t.multiply(Kotlin.Long.fromInt(2).subtract(val.multiply(t)));
    t = t.multiply(Kotlin.Long.fromInt(2).subtract(val.multiply(t)));
    t = t.multiply(Kotlin.Long.fromInt(2).subtract(val.multiply(t)));
    t = t.multiply(Kotlin.Long.fromInt(2).subtract(val.multiply(t)));
    if (!equals(t.multiply(val), L1)) {
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init(message.toString());
    }return t;
  };
  MutableBigInteger$Companion.prototype.modInverseBP2_iw80i0$ = function (mod, k) {
    return this.fixup_3142lq$(MutableBigInteger_init_0(1), MutableBigInteger_init_3(mod), k);
  };
  MutableBigInteger$Companion.prototype.fixup_3142lq$ = function (c, p, k) {
    var temp = MutableBigInteger_init();
    var r = -this.inverseMod32_za3lpa$(p.value[p.offset + p.intLen - 1 | 0]) | 0;
    var i = 0;
    var numWords = k >> 5;
    while (i < numWords) {
      var v = Kotlin.imul(r, c.value[c.offset + c.intLen - 1 | 0]);
      p.mul_nkkrr0$(v, temp);
      c.add_bex516$(temp);
      c.intLen = c.intLen - 1 | 0;
      i = i + 1 | 0;
    }
    var numBits = k & 31;
    if (numBits !== 0) {
      var v_0 = Kotlin.imul(r, c.value[c.offset + c.intLen - 1 | 0]);
      v_0 = v_0 & (1 << numBits) - 1;
      p.mul_nkkrr0$(v_0, temp);
      c.add_bex516$(temp);
      c.rightShift_za3lpa$(numBits);
    }while (c.compare_bex516$(p) >= 0)
      c.subtract_bex516$(p);
    return c;
  };
  MutableBigInteger$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MutableBigInteger$Companion_instance = null;
  function MutableBigInteger$Companion_getInstance() {
    if (MutableBigInteger$Companion_instance === null) {
      new MutableBigInteger$Companion();
    }return MutableBigInteger$Companion_instance;
  }
  MutableBigInteger.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MutableBigInteger',
    interfaces: []
  };
  function MutableBigInteger_init($this) {
    $this = $this || Object.create(MutableBigInteger.prototype);
    MutableBigInteger.call($this);
    $this.value = new Int32Array(1);
    $this.intLen = 0;
    return $this;
  }
  function MutableBigInteger_init_0(val, $this) {
    $this = $this || Object.create(MutableBigInteger.prototype);
    MutableBigInteger.call($this);
    $this.value = new Int32Array(1);
    $this.intLen = 1;
    $this.value[0] = val;
    return $this;
  }
  function MutableBigInteger_init_1(val, $this) {
    $this = $this || Object.create(MutableBigInteger.prototype);
    MutableBigInteger.call($this);
    $this.value = val;
    $this.intLen = val.length;
    return $this;
  }
  function MutableBigInteger_init_2(b, $this) {
    $this = $this || Object.create(MutableBigInteger.prototype);
    MutableBigInteger.call($this);
    $this.intLen = b._mag_8be2vx$.length;
    $this.value = copyOf_0(b._mag_8be2vx$, $this.intLen);
    return $this;
  }
  function MutableBigInteger_init_3(val, $this) {
    $this = $this || Object.create(MutableBigInteger.prototype);
    MutableBigInteger.call($this);
    $this.intLen = val.intLen;
    $this.value = copyOfRange(val.value, val.offset, val.offset + $this.intLen | 0);
    return $this;
  }
  function RoundingMode(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function RoundingMode_initFields() {
    RoundingMode_initFields = function () {
    };
    RoundingMode$UP_instance = new RoundingMode('UP', 0);
    RoundingMode$DOWN_instance = new RoundingMode('DOWN', 1);
    RoundingMode$CEILING_instance = new RoundingMode('CEILING', 2);
    RoundingMode$FLOOR_instance = new RoundingMode('FLOOR', 3);
    RoundingMode$HALF_UP_instance = new RoundingMode('HALF_UP', 4);
    RoundingMode$HALF_DOWN_instance = new RoundingMode('HALF_DOWN', 5);
    RoundingMode$HALF_EVEN_instance = new RoundingMode('HALF_EVEN', 6);
    RoundingMode$UNNECESSARY_instance = new RoundingMode('UNNECESSARY', 7);
    RoundingMode$Companion_getInstance();
  }
  var RoundingMode$UP_instance;
  function RoundingMode$UP_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$UP_instance;
  }
  var RoundingMode$DOWN_instance;
  function RoundingMode$DOWN_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$DOWN_instance;
  }
  var RoundingMode$CEILING_instance;
  function RoundingMode$CEILING_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$CEILING_instance;
  }
  var RoundingMode$FLOOR_instance;
  function RoundingMode$FLOOR_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$FLOOR_instance;
  }
  var RoundingMode$HALF_UP_instance;
  function RoundingMode$HALF_UP_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$HALF_UP_instance;
  }
  var RoundingMode$HALF_DOWN_instance;
  function RoundingMode$HALF_DOWN_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$HALF_DOWN_instance;
  }
  var RoundingMode$HALF_EVEN_instance;
  function RoundingMode$HALF_EVEN_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$HALF_EVEN_instance;
  }
  var RoundingMode$UNNECESSARY_instance;
  function RoundingMode$UNNECESSARY_getInstance() {
    RoundingMode_initFields();
    return RoundingMode$UNNECESSARY_instance;
  }
  Object.defineProperty(RoundingMode.prototype, 'oldMode_8be2vx$', {
    get: function () {
      switch (this.name) {
        case 'CEILING':
          return BigDecimal$Companion_getInstance().ROUND_CEILING_8be2vx$;
        case 'UP':
          return BigDecimal$Companion_getInstance().ROUND_UP_8be2vx$;
        case 'DOWN':
          return BigDecimal$Companion_getInstance().ROUND_DOWN_8be2vx$;
        case 'FLOOR':
          return BigDecimal$Companion_getInstance().ROUND_FLOOR_8be2vx$;
        case 'HALF_UP':
          return BigDecimal$Companion_getInstance().ROUND_HALF_UP_8be2vx$;
        case 'HALF_EVEN':
          return BigDecimal$Companion_getInstance().ROUND_HALF_EVEN_8be2vx$;
        case 'HALF_DOWN':
          return BigDecimal$Companion_getInstance().ROUND_HALF_DOWN_8be2vx$;
        case 'UNNECESSARY':
          return BigDecimal$Companion_getInstance().ROUND_UNNECESSARY_8be2vx$;
        default:return Kotlin.noWhenBranchMatched();
      }
    }
  });
  function RoundingMode$Companion() {
    RoundingMode$Companion_instance = this;
  }
  RoundingMode$Companion.prototype.valueOf_za3lpa$ = function (rm) {
    switch (rm) {
      case 0:
        return RoundingMode$UP_getInstance();
      case 1:
        return RoundingMode$DOWN_getInstance();
      case 2:
        return RoundingMode$CEILING_getInstance();
      case 3:
        return RoundingMode$FLOOR_getInstance();
      case 4:
        return RoundingMode$HALF_UP_getInstance();
      case 5:
        return RoundingMode$HALF_DOWN_getInstance();
      case 6:
        return RoundingMode$HALF_EVEN_getInstance();
      case 7:
        return RoundingMode$UNNECESSARY_getInstance();
      default:throw IllegalArgumentException_init('Argument out of range: ' + rm);
    }
  };
  RoundingMode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var RoundingMode$Companion_instance = null;
  function RoundingMode$Companion_getInstance() {
    RoundingMode_initFields();
    if (RoundingMode$Companion_instance === null) {
      new RoundingMode$Companion();
    }return RoundingMode$Companion_instance;
  }
  RoundingMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RoundingMode',
    interfaces: [Enum]
  };
  function RoundingMode$values() {
    return [RoundingMode$UP_getInstance(), RoundingMode$DOWN_getInstance(), RoundingMode$CEILING_getInstance(), RoundingMode$FLOOR_getInstance(), RoundingMode$HALF_UP_getInstance(), RoundingMode$HALF_DOWN_getInstance(), RoundingMode$HALF_EVEN_getInstance(), RoundingMode$UNNECESSARY_getInstance()];
  }
  RoundingMode.values = RoundingMode$values;
  function RoundingMode$valueOf(name) {
    switch (name) {
      case 'UP':
        return RoundingMode$UP_getInstance();
      case 'DOWN':
        return RoundingMode$DOWN_getInstance();
      case 'CEILING':
        return RoundingMode$CEILING_getInstance();
      case 'FLOOR':
        return RoundingMode$FLOOR_getInstance();
      case 'HALF_UP':
        return RoundingMode$HALF_UP_getInstance();
      case 'HALF_DOWN':
        return RoundingMode$HALF_DOWN_getInstance();
      case 'HALF_EVEN':
        return RoundingMode$HALF_EVEN_getInstance();
      case 'UNNECESSARY':
        return RoundingMode$UNNECESSARY_getInstance();
      default:throwISE('No enum constant org.gciatto.kt.math.RoundingMode.' + name);
    }
  }
  RoundingMode.valueOf_61zpoe$ = RoundingMode$valueOf;
  function SignedMutableBigInteger() {
    this.sign = 1;
  }
  SignedMutableBigInteger.prototype.signedAdd_v7swl2$ = function (addend) {
    if (this.sign === addend.sign)
      this.add_bex516$(addend);
    else
      this.sign = Kotlin.imul(this.sign, this.subtract_bex516$(addend));
  };
  SignedMutableBigInteger.prototype.signedAdd_bex516$ = function (addend) {
    if (this.sign === 1)
      this.add_bex516$(addend);
    else
      this.sign = Kotlin.imul(this.sign, this.subtract_bex516$(addend));
  };
  SignedMutableBigInteger.prototype.signedSubtract_v7swl2$ = function (addend) {
    if (this.sign === addend.sign)
      this.sign = Kotlin.imul(this.sign, this.subtract_bex516$(addend));
    else
      this.add_bex516$(addend);
  };
  SignedMutableBigInteger.prototype.signedSubtract_bex516$ = function (addend) {
    if (this.sign === 1)
      this.sign = Kotlin.imul(this.sign, this.subtract_bex516$(addend));
    else
      this.add_bex516$(addend);
    if (this.intLen === 0)
      this.sign = 1;
  };
  SignedMutableBigInteger.prototype.toString = function () {
    return this.toBigInteger_za3lpa$(this.sign).toString();
  };
  SignedMutableBigInteger.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SignedMutableBigInteger',
    interfaces: [MutableBigInteger]
  };
  function SignedMutableBigInteger_init($this) {
    $this = $this || Object.create(SignedMutableBigInteger.prototype);
    MutableBigInteger_init($this);
    SignedMutableBigInteger.call($this);
    return $this;
  }
  function SignedMutableBigInteger_init_0(val, $this) {
    $this = $this || Object.create(SignedMutableBigInteger.prototype);
    MutableBigInteger_init_0(val, $this);
    SignedMutableBigInteger.call($this);
    return $this;
  }
  function SignedMutableBigInteger_init_1(val, $this) {
    $this = $this || Object.create(SignedMutableBigInteger.prototype);
    MutableBigInteger_init_3(val, $this);
    SignedMutableBigInteger.call($this);
    return $this;
  }
  var DEBUG;
  function log(lazyObject) {
    if (DEBUG) {
      logImpl(lazyObject);
    }}
  function numberOfLeadingZeros($receiver) {
    if (equals($receiver, L0))
      return 64;
    var n = 1;
    var x = $receiver.shiftRightUnsigned(32).toInt();
    if (x === 0) {
      n = n + 32 | 0;
      x = $receiver.toInt();
    }if (x >>> 16 === 0) {
      n = n + 16 | 0;
      x = x << 16;
    }if (x >>> 24 === 0) {
      n = n + 8 | 0;
      x = x << 8;
    }if (x >>> 28 === 0) {
      n = n + 4 | 0;
      x = x << 4;
    }if (x >>> 30 === 0) {
      n = n + 2 | 0;
      x = x << 2;
    }n = n - (x >>> 31) | 0;
    return n;
  }
  function numberOfLeadingZeros_0($receiver) {
    var x = $receiver;
    if (x === 0)
      return 32;
    var n = 1;
    if (x >>> 16 === 0) {
      n = n + 16 | 0;
      x = x << 16;
    }if (x >>> 24 === 0) {
      n = n + 8 | 0;
      x = x << 8;
    }if (x >>> 28 === 0) {
      n = n + 4 | 0;
      x = x << 4;
    }if (x >>> 30 === 0) {
      n = n + 2 | 0;
      x = x << 2;
    }n = n - (x >>> 31) | 0;
    return n;
  }
  function numberOfTrailingZeros($receiver) {
    var y;
    var i = $receiver;
    if (i === 0)
      return 32;
    var n = 31;
    y = i << 16;
    if (y !== 0) {
      n = n - 16 | 0;
      i = y;
    }y = i << 8;
    if (y !== 0) {
      n = n - 8 | 0;
      i = y;
    }y = i << 4;
    if (y !== 0) {
      n = n - 4 | 0;
      i = y;
    }y = i << 2;
    if (y !== 0) {
      n = n - 2 | 0;
      i = y;
    }return n - (i << 1 >>> 31) | 0;
  }
  var CHAR_MIN_RADIX;
  var CHAR_MAX_RADIX;
  function isDigit($receiver) {
    return isDigit_0($receiver, 10);
  }
  function isDigit_0($receiver, radix) {
    var tmp$;
    if (36 <= radix && radix <= 36)
      if (radix > 10) {
        var delta = radix - 10 | 0;
        tmp$ = (new CharRange(48, 57)).contains_mef7kx$($receiver) || until_0(97, toChar(97 + delta)).contains_mef7kx$($receiver) || until_0(65, toChar(65 + delta)).contains_mef7kx$($receiver);
      } else {
        tmp$ = until_0(48, toChar(48 + radix)).contains_mef7kx$($receiver);
      }
     else
      tmp$ = false;
    return tmp$;
  }
  function toDigit($receiver) {
    return toDigit_0($receiver, 10);
  }
  function toDigit_0($receiver, radix) {
    if (2 <= radix && radix <= 36) {
      if (radix > 10) {
        var delta = radix - 10 | 0;
        if ((new CharRange(48, 57)).contains_mef7kx$($receiver))
          return $receiver - 48;
        else if (until_0(97, toChar(97 + delta)).contains_mef7kx$($receiver))
          return $receiver - 97 + 10 | 0;
        else if (until_0(65, toChar(65 + delta)).contains_mef7kx$($receiver))
          return $receiver - 65 + 10 | 0;
      } else {
        if (until_0(48, toChar(48 + radix)).contains_mef7kx$($receiver)) {
          return $receiver - 48;
        }}
    }return -1;
  }
  function arrayCopy(src, srcIndex, dest, destIndex, size) {
    for (var i = 0; i < size; i++) {
      dest[destIndex + i | 0] = src[srcIndex + i | 0];
    }
  }
  function arrayCopy_0(src, srcIndex, dest, destIndex, size) {
    for (var i = 0; i < size; i++) {
      dest[destIndex + i | 0] = src[srcIndex + i | 0];
    }
  }
  var clone = defineInlineFunction('kt-math.org.gciatto.kt.math.clone_d6yotq$', wrapFunction(function () {
    var Array_0 = Array;
    return function (T_0, isT, $receiver) {
      var array = Array_0($receiver.length);
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        array[i] = $receiver[i];
      }
      return array;
    };
  }));
  function clone_0($receiver) {
    var array = new Int32Array($receiver.length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = $receiver[i];
    }
    return array;
  }
  function bitCount($receiver) {
    var i = $receiver;
    i = i - (i >>> 1 & 1431655765) | 0;
    i = (i & 858993459) + (i >>> 2 & 858993459) | 0;
    i = i + (i >>> 4) & 252645135;
    i = i + (i >>> 8) | 0;
    i = i + (i >>> 16) | 0;
    return i & 63;
  }
  function insertChar($receiver, index, char) {
    return insertCharSeq($receiver, index, String.fromCharCode(char));
  }
  function insertCharSeq($receiver, index, string) {
    var temp = StringBuilder_init_1($receiver.subSequence_vux9f0$(0, index));
    temp.append_gw00v9$(string);
    temp.append_gw00v9$($receiver.subSequence_vux9f0$(index, $receiver.length));
    return temp;
  }
  function toCharArray($receiver) {
    var tmp$;
    var array = charArray($receiver.length, null);
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var value = unboxChar(toBoxedChar($receiver.charCodeAt(i)));
      array[i] = value;
    }
    return array;
  }
  function fill($receiver, x) {
    return fill_0($receiver, 0, $receiver.length, x);
  }
  function fill_0($receiver, from, to, x) {
    for (var i = from; i < to; i++) {
      $receiver[i] = x;
    }
    return $receiver;
  }
  function append($receiver, char, offset, len) {
    var tmp$;
    tmp$ = offset + len | 0;
    for (var i = offset; i < tmp$; i++) {
      $receiver.append_s8itvh$(char[i]);
    }
    return $receiver;
  }
  function logImpl(lazyObject) {
    console.warn(lazyObject());
  }
  function bigInteger(x) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    if (Kotlin.isType(x, Kotlin.Long)) {
      tmp$_5 = BigInteger$Companion_getInstance().ofLong(Kotlin.isType(tmp$ = x, Kotlin.Long) ? tmp$ : throwCCE());
    } else if (typeof x === 'number') {
      tmp$_5 = BigInteger$Companion_getInstance().of(typeof (tmp$_0 = x) === 'number' ? tmp$_0 : throwCCE());
    } else if (Kotlin.isNumber(x)) {
      tmp$_5 = BigInteger$Companion_getInstance().ofLong(numberToLong(Kotlin.isNumber(tmp$_1 = x) ? tmp$_1 : throwCCE()));
    } else if (typeof x === 'string')
      tmp$_5 = BigInteger$Companion_getInstance().parse(x.toString());
    else if (Kotlin.isArray(x)) {
      var y = Kotlin.isArray(tmp$_2 = x) ? tmp$_2 : throwCCE();
      if (!(y.length === 2 && typeof y[0] === 'string' && Kotlin.isNumber(y[1]))) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init(message.toString());
      }return BigInteger$Companion_getInstance().parseWithRadix(typeof (tmp$_3 = y[0]) === 'string' ? tmp$_3 : throwCCE(), typeof (tmp$_4 = y[1]) === 'number' ? tmp$_4 : throwCCE());
    } else
      throw IllegalArgumentException_init_0();
    return tmp$_5;
  }
  function bigDecimal(x) {
    var tmp$, tmp$_0;
    if (Kotlin.isArray(x)) {
      if (!(x.length === 2 && Kotlin.isType(x[1], MathContext))) {
        var message = 'Failed requirement.';
        throw IllegalArgumentException_init(message.toString());
      }if (Kotlin.isType(x[1], MathContext)) {
        tmp$_0 = BigDecimal$Companion_getInstance().of_etek2s$(x[0].toString(), Kotlin.isType(tmp$ = x[1], MathContext) ? tmp$ : throwCCE());
      } else
        throw IllegalArgumentException_init_0();
    } else if (Kotlin.isType(x, Any))
      tmp$_0 = BigDecimal$Companion_getInstance().of_etek2s$(x.toString());
    else
      throw IllegalArgumentException_init_0();
    return tmp$_0;
  }
  Object.defineProperty(BigDecimal$StringBuilderHelper, 'Companion', {
    get: BigDecimal$StringBuilderHelper$Companion_getInstance
  });
  BigDecimal.StringBuilderHelper = BigDecimal$StringBuilderHelper;
  Object.defineProperty(BigDecimal, 'Companion', {
    get: BigDecimal$Companion_getInstance
  });
  var package$org = _.org || (_.org = {});
  var package$gciatto = package$org.gciatto || (package$org.gciatto = {});
  var package$kt = package$gciatto.kt || (package$gciatto.kt = {});
  var package$math = package$kt.math || (package$kt.math = {});
  package$math.BigDecimal_init_2y9tfh$ = BigDecimal_init;
  package$math.BigDecimal_init_s4kywg$ = BigDecimal_init_0;
  package$math.BigDecimal_init_u2da5s$ = BigDecimal_init_1;
  package$math.BigDecimal_init_y4putb$ = BigDecimal_init_2;
  package$math.BigDecimal_init_fkz91e$ = BigDecimal_init_3;
  package$math.BigDecimal_init_59slkr$ = BigDecimal_init_4;
  package$math.BigDecimal_init_kiw147$ = BigDecimal_init_5;
  package$math.BigDecimal_init_xjpb86$ = BigDecimal_init_6;
  package$math.BigDecimal_init_4rc1uz$ = BigDecimal_init_7;
  package$math.BigDecimal_init_eb8jnf$ = BigDecimal_init_8;
  package$math.BigDecimal_init_kcn2v3$ = BigDecimal_init_9;
  package$math.BigDecimal_init_z7nri4$ = BigDecimal_init_10;
  package$math.BigDecimal_init_8e33dg$ = BigDecimal_init_11;
  package$math.BigDecimal_init_k97y8n$ = BigDecimal_init_12;
  package$math.BigDecimal = BigDecimal;
  $$importsForInline$$['kt-math'] = _;
  Object.defineProperty(BigInteger, 'Companion', {
    get: BigInteger$Companion_getInstance
  });
  package$math.BigInteger_init_mj6st8$ = BigInteger_init;
  package$math.BigInteger_init_3fge6q$ = BigInteger_init_1;
  package$math.BigInteger_init_bm4lxs$ = BigInteger_init_3;
  package$math.BigInteger_init_uc2sr1$ = BigInteger_init_4;
  package$math.BigInteger_init_dixwej$ = BigInteger_init_5;
  package$math.BigInteger_init_e239bz$ = BigInteger_init_6;
  package$math.BigInteger_init_wmnbas$ = BigInteger_init_7;
  package$math.BigInteger = BigInteger;
  Object.defineProperty(BitSieve, 'Companion', {
    get: BitSieve$Companion_getInstance
  });
  package$math.BitSieve_init_dsgnwy$ = BitSieve_init_0;
  package$math.BitSieve = BitSieve;
  Object.defineProperty(package$math, 'DoubleConsts', {
    get: DoubleConsts_getInstance
  });
  Object.defineProperty(package$math, 'FloatConsts', {
    get: FloatConsts_getInstance
  });
  Object.defineProperty(MathContext, 'Companion', {
    get: MathContext$Companion_getInstance
  });
  package$math.MathContext = MathContext;
  Object.defineProperty(MutableBigInteger, 'Companion', {
    get: MutableBigInteger$Companion_getInstance
  });
  package$math.MutableBigInteger_init = MutableBigInteger_init;
  package$math.MutableBigInteger_init_za3lpa$ = MutableBigInteger_init_0;
  package$math.MutableBigInteger_init_q5rwfd$ = MutableBigInteger_init_1;
  package$math.MutableBigInteger_init_i9vy84$ = MutableBigInteger_init_2;
  package$math.MutableBigInteger_init_bex516$ = MutableBigInteger_init_3;
  package$math.MutableBigInteger = MutableBigInteger;
  Object.defineProperty(RoundingMode, 'UP', {
    get: RoundingMode$UP_getInstance
  });
  Object.defineProperty(RoundingMode, 'DOWN', {
    get: RoundingMode$DOWN_getInstance
  });
  Object.defineProperty(RoundingMode, 'CEILING', {
    get: RoundingMode$CEILING_getInstance
  });
  Object.defineProperty(RoundingMode, 'FLOOR', {
    get: RoundingMode$FLOOR_getInstance
  });
  Object.defineProperty(RoundingMode, 'HALF_UP', {
    get: RoundingMode$HALF_UP_getInstance
  });
  Object.defineProperty(RoundingMode, 'HALF_DOWN', {
    get: RoundingMode$HALF_DOWN_getInstance
  });
  Object.defineProperty(RoundingMode, 'HALF_EVEN', {
    get: RoundingMode$HALF_EVEN_getInstance
  });
  Object.defineProperty(RoundingMode, 'UNNECESSARY', {
    get: RoundingMode$UNNECESSARY_getInstance
  });
  Object.defineProperty(RoundingMode, 'Companion', {
    get: RoundingMode$Companion_getInstance
  });
  package$math.RoundingMode = RoundingMode;
  package$math.SignedMutableBigInteger_init = SignedMutableBigInteger_init;
  package$math.SignedMutableBigInteger_init_za3lpa$ = SignedMutableBigInteger_init_0;
  package$math.SignedMutableBigInteger_init_bex516$ = SignedMutableBigInteger_init_1;
  package$math.SignedMutableBigInteger = SignedMutableBigInteger;
  Object.defineProperty(package$math, 'DEBUG', {
    get: function () {
      return DEBUG;
    }
  });
  package$math.log_59wy14$ = log;
  package$math.numberOfLeadingZeros_nzsbcz$ = numberOfLeadingZeros;
  package$math.numberOfLeadingZeros_8e50z4$ = numberOfLeadingZeros_0;
  package$math.numberOfTrailingZeros_8e50z4$ = numberOfTrailingZeros;
  Object.defineProperty(package$math, 'CHAR_MIN_RADIX_8be2vx$', {
    get: function () {
      return CHAR_MIN_RADIX;
    }
  });
  Object.defineProperty(package$math, 'CHAR_MAX_RADIX_8be2vx$', {
    get: function () {
      return CHAR_MAX_RADIX;
    }
  });
  package$math.isDigit_nupfqh$ = isDigit;
  package$math.isDigit_j174ln$ = isDigit_0;
  package$math.toDigit_nupfqh$ = toDigit;
  package$math.toDigit_j174ln$ = toDigit_0;
  package$math.arrayCopy_t6l26v$ = arrayCopy;
  package$math.arrayCopy_3jsevz$ = arrayCopy_0;
  package$math.clone_3dg7px$ = clone_0;
  package$math.bitCount_8e50z4$ = bitCount;
  package$math.insertChar_g2uwa9$ = insertChar;
  package$math.insertCharSeq_41nt3k$ = insertCharSeq;
  package$math.toCharArray_hoxr6g$ = toCharArray;
  package$math.fill_ei6nnb$ = fill;
  package$math.fill_ubynyh$ = fill_0;
  package$math.append_g22h5g$ = append;
  package$math.logImpl_59wy14$ = logImpl;
  package$math.bigInteger = bigInteger;
  package$math.bigDecimal = bigDecimal;
  DEBUG = true;
  CHAR_MIN_RADIX = 2;
  CHAR_MAX_RADIX = 36;
  Kotlin.defineModule('kt-math', _);
  return _;
}));



},{"kotlin":66}]},{},[3]);
